/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkContext2DWrap.h"
#include "vtkAbstractContextBufferIdWrap.h"
#include "vtkPoints2DWrap.h"
#include "vtkImageDataWrap.h"
#include "vtkUnsignedCharArrayWrap.h"
#include "vtkPenWrap.h"
#include "vtkBrushWrap.h"
#include "vtkTextPropertyWrap.h"
#include "vtkTransform2DWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkContext2DWrap::ptpl;

VtkContext2DWrap::VtkContext2DWrap()
{ }

VtkContext2DWrap::VtkContext2DWrap(vtkSmartPointer<vtkContext2D> _native)
{ native = _native; }

VtkContext2DWrap::~VtkContext2DWrap()
{ }

void VtkContext2DWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkContext2D").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("Context2D").ToLocalChecked(), ConstructorGetter);
}

void VtkContext2DWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkContext2DWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkContext2DWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AppendTransform", AppendTransform);
	Nan::SetPrototypeMethod(tpl, "appendTransform", AppendTransform);

	Nan::SetPrototypeMethod(tpl, "ApplyBrush", ApplyBrush);
	Nan::SetPrototypeMethod(tpl, "applyBrush", ApplyBrush);

	Nan::SetPrototypeMethod(tpl, "ApplyPen", ApplyPen);
	Nan::SetPrototypeMethod(tpl, "applyPen", ApplyPen);

	Nan::SetPrototypeMethod(tpl, "ApplyTextProp", ApplyTextProp);
	Nan::SetPrototypeMethod(tpl, "applyTextProp", ApplyTextProp);

	Nan::SetPrototypeMethod(tpl, "BufferIdModeBegin", BufferIdModeBegin);
	Nan::SetPrototypeMethod(tpl, "bufferIdModeBegin", BufferIdModeBegin);

	Nan::SetPrototypeMethod(tpl, "BufferIdModeEnd", BufferIdModeEnd);
	Nan::SetPrototypeMethod(tpl, "bufferIdModeEnd", BufferIdModeEnd);

	Nan::SetPrototypeMethod(tpl, "ComputeStringBounds", ComputeStringBounds);
	Nan::SetPrototypeMethod(tpl, "computeStringBounds", ComputeStringBounds);

	Nan::SetPrototypeMethod(tpl, "DrawLine", DrawLine);
	Nan::SetPrototypeMethod(tpl, "drawLine", DrawLine);

	Nan::SetPrototypeMethod(tpl, "DrawMarkers", DrawMarkers);
	Nan::SetPrototypeMethod(tpl, "drawMarkers", DrawMarkers);

	Nan::SetPrototypeMethod(tpl, "DrawMathTextString", DrawMathTextString);
	Nan::SetPrototypeMethod(tpl, "drawMathTextString", DrawMathTextString);

	Nan::SetPrototypeMethod(tpl, "DrawPointSprites", DrawPointSprites);
	Nan::SetPrototypeMethod(tpl, "drawPointSprites", DrawPointSprites);

	Nan::SetPrototypeMethod(tpl, "DrawPoints", DrawPoints);
	Nan::SetPrototypeMethod(tpl, "drawPoints", DrawPoints);

	Nan::SetPrototypeMethod(tpl, "DrawPoly", DrawPoly);
	Nan::SetPrototypeMethod(tpl, "drawPoly", DrawPoly);

	Nan::SetPrototypeMethod(tpl, "DrawPolygon", DrawPolygon);
	Nan::SetPrototypeMethod(tpl, "drawPolygon", DrawPolygon);

	Nan::SetPrototypeMethod(tpl, "DrawQuadStrip", DrawQuadStrip);
	Nan::SetPrototypeMethod(tpl, "drawQuadStrip", DrawQuadStrip);

	Nan::SetPrototypeMethod(tpl, "DrawString", DrawString);
	Nan::SetPrototypeMethod(tpl, "drawString", DrawString);

	Nan::SetPrototypeMethod(tpl, "DrawStringRect", DrawStringRect);
	Nan::SetPrototypeMethod(tpl, "drawStringRect", DrawStringRect);

	Nan::SetPrototypeMethod(tpl, "End", End);
	Nan::SetPrototypeMethod(tpl, "end", End);

	Nan::SetPrototypeMethod(tpl, "GetBrush", GetBrush);
	Nan::SetPrototypeMethod(tpl, "getBrush", GetBrush);

	Nan::SetPrototypeMethod(tpl, "GetBufferIdMode", GetBufferIdMode);
	Nan::SetPrototypeMethod(tpl, "getBufferIdMode", GetBufferIdMode);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetPen", GetPen);
	Nan::SetPrototypeMethod(tpl, "getPen", GetPen);

	Nan::SetPrototypeMethod(tpl, "GetTextProp", GetTextProp);
	Nan::SetPrototypeMethod(tpl, "getTextProp", GetTextProp);

	Nan::SetPrototypeMethod(tpl, "GetTransform", GetTransform);
	Nan::SetPrototypeMethod(tpl, "getTransform", GetTransform);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "MathTextIsSupported", MathTextIsSupported);
	Nan::SetPrototypeMethod(tpl, "mathTextIsSupported", MathTextIsSupported);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PopMatrix", PopMatrix);
	Nan::SetPrototypeMethod(tpl, "popMatrix", PopMatrix);

	Nan::SetPrototypeMethod(tpl, "PushMatrix", PushMatrix);
	Nan::SetPrototypeMethod(tpl, "pushMatrix", PushMatrix);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetTransform", SetTransform);
	Nan::SetPrototypeMethod(tpl, "setTransform", SetTransform);

	ptpl.Reset( tpl );
}

void VtkContext2DWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkContext2D> native = vtkSmartPointer<vtkContext2D>::New();
		VtkContext2DWrap* obj = new VtkContext2DWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkContext2DWrap::AppendTransform(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTransform2DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTransform2DWrap *a0 = ObjectWrap::Unwrap<VtkTransform2DWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AppendTransform(
			(vtkTransform2D *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::ApplyBrush(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkBrushWrap::ptpl))->HasInstance(info[0]))
	{
		VtkBrushWrap *a0 = ObjectWrap::Unwrap<VtkBrushWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ApplyBrush(
			(vtkBrush *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::ApplyPen(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPenWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPenWrap *a0 = ObjectWrap::Unwrap<VtkPenWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ApplyPen(
			(vtkPen *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::ApplyTextProp(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTextPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTextPropertyWrap *a0 = ObjectWrap::Unwrap<VtkTextPropertyWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ApplyTextProp(
			(vtkTextProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::BufferIdModeBegin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractContextBufferIdWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractContextBufferIdWrap *a0 = ObjectWrap::Unwrap<VtkAbstractContextBufferIdWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->BufferIdModeBegin(
			(vtkAbstractContextBufferId *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::BufferIdModeEnd(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BufferIdModeEnd();
}

void VtkContext2DWrap::ComputeStringBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkPoints2DWrap::ptpl))->HasInstance(info[1]))
		{
			VtkPoints2DWrap *a1 = ObjectWrap::Unwrap<VtkPoints2DWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->ComputeStringBounds(
				*a0,
				(vtkPoints2D *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::DrawLine(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPoints2DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPoints2DWrap *a0 = ObjectWrap::Unwrap<VtkPoints2DWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DrawLine(
			(vtkPoints2D *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::DrawMarkers(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsBoolean())
		{
			if(info.Length() > 2 && info[2]->IsObject() && (Nan::New(VtkPoints2DWrap::ptpl))->HasInstance(info[2]))
			{
				VtkPoints2DWrap *a2 = ObjectWrap::Unwrap<VtkPoints2DWrap>(info[2]->ToObject());
				if(info.Length() > 3 && info[3]->IsObject() && (Nan::New(VtkUnsignedCharArrayWrap::ptpl))->HasInstance(info[3]))
				{
					VtkUnsignedCharArrayWrap *a3 = ObjectWrap::Unwrap<VtkUnsignedCharArrayWrap>(info[3]->ToObject());
										if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->DrawMarkers(
						info[0]->Int32Value(),
						info[1]->BooleanValue(),
						(vtkPoints2D *) a2->native.GetPointer(),
						(vtkUnsignedCharArray *) a3->native.GetPointer()
					);
					return;
				}
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->DrawMarkers(
					info[0]->Int32Value(),
					info[1]->BooleanValue(),
					(vtkPoints2D *) a2->native.GetPointer()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::DrawMathTextString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPoints2DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPoints2DWrap *a0 = ObjectWrap::Unwrap<VtkPoints2DWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsString())
			{
				Nan::Utf8String a2(info[2]);
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->DrawMathTextString(
					(vtkPoints2D *) a0->native.GetPointer(),
					*a1,
					*a2
				);
				return;
			}
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->DrawMathTextString(
				(vtkPoints2D *) a0->native.GetPointer(),
				*a1
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::DrawPointSprites(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImageDataWrap *a0 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkPoints2DWrap::ptpl))->HasInstance(info[1]))
		{
			VtkPoints2DWrap *a1 = ObjectWrap::Unwrap<VtkPoints2DWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject() && (Nan::New(VtkUnsignedCharArrayWrap::ptpl))->HasInstance(info[2]))
			{
				VtkUnsignedCharArrayWrap *a2 = ObjectWrap::Unwrap<VtkUnsignedCharArrayWrap>(info[2]->ToObject());
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->DrawPointSprites(
					(vtkImageData *) a0->native.GetPointer(),
					(vtkPoints2D *) a1->native.GetPointer(),
					(vtkUnsignedCharArray *) a2->native.GetPointer()
				);
				return;
			}
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->DrawPointSprites(
				(vtkImageData *) a0->native.GetPointer(),
				(vtkPoints2D *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::DrawPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPoints2DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPoints2DWrap *a0 = ObjectWrap::Unwrap<VtkPoints2DWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DrawPoints(
			(vtkPoints2D *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::DrawPoly(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPoints2DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPoints2DWrap *a0 = ObjectWrap::Unwrap<VtkPoints2DWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DrawPoly(
			(vtkPoints2D *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::DrawPolygon(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPoints2DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPoints2DWrap *a0 = ObjectWrap::Unwrap<VtkPoints2DWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DrawPolygon(
			(vtkPoints2D *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::DrawQuadStrip(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPoints2DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPoints2DWrap *a0 = ObjectWrap::Unwrap<VtkPoints2DWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DrawQuadStrip(
			(vtkPoints2D *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::DrawString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPoints2DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPoints2DWrap *a0 = ObjectWrap::Unwrap<VtkPoints2DWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->DrawString(
				(vtkPoints2D *) a0->native.GetPointer(),
				*a1
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::DrawStringRect(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPoints2DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPoints2DWrap *a0 = ObjectWrap::Unwrap<VtkPoints2DWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->DrawStringRect(
				(vtkPoints2D *) a0->native.GetPointer(),
				*a1
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::End(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->End();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContext2DWrap::GetBrush(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	vtkBrush * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBrush();
	VtkBrushWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkBrushWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkBrushWrap *w = new VtkBrushWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContext2DWrap::GetBufferIdMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBufferIdMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContext2DWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkContext2DWrap::GetPen(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	vtkPen * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPen();
	VtkPenWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPenWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPenWrap *w = new VtkPenWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContext2DWrap::GetTextProp(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	vtkTextProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTextProp();
	VtkTextPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTextPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTextPropertyWrap *w = new VtkTextPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContext2DWrap::GetTransform(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	vtkTransform2D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTransform();
	VtkTransform2DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTransform2DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTransform2DWrap *w = new VtkTransform2DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContext2DWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::MathTextIsSupported(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->MathTextIsSupported();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContext2DWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	vtkContext2D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkContext2DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkContext2DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkContext2DWrap *w = new VtkContext2DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContext2DWrap::PopMatrix(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PopMatrix();
}

void VtkContext2DWrap::PushMatrix(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PushMatrix();
}

void VtkContext2DWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkContext2D * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkContext2DWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkContext2DWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkContext2DWrap *w = new VtkContext2DWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContext2DWrap::SetTransform(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContext2DWrap *wrapper = ObjectWrap::Unwrap<VtkContext2DWrap>(info.Holder());
	vtkContext2D *native = (vtkContext2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTransform2DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTransform2DWrap *a0 = ObjectWrap::Unwrap<VtkTransform2DWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTransform(
			(vtkTransform2D *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

