/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkUnstructuredGridVolumeRayIntegratorWrap.h"
#include "vtkUnstructuredGridPreIntegrationWrap.h"
#include "vtkObjectWrap.h"
#include "vtkVolumeWrap.h"
#include "vtkDataArrayWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkUnstructuredGridPreIntegrationWrap::ptpl;

VtkUnstructuredGridPreIntegrationWrap::VtkUnstructuredGridPreIntegrationWrap()
{ }

VtkUnstructuredGridPreIntegrationWrap::VtkUnstructuredGridPreIntegrationWrap(vtkSmartPointer<vtkUnstructuredGridPreIntegration> _native)
{ native = _native; }

VtkUnstructuredGridPreIntegrationWrap::~VtkUnstructuredGridPreIntegrationWrap()
{ }

void VtkUnstructuredGridPreIntegrationWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkUnstructuredGridPreIntegration").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("UnstructuredGridPreIntegration").ToLocalChecked(), ConstructorGetter);
}

void VtkUnstructuredGridPreIntegrationWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkUnstructuredGridPreIntegrationWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkUnstructuredGridVolumeRayIntegratorWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkUnstructuredGridVolumeRayIntegratorWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkUnstructuredGridPreIntegrationWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetIncrementalPreIntegration", GetIncrementalPreIntegration);
	Nan::SetPrototypeMethod(tpl, "getIncrementalPreIntegration", GetIncrementalPreIntegration);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationTableLengthResolution", GetIntegrationTableLengthResolution);
	Nan::SetPrototypeMethod(tpl, "getIntegrationTableLengthResolution", GetIntegrationTableLengthResolution);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationTableLengthScale", GetIntegrationTableLengthScale);
	Nan::SetPrototypeMethod(tpl, "getIntegrationTableLengthScale", GetIntegrationTableLengthScale);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationTableScalarResolution", GetIntegrationTableScalarResolution);
	Nan::SetPrototypeMethod(tpl, "getIntegrationTableScalarResolution", GetIntegrationTableScalarResolution);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationTableScalarScale", GetIntegrationTableScalarScale);
	Nan::SetPrototypeMethod(tpl, "getIntegrationTableScalarScale", GetIntegrationTableScalarScale);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationTableScalarShift", GetIntegrationTableScalarShift);
	Nan::SetPrototypeMethod(tpl, "getIntegrationTableScalarShift", GetIntegrationTableScalarShift);

	Nan::SetPrototypeMethod(tpl, "GetIntegrator", GetIntegrator);
	Nan::SetPrototypeMethod(tpl, "getIntegrator", GetIntegrator);

	Nan::SetPrototypeMethod(tpl, "IncrementalPreIntegrationOff", IncrementalPreIntegrationOff);
	Nan::SetPrototypeMethod(tpl, "incrementalPreIntegrationOff", IncrementalPreIntegrationOff);

	Nan::SetPrototypeMethod(tpl, "IncrementalPreIntegrationOn", IncrementalPreIntegrationOn);
	Nan::SetPrototypeMethod(tpl, "incrementalPreIntegrationOn", IncrementalPreIntegrationOn);

	Nan::SetPrototypeMethod(tpl, "Initialize", Initialize);
	Nan::SetPrototypeMethod(tpl, "initialize", Initialize);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetIncrementalPreIntegration", SetIncrementalPreIntegration);
	Nan::SetPrototypeMethod(tpl, "setIncrementalPreIntegration", SetIncrementalPreIntegration);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationTableLengthResolution", SetIntegrationTableLengthResolution);
	Nan::SetPrototypeMethod(tpl, "setIntegrationTableLengthResolution", SetIntegrationTableLengthResolution);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationTableScalarResolution", SetIntegrationTableScalarResolution);
	Nan::SetPrototypeMethod(tpl, "setIntegrationTableScalarResolution", SetIntegrationTableScalarResolution);

	Nan::SetPrototypeMethod(tpl, "SetIntegrator", SetIntegrator);
	Nan::SetPrototypeMethod(tpl, "setIntegrator", SetIntegrator);

	ptpl.Reset( tpl );
}

void VtkUnstructuredGridPreIntegrationWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkUnstructuredGridPreIntegration> native = vtkSmartPointer<vtkUnstructuredGridPreIntegration>::New();
		VtkUnstructuredGridPreIntegrationWrap* obj = new VtkUnstructuredGridPreIntegrationWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkUnstructuredGridPreIntegrationWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkUnstructuredGridPreIntegrationWrap::GetIncrementalPreIntegration(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIncrementalPreIntegration();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnstructuredGridPreIntegrationWrap::GetIntegrationTableLengthResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationTableLengthResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnstructuredGridPreIntegrationWrap::GetIntegrationTableLengthScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationTableLengthScale();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnstructuredGridPreIntegrationWrap::GetIntegrationTableScalarResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationTableScalarResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnstructuredGridPreIntegrationWrap::GetIntegrationTableScalarScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		double r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetIntegrationTableScalarScale(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridPreIntegrationWrap::GetIntegrationTableScalarShift(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		double r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetIntegrationTableScalarShift(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridPreIntegrationWrap::GetIntegrator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	vtkUnstructuredGridVolumeRayIntegrator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrator();
		VtkUnstructuredGridVolumeRayIntegratorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkUnstructuredGridVolumeRayIntegratorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkUnstructuredGridVolumeRayIntegratorWrap *w = new VtkUnstructuredGridVolumeRayIntegratorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkUnstructuredGridPreIntegrationWrap::IncrementalPreIntegrationOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->IncrementalPreIntegrationOff();
}

void VtkUnstructuredGridPreIntegrationWrap::IncrementalPreIntegrationOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->IncrementalPreIntegrationOn();
}

void VtkUnstructuredGridPreIntegrationWrap::Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkVolumeWrap::ptpl))->HasInstance(info[0]))
	{
		VtkVolumeWrap *a0 = ObjectWrap::Unwrap<VtkVolumeWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataArrayWrap *a1 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->Initialize(
				(vtkVolume *) a0->native.GetPointer(),
				(vtkDataArray *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridPreIntegrationWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridPreIntegrationWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	vtkUnstructuredGridPreIntegration * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkUnstructuredGridPreIntegrationWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkUnstructuredGridPreIntegrationWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkUnstructuredGridPreIntegrationWrap *w = new VtkUnstructuredGridPreIntegrationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkUnstructuredGridPreIntegrationWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkUnstructuredGridPreIntegration * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkUnstructuredGridPreIntegrationWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkUnstructuredGridPreIntegrationWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkUnstructuredGridPreIntegrationWrap *w = new VtkUnstructuredGridPreIntegrationWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridPreIntegrationWrap::SetIncrementalPreIntegration(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIncrementalPreIntegration(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridPreIntegrationWrap::SetIntegrationTableLengthResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegrationTableLengthResolution(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridPreIntegrationWrap::SetIntegrationTableScalarResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegrationTableScalarResolution(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridPreIntegrationWrap::SetIntegrator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridPreIntegrationWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridPreIntegrationWrap>(info.Holder());
	vtkUnstructuredGridPreIntegration *native = (vtkUnstructuredGridPreIntegration *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkUnstructuredGridVolumeRayIntegratorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkUnstructuredGridVolumeRayIntegratorWrap *a0 = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayIntegratorWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegrator(
			(vtkUnstructuredGridVolumeRayIntegrator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

