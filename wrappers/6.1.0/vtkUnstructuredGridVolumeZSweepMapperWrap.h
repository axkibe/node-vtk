/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKUNSTRUCTUREDGRIDVOLUMEZSWEEPMAPPERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKUNSTRUCTUREDGRIDVOLUMEZSWEEPMAPPERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkUnstructuredGridVolumeZSweepMapper.h>

#include "vtkUnstructuredGridVolumeMapperWrap.h"
#include "../../plus/plus.h"

class VtkUnstructuredGridVolumeZSweepMapperWrap : public VtkUnstructuredGridVolumeMapperWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkUnstructuredGridVolumeZSweepMapperWrap(vtkSmartPointer<vtkUnstructuredGridVolumeZSweepMapper>);
		VtkUnstructuredGridVolumeZSweepMapperWrap();
		~VtkUnstructuredGridVolumeZSweepMapperWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AutoAdjustSampleDistancesOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void AutoAdjustSampleDistancesOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAutoAdjustSampleDistances(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAutoAdjustSampleDistancesMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAutoAdjustSampleDistancesMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetImageInUseSize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetImageOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetImageViewportSize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetIntermixIntersectingGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetIntermixIntersectingGeometryMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetIntermixIntersectingGeometryMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaxPixelListSize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRayIntegrator(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IntermixIntersectingGeometryOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IntermixIntersectingGeometryOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Render(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAutoAdjustSampleDistances(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetIntermixIntersectingGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaxPixelListSize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRayIntegrator(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKUNSTRUCTUREDGRIDVOLUMEZSWEEPMAPPERWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKUNSTRUCTUREDGRIDVOLUMEZSWEEPMAPPERWRAP_CLASSDEF
#endif
};

#endif
