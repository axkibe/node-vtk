/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkRenderedRepresentationWrap.h"
#include "vtkRenderedTreeAreaRepresentationWrap.h"
#include "vtkObjectWrap.h"
#include "vtkTextPropertyWrap.h"
#include "vtkAreaLayoutStrategyWrap.h"
#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkLabeledDataMapperWrap.h"
#include "vtkViewThemeWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkRenderedTreeAreaRepresentationWrap::ptpl;

VtkRenderedTreeAreaRepresentationWrap::VtkRenderedTreeAreaRepresentationWrap()
{ }

VtkRenderedTreeAreaRepresentationWrap::VtkRenderedTreeAreaRepresentationWrap(vtkSmartPointer<vtkRenderedTreeAreaRepresentation> _native)
{ native = _native; }

VtkRenderedTreeAreaRepresentationWrap::~VtkRenderedTreeAreaRepresentationWrap()
{ }

void VtkRenderedTreeAreaRepresentationWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkRenderedTreeAreaRepresentation").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("RenderedTreeAreaRepresentation").ToLocalChecked(), ConstructorGetter);
}

void VtkRenderedTreeAreaRepresentationWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkRenderedTreeAreaRepresentationWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkRenderedRepresentationWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkRenderedRepresentationWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkRenderedTreeAreaRepresentationWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ApplyViewTheme", ApplyViewTheme);
	Nan::SetPrototypeMethod(tpl, "applyViewTheme", ApplyViewTheme);

	Nan::SetPrototypeMethod(tpl, "AreaLabelVisibilityOff", AreaLabelVisibilityOff);
	Nan::SetPrototypeMethod(tpl, "areaLabelVisibilityOff", AreaLabelVisibilityOff);

	Nan::SetPrototypeMethod(tpl, "AreaLabelVisibilityOn", AreaLabelVisibilityOn);
	Nan::SetPrototypeMethod(tpl, "areaLabelVisibilityOn", AreaLabelVisibilityOn);

	Nan::SetPrototypeMethod(tpl, "ColorAreasByArrayOff", ColorAreasByArrayOff);
	Nan::SetPrototypeMethod(tpl, "colorAreasByArrayOff", ColorAreasByArrayOff);

	Nan::SetPrototypeMethod(tpl, "ColorAreasByArrayOn", ColorAreasByArrayOn);
	Nan::SetPrototypeMethod(tpl, "colorAreasByArrayOn", ColorAreasByArrayOn);

	Nan::SetPrototypeMethod(tpl, "ColorGraphEdgesByArrayOff", ColorGraphEdgesByArrayOff);
	Nan::SetPrototypeMethod(tpl, "colorGraphEdgesByArrayOff", ColorGraphEdgesByArrayOff);

	Nan::SetPrototypeMethod(tpl, "ColorGraphEdgesByArrayOn", ColorGraphEdgesByArrayOn);
	Nan::SetPrototypeMethod(tpl, "colorGraphEdgesByArrayOn", ColorGraphEdgesByArrayOn);

	Nan::SetPrototypeMethod(tpl, "GetAreaColorArrayName", GetAreaColorArrayName);
	Nan::SetPrototypeMethod(tpl, "getAreaColorArrayName", GetAreaColorArrayName);

	Nan::SetPrototypeMethod(tpl, "GetAreaHoverArrayName", GetAreaHoverArrayName);
	Nan::SetPrototypeMethod(tpl, "getAreaHoverArrayName", GetAreaHoverArrayName);

	Nan::SetPrototypeMethod(tpl, "GetAreaLabelArrayName", GetAreaLabelArrayName);
	Nan::SetPrototypeMethod(tpl, "getAreaLabelArrayName", GetAreaLabelArrayName);

	Nan::SetPrototypeMethod(tpl, "GetAreaLabelMapper", GetAreaLabelMapper);
	Nan::SetPrototypeMethod(tpl, "getAreaLabelMapper", GetAreaLabelMapper);

	Nan::SetPrototypeMethod(tpl, "GetAreaLabelPriorityArrayName", GetAreaLabelPriorityArrayName);
	Nan::SetPrototypeMethod(tpl, "getAreaLabelPriorityArrayName", GetAreaLabelPriorityArrayName);

	Nan::SetPrototypeMethod(tpl, "GetAreaLabelTextProperty", GetAreaLabelTextProperty);
	Nan::SetPrototypeMethod(tpl, "getAreaLabelTextProperty", GetAreaLabelTextProperty);

	Nan::SetPrototypeMethod(tpl, "GetAreaLayoutStrategy", GetAreaLayoutStrategy);
	Nan::SetPrototypeMethod(tpl, "getAreaLayoutStrategy", GetAreaLayoutStrategy);

	Nan::SetPrototypeMethod(tpl, "GetAreaSizeArrayName", GetAreaSizeArrayName);
	Nan::SetPrototypeMethod(tpl, "getAreaSizeArrayName", GetAreaSizeArrayName);

	Nan::SetPrototypeMethod(tpl, "GetAreaToPolyData", GetAreaToPolyData);
	Nan::SetPrototypeMethod(tpl, "getAreaToPolyData", GetAreaToPolyData);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetGraphBundlingStrength", GetGraphBundlingStrength);
	Nan::SetPrototypeMethod(tpl, "getGraphBundlingStrength", GetGraphBundlingStrength);

	Nan::SetPrototypeMethod(tpl, "GetGraphEdgeColorArrayName", GetGraphEdgeColorArrayName);
	Nan::SetPrototypeMethod(tpl, "getGraphEdgeColorArrayName", GetGraphEdgeColorArrayName);

	Nan::SetPrototypeMethod(tpl, "GetGraphEdgeLabelArrayName", GetGraphEdgeLabelArrayName);
	Nan::SetPrototypeMethod(tpl, "getGraphEdgeLabelArrayName", GetGraphEdgeLabelArrayName);

	Nan::SetPrototypeMethod(tpl, "GetGraphEdgeLabelTextProperty", GetGraphEdgeLabelTextProperty);
	Nan::SetPrototypeMethod(tpl, "getGraphEdgeLabelTextProperty", GetGraphEdgeLabelTextProperty);

	Nan::SetPrototypeMethod(tpl, "GetGraphHoverArrayName", GetGraphHoverArrayName);
	Nan::SetPrototypeMethod(tpl, "getGraphHoverArrayName", GetGraphHoverArrayName);

	Nan::SetPrototypeMethod(tpl, "GetGraphSplineType", GetGraphSplineType);
	Nan::SetPrototypeMethod(tpl, "getGraphSplineType", GetGraphSplineType);

	Nan::SetPrototypeMethod(tpl, "GetShrinkPercentage", GetShrinkPercentage);
	Nan::SetPrototypeMethod(tpl, "getShrinkPercentage", GetShrinkPercentage);

	Nan::SetPrototypeMethod(tpl, "GraphEdgeLabelVisibilityOff", GraphEdgeLabelVisibilityOff);
	Nan::SetPrototypeMethod(tpl, "graphEdgeLabelVisibilityOff", GraphEdgeLabelVisibilityOff);

	Nan::SetPrototypeMethod(tpl, "GraphEdgeLabelVisibilityOn", GraphEdgeLabelVisibilityOn);
	Nan::SetPrototypeMethod(tpl, "graphEdgeLabelVisibilityOn", GraphEdgeLabelVisibilityOn);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAreaColorArrayName", SetAreaColorArrayName);
	Nan::SetPrototypeMethod(tpl, "setAreaColorArrayName", SetAreaColorArrayName);

	Nan::SetPrototypeMethod(tpl, "SetAreaHoverArrayName", SetAreaHoverArrayName);
	Nan::SetPrototypeMethod(tpl, "setAreaHoverArrayName", SetAreaHoverArrayName);

	Nan::SetPrototypeMethod(tpl, "SetAreaLabelArrayName", SetAreaLabelArrayName);
	Nan::SetPrototypeMethod(tpl, "setAreaLabelArrayName", SetAreaLabelArrayName);

	Nan::SetPrototypeMethod(tpl, "SetAreaLabelMapper", SetAreaLabelMapper);
	Nan::SetPrototypeMethod(tpl, "setAreaLabelMapper", SetAreaLabelMapper);

	Nan::SetPrototypeMethod(tpl, "SetAreaLabelPriorityArrayName", SetAreaLabelPriorityArrayName);
	Nan::SetPrototypeMethod(tpl, "setAreaLabelPriorityArrayName", SetAreaLabelPriorityArrayName);

	Nan::SetPrototypeMethod(tpl, "SetAreaLabelTextProperty", SetAreaLabelTextProperty);
	Nan::SetPrototypeMethod(tpl, "setAreaLabelTextProperty", SetAreaLabelTextProperty);

	Nan::SetPrototypeMethod(tpl, "SetAreaLayoutStrategy", SetAreaLayoutStrategy);
	Nan::SetPrototypeMethod(tpl, "setAreaLayoutStrategy", SetAreaLayoutStrategy);

	Nan::SetPrototypeMethod(tpl, "SetAreaSizeArrayName", SetAreaSizeArrayName);
	Nan::SetPrototypeMethod(tpl, "setAreaSizeArrayName", SetAreaSizeArrayName);

	Nan::SetPrototypeMethod(tpl, "SetAreaToPolyData", SetAreaToPolyData);
	Nan::SetPrototypeMethod(tpl, "setAreaToPolyData", SetAreaToPolyData);

	Nan::SetPrototypeMethod(tpl, "SetGraphBundlingStrength", SetGraphBundlingStrength);
	Nan::SetPrototypeMethod(tpl, "setGraphBundlingStrength", SetGraphBundlingStrength);

	Nan::SetPrototypeMethod(tpl, "SetGraphEdgeColorArrayName", SetGraphEdgeColorArrayName);
	Nan::SetPrototypeMethod(tpl, "setGraphEdgeColorArrayName", SetGraphEdgeColorArrayName);

	Nan::SetPrototypeMethod(tpl, "SetGraphEdgeColorToSplineFraction", SetGraphEdgeColorToSplineFraction);
	Nan::SetPrototypeMethod(tpl, "setGraphEdgeColorToSplineFraction", SetGraphEdgeColorToSplineFraction);

	Nan::SetPrototypeMethod(tpl, "SetGraphEdgeLabelArrayName", SetGraphEdgeLabelArrayName);
	Nan::SetPrototypeMethod(tpl, "setGraphEdgeLabelArrayName", SetGraphEdgeLabelArrayName);

	Nan::SetPrototypeMethod(tpl, "SetGraphEdgeLabelTextProperty", SetGraphEdgeLabelTextProperty);
	Nan::SetPrototypeMethod(tpl, "setGraphEdgeLabelTextProperty", SetGraphEdgeLabelTextProperty);

	Nan::SetPrototypeMethod(tpl, "SetGraphHoverArrayName", SetGraphHoverArrayName);
	Nan::SetPrototypeMethod(tpl, "setGraphHoverArrayName", SetGraphHoverArrayName);

	Nan::SetPrototypeMethod(tpl, "SetGraphSplineType", SetGraphSplineType);
	Nan::SetPrototypeMethod(tpl, "setGraphSplineType", SetGraphSplineType);

	Nan::SetPrototypeMethod(tpl, "SetLabelRenderMode", SetLabelRenderMode);
	Nan::SetPrototypeMethod(tpl, "setLabelRenderMode", SetLabelRenderMode);

	Nan::SetPrototypeMethod(tpl, "SetShrinkPercentage", SetShrinkPercentage);
	Nan::SetPrototypeMethod(tpl, "setShrinkPercentage", SetShrinkPercentage);

	Nan::SetPrototypeMethod(tpl, "UseRectangularCoordinatesOff", UseRectangularCoordinatesOff);
	Nan::SetPrototypeMethod(tpl, "useRectangularCoordinatesOff", UseRectangularCoordinatesOff);

	Nan::SetPrototypeMethod(tpl, "UseRectangularCoordinatesOn", UseRectangularCoordinatesOn);
	Nan::SetPrototypeMethod(tpl, "useRectangularCoordinatesOn", UseRectangularCoordinatesOn);

	ptpl.Reset( tpl );
}

void VtkRenderedTreeAreaRepresentationWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkRenderedTreeAreaRepresentation> native = vtkSmartPointer<vtkRenderedTreeAreaRepresentation>::New();
		VtkRenderedTreeAreaRepresentationWrap* obj = new VtkRenderedTreeAreaRepresentationWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkRenderedTreeAreaRepresentationWrap::ApplyViewTheme(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewThemeWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewThemeWrap *a0 = ObjectWrap::Unwrap<VtkViewThemeWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ApplyViewTheme(
			(vtkViewTheme *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::AreaLabelVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AreaLabelVisibilityOff();
}

void VtkRenderedTreeAreaRepresentationWrap::AreaLabelVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AreaLabelVisibilityOn();
}

void VtkRenderedTreeAreaRepresentationWrap::ColorAreasByArrayOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ColorAreasByArrayOff();
}

void VtkRenderedTreeAreaRepresentationWrap::ColorAreasByArrayOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ColorAreasByArrayOn();
}

void VtkRenderedTreeAreaRepresentationWrap::ColorGraphEdgesByArrayOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ColorGraphEdgesByArrayOff();
}

void VtkRenderedTreeAreaRepresentationWrap::ColorGraphEdgesByArrayOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ColorGraphEdgesByArrayOn();
}

void VtkRenderedTreeAreaRepresentationWrap::GetAreaColorArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAreaColorArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRenderedTreeAreaRepresentationWrap::GetAreaHoverArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAreaHoverArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRenderedTreeAreaRepresentationWrap::GetAreaLabelArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAreaLabelArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRenderedTreeAreaRepresentationWrap::GetAreaLabelMapper(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	vtkLabeledDataMapper * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAreaLabelMapper();
		VtkLabeledDataMapperWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkLabeledDataMapperWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkLabeledDataMapperWrap *w = new VtkLabeledDataMapperWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderedTreeAreaRepresentationWrap::GetAreaLabelPriorityArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAreaLabelPriorityArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRenderedTreeAreaRepresentationWrap::GetAreaLabelTextProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	vtkTextProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAreaLabelTextProperty();
		VtkTextPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTextPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTextPropertyWrap *w = new VtkTextPropertyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderedTreeAreaRepresentationWrap::GetAreaLayoutStrategy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	vtkAreaLayoutStrategy * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAreaLayoutStrategy();
		VtkAreaLayoutStrategyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAreaLayoutStrategyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAreaLayoutStrategyWrap *w = new VtkAreaLayoutStrategyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderedTreeAreaRepresentationWrap::GetAreaSizeArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAreaSizeArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRenderedTreeAreaRepresentationWrap::GetAreaToPolyData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	vtkPolyDataAlgorithm * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAreaToPolyData();
		VtkPolyDataAlgorithmWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataAlgorithmWrap *w = new VtkPolyDataAlgorithmWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderedTreeAreaRepresentationWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRenderedTreeAreaRepresentationWrap::GetGraphBundlingStrength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		double r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetGraphBundlingStrength(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGraphBundlingStrength();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRenderedTreeAreaRepresentationWrap::GetGraphEdgeColorArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetGraphEdgeColorArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGraphEdgeColorArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRenderedTreeAreaRepresentationWrap::GetGraphEdgeLabelArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetGraphEdgeLabelArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGraphEdgeLabelArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRenderedTreeAreaRepresentationWrap::GetGraphEdgeLabelTextProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkTextProperty * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetGraphEdgeLabelTextProperty(
			info[0]->Int32Value()
		);
			VtkTextPropertyWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkTextPropertyWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkTextPropertyWrap *w = new VtkTextPropertyWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	vtkTextProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGraphEdgeLabelTextProperty();
		VtkTextPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTextPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTextPropertyWrap *w = new VtkTextPropertyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderedTreeAreaRepresentationWrap::GetGraphHoverArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetGraphHoverArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGraphHoverArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRenderedTreeAreaRepresentationWrap::GetGraphSplineType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetGraphSplineType(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::GetShrinkPercentage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetShrinkPercentage();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRenderedTreeAreaRepresentationWrap::GraphEdgeLabelVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GraphEdgeLabelVisibilityOff();
}

void VtkRenderedTreeAreaRepresentationWrap::GraphEdgeLabelVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GraphEdgeLabelVisibilityOn();
}

void VtkRenderedTreeAreaRepresentationWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	vtkRenderedTreeAreaRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkRenderedTreeAreaRepresentationWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderedTreeAreaRepresentationWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderedTreeAreaRepresentationWrap *w = new VtkRenderedTreeAreaRepresentationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderedTreeAreaRepresentationWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkRenderedTreeAreaRepresentation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkRenderedTreeAreaRepresentationWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkRenderedTreeAreaRepresentationWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkRenderedTreeAreaRepresentationWrap *w = new VtkRenderedTreeAreaRepresentationWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetAreaColorArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAreaColorArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetAreaHoverArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAreaHoverArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetAreaLabelArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAreaLabelArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetAreaLabelMapper(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkLabeledDataMapperWrap::ptpl))->HasInstance(info[0]))
	{
		VtkLabeledDataMapperWrap *a0 = ObjectWrap::Unwrap<VtkLabeledDataMapperWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAreaLabelMapper(
			(vtkLabeledDataMapper *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetAreaLabelPriorityArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAreaLabelPriorityArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetAreaLabelTextProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTextPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTextPropertyWrap *a0 = ObjectWrap::Unwrap<VtkTextPropertyWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAreaLabelTextProperty(
			(vtkTextProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetAreaLayoutStrategy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAreaLayoutStrategyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAreaLayoutStrategyWrap *a0 = ObjectWrap::Unwrap<VtkAreaLayoutStrategyWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAreaLayoutStrategy(
			(vtkAreaLayoutStrategy *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetAreaSizeArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAreaSizeArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetAreaToPolyData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataAlgorithmWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataAlgorithmWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataAlgorithmWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAreaToPolyData(
			(vtkPolyDataAlgorithm *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetGraphBundlingStrength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetGraphBundlingStrength(
				info[0]->NumberValue(),
				info[1]->Int32Value()
			);
			return;
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGraphBundlingStrength(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetGraphEdgeColorArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetGraphEdgeColorArrayName(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGraphEdgeColorArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetGraphEdgeColorToSplineFraction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGraphEdgeColorToSplineFraction(
			info[0]->Int32Value()
		);
		return;
	}
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetGraphEdgeColorToSplineFraction();
}

void VtkRenderedTreeAreaRepresentationWrap::SetGraphEdgeLabelArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetGraphEdgeLabelArrayName(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGraphEdgeLabelArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetGraphEdgeLabelTextProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTextPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTextPropertyWrap *a0 = ObjectWrap::Unwrap<VtkTextPropertyWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetGraphEdgeLabelTextProperty(
				(vtkTextProperty *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			return;
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGraphEdgeLabelTextProperty(
			(vtkTextProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetGraphHoverArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetGraphHoverArrayName(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGraphHoverArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetGraphSplineType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetGraphSplineType(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetLabelRenderMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLabelRenderMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::SetShrinkPercentage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetShrinkPercentage(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderedTreeAreaRepresentationWrap::UseRectangularCoordinatesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseRectangularCoordinatesOff();
}

void VtkRenderedTreeAreaRepresentationWrap::UseRectangularCoordinatesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderedTreeAreaRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkRenderedTreeAreaRepresentationWrap>(info.Holder());
	vtkRenderedTreeAreaRepresentation *native = (vtkRenderedTreeAreaRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseRectangularCoordinatesOn();
}

