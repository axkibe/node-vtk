/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkAbstractImageInterpolatorWrap.h"
#include "vtkDataObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkAbstractImageInterpolatorWrap::ptpl;

VtkAbstractImageInterpolatorWrap::VtkAbstractImageInterpolatorWrap()
{ }

VtkAbstractImageInterpolatorWrap::VtkAbstractImageInterpolatorWrap(vtkSmartPointer<vtkAbstractImageInterpolator> _native)
{ native = _native; }

VtkAbstractImageInterpolatorWrap::~VtkAbstractImageInterpolatorWrap()
{ }

void VtkAbstractImageInterpolatorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkAbstractImageInterpolator").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("AbstractImageInterpolator").ToLocalChecked(), ConstructorGetter);
}

void VtkAbstractImageInterpolatorWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkAbstractImageInterpolatorWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkAbstractImageInterpolatorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ComputeNumberOfComponents", ComputeNumberOfComponents);
	Nan::SetPrototypeMethod(tpl, "computeNumberOfComponents", ComputeNumberOfComponents);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "GetBorderMode", GetBorderMode);
	Nan::SetPrototypeMethod(tpl, "getBorderMode", GetBorderMode);

	Nan::SetPrototypeMethod(tpl, "GetBorderModeAsString", GetBorderModeAsString);
	Nan::SetPrototypeMethod(tpl, "getBorderModeAsString", GetBorderModeAsString);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetComponentCount", GetComponentCount);
	Nan::SetPrototypeMethod(tpl, "getComponentCount", GetComponentCount);

	Nan::SetPrototypeMethod(tpl, "GetComponentOffset", GetComponentOffset);
	Nan::SetPrototypeMethod(tpl, "getComponentOffset", GetComponentOffset);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComponents", GetNumberOfComponents);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComponents", GetNumberOfComponents);

	Nan::SetPrototypeMethod(tpl, "GetOutValue", GetOutValue);
	Nan::SetPrototypeMethod(tpl, "getOutValue", GetOutValue);

	Nan::SetPrototypeMethod(tpl, "GetTolerance", GetTolerance);
	Nan::SetPrototypeMethod(tpl, "getTolerance", GetTolerance);

	Nan::SetPrototypeMethod(tpl, "Initialize", Initialize);
	Nan::SetPrototypeMethod(tpl, "initialize", Initialize);

	Nan::SetPrototypeMethod(tpl, "Interpolate", Interpolate);
	Nan::SetPrototypeMethod(tpl, "interpolate", Interpolate);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseData", ReleaseData);
	Nan::SetPrototypeMethod(tpl, "releaseData", ReleaseData);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBorderMode", SetBorderMode);
	Nan::SetPrototypeMethod(tpl, "setBorderMode", SetBorderMode);

	Nan::SetPrototypeMethod(tpl, "SetBorderModeToClamp", SetBorderModeToClamp);
	Nan::SetPrototypeMethod(tpl, "setBorderModeToClamp", SetBorderModeToClamp);

	Nan::SetPrototypeMethod(tpl, "SetBorderModeToMirror", SetBorderModeToMirror);
	Nan::SetPrototypeMethod(tpl, "setBorderModeToMirror", SetBorderModeToMirror);

	Nan::SetPrototypeMethod(tpl, "SetBorderModeToRepeat", SetBorderModeToRepeat);
	Nan::SetPrototypeMethod(tpl, "setBorderModeToRepeat", SetBorderModeToRepeat);

	Nan::SetPrototypeMethod(tpl, "SetComponentCount", SetComponentCount);
	Nan::SetPrototypeMethod(tpl, "setComponentCount", SetComponentCount);

	Nan::SetPrototypeMethod(tpl, "SetComponentOffset", SetComponentOffset);
	Nan::SetPrototypeMethod(tpl, "setComponentOffset", SetComponentOffset);

	Nan::SetPrototypeMethod(tpl, "SetOutValue", SetOutValue);
	Nan::SetPrototypeMethod(tpl, "setOutValue", SetOutValue);

	Nan::SetPrototypeMethod(tpl, "SetTolerance", SetTolerance);
	Nan::SetPrototypeMethod(tpl, "setTolerance", SetTolerance);

	Nan::SetPrototypeMethod(tpl, "Update", Update);
	Nan::SetPrototypeMethod(tpl, "update", Update);

	ptpl.Reset( tpl );
}

void VtkAbstractImageInterpolatorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkAbstractImageInterpolatorWrap::ComputeNumberOfComponents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->ComputeNumberOfComponents(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractImageInterpolatorWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractImageInterpolatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractImageInterpolatorWrap *a0 = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DeepCopy(
			(vtkAbstractImageInterpolator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractImageInterpolatorWrap::GetBorderMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBorderMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractImageInterpolatorWrap::GetBorderModeAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBorderModeAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAbstractImageInterpolatorWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAbstractImageInterpolatorWrap::GetComponentCount(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComponentCount();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractImageInterpolatorWrap::GetComponentOffset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComponentOffset();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractImageInterpolatorWrap::GetNumberOfComponents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfComponents();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractImageInterpolatorWrap::GetOutValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractImageInterpolatorWrap::GetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractImageInterpolatorWrap::Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Initialize(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractImageInterpolatorWrap::Interpolate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					double r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->Interpolate(
						info[0]->NumberValue(),
						info[1]->NumberValue(),
						info[2]->NumberValue(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractImageInterpolatorWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractImageInterpolatorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	vtkAbstractImageInterpolator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkAbstractImageInterpolatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAbstractImageInterpolatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAbstractImageInterpolatorWrap *w = new VtkAbstractImageInterpolatorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAbstractImageInterpolatorWrap::ReleaseData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReleaseData();
}

void VtkAbstractImageInterpolatorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkAbstractImageInterpolator * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkAbstractImageInterpolatorWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkAbstractImageInterpolatorWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAbstractImageInterpolatorWrap *w = new VtkAbstractImageInterpolatorWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractImageInterpolatorWrap::SetBorderMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBorderMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractImageInterpolatorWrap::SetBorderModeToClamp(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetBorderModeToClamp();
}

void VtkAbstractImageInterpolatorWrap::SetBorderModeToMirror(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetBorderModeToMirror();
}

void VtkAbstractImageInterpolatorWrap::SetBorderModeToRepeat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetBorderModeToRepeat();
}

void VtkAbstractImageInterpolatorWrap::SetComponentCount(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComponentCount(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractImageInterpolatorWrap::SetComponentOffset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComponentOffset(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractImageInterpolatorWrap::SetOutValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractImageInterpolatorWrap::SetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTolerance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractImageInterpolatorWrap::Update(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractImageInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractImageInterpolatorWrap>(info.Holder());
	vtkAbstractImageInterpolator *native = (vtkAbstractImageInterpolator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Update();
}

