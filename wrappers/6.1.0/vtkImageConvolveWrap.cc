/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkThreadedImageAlgorithmWrap.h"
#include "vtkImageConvolveWrap.h"
#include "vtkObjectWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkImageConvolveWrap::ptpl;

VtkImageConvolveWrap::VtkImageConvolveWrap()
{ }

VtkImageConvolveWrap::VtkImageConvolveWrap(vtkSmartPointer<vtkImageConvolve> _native)
{ native = _native; }

VtkImageConvolveWrap::~VtkImageConvolveWrap()
{ }

void VtkImageConvolveWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkImageConvolve").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ImageConvolve").ToLocalChecked(), ConstructorGetter);
}

void VtkImageConvolveWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkImageConvolveWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkThreadedImageAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkThreadedImageAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkImageConvolveWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetKernel3x3", GetKernel3x3);
	Nan::SetPrototypeMethod(tpl, "getKernel3x3", GetKernel3x3);

	Nan::SetPrototypeMethod(tpl, "GetKernel3x3x3", GetKernel3x3x3);
	Nan::SetPrototypeMethod(tpl, "getKernel3x3x3", GetKernel3x3x3);

	Nan::SetPrototypeMethod(tpl, "GetKernel5x5", GetKernel5x5);
	Nan::SetPrototypeMethod(tpl, "getKernel5x5", GetKernel5x5);

	Nan::SetPrototypeMethod(tpl, "GetKernel5x5x5", GetKernel5x5x5);
	Nan::SetPrototypeMethod(tpl, "getKernel5x5x5", GetKernel5x5x5);

	Nan::SetPrototypeMethod(tpl, "GetKernel7x7", GetKernel7x7);
	Nan::SetPrototypeMethod(tpl, "getKernel7x7", GetKernel7x7);

	Nan::SetPrototypeMethod(tpl, "GetKernel7x7x7", GetKernel7x7x7);
	Nan::SetPrototypeMethod(tpl, "getKernel7x7x7", GetKernel7x7x7);

	Nan::SetPrototypeMethod(tpl, "GetKernelSize", GetKernelSize);
	Nan::SetPrototypeMethod(tpl, "getKernelSize", GetKernelSize);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetKernel3x3", SetKernel3x3);
	Nan::SetPrototypeMethod(tpl, "setKernel3x3", SetKernel3x3);

	Nan::SetPrototypeMethod(tpl, "SetKernel3x3x3", SetKernel3x3x3);
	Nan::SetPrototypeMethod(tpl, "setKernel3x3x3", SetKernel3x3x3);

	Nan::SetPrototypeMethod(tpl, "SetKernel5x5", SetKernel5x5);
	Nan::SetPrototypeMethod(tpl, "setKernel5x5", SetKernel5x5);

	Nan::SetPrototypeMethod(tpl, "SetKernel5x5x5", SetKernel5x5x5);
	Nan::SetPrototypeMethod(tpl, "setKernel5x5x5", SetKernel5x5x5);

	Nan::SetPrototypeMethod(tpl, "SetKernel7x7", SetKernel7x7);
	Nan::SetPrototypeMethod(tpl, "setKernel7x7", SetKernel7x7);

	Nan::SetPrototypeMethod(tpl, "SetKernel7x7x7", SetKernel7x7x7);
	Nan::SetPrototypeMethod(tpl, "setKernel7x7x7", SetKernel7x7x7);

#ifdef VTK_NODE_PLUS_VTKIMAGECONVOLVEWRAP_INITPTPL
	VTK_NODE_PLUS_VTKIMAGECONVOLVEWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkImageConvolveWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageConvolve> native = vtkSmartPointer<vtkImageConvolve>::New();
		VtkImageConvolveWrap* obj = new VtkImageConvolveWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageConvolveWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageConvolveWrap::GetKernel3x3(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 9 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetKernel3x3(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[9];
		if( a0->Length() < 9 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 9; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetKernel3x3(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::GetKernel3x3x3(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 27 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetKernel3x3x3(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[27];
		if( a0->Length() < 27 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 27; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetKernel3x3x3(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::GetKernel5x5(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 25 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetKernel5x5(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[25];
		if( a0->Length() < 25 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 25; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetKernel5x5(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::GetKernel5x5x5(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 125 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetKernel5x5x5(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[125];
		if( a0->Length() < 125 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 125; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetKernel5x5x5(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::GetKernel7x7(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 49 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetKernel7x7(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[49];
		if( a0->Length() < 49 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 49; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetKernel7x7(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::GetKernel7x7x7(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 343 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetKernel7x7x7(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[343];
		if( a0->Length() < 343 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 343; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetKernel7x7x7(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::GetKernelSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	int const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetKernelSize();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(int));
	Local<v8::Int32Array> at = v8::Int32Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(int));
	info.GetReturnValue().Set(at);
}

void VtkImageConvolveWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	vtkImageConvolve * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkImageConvolveWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImageConvolveWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageConvolveWrap *w = new VtkImageConvolveWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageConvolveWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageConvolve * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkImageConvolveWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkImageConvolveWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageConvolveWrap *w = new VtkImageConvolveWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::SetKernel3x3(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 9 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel3x3(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[9];
		if( a0->Length() < 9 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 9; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel3x3(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::SetKernel3x3x3(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 27 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel3x3x3(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[27];
		if( a0->Length() < 27 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 27; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel3x3x3(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::SetKernel5x5(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 25 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel5x5(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[25];
		if( a0->Length() < 25 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 25; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel5x5(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::SetKernel5x5x5(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 125 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel5x5x5(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[125];
		if( a0->Length() < 125 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 125; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel5x5x5(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::SetKernel7x7(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 49 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel7x7(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[49];
		if( a0->Length() < 49 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 49; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel7x7(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageConvolveWrap::SetKernel7x7x7(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageConvolveWrap *wrapper = ObjectWrap::Unwrap<VtkImageConvolveWrap>(info.Holder());
	vtkImageConvolve *native = (vtkImageConvolve *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 343 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel7x7x7(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[343];
		if( a0->Length() < 343 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 343; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel7x7x7(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

