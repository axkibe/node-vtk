/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPainterWrap.h"
#include "vtkSurfaceLICPainterWrap.h"
#include "vtkObjectWrap.h"
#include "vtkWindowWrap.h"
#include "vtkDataObjectWrap.h"
#include "vtkImageDataWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkSurfaceLICPainterWrap::ptpl;

VtkSurfaceLICPainterWrap::VtkSurfaceLICPainterWrap()
{ }

VtkSurfaceLICPainterWrap::VtkSurfaceLICPainterWrap(vtkSmartPointer<vtkSurfaceLICPainter> _native)
{ native = _native; }

VtkSurfaceLICPainterWrap::~VtkSurfaceLICPainterWrap()
{ }

void VtkSurfaceLICPainterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkSurfaceLICPainter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("SurfaceLICPainter").ToLocalChecked(), ConstructorGetter);
}

void VtkSurfaceLICPainterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkSurfaceLICPainterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPainterWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPainterWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkSurfaceLICPainterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AntiAliasOff", AntiAliasOff);
	Nan::SetPrototypeMethod(tpl, "antiAliasOff", AntiAliasOff);

	Nan::SetPrototypeMethod(tpl, "AntiAliasOn", AntiAliasOn);
	Nan::SetPrototypeMethod(tpl, "antiAliasOn", AntiAliasOn);

	Nan::SetPrototypeMethod(tpl, "EnhancedLICOff", EnhancedLICOff);
	Nan::SetPrototypeMethod(tpl, "enhancedLICOff", EnhancedLICOff);

	Nan::SetPrototypeMethod(tpl, "EnhancedLICOn", EnhancedLICOn);
	Nan::SetPrototypeMethod(tpl, "enhancedLICOn", EnhancedLICOn);

	Nan::SetPrototypeMethod(tpl, "GetAntiAlias", GetAntiAlias);
	Nan::SetPrototypeMethod(tpl, "getAntiAlias", GetAntiAlias);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetColorMode", GetColorMode);
	Nan::SetPrototypeMethod(tpl, "getColorMode", GetColorMode);

	Nan::SetPrototypeMethod(tpl, "GetCompositeStrategy", GetCompositeStrategy);
	Nan::SetPrototypeMethod(tpl, "getCompositeStrategy", GetCompositeStrategy);

	Nan::SetPrototypeMethod(tpl, "GetEnable", GetEnable);
	Nan::SetPrototypeMethod(tpl, "getEnable", GetEnable);

	Nan::SetPrototypeMethod(tpl, "GetEnhanceContrast", GetEnhanceContrast);
	Nan::SetPrototypeMethod(tpl, "getEnhanceContrast", GetEnhanceContrast);

	Nan::SetPrototypeMethod(tpl, "GetEnhancedLIC", GetEnhancedLIC);
	Nan::SetPrototypeMethod(tpl, "getEnhancedLIC", GetEnhancedLIC);

	Nan::SetPrototypeMethod(tpl, "GetGenerateNoiseTexture", GetGenerateNoiseTexture);
	Nan::SetPrototypeMethod(tpl, "getGenerateNoiseTexture", GetGenerateNoiseTexture);

	Nan::SetPrototypeMethod(tpl, "GetHighColorContrastEnhancementFactor", GetHighColorContrastEnhancementFactor);
	Nan::SetPrototypeMethod(tpl, "getHighColorContrastEnhancementFactor", GetHighColorContrastEnhancementFactor);

	Nan::SetPrototypeMethod(tpl, "GetHighLICContrastEnhancementFactor", GetHighLICContrastEnhancementFactor);
	Nan::SetPrototypeMethod(tpl, "getHighLICContrastEnhancementFactor", GetHighLICContrastEnhancementFactor);

	Nan::SetPrototypeMethod(tpl, "GetImpulseNoiseBackgroundValue", GetImpulseNoiseBackgroundValue);
	Nan::SetPrototypeMethod(tpl, "getImpulseNoiseBackgroundValue", GetImpulseNoiseBackgroundValue);

	Nan::SetPrototypeMethod(tpl, "GetImpulseNoiseProbability", GetImpulseNoiseProbability);
	Nan::SetPrototypeMethod(tpl, "getImpulseNoiseProbability", GetImpulseNoiseProbability);

	Nan::SetPrototypeMethod(tpl, "GetLICIntensity", GetLICIntensity);
	Nan::SetPrototypeMethod(tpl, "getLICIntensity", GetLICIntensity);

	Nan::SetPrototypeMethod(tpl, "GetLowColorContrastEnhancementFactor", GetLowColorContrastEnhancementFactor);
	Nan::SetPrototypeMethod(tpl, "getLowColorContrastEnhancementFactor", GetLowColorContrastEnhancementFactor);

	Nan::SetPrototypeMethod(tpl, "GetLowLICContrastEnhancementFactor", GetLowLICContrastEnhancementFactor);
	Nan::SetPrototypeMethod(tpl, "getLowLICContrastEnhancementFactor", GetLowLICContrastEnhancementFactor);

	Nan::SetPrototypeMethod(tpl, "GetMapModeBias", GetMapModeBias);
	Nan::SetPrototypeMethod(tpl, "getMapModeBias", GetMapModeBias);

	Nan::SetPrototypeMethod(tpl, "GetMaskIntensity", GetMaskIntensity);
	Nan::SetPrototypeMethod(tpl, "getMaskIntensity", GetMaskIntensity);

	Nan::SetPrototypeMethod(tpl, "GetMaskOnSurface", GetMaskOnSurface);
	Nan::SetPrototypeMethod(tpl, "getMaskOnSurface", GetMaskOnSurface);

	Nan::SetPrototypeMethod(tpl, "GetMaskThreshold", GetMaskThreshold);
	Nan::SetPrototypeMethod(tpl, "getMaskThreshold", GetMaskThreshold);

	Nan::SetPrototypeMethod(tpl, "GetMaxNoiseValue", GetMaxNoiseValue);
	Nan::SetPrototypeMethod(tpl, "getMaxNoiseValue", GetMaxNoiseValue);

	Nan::SetPrototypeMethod(tpl, "GetMinNoiseValue", GetMinNoiseValue);
	Nan::SetPrototypeMethod(tpl, "getMinNoiseValue", GetMinNoiseValue);

	Nan::SetPrototypeMethod(tpl, "GetNoiseDataSet", GetNoiseDataSet);
	Nan::SetPrototypeMethod(tpl, "getNoiseDataSet", GetNoiseDataSet);

	Nan::SetPrototypeMethod(tpl, "GetNoiseGeneratorSeed", GetNoiseGeneratorSeed);
	Nan::SetPrototypeMethod(tpl, "getNoiseGeneratorSeed", GetNoiseGeneratorSeed);

	Nan::SetPrototypeMethod(tpl, "GetNoiseGrainSize", GetNoiseGrainSize);
	Nan::SetPrototypeMethod(tpl, "getNoiseGrainSize", GetNoiseGrainSize);

	Nan::SetPrototypeMethod(tpl, "GetNoiseTextureSize", GetNoiseTextureSize);
	Nan::SetPrototypeMethod(tpl, "getNoiseTextureSize", GetNoiseTextureSize);

	Nan::SetPrototypeMethod(tpl, "GetNoiseType", GetNoiseType);
	Nan::SetPrototypeMethod(tpl, "getNoiseType", GetNoiseType);

	Nan::SetPrototypeMethod(tpl, "GetNormalizeVectors", GetNormalizeVectors);
	Nan::SetPrototypeMethod(tpl, "getNormalizeVectors", GetNormalizeVectors);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfNoiseLevels", GetNumberOfNoiseLevels);
	Nan::SetPrototypeMethod(tpl, "getNumberOfNoiseLevels", GetNumberOfNoiseLevels);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfSteps", GetNumberOfSteps);
	Nan::SetPrototypeMethod(tpl, "getNumberOfSteps", GetNumberOfSteps);

	Nan::SetPrototypeMethod(tpl, "GetOutput", GetOutput);
	Nan::SetPrototypeMethod(tpl, "getOutput", GetOutput);

	Nan::SetPrototypeMethod(tpl, "GetStepSize", GetStepSize);
	Nan::SetPrototypeMethod(tpl, "getStepSize", GetStepSize);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "MaskOnSurfaceOff", MaskOnSurfaceOff);
	Nan::SetPrototypeMethod(tpl, "maskOnSurfaceOff", MaskOnSurfaceOff);

	Nan::SetPrototypeMethod(tpl, "MaskOnSurfaceOn", MaskOnSurfaceOn);
	Nan::SetPrototypeMethod(tpl, "maskOnSurfaceOn", MaskOnSurfaceOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "NormalizeVectorsOff", NormalizeVectorsOff);
	Nan::SetPrototypeMethod(tpl, "normalizeVectorsOff", NormalizeVectorsOff);

	Nan::SetPrototypeMethod(tpl, "NormalizeVectorsOn", NormalizeVectorsOn);
	Nan::SetPrototypeMethod(tpl, "normalizeVectorsOn", NormalizeVectorsOn);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAntiAlias", SetAntiAlias);
	Nan::SetPrototypeMethod(tpl, "setAntiAlias", SetAntiAlias);

	Nan::SetPrototypeMethod(tpl, "SetColorMode", SetColorMode);
	Nan::SetPrototypeMethod(tpl, "setColorMode", SetColorMode);

	Nan::SetPrototypeMethod(tpl, "SetCompositeStrategy", SetCompositeStrategy);
	Nan::SetPrototypeMethod(tpl, "setCompositeStrategy", SetCompositeStrategy);

	Nan::SetPrototypeMethod(tpl, "SetEnable", SetEnable);
	Nan::SetPrototypeMethod(tpl, "setEnable", SetEnable);

	Nan::SetPrototypeMethod(tpl, "SetEnableOff", SetEnableOff);
	Nan::SetPrototypeMethod(tpl, "setEnableOff", SetEnableOff);

	Nan::SetPrototypeMethod(tpl, "SetEnableOn", SetEnableOn);
	Nan::SetPrototypeMethod(tpl, "setEnableOn", SetEnableOn);

	Nan::SetPrototypeMethod(tpl, "SetEnhanceContrast", SetEnhanceContrast);
	Nan::SetPrototypeMethod(tpl, "setEnhanceContrast", SetEnhanceContrast);

	Nan::SetPrototypeMethod(tpl, "SetEnhancedLIC", SetEnhancedLIC);
	Nan::SetPrototypeMethod(tpl, "setEnhancedLIC", SetEnhancedLIC);

	Nan::SetPrototypeMethod(tpl, "SetGenerateNoiseTexture", SetGenerateNoiseTexture);
	Nan::SetPrototypeMethod(tpl, "setGenerateNoiseTexture", SetGenerateNoiseTexture);

	Nan::SetPrototypeMethod(tpl, "SetHighColorContrastEnhancementFactor", SetHighColorContrastEnhancementFactor);
	Nan::SetPrototypeMethod(tpl, "setHighColorContrastEnhancementFactor", SetHighColorContrastEnhancementFactor);

	Nan::SetPrototypeMethod(tpl, "SetHighLICContrastEnhancementFactor", SetHighLICContrastEnhancementFactor);
	Nan::SetPrototypeMethod(tpl, "setHighLICContrastEnhancementFactor", SetHighLICContrastEnhancementFactor);

	Nan::SetPrototypeMethod(tpl, "SetImpulseNoiseBackgroundValue", SetImpulseNoiseBackgroundValue);
	Nan::SetPrototypeMethod(tpl, "setImpulseNoiseBackgroundValue", SetImpulseNoiseBackgroundValue);

	Nan::SetPrototypeMethod(tpl, "SetImpulseNoiseProbability", SetImpulseNoiseProbability);
	Nan::SetPrototypeMethod(tpl, "setImpulseNoiseProbability", SetImpulseNoiseProbability);

	Nan::SetPrototypeMethod(tpl, "SetInputArrayToProcess", SetInputArrayToProcess);
	Nan::SetPrototypeMethod(tpl, "setInputArrayToProcess", SetInputArrayToProcess);

	Nan::SetPrototypeMethod(tpl, "SetLICIntensity", SetLICIntensity);
	Nan::SetPrototypeMethod(tpl, "setLICIntensity", SetLICIntensity);

	Nan::SetPrototypeMethod(tpl, "SetLowColorContrastEnhancementFactor", SetLowColorContrastEnhancementFactor);
	Nan::SetPrototypeMethod(tpl, "setLowColorContrastEnhancementFactor", SetLowColorContrastEnhancementFactor);

	Nan::SetPrototypeMethod(tpl, "SetLowLICContrastEnhancementFactor", SetLowLICContrastEnhancementFactor);
	Nan::SetPrototypeMethod(tpl, "setLowLICContrastEnhancementFactor", SetLowLICContrastEnhancementFactor);

	Nan::SetPrototypeMethod(tpl, "SetMapModeBias", SetMapModeBias);
	Nan::SetPrototypeMethod(tpl, "setMapModeBias", SetMapModeBias);

	Nan::SetPrototypeMethod(tpl, "SetMaskColor", SetMaskColor);
	Nan::SetPrototypeMethod(tpl, "setMaskColor", SetMaskColor);

	Nan::SetPrototypeMethod(tpl, "SetMaskIntensity", SetMaskIntensity);
	Nan::SetPrototypeMethod(tpl, "setMaskIntensity", SetMaskIntensity);

	Nan::SetPrototypeMethod(tpl, "SetMaskOnSurface", SetMaskOnSurface);
	Nan::SetPrototypeMethod(tpl, "setMaskOnSurface", SetMaskOnSurface);

	Nan::SetPrototypeMethod(tpl, "SetMaskThreshold", SetMaskThreshold);
	Nan::SetPrototypeMethod(tpl, "setMaskThreshold", SetMaskThreshold);

	Nan::SetPrototypeMethod(tpl, "SetMaxNoiseValue", SetMaxNoiseValue);
	Nan::SetPrototypeMethod(tpl, "setMaxNoiseValue", SetMaxNoiseValue);

	Nan::SetPrototypeMethod(tpl, "SetMinNoiseValue", SetMinNoiseValue);
	Nan::SetPrototypeMethod(tpl, "setMinNoiseValue", SetMinNoiseValue);

	Nan::SetPrototypeMethod(tpl, "SetNoiseDataSet", SetNoiseDataSet);
	Nan::SetPrototypeMethod(tpl, "setNoiseDataSet", SetNoiseDataSet);

	Nan::SetPrototypeMethod(tpl, "SetNoiseGeneratorSeed", SetNoiseGeneratorSeed);
	Nan::SetPrototypeMethod(tpl, "setNoiseGeneratorSeed", SetNoiseGeneratorSeed);

	Nan::SetPrototypeMethod(tpl, "SetNoiseGrainSize", SetNoiseGrainSize);
	Nan::SetPrototypeMethod(tpl, "setNoiseGrainSize", SetNoiseGrainSize);

	Nan::SetPrototypeMethod(tpl, "SetNoiseTextureSize", SetNoiseTextureSize);
	Nan::SetPrototypeMethod(tpl, "setNoiseTextureSize", SetNoiseTextureSize);

	Nan::SetPrototypeMethod(tpl, "SetNoiseType", SetNoiseType);
	Nan::SetPrototypeMethod(tpl, "setNoiseType", SetNoiseType);

	Nan::SetPrototypeMethod(tpl, "SetNormalizeVectors", SetNormalizeVectors);
	Nan::SetPrototypeMethod(tpl, "setNormalizeVectors", SetNormalizeVectors);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfNoiseLevels", SetNumberOfNoiseLevels);
	Nan::SetPrototypeMethod(tpl, "setNumberOfNoiseLevels", SetNumberOfNoiseLevels);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfSteps", SetNumberOfSteps);
	Nan::SetPrototypeMethod(tpl, "setNumberOfSteps", SetNumberOfSteps);

	Nan::SetPrototypeMethod(tpl, "SetStepSize", SetStepSize);
	Nan::SetPrototypeMethod(tpl, "setStepSize", SetStepSize);

	Nan::SetPrototypeMethod(tpl, "WriteTimerLog", WriteTimerLog);
	Nan::SetPrototypeMethod(tpl, "writeTimerLog", WriteTimerLog);

	ptpl.Reset( tpl );
}

void VtkSurfaceLICPainterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkSurfaceLICPainter> native = vtkSmartPointer<vtkSurfaceLICPainter>::New();
		VtkSurfaceLICPainterWrap* obj = new VtkSurfaceLICPainterWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkSurfaceLICPainterWrap::AntiAliasOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AntiAliasOff();
}

void VtkSurfaceLICPainterWrap::AntiAliasOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AntiAliasOn();
}

void VtkSurfaceLICPainterWrap::EnhancedLICOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EnhancedLICOff();
}

void VtkSurfaceLICPainterWrap::EnhancedLICOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EnhancedLICOn();
}

void VtkSurfaceLICPainterWrap::GetAntiAlias(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAntiAlias();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkSurfaceLICPainterWrap::GetColorMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetColorMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetCompositeStrategy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCompositeStrategy();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetEnable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEnable();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetEnhanceContrast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEnhanceContrast();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetEnhancedLIC(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEnhancedLIC();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetGenerateNoiseTexture(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGenerateNoiseTexture();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetHighColorContrastEnhancementFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHighColorContrastEnhancementFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetHighLICContrastEnhancementFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHighLICContrastEnhancementFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetImpulseNoiseBackgroundValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImpulseNoiseBackgroundValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetImpulseNoiseProbability(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImpulseNoiseProbability();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetLICIntensity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLICIntensity();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetLowColorContrastEnhancementFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLowColorContrastEnhancementFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetLowLICContrastEnhancementFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLowLICContrastEnhancementFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetMapModeBias(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMapModeBias();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetMaskIntensity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaskIntensity();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetMaskOnSurface(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaskOnSurface();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetMaskThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaskThreshold();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetMaxNoiseValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaxNoiseValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetMinNoiseValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMinNoiseValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetNoiseDataSet(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	vtkImageData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNoiseDataSet();
		VtkImageDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImageDataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageDataWrap *w = new VtkImageDataWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSurfaceLICPainterWrap::GetNoiseGeneratorSeed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNoiseGeneratorSeed();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetNoiseGrainSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNoiseGrainSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetNoiseTextureSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNoiseTextureSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetNoiseType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNoiseType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetNormalizeVectors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormalizeVectors();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetNumberOfNoiseLevels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfNoiseLevels();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetNumberOfSteps(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfSteps();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::GetOutput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	vtkDataObject * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutput();
		VtkDataObjectWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataObjectWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataObjectWrap *w = new VtkDataObjectWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSurfaceLICPainterWrap::GetStepSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStepSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSurfaceLICPainterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::MaskOnSurfaceOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->MaskOnSurfaceOff();
}

void VtkSurfaceLICPainterWrap::MaskOnSurfaceOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->MaskOnSurfaceOn();
}

void VtkSurfaceLICPainterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	vtkSurfaceLICPainter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkSurfaceLICPainterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkSurfaceLICPainterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkSurfaceLICPainterWrap *w = new VtkSurfaceLICPainterWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSurfaceLICPainterWrap::NormalizeVectorsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalizeVectorsOff();
}

void VtkSurfaceLICPainterWrap::NormalizeVectorsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalizeVectorsOn();
}

void VtkSurfaceLICPainterWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkSurfaceLICPainter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkSurfaceLICPainterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkSurfaceLICPainterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkSurfaceLICPainterWrap *w = new VtkSurfaceLICPainterWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetAntiAlias(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAntiAlias(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetColorMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColorMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetCompositeStrategy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCompositeStrategy(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetEnable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEnable(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetEnableOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetEnableOff();
}

void VtkSurfaceLICPainterWrap::SetEnableOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetEnableOn();
}

void VtkSurfaceLICPainterWrap::SetEnhanceContrast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEnhanceContrast(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetEnhancedLIC(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEnhancedLIC(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetGenerateNoiseTexture(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGenerateNoiseTexture(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetHighColorContrastEnhancementFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHighColorContrastEnhancementFactor(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetHighLICContrastEnhancementFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHighLICContrastEnhancementFactor(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetImpulseNoiseBackgroundValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetImpulseNoiseBackgroundValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetImpulseNoiseProbability(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetImpulseNoiseProbability(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetInputArrayToProcess(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetInputArrayToProcess(
				info[0]->Int32Value(),
				*a1
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetInputArrayToProcess(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetLICIntensity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLICIntensity(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetLowColorContrastEnhancementFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLowColorContrastEnhancementFactor(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetLowLICContrastEnhancementFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLowLICContrastEnhancementFactor(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetMapModeBias(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMapModeBias(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetMaskColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetMaskColor(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetMaskIntensity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaskIntensity(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetMaskOnSurface(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaskOnSurface(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetMaskThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaskThreshold(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetMaxNoiseValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaxNoiseValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetMinNoiseValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMinNoiseValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetNoiseDataSet(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImageDataWrap *a0 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNoiseDataSet(
			(vtkImageData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetNoiseGeneratorSeed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNoiseGeneratorSeed(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetNoiseGrainSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNoiseGrainSize(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetNoiseTextureSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNoiseTextureSize(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetNoiseType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNoiseType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetNormalizeVectors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalizeVectors(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetNumberOfNoiseLevels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfNoiseLevels(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetNumberOfSteps(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfSteps(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::SetStepSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetStepSize(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSurfaceLICPainterWrap::WriteTimerLog(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSurfaceLICPainterWrap *wrapper = ObjectWrap::Unwrap<VtkSurfaceLICPainterWrap>(info.Holder());
	vtkSurfaceLICPainter *native = (vtkSurfaceLICPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->WriteTimerLog(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

