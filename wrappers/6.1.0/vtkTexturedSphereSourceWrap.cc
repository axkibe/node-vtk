/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkTexturedSphereSourceWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkTexturedSphereSourceWrap::ptpl;

VtkTexturedSphereSourceWrap::VtkTexturedSphereSourceWrap()
{ }

VtkTexturedSphereSourceWrap::VtkTexturedSphereSourceWrap(vtkSmartPointer<vtkTexturedSphereSource> _native)
{ native = _native; }

VtkTexturedSphereSourceWrap::~VtkTexturedSphereSourceWrap()
{ }

void VtkTexturedSphereSourceWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkTexturedSphereSource").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("TexturedSphereSource").ToLocalChecked(), ConstructorGetter);
}

void VtkTexturedSphereSourceWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkTexturedSphereSourceWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkTexturedSphereSourceWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetOutputPointsPrecision", GetOutputPointsPrecision);
	Nan::SetPrototypeMethod(tpl, "getOutputPointsPrecision", GetOutputPointsPrecision);

	Nan::SetPrototypeMethod(tpl, "GetPhi", GetPhi);
	Nan::SetPrototypeMethod(tpl, "getPhi", GetPhi);

	Nan::SetPrototypeMethod(tpl, "GetPhiMaxValue", GetPhiMaxValue);
	Nan::SetPrototypeMethod(tpl, "getPhiMaxValue", GetPhiMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetPhiMinValue", GetPhiMinValue);
	Nan::SetPrototypeMethod(tpl, "getPhiMinValue", GetPhiMinValue);

	Nan::SetPrototypeMethod(tpl, "GetPhiResolution", GetPhiResolution);
	Nan::SetPrototypeMethod(tpl, "getPhiResolution", GetPhiResolution);

	Nan::SetPrototypeMethod(tpl, "GetPhiResolutionMaxValue", GetPhiResolutionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getPhiResolutionMaxValue", GetPhiResolutionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetPhiResolutionMinValue", GetPhiResolutionMinValue);
	Nan::SetPrototypeMethod(tpl, "getPhiResolutionMinValue", GetPhiResolutionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetRadius", GetRadius);
	Nan::SetPrototypeMethod(tpl, "getRadius", GetRadius);

	Nan::SetPrototypeMethod(tpl, "GetRadiusMaxValue", GetRadiusMaxValue);
	Nan::SetPrototypeMethod(tpl, "getRadiusMaxValue", GetRadiusMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetRadiusMinValue", GetRadiusMinValue);
	Nan::SetPrototypeMethod(tpl, "getRadiusMinValue", GetRadiusMinValue);

	Nan::SetPrototypeMethod(tpl, "GetTheta", GetTheta);
	Nan::SetPrototypeMethod(tpl, "getTheta", GetTheta);

	Nan::SetPrototypeMethod(tpl, "GetThetaMaxValue", GetThetaMaxValue);
	Nan::SetPrototypeMethod(tpl, "getThetaMaxValue", GetThetaMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetThetaMinValue", GetThetaMinValue);
	Nan::SetPrototypeMethod(tpl, "getThetaMinValue", GetThetaMinValue);

	Nan::SetPrototypeMethod(tpl, "GetThetaResolution", GetThetaResolution);
	Nan::SetPrototypeMethod(tpl, "getThetaResolution", GetThetaResolution);

	Nan::SetPrototypeMethod(tpl, "GetThetaResolutionMaxValue", GetThetaResolutionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getThetaResolutionMaxValue", GetThetaResolutionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetThetaResolutionMinValue", GetThetaResolutionMinValue);
	Nan::SetPrototypeMethod(tpl, "getThetaResolutionMinValue", GetThetaResolutionMinValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetOutputPointsPrecision", SetOutputPointsPrecision);
	Nan::SetPrototypeMethod(tpl, "setOutputPointsPrecision", SetOutputPointsPrecision);

	Nan::SetPrototypeMethod(tpl, "SetPhi", SetPhi);
	Nan::SetPrototypeMethod(tpl, "setPhi", SetPhi);

	Nan::SetPrototypeMethod(tpl, "SetPhiResolution", SetPhiResolution);
	Nan::SetPrototypeMethod(tpl, "setPhiResolution", SetPhiResolution);

	Nan::SetPrototypeMethod(tpl, "SetRadius", SetRadius);
	Nan::SetPrototypeMethod(tpl, "setRadius", SetRadius);

	Nan::SetPrototypeMethod(tpl, "SetTheta", SetTheta);
	Nan::SetPrototypeMethod(tpl, "setTheta", SetTheta);

	Nan::SetPrototypeMethod(tpl, "SetThetaResolution", SetThetaResolution);
	Nan::SetPrototypeMethod(tpl, "setThetaResolution", SetThetaResolution);

	ptpl.Reset( tpl );
}

void VtkTexturedSphereSourceWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkTexturedSphereSource> native = vtkSmartPointer<vtkTexturedSphereSource>::New();
		VtkTexturedSphereSourceWrap* obj = new VtkTexturedSphereSourceWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkTexturedSphereSourceWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkTexturedSphereSourceWrap::GetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputPointsPrecision();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetPhi(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPhi();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetPhiMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPhiMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetPhiMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPhiMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetPhiResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPhiResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetPhiResolutionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPhiResolutionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetPhiResolutionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPhiResolutionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetRadiusMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadiusMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetRadiusMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadiusMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetTheta(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTheta();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetThetaMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetThetaMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetThetaMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetThetaMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetThetaResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetThetaResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetThetaResolutionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetThetaResolutionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::GetThetaResolutionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetThetaResolutionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTexturedSphereSourceWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTexturedSphereSourceWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	vtkTexturedSphereSource * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkTexturedSphereSourceWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTexturedSphereSourceWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTexturedSphereSourceWrap *w = new VtkTexturedSphereSourceWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkTexturedSphereSourceWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkTexturedSphereSource * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkTexturedSphereSourceWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkTexturedSphereSourceWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkTexturedSphereSourceWrap *w = new VtkTexturedSphereSourceWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTexturedSphereSourceWrap::SetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputPointsPrecision(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTexturedSphereSourceWrap::SetPhi(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPhi(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTexturedSphereSourceWrap::SetPhiResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPhiResolution(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTexturedSphereSourceWrap::SetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTexturedSphereSourceWrap::SetTheta(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTheta(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTexturedSphereSourceWrap::SetThetaResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTexturedSphereSourceWrap *wrapper = ObjectWrap::Unwrap<VtkTexturedSphereSourceWrap>(info.Holder());
	vtkTexturedSphereSource *native = (vtkTexturedSphereSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetThetaResolution(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

