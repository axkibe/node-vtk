/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkButtonSourceWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkButtonSourceWrap::ptpl;

VtkButtonSourceWrap::VtkButtonSourceWrap()
{ }

VtkButtonSourceWrap::VtkButtonSourceWrap(vtkSmartPointer<vtkButtonSource> _native)
{ native = _native; }

VtkButtonSourceWrap::~VtkButtonSourceWrap()
{ }

void VtkButtonSourceWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkButtonSource").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ButtonSource").ToLocalChecked(), ConstructorGetter);
}

void VtkButtonSourceWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkButtonSourceWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkButtonSourceWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetTextureStyle", GetTextureStyle);
	Nan::SetPrototypeMethod(tpl, "getTextureStyle", GetTextureStyle);

	Nan::SetPrototypeMethod(tpl, "GetTextureStyleMaxValue", GetTextureStyleMaxValue);
	Nan::SetPrototypeMethod(tpl, "getTextureStyleMaxValue", GetTextureStyleMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetTextureStyleMinValue", GetTextureStyleMinValue);
	Nan::SetPrototypeMethod(tpl, "getTextureStyleMinValue", GetTextureStyleMinValue);

	Nan::SetPrototypeMethod(tpl, "GetTwoSided", GetTwoSided);
	Nan::SetPrototypeMethod(tpl, "getTwoSided", GetTwoSided);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCenter", SetCenter);
	Nan::SetPrototypeMethod(tpl, "setCenter", SetCenter);

	Nan::SetPrototypeMethod(tpl, "SetShoulderTextureCoordinate", SetShoulderTextureCoordinate);
	Nan::SetPrototypeMethod(tpl, "setShoulderTextureCoordinate", SetShoulderTextureCoordinate);

	Nan::SetPrototypeMethod(tpl, "SetTextureDimensions", SetTextureDimensions);
	Nan::SetPrototypeMethod(tpl, "setTextureDimensions", SetTextureDimensions);

	Nan::SetPrototypeMethod(tpl, "SetTextureStyle", SetTextureStyle);
	Nan::SetPrototypeMethod(tpl, "setTextureStyle", SetTextureStyle);

	Nan::SetPrototypeMethod(tpl, "SetTextureStyleToFitImage", SetTextureStyleToFitImage);
	Nan::SetPrototypeMethod(tpl, "setTextureStyleToFitImage", SetTextureStyleToFitImage);

	Nan::SetPrototypeMethod(tpl, "SetTextureStyleToProportional", SetTextureStyleToProportional);
	Nan::SetPrototypeMethod(tpl, "setTextureStyleToProportional", SetTextureStyleToProportional);

	Nan::SetPrototypeMethod(tpl, "SetTwoSided", SetTwoSided);
	Nan::SetPrototypeMethod(tpl, "setTwoSided", SetTwoSided);

	Nan::SetPrototypeMethod(tpl, "TwoSidedOff", TwoSidedOff);
	Nan::SetPrototypeMethod(tpl, "twoSidedOff", TwoSidedOff);

	Nan::SetPrototypeMethod(tpl, "TwoSidedOn", TwoSidedOn);
	Nan::SetPrototypeMethod(tpl, "twoSidedOn", TwoSidedOn);

	ptpl.Reset( tpl );
}

void VtkButtonSourceWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkButtonSourceWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkButtonSourceWrap::GetTextureStyle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTextureStyle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkButtonSourceWrap::GetTextureStyleMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTextureStyleMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkButtonSourceWrap::GetTextureStyleMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTextureStyleMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkButtonSourceWrap::GetTwoSided(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTwoSided();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkButtonSourceWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkButtonSourceWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	vtkButtonSource * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkButtonSourceWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkButtonSourceWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkButtonSourceWrap *w = new VtkButtonSourceWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkButtonSourceWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkButtonSource * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkButtonSourceWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkButtonSourceWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkButtonSourceWrap *w = new VtkButtonSourceWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkButtonSourceWrap::SetCenter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetCenter(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkButtonSourceWrap::SetShoulderTextureCoordinate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetShoulderTextureCoordinate(
				info[0]->NumberValue(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkButtonSourceWrap::SetTextureDimensions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetTextureDimensions(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkButtonSourceWrap::SetTextureStyle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTextureStyle(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkButtonSourceWrap::SetTextureStyleToFitImage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetTextureStyleToFitImage();
}

void VtkButtonSourceWrap::SetTextureStyleToProportional(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetTextureStyleToProportional();
}

void VtkButtonSourceWrap::SetTwoSided(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTwoSided(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkButtonSourceWrap::TwoSidedOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TwoSidedOff();
}

void VtkButtonSourceWrap::TwoSidedOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkButtonSourceWrap *wrapper = ObjectWrap::Unwrap<VtkButtonSourceWrap>(info.Holder());
	vtkButtonSource *native = (vtkButtonSource *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TwoSidedOn();
}

