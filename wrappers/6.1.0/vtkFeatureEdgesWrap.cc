/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkFeatureEdgesWrap.h"
#include "vtkObjectWrap.h"
#include "vtkIncrementalPointLocatorWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkFeatureEdgesWrap::ptpl;

VtkFeatureEdgesWrap::VtkFeatureEdgesWrap()
{ }

VtkFeatureEdgesWrap::VtkFeatureEdgesWrap(vtkSmartPointer<vtkFeatureEdges> _native)
{ native = _native; }

VtkFeatureEdgesWrap::~VtkFeatureEdgesWrap()
{ }

void VtkFeatureEdgesWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkFeatureEdges").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("FeatureEdges").ToLocalChecked(), ConstructorGetter);
}

void VtkFeatureEdgesWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkFeatureEdgesWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkFeatureEdgesWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "BoundaryEdgesOff", BoundaryEdgesOff);
	Nan::SetPrototypeMethod(tpl, "boundaryEdgesOff", BoundaryEdgesOff);

	Nan::SetPrototypeMethod(tpl, "BoundaryEdgesOn", BoundaryEdgesOn);
	Nan::SetPrototypeMethod(tpl, "boundaryEdgesOn", BoundaryEdgesOn);

	Nan::SetPrototypeMethod(tpl, "ColoringOff", ColoringOff);
	Nan::SetPrototypeMethod(tpl, "coloringOff", ColoringOff);

	Nan::SetPrototypeMethod(tpl, "ColoringOn", ColoringOn);
	Nan::SetPrototypeMethod(tpl, "coloringOn", ColoringOn);

	Nan::SetPrototypeMethod(tpl, "CreateDefaultLocator", CreateDefaultLocator);
	Nan::SetPrototypeMethod(tpl, "createDefaultLocator", CreateDefaultLocator);

	Nan::SetPrototypeMethod(tpl, "FeatureEdgesOff", FeatureEdgesOff);
	Nan::SetPrototypeMethod(tpl, "featureEdgesOff", FeatureEdgesOff);

	Nan::SetPrototypeMethod(tpl, "FeatureEdgesOn", FeatureEdgesOn);
	Nan::SetPrototypeMethod(tpl, "featureEdgesOn", FeatureEdgesOn);

	Nan::SetPrototypeMethod(tpl, "GetBoundaryEdges", GetBoundaryEdges);
	Nan::SetPrototypeMethod(tpl, "getBoundaryEdges", GetBoundaryEdges);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetColoring", GetColoring);
	Nan::SetPrototypeMethod(tpl, "getColoring", GetColoring);

	Nan::SetPrototypeMethod(tpl, "GetFeatureAngle", GetFeatureAngle);
	Nan::SetPrototypeMethod(tpl, "getFeatureAngle", GetFeatureAngle);

	Nan::SetPrototypeMethod(tpl, "GetFeatureAngleMaxValue", GetFeatureAngleMaxValue);
	Nan::SetPrototypeMethod(tpl, "getFeatureAngleMaxValue", GetFeatureAngleMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetFeatureAngleMinValue", GetFeatureAngleMinValue);
	Nan::SetPrototypeMethod(tpl, "getFeatureAngleMinValue", GetFeatureAngleMinValue);

	Nan::SetPrototypeMethod(tpl, "GetFeatureEdges", GetFeatureEdges);
	Nan::SetPrototypeMethod(tpl, "getFeatureEdges", GetFeatureEdges);

	Nan::SetPrototypeMethod(tpl, "GetLocator", GetLocator);
	Nan::SetPrototypeMethod(tpl, "getLocator", GetLocator);

	Nan::SetPrototypeMethod(tpl, "GetManifoldEdges", GetManifoldEdges);
	Nan::SetPrototypeMethod(tpl, "getManifoldEdges", GetManifoldEdges);

	Nan::SetPrototypeMethod(tpl, "GetNonManifoldEdges", GetNonManifoldEdges);
	Nan::SetPrototypeMethod(tpl, "getNonManifoldEdges", GetNonManifoldEdges);

	Nan::SetPrototypeMethod(tpl, "GetOutputPointsPrecision", GetOutputPointsPrecision);
	Nan::SetPrototypeMethod(tpl, "getOutputPointsPrecision", GetOutputPointsPrecision);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "ManifoldEdgesOff", ManifoldEdgesOff);
	Nan::SetPrototypeMethod(tpl, "manifoldEdgesOff", ManifoldEdgesOff);

	Nan::SetPrototypeMethod(tpl, "ManifoldEdgesOn", ManifoldEdgesOn);
	Nan::SetPrototypeMethod(tpl, "manifoldEdgesOn", ManifoldEdgesOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "NonManifoldEdgesOff", NonManifoldEdgesOff);
	Nan::SetPrototypeMethod(tpl, "nonManifoldEdgesOff", NonManifoldEdgesOff);

	Nan::SetPrototypeMethod(tpl, "NonManifoldEdgesOn", NonManifoldEdgesOn);
	Nan::SetPrototypeMethod(tpl, "nonManifoldEdgesOn", NonManifoldEdgesOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBoundaryEdges", SetBoundaryEdges);
	Nan::SetPrototypeMethod(tpl, "setBoundaryEdges", SetBoundaryEdges);

	Nan::SetPrototypeMethod(tpl, "SetColoring", SetColoring);
	Nan::SetPrototypeMethod(tpl, "setColoring", SetColoring);

	Nan::SetPrototypeMethod(tpl, "SetFeatureAngle", SetFeatureAngle);
	Nan::SetPrototypeMethod(tpl, "setFeatureAngle", SetFeatureAngle);

	Nan::SetPrototypeMethod(tpl, "SetFeatureEdges", SetFeatureEdges);
	Nan::SetPrototypeMethod(tpl, "setFeatureEdges", SetFeatureEdges);

	Nan::SetPrototypeMethod(tpl, "SetLocator", SetLocator);
	Nan::SetPrototypeMethod(tpl, "setLocator", SetLocator);

	Nan::SetPrototypeMethod(tpl, "SetManifoldEdges", SetManifoldEdges);
	Nan::SetPrototypeMethod(tpl, "setManifoldEdges", SetManifoldEdges);

	Nan::SetPrototypeMethod(tpl, "SetNonManifoldEdges", SetNonManifoldEdges);
	Nan::SetPrototypeMethod(tpl, "setNonManifoldEdges", SetNonManifoldEdges);

	Nan::SetPrototypeMethod(tpl, "SetOutputPointsPrecision", SetOutputPointsPrecision);
	Nan::SetPrototypeMethod(tpl, "setOutputPointsPrecision", SetOutputPointsPrecision);

	ptpl.Reset( tpl );
}

void VtkFeatureEdgesWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkFeatureEdges> native = vtkSmartPointer<vtkFeatureEdges>::New();
		VtkFeatureEdgesWrap* obj = new VtkFeatureEdgesWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkFeatureEdgesWrap::BoundaryEdgesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BoundaryEdgesOff();
}

void VtkFeatureEdgesWrap::BoundaryEdgesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BoundaryEdgesOn();
}

void VtkFeatureEdgesWrap::ColoringOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ColoringOff();
}

void VtkFeatureEdgesWrap::ColoringOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ColoringOn();
}

void VtkFeatureEdgesWrap::CreateDefaultLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CreateDefaultLocator();
}

void VtkFeatureEdgesWrap::FeatureEdgesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FeatureEdgesOff();
}

void VtkFeatureEdgesWrap::FeatureEdgesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FeatureEdgesOn();
}

void VtkFeatureEdgesWrap::GetBoundaryEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBoundaryEdges();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFeatureEdgesWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkFeatureEdgesWrap::GetColoring(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetColoring();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFeatureEdgesWrap::GetFeatureAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFeatureAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFeatureEdgesWrap::GetFeatureAngleMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFeatureAngleMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFeatureEdgesWrap::GetFeatureAngleMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFeatureAngleMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFeatureEdgesWrap::GetFeatureEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFeatureEdges();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFeatureEdgesWrap::GetLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	vtkIncrementalPointLocator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLocator();
		VtkIncrementalPointLocatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkIncrementalPointLocatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkIncrementalPointLocatorWrap *w = new VtkIncrementalPointLocatorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkFeatureEdgesWrap::GetManifoldEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetManifoldEdges();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFeatureEdgesWrap::GetNonManifoldEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNonManifoldEdges();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFeatureEdgesWrap::GetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputPointsPrecision();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFeatureEdgesWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFeatureEdgesWrap::ManifoldEdgesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ManifoldEdgesOff();
}

void VtkFeatureEdgesWrap::ManifoldEdgesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ManifoldEdgesOn();
}

void VtkFeatureEdgesWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	vtkFeatureEdges * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkFeatureEdgesWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkFeatureEdgesWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkFeatureEdgesWrap *w = new VtkFeatureEdgesWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkFeatureEdgesWrap::NonManifoldEdgesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NonManifoldEdgesOff();
}

void VtkFeatureEdgesWrap::NonManifoldEdgesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NonManifoldEdgesOn();
}

void VtkFeatureEdgesWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkFeatureEdges * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkFeatureEdgesWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkFeatureEdgesWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkFeatureEdgesWrap *w = new VtkFeatureEdgesWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFeatureEdgesWrap::SetBoundaryEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBoundaryEdges(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFeatureEdgesWrap::SetColoring(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColoring(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFeatureEdgesWrap::SetFeatureAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFeatureAngle(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFeatureEdgesWrap::SetFeatureEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFeatureEdges(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFeatureEdgesWrap::SetLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkIncrementalPointLocatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkIncrementalPointLocatorWrap *a0 = ObjectWrap::Unwrap<VtkIncrementalPointLocatorWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLocator(
			(vtkIncrementalPointLocator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFeatureEdgesWrap::SetManifoldEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetManifoldEdges(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFeatureEdgesWrap::SetNonManifoldEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNonManifoldEdges(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFeatureEdgesWrap::SetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFeatureEdgesWrap *wrapper = ObjectWrap::Unwrap<VtkFeatureEdgesWrap>(info.Holder());
	vtkFeatureEdges *native = (vtkFeatureEdges *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputPointsPrecision(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

