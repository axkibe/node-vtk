/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkFieldDataWrap.h"
#include "vtkAbstractArrayWrap.h"
#include "vtkDataArrayWrap.h"
#include "vtkIdListWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkFieldDataWrap::ptpl;

VtkFieldDataWrap::VtkFieldDataWrap()
{ }

VtkFieldDataWrap::VtkFieldDataWrap(vtkSmartPointer<vtkFieldData> _native)
{ native = _native; }

VtkFieldDataWrap::~VtkFieldDataWrap()
{ }

void VtkFieldDataWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkFieldData").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("FieldData").ToLocalChecked(), ConstructorGetter);
}

void VtkFieldDataWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkFieldDataWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkFieldDataWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddArray", AddArray);
	Nan::SetPrototypeMethod(tpl, "addArray", AddArray);

	Nan::SetPrototypeMethod(tpl, "AllocateArrays", AllocateArrays);
	Nan::SetPrototypeMethod(tpl, "allocateArrays", AllocateArrays);

	Nan::SetPrototypeMethod(tpl, "CopyAllOff", CopyAllOff);
	Nan::SetPrototypeMethod(tpl, "copyAllOff", CopyAllOff);

	Nan::SetPrototypeMethod(tpl, "CopyAllOn", CopyAllOn);
	Nan::SetPrototypeMethod(tpl, "copyAllOn", CopyAllOn);

	Nan::SetPrototypeMethod(tpl, "CopyFieldOff", CopyFieldOff);
	Nan::SetPrototypeMethod(tpl, "copyFieldOff", CopyFieldOff);

	Nan::SetPrototypeMethod(tpl, "CopyFieldOn", CopyFieldOn);
	Nan::SetPrototypeMethod(tpl, "copyFieldOn", CopyFieldOn);

	Nan::SetPrototypeMethod(tpl, "CopyStructure", CopyStructure);
	Nan::SetPrototypeMethod(tpl, "copyStructure", CopyStructure);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "GetAbstractArray", GetAbstractArray);
	Nan::SetPrototypeMethod(tpl, "getAbstractArray", GetAbstractArray);

	Nan::SetPrototypeMethod(tpl, "GetArray", GetArray);
	Nan::SetPrototypeMethod(tpl, "getArray", GetArray);

	Nan::SetPrototypeMethod(tpl, "GetArrayName", GetArrayName);
	Nan::SetPrototypeMethod(tpl, "getArrayName", GetArrayName);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetField", GetField);
	Nan::SetPrototypeMethod(tpl, "getField", GetField);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfArrays", GetNumberOfArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfArrays", GetNumberOfArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComponents", GetNumberOfComponents);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComponents", GetNumberOfComponents);

	Nan::SetPrototypeMethod(tpl, "HasArray", HasArray);
	Nan::SetPrototypeMethod(tpl, "hasArray", HasArray);

	Nan::SetPrototypeMethod(tpl, "Initialize", Initialize);
	Nan::SetPrototypeMethod(tpl, "initialize", Initialize);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PassData", PassData);
	Nan::SetPrototypeMethod(tpl, "passData", PassData);

	Nan::SetPrototypeMethod(tpl, "RemoveArray", RemoveArray);
	Nan::SetPrototypeMethod(tpl, "removeArray", RemoveArray);

	Nan::SetPrototypeMethod(tpl, "Reset", Reset);
	Nan::SetPrototypeMethod(tpl, "reset", Reset);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "ShallowCopy", ShallowCopy);
	Nan::SetPrototypeMethod(tpl, "shallowCopy", ShallowCopy);

	Nan::SetPrototypeMethod(tpl, "Squeeze", Squeeze);
	Nan::SetPrototypeMethod(tpl, "squeeze", Squeeze);

	ptpl.Reset( tpl );
}

void VtkFieldDataWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkFieldData> native = vtkSmartPointer<vtkFieldData>::New();
		VtkFieldDataWrap* obj = new VtkFieldDataWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkFieldDataWrap::AddArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractArrayWrap *a0 = ObjectWrap::Unwrap<VtkAbstractArrayWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->AddArray(
			(vtkAbstractArray *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::AllocateArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AllocateArrays(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::CopyAllOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->CopyAllOff(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::CopyAllOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->CopyAllOn(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::CopyFieldOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->CopyFieldOff(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::CopyFieldOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->CopyFieldOn(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::CopyStructure(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkFieldDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkFieldDataWrap *a0 = ObjectWrap::Unwrap<VtkFieldDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->CopyStructure(
			(vtkFieldData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkFieldDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkFieldDataWrap *a0 = ObjectWrap::Unwrap<VtkFieldDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DeepCopy(
			(vtkFieldData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::GetAbstractArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		vtkAbstractArray * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetAbstractArray(
			*a0
		);
			VtkAbstractArrayWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkAbstractArrayWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAbstractArrayWrap *w = new VtkAbstractArrayWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkAbstractArray * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetAbstractArray(
			info[0]->Int32Value()
		);
			VtkAbstractArrayWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkAbstractArrayWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAbstractArrayWrap *w = new VtkAbstractArrayWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::GetArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		vtkDataArray * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetArray(
			*a0
		);
			VtkDataArrayWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkDataArrayWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDataArrayWrap *w = new VtkDataArrayWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkDataArray * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetArray(
			info[0]->Int32Value()
		);
			VtkDataArrayWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkDataArrayWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDataArrayWrap *w = new VtkDataArrayWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::GetArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkFieldDataWrap::GetField(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkIdListWrap::ptpl))->HasInstance(info[0]))
	{
		VtkIdListWrap *a0 = ObjectWrap::Unwrap<VtkIdListWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkFieldDataWrap::ptpl))->HasInstance(info[1]))
		{
			VtkFieldDataWrap *a1 = ObjectWrap::Unwrap<VtkFieldDataWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetField(
				(vtkIdList *) a0->native.GetPointer(),
				(vtkFieldData *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::GetNumberOfArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFieldDataWrap::GetNumberOfComponents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfComponents();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFieldDataWrap::HasArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->HasArray(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Initialize();
}

void VtkFieldDataWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	vtkFieldData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkFieldDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkFieldDataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkFieldDataWrap *w = new VtkFieldDataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkFieldDataWrap::PassData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkFieldDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkFieldDataWrap *a0 = ObjectWrap::Unwrap<VtkFieldDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->PassData(
			(vtkFieldData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::RemoveArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveArray(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::Reset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Reset();
}

void VtkFieldDataWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkFieldData * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkFieldDataWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkFieldDataWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkFieldDataWrap *w = new VtkFieldDataWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkFieldDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkFieldDataWrap *a0 = ObjectWrap::Unwrap<VtkFieldDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ShallowCopy(
			(vtkFieldData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFieldDataWrap::Squeeze(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFieldDataWrap *wrapper = ObjectWrap::Unwrap<VtkFieldDataWrap>(info.Holder());
	vtkFieldData *native = (vtkFieldData *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Squeeze();
}

