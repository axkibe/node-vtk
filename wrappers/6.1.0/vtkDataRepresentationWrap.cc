/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPassInputTypeAlgorithmWrap.h"
#include "vtkDataRepresentationWrap.h"
#include "vtkObjectWrap.h"
#include "vtkAlgorithmOutputWrap.h"
#include "vtkAnnotationLinkWrap.h"
#include "vtkViewThemeWrap.h"
#include "vtkViewWrap.h"
#include "vtkSelectionWrap.h"
#include "vtkAnnotationLayersWrap.h"
#include "vtkStringArrayWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkDataRepresentationWrap::ptpl;

VtkDataRepresentationWrap::VtkDataRepresentationWrap()
{ }

VtkDataRepresentationWrap::VtkDataRepresentationWrap(vtkSmartPointer<vtkDataRepresentation> _native)
{ native = _native; }

VtkDataRepresentationWrap::~VtkDataRepresentationWrap()
{ }

void VtkDataRepresentationWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkDataRepresentation").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("DataRepresentation").ToLocalChecked(), ConstructorGetter);
}

void VtkDataRepresentationWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkDataRepresentationWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPassInputTypeAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPassInputTypeAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkDataRepresentationWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "Annotate", Annotate);
	Nan::SetPrototypeMethod(tpl, "annotate", Annotate);

	Nan::SetPrototypeMethod(tpl, "ApplyViewTheme", ApplyViewTheme);
	Nan::SetPrototypeMethod(tpl, "applyViewTheme", ApplyViewTheme);

	Nan::SetPrototypeMethod(tpl, "ConvertSelection", ConvertSelection);
	Nan::SetPrototypeMethod(tpl, "convertSelection", ConvertSelection);

	Nan::SetPrototypeMethod(tpl, "GetAnnotationLink", GetAnnotationLink);
	Nan::SetPrototypeMethod(tpl, "getAnnotationLink", GetAnnotationLink);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetInputConnection", GetInputConnection);
	Nan::SetPrototypeMethod(tpl, "getInputConnection", GetInputConnection);

	Nan::SetPrototypeMethod(tpl, "GetInternalAnnotationOutputPort", GetInternalAnnotationOutputPort);
	Nan::SetPrototypeMethod(tpl, "getInternalAnnotationOutputPort", GetInternalAnnotationOutputPort);

	Nan::SetPrototypeMethod(tpl, "GetInternalOutputPort", GetInternalOutputPort);
	Nan::SetPrototypeMethod(tpl, "getInternalOutputPort", GetInternalOutputPort);

	Nan::SetPrototypeMethod(tpl, "GetInternalSelectionOutputPort", GetInternalSelectionOutputPort);
	Nan::SetPrototypeMethod(tpl, "getInternalSelectionOutputPort", GetInternalSelectionOutputPort);

	Nan::SetPrototypeMethod(tpl, "GetSelectionArrayName", GetSelectionArrayName);
	Nan::SetPrototypeMethod(tpl, "getSelectionArrayName", GetSelectionArrayName);

	Nan::SetPrototypeMethod(tpl, "GetSelectionArrayNames", GetSelectionArrayNames);
	Nan::SetPrototypeMethod(tpl, "getSelectionArrayNames", GetSelectionArrayNames);

	Nan::SetPrototypeMethod(tpl, "GetSelectionType", GetSelectionType);
	Nan::SetPrototypeMethod(tpl, "getSelectionType", GetSelectionType);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "Select", Select);
	Nan::SetPrototypeMethod(tpl, "select", Select);

	Nan::SetPrototypeMethod(tpl, "SelectableOff", SelectableOff);
	Nan::SetPrototypeMethod(tpl, "selectableOff", SelectableOff);

	Nan::SetPrototypeMethod(tpl, "SelectableOn", SelectableOn);
	Nan::SetPrototypeMethod(tpl, "selectableOn", SelectableOn);

	Nan::SetPrototypeMethod(tpl, "SetAnnotationLink", SetAnnotationLink);
	Nan::SetPrototypeMethod(tpl, "setAnnotationLink", SetAnnotationLink);

	Nan::SetPrototypeMethod(tpl, "SetSelectionArrayName", SetSelectionArrayName);
	Nan::SetPrototypeMethod(tpl, "setSelectionArrayName", SetSelectionArrayName);

	Nan::SetPrototypeMethod(tpl, "SetSelectionArrayNames", SetSelectionArrayNames);
	Nan::SetPrototypeMethod(tpl, "setSelectionArrayNames", SetSelectionArrayNames);

	Nan::SetPrototypeMethod(tpl, "SetSelectionType", SetSelectionType);
	Nan::SetPrototypeMethod(tpl, "setSelectionType", SetSelectionType);

	Nan::SetPrototypeMethod(tpl, "UpdateAnnotations", UpdateAnnotations);
	Nan::SetPrototypeMethod(tpl, "updateAnnotations", UpdateAnnotations);

	Nan::SetPrototypeMethod(tpl, "UpdateSelection", UpdateSelection);
	Nan::SetPrototypeMethod(tpl, "updateSelection", UpdateSelection);

	ptpl.Reset( tpl );
}

void VtkDataRepresentationWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkDataRepresentation> native = vtkSmartPointer<vtkDataRepresentation>::New();
		VtkDataRepresentationWrap* obj = new VtkDataRepresentationWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkDataRepresentationWrap::Annotate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewWrap *a0 = ObjectWrap::Unwrap<VtkViewWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkAnnotationLayersWrap::ptpl))->HasInstance(info[1]))
		{
			VtkAnnotationLayersWrap *a1 = ObjectWrap::Unwrap<VtkAnnotationLayersWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->Annotate(
				(vtkView *) a0->native.GetPointer(),
				(vtkAnnotationLayers *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataRepresentationWrap::ApplyViewTheme(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewThemeWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewThemeWrap *a0 = ObjectWrap::Unwrap<VtkViewThemeWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ApplyViewTheme(
			(vtkViewTheme *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataRepresentationWrap::ConvertSelection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewWrap *a0 = ObjectWrap::Unwrap<VtkViewWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkSelectionWrap::ptpl))->HasInstance(info[1]))
		{
			VtkSelectionWrap *a1 = ObjectWrap::Unwrap<VtkSelectionWrap>(info[1]->ToObject());
			vtkSelection * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->ConvertSelection(
				(vtkView *) a0->native.GetPointer(),
				(vtkSelection *) a1->native.GetPointer()
			);
				VtkSelectionWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkSelectionWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkSelectionWrap *w = new VtkSelectionWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataRepresentationWrap::GetAnnotationLink(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	vtkAnnotationLink * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAnnotationLink();
		VtkAnnotationLinkWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAnnotationLinkWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAnnotationLinkWrap *w = new VtkAnnotationLinkWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataRepresentationWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDataRepresentationWrap::GetInputConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkAlgorithmOutput * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetInputConnection(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
				VtkAlgorithmOutputWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkAlgorithmOutputWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataRepresentationWrap::GetInternalAnnotationOutputPort(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkAlgorithmOutput * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetInternalAnnotationOutputPort(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
				VtkAlgorithmOutputWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkAlgorithmOutputWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
		vtkAlgorithmOutput * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetInternalAnnotationOutputPort(
			info[0]->Int32Value()
		);
			VtkAlgorithmOutputWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkAlgorithmOutputWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	vtkAlgorithmOutput * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInternalAnnotationOutputPort();
		VtkAlgorithmOutputWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAlgorithmOutputWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataRepresentationWrap::GetInternalOutputPort(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkAlgorithmOutput * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetInternalOutputPort(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
				VtkAlgorithmOutputWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkAlgorithmOutputWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
		vtkAlgorithmOutput * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetInternalOutputPort(
			info[0]->Int32Value()
		);
			VtkAlgorithmOutputWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkAlgorithmOutputWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	vtkAlgorithmOutput * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInternalOutputPort();
		VtkAlgorithmOutputWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAlgorithmOutputWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataRepresentationWrap::GetInternalSelectionOutputPort(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkAlgorithmOutput * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetInternalSelectionOutputPort(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
				VtkAlgorithmOutputWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkAlgorithmOutputWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
		vtkAlgorithmOutput * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetInternalSelectionOutputPort(
			info[0]->Int32Value()
		);
			VtkAlgorithmOutputWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkAlgorithmOutputWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	vtkAlgorithmOutput * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInternalSelectionOutputPort();
		VtkAlgorithmOutputWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAlgorithmOutputWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataRepresentationWrap::GetSelectionArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectionArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDataRepresentationWrap::GetSelectionArrayNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	vtkStringArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectionArrayNames();
		VtkStringArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkStringArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStringArrayWrap *w = new VtkStringArrayWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataRepresentationWrap::GetSelectionType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectionType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataRepresentationWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataRepresentationWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	vtkDataRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkDataRepresentationWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataRepresentationWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataRepresentationWrap *w = new VtkDataRepresentationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataRepresentationWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkDataRepresentation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkDataRepresentationWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkDataRepresentationWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDataRepresentationWrap *w = new VtkDataRepresentationWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataRepresentationWrap::Select(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewWrap *a0 = ObjectWrap::Unwrap<VtkViewWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkSelectionWrap::ptpl))->HasInstance(info[1]))
		{
			VtkSelectionWrap *a1 = ObjectWrap::Unwrap<VtkSelectionWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->Select(
				(vtkView *) a0->native.GetPointer(),
				(vtkSelection *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataRepresentationWrap::SelectableOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SelectableOff();
}

void VtkDataRepresentationWrap::SelectableOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SelectableOn();
}

void VtkDataRepresentationWrap::SetAnnotationLink(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAnnotationLinkWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAnnotationLinkWrap *a0 = ObjectWrap::Unwrap<VtkAnnotationLinkWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAnnotationLink(
			(vtkAnnotationLink *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataRepresentationWrap::SetSelectionArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSelectionArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataRepresentationWrap::SetSelectionArrayNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkStringArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkStringArrayWrap *a0 = ObjectWrap::Unwrap<VtkStringArrayWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSelectionArrayNames(
			(vtkStringArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataRepresentationWrap::SetSelectionType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSelectionType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataRepresentationWrap::UpdateAnnotations(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAnnotationLayersWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAnnotationLayersWrap *a0 = ObjectWrap::Unwrap<VtkAnnotationLayersWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->UpdateAnnotations(
			(vtkAnnotationLayers *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataRepresentationWrap::UpdateSelection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkDataRepresentationWrap>(info.Holder());
	vtkDataRepresentation *native = (vtkDataRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkSelectionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkSelectionWrap *a0 = ObjectWrap::Unwrap<VtkSelectionWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->UpdateSelection(
			(vtkSelection *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

