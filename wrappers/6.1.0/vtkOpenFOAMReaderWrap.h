/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKOPENFOAMREADERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKOPENFOAMREADERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkOpenFOAMReader.h>

#include "vtkMultiBlockDataSetAlgorithmWrap.h"

class VtkOpenFOAMReaderWrap : public VtkMultiBlockDataSetAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkOpenFOAMReaderWrap(vtkSmartPointer<vtkOpenFOAMReader>);
		VtkOpenFOAMReaderWrap();
		~VtkOpenFOAMReaderWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AddDimensionsToArrayNamesOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void AddDimensionsToArrayNamesOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CacheMeshOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CacheMeshOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CanReadFile(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CreateCellToPointOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CreateCellToPointOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DecomposePolyhedraOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DecomposePolyhedraOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DisableAllCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DisableAllLagrangianArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DisableAllPatchArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DisableAllPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EnableAllCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EnableAllLagrangianArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EnableAllPatchArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EnableAllPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAddDimensionsToArrayNames(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCacheMesh(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCellArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCreateCellToPoint(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDecomposePolyhedra(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLagrangianArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLagrangianArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetListTimeStepsByControlDict(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfLagrangianArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfPatchArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPatchArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPatchArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPointArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPointArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPositionsIsIn13Format(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetReadZones(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTimeValues(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ListTimeStepsByControlDictOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ListTimeStepsByControlDictOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void PositionsIsIn13FormatOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void PositionsIsIn13FormatOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReadZonesOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReadZonesOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAddDimensionsToArrayNames(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCacheMesh(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCreateCellToPoint(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetDecomposePolyhedra(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLagrangianArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetListTimeStepsByControlDict(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetParent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetPatchArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetPointArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetPositionsIsIn13Format(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetReadZones(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRefresh(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
