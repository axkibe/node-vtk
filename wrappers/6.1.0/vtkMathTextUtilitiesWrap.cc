/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkMathTextUtilitiesWrap.h"
#include "vtkPathWrap.h"
#include "vtkTextPropertyWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkMathTextUtilitiesWrap::ptpl;

VtkMathTextUtilitiesWrap::VtkMathTextUtilitiesWrap()
{ }

VtkMathTextUtilitiesWrap::VtkMathTextUtilitiesWrap(vtkSmartPointer<vtkMathTextUtilities> _native)
{ native = _native; }

VtkMathTextUtilitiesWrap::~VtkMathTextUtilitiesWrap()
{ }

void VtkMathTextUtilitiesWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkMathTextUtilities").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("MathTextUtilities").ToLocalChecked(), ConstructorGetter);
}

void VtkMathTextUtilitiesWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkMathTextUtilitiesWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkMathTextUtilitiesWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetInstance", GetInstance);
	Nan::SetPrototypeMethod(tpl, "getInstance", GetInstance);

	Nan::SetPrototypeMethod(tpl, "GetScaleToPowerOfTwo", GetScaleToPowerOfTwo);
	Nan::SetPrototypeMethod(tpl, "getScaleToPowerOfTwo", GetScaleToPowerOfTwo);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetInstance", SetInstance);
	Nan::SetPrototypeMethod(tpl, "setInstance", SetInstance);

	Nan::SetPrototypeMethod(tpl, "SetScaleToPowerOfTwo", SetScaleToPowerOfTwo);
	Nan::SetPrototypeMethod(tpl, "setScaleToPowerOfTwo", SetScaleToPowerOfTwo);

	Nan::SetPrototypeMethod(tpl, "StringToPath", StringToPath);
	Nan::SetPrototypeMethod(tpl, "stringToPath", StringToPath);

	ptpl.Reset( tpl );
}

void VtkMathTextUtilitiesWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkMathTextUtilities> native = vtkSmartPointer<vtkMathTextUtilities>::New();
		VtkMathTextUtilitiesWrap* obj = new VtkMathTextUtilitiesWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkMathTextUtilitiesWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMathTextUtilitiesWrap *wrapper = ObjectWrap::Unwrap<VtkMathTextUtilitiesWrap>(info.Holder());
	vtkMathTextUtilities *native = (vtkMathTextUtilities *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMathTextUtilitiesWrap::GetInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMathTextUtilitiesWrap *wrapper = ObjectWrap::Unwrap<VtkMathTextUtilitiesWrap>(info.Holder());
	vtkMathTextUtilities *native = (vtkMathTextUtilities *)wrapper->native.GetPointer();
	vtkMathTextUtilities * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInstance();
		VtkMathTextUtilitiesWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkMathTextUtilitiesWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMathTextUtilitiesWrap *w = new VtkMathTextUtilitiesWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMathTextUtilitiesWrap::GetScaleToPowerOfTwo(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMathTextUtilitiesWrap *wrapper = ObjectWrap::Unwrap<VtkMathTextUtilitiesWrap>(info.Holder());
	vtkMathTextUtilities *native = (vtkMathTextUtilities *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScaleToPowerOfTwo();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMathTextUtilitiesWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMathTextUtilitiesWrap *wrapper = ObjectWrap::Unwrap<VtkMathTextUtilitiesWrap>(info.Holder());
	vtkMathTextUtilities *native = (vtkMathTextUtilities *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMathTextUtilitiesWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMathTextUtilitiesWrap *wrapper = ObjectWrap::Unwrap<VtkMathTextUtilitiesWrap>(info.Holder());
	vtkMathTextUtilities *native = (vtkMathTextUtilities *)wrapper->native.GetPointer();
	vtkMathTextUtilities * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkMathTextUtilitiesWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkMathTextUtilitiesWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMathTextUtilitiesWrap *w = new VtkMathTextUtilitiesWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMathTextUtilitiesWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMathTextUtilitiesWrap *wrapper = ObjectWrap::Unwrap<VtkMathTextUtilitiesWrap>(info.Holder());
	vtkMathTextUtilities *native = (vtkMathTextUtilities *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkMathTextUtilities * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkMathTextUtilitiesWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkMathTextUtilitiesWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkMathTextUtilitiesWrap *w = new VtkMathTextUtilitiesWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMathTextUtilitiesWrap::SetInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMathTextUtilitiesWrap *wrapper = ObjectWrap::Unwrap<VtkMathTextUtilitiesWrap>(info.Holder());
	vtkMathTextUtilities *native = (vtkMathTextUtilities *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkMathTextUtilitiesWrap::ptpl))->HasInstance(info[0]))
	{
		VtkMathTextUtilitiesWrap *a0 = ObjectWrap::Unwrap<VtkMathTextUtilitiesWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInstance(
			(vtkMathTextUtilities *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMathTextUtilitiesWrap::SetScaleToPowerOfTwo(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMathTextUtilitiesWrap *wrapper = ObjectWrap::Unwrap<VtkMathTextUtilitiesWrap>(info.Holder());
	vtkMathTextUtilities *native = (vtkMathTextUtilities *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScaleToPowerOfTwo(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMathTextUtilitiesWrap::StringToPath(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMathTextUtilitiesWrap *wrapper = ObjectWrap::Unwrap<VtkMathTextUtilitiesWrap>(info.Holder());
	vtkMathTextUtilities *native = (vtkMathTextUtilities *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkPathWrap::ptpl))->HasInstance(info[1]))
		{
			VtkPathWrap *a1 = ObjectWrap::Unwrap<VtkPathWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject() && (Nan::New(VtkTextPropertyWrap::ptpl))->HasInstance(info[2]))
			{
				VtkTextPropertyWrap *a2 = ObjectWrap::Unwrap<VtkTextPropertyWrap>(info[2]->ToObject());
				bool r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->StringToPath(
					*a0,
					(vtkPath *) a1->native.GetPointer(),
					(vtkTextProperty *) a2->native.GetPointer()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

