/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkRowQueryWrap.h"
#include "vtkVariantArrayWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkRowQueryWrap::ptpl;

VtkRowQueryWrap::VtkRowQueryWrap()
{ }

VtkRowQueryWrap::VtkRowQueryWrap(vtkSmartPointer<vtkRowQuery> _native)
{ native = _native; }

VtkRowQueryWrap::~VtkRowQueryWrap()
{ }

void VtkRowQueryWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkRowQuery").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("RowQuery").ToLocalChecked(), ConstructorGetter);
}

void VtkRowQueryWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkRowQueryWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkRowQueryWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CaseSensitiveFieldNamesOff", CaseSensitiveFieldNamesOff);
	Nan::SetPrototypeMethod(tpl, "caseSensitiveFieldNamesOff", CaseSensitiveFieldNamesOff);

	Nan::SetPrototypeMethod(tpl, "CaseSensitiveFieldNamesOn", CaseSensitiveFieldNamesOn);
	Nan::SetPrototypeMethod(tpl, "caseSensitiveFieldNamesOn", CaseSensitiveFieldNamesOn);

	Nan::SetPrototypeMethod(tpl, "Execute", Execute);
	Nan::SetPrototypeMethod(tpl, "execute", Execute);

	Nan::SetPrototypeMethod(tpl, "GetCaseSensitiveFieldNames", GetCaseSensitiveFieldNames);
	Nan::SetPrototypeMethod(tpl, "getCaseSensitiveFieldNames", GetCaseSensitiveFieldNames);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetFieldIndex", GetFieldIndex);
	Nan::SetPrototypeMethod(tpl, "getFieldIndex", GetFieldIndex);

	Nan::SetPrototypeMethod(tpl, "GetFieldName", GetFieldName);
	Nan::SetPrototypeMethod(tpl, "getFieldName", GetFieldName);

	Nan::SetPrototypeMethod(tpl, "GetFieldType", GetFieldType);
	Nan::SetPrototypeMethod(tpl, "getFieldType", GetFieldType);

	Nan::SetPrototypeMethod(tpl, "GetLastErrorText", GetLastErrorText);
	Nan::SetPrototypeMethod(tpl, "getLastErrorText", GetLastErrorText);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfFields", GetNumberOfFields);
	Nan::SetPrototypeMethod(tpl, "getNumberOfFields", GetNumberOfFields);

	Nan::SetPrototypeMethod(tpl, "HasError", HasError);
	Nan::SetPrototypeMethod(tpl, "hasError", HasError);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "IsActive", IsActive);
	Nan::SetPrototypeMethod(tpl, "isActive", IsActive);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "NextRow", NextRow);
	Nan::SetPrototypeMethod(tpl, "nextRow", NextRow);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCaseSensitiveFieldNames", SetCaseSensitiveFieldNames);
	Nan::SetPrototypeMethod(tpl, "setCaseSensitiveFieldNames", SetCaseSensitiveFieldNames);

	ptpl.Reset( tpl );
}

void VtkRowQueryWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkRowQueryWrap::CaseSensitiveFieldNamesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CaseSensitiveFieldNamesOff();
}

void VtkRowQueryWrap::CaseSensitiveFieldNamesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CaseSensitiveFieldNamesOn();
}

void VtkRowQueryWrap::Execute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->Execute();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRowQueryWrap::GetCaseSensitiveFieldNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCaseSensitiveFieldNames();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRowQueryWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRowQueryWrap::GetFieldIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetFieldIndex(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRowQueryWrap::GetFieldName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetFieldName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRowQueryWrap::GetFieldType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetFieldType(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRowQueryWrap::GetLastErrorText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLastErrorText();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRowQueryWrap::GetNumberOfFields(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfFields();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRowQueryWrap::HasError(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasError();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRowQueryWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRowQueryWrap::IsActive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->IsActive();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRowQueryWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	vtkRowQuery * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkRowQueryWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRowQueryWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRowQueryWrap *w = new VtkRowQueryWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRowQueryWrap::NextRow(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkVariantArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkVariantArrayWrap *a0 = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info[0]->ToObject());
		bool r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->NextRow(
			(vtkVariantArray *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NextRow();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRowQueryWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkRowQuery * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkRowQueryWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkRowQueryWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkRowQueryWrap *w = new VtkRowQueryWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRowQueryWrap::SetCaseSensitiveFieldNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRowQueryWrap *wrapper = ObjectWrap::Unwrap<VtkRowQueryWrap>(info.Holder());
	vtkRowQuery *native = (vtkRowQuery *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCaseSensitiveFieldNames(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

