/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkOpenGLExtensionManagerWrap.h"
#include "vtkRenderWindowWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkOpenGLExtensionManagerWrap::ptpl;

VtkOpenGLExtensionManagerWrap::VtkOpenGLExtensionManagerWrap()
{ }

VtkOpenGLExtensionManagerWrap::VtkOpenGLExtensionManagerWrap(vtkSmartPointer<vtkOpenGLExtensionManager> _native)
{ native = _native; }

VtkOpenGLExtensionManagerWrap::~VtkOpenGLExtensionManagerWrap()
{ }

void VtkOpenGLExtensionManagerWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkOpenGLExtensionManager").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("OpenGLExtensionManager").ToLocalChecked(), ConstructorGetter);
}

void VtkOpenGLExtensionManagerWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkOpenGLExtensionManagerWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkOpenGLExtensionManagerWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ExtensionSupported", ExtensionSupported);
	Nan::SetPrototypeMethod(tpl, "extensionSupported", ExtensionSupported);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDriverGLRenderer", GetDriverGLRenderer);
	Nan::SetPrototypeMethod(tpl, "getDriverGLRenderer", GetDriverGLRenderer);

	Nan::SetPrototypeMethod(tpl, "GetDriverGLVendor", GetDriverGLVendor);
	Nan::SetPrototypeMethod(tpl, "getDriverGLVendor", GetDriverGLVendor);

	Nan::SetPrototypeMethod(tpl, "GetDriverGLVersion", GetDriverGLVersion);
	Nan::SetPrototypeMethod(tpl, "getDriverGLVersion", GetDriverGLVersion);

	Nan::SetPrototypeMethod(tpl, "GetDriverGLVersionMajor", GetDriverGLVersionMajor);
	Nan::SetPrototypeMethod(tpl, "getDriverGLVersionMajor", GetDriverGLVersionMajor);

	Nan::SetPrototypeMethod(tpl, "GetDriverGLVersionMinor", GetDriverGLVersionMinor);
	Nan::SetPrototypeMethod(tpl, "getDriverGLVersionMinor", GetDriverGLVersionMinor);

	Nan::SetPrototypeMethod(tpl, "GetDriverGLVersionPatch", GetDriverGLVersionPatch);
	Nan::SetPrototypeMethod(tpl, "getDriverGLVersionPatch", GetDriverGLVersionPatch);

	Nan::SetPrototypeMethod(tpl, "GetDriverVersionMajor", GetDriverVersionMajor);
	Nan::SetPrototypeMethod(tpl, "getDriverVersionMajor", GetDriverVersionMajor);

	Nan::SetPrototypeMethod(tpl, "GetDriverVersionMinor", GetDriverVersionMinor);
	Nan::SetPrototypeMethod(tpl, "getDriverVersionMinor", GetDriverVersionMinor);

	Nan::SetPrototypeMethod(tpl, "GetDriverVersionPatch", GetDriverVersionPatch);
	Nan::SetPrototypeMethod(tpl, "getDriverVersionPatch", GetDriverVersionPatch);

	Nan::SetPrototypeMethod(tpl, "GetExtensionsString", GetExtensionsString);
	Nan::SetPrototypeMethod(tpl, "getExtensionsString", GetExtensionsString);

	Nan::SetPrototypeMethod(tpl, "GetRenderWindow", GetRenderWindow);
	Nan::SetPrototypeMethod(tpl, "getRenderWindow", GetRenderWindow);

	Nan::SetPrototypeMethod(tpl, "IgnoreDriverBugsOff", IgnoreDriverBugsOff);
	Nan::SetPrototypeMethod(tpl, "ignoreDriverBugsOff", IgnoreDriverBugsOff);

	Nan::SetPrototypeMethod(tpl, "IgnoreDriverBugsOn", IgnoreDriverBugsOn);
	Nan::SetPrototypeMethod(tpl, "ignoreDriverBugsOn", IgnoreDriverBugsOn);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "LoadAsARBExtension", LoadAsARBExtension);
	Nan::SetPrototypeMethod(tpl, "loadAsARBExtension", LoadAsARBExtension);

	Nan::SetPrototypeMethod(tpl, "LoadCorePromotedExtension", LoadCorePromotedExtension);
	Nan::SetPrototypeMethod(tpl, "loadCorePromotedExtension", LoadCorePromotedExtension);

	Nan::SetPrototypeMethod(tpl, "LoadExtension", LoadExtension);
	Nan::SetPrototypeMethod(tpl, "loadExtension", LoadExtension);

	Nan::SetPrototypeMethod(tpl, "LoadSupportedExtension", LoadSupportedExtension);
	Nan::SetPrototypeMethod(tpl, "loadSupportedExtension", LoadSupportedExtension);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetRenderWindow", SetRenderWindow);
	Nan::SetPrototypeMethod(tpl, "setRenderWindow", SetRenderWindow);

	Nan::SetPrototypeMethod(tpl, "Update", Update);
	Nan::SetPrototypeMethod(tpl, "update", Update);

	ptpl.Reset( tpl );
}

void VtkOpenGLExtensionManagerWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkOpenGLExtensionManager> native = vtkSmartPointer<vtkOpenGLExtensionManager>::New();
		VtkOpenGLExtensionManagerWrap* obj = new VtkOpenGLExtensionManagerWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkOpenGLExtensionManagerWrap::ExtensionSupported(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->ExtensionSupported(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLExtensionManagerWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenGLExtensionManagerWrap::GetDriverGLRenderer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDriverGLRenderer();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenGLExtensionManagerWrap::GetDriverGLVendor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDriverGLVendor();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenGLExtensionManagerWrap::GetDriverGLVersion(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDriverGLVersion();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenGLExtensionManagerWrap::GetDriverGLVersionMajor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDriverGLVersionMajor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenGLExtensionManagerWrap::GetDriverGLVersionMinor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDriverGLVersionMinor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenGLExtensionManagerWrap::GetDriverGLVersionPatch(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDriverGLVersionPatch();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenGLExtensionManagerWrap::GetDriverVersionMajor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDriverVersionMajor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenGLExtensionManagerWrap::GetDriverVersionMinor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDriverVersionMinor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenGLExtensionManagerWrap::GetDriverVersionPatch(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDriverVersionPatch();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenGLExtensionManagerWrap::GetExtensionsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetExtensionsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenGLExtensionManagerWrap::GetRenderWindow(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	vtkRenderWindow * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRenderWindow();
		VtkRenderWindowWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderWindowWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderWindowWrap *w = new VtkRenderWindowWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkOpenGLExtensionManagerWrap::IgnoreDriverBugsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->IgnoreDriverBugsOff();
}

void VtkOpenGLExtensionManagerWrap::IgnoreDriverBugsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->IgnoreDriverBugsOn();
}

void VtkOpenGLExtensionManagerWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLExtensionManagerWrap::LoadAsARBExtension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->LoadAsARBExtension(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLExtensionManagerWrap::LoadCorePromotedExtension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->LoadCorePromotedExtension(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLExtensionManagerWrap::LoadExtension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->LoadExtension(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLExtensionManagerWrap::LoadSupportedExtension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->LoadSupportedExtension(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLExtensionManagerWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	vtkOpenGLExtensionManager * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkOpenGLExtensionManagerWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkOpenGLExtensionManagerWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkOpenGLExtensionManagerWrap *w = new VtkOpenGLExtensionManagerWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkOpenGLExtensionManagerWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkOpenGLExtensionManager * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkOpenGLExtensionManagerWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkOpenGLExtensionManagerWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkOpenGLExtensionManagerWrap *w = new VtkOpenGLExtensionManagerWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLExtensionManagerWrap::SetRenderWindow(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRenderWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRenderWindowWrap *a0 = ObjectWrap::Unwrap<VtkRenderWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRenderWindow(
			(vtkRenderWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLExtensionManagerWrap::Update(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLExtensionManagerWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLExtensionManagerWrap>(info.Holder());
	vtkOpenGLExtensionManager *native = (vtkOpenGLExtensionManager *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Update();
}

