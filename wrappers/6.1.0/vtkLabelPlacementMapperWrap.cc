/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkMapper2DWrap.h"
#include "vtkLabelPlacementMapperWrap.h"
#include "vtkObjectWrap.h"
#include "vtkViewportWrap.h"
#include "vtkActor2DWrap.h"
#include "vtkLabelRenderStrategyWrap.h"
#include "vtkCoordinateWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkLabelPlacementMapperWrap::ptpl;

VtkLabelPlacementMapperWrap::VtkLabelPlacementMapperWrap()
{ }

VtkLabelPlacementMapperWrap::VtkLabelPlacementMapperWrap(vtkSmartPointer<vtkLabelPlacementMapper> _native)
{ native = _native; }

VtkLabelPlacementMapperWrap::~VtkLabelPlacementMapperWrap()
{ }

void VtkLabelPlacementMapperWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkLabelPlacementMapper").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("LabelPlacementMapper").ToLocalChecked(), ConstructorGetter);
}

void VtkLabelPlacementMapperWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkLabelPlacementMapperWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkMapper2DWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkMapper2DWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkLabelPlacementMapperWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GeneratePerturbedLabelSpokesOff", GeneratePerturbedLabelSpokesOff);
	Nan::SetPrototypeMethod(tpl, "generatePerturbedLabelSpokesOff", GeneratePerturbedLabelSpokesOff);

	Nan::SetPrototypeMethod(tpl, "GeneratePerturbedLabelSpokesOn", GeneratePerturbedLabelSpokesOn);
	Nan::SetPrototypeMethod(tpl, "generatePerturbedLabelSpokesOn", GeneratePerturbedLabelSpokesOn);

	Nan::SetPrototypeMethod(tpl, "GetAnchorTransform", GetAnchorTransform);
	Nan::SetPrototypeMethod(tpl, "getAnchorTransform", GetAnchorTransform);

	Nan::SetPrototypeMethod(tpl, "GetBackgroundOpacity", GetBackgroundOpacity);
	Nan::SetPrototypeMethod(tpl, "getBackgroundOpacity", GetBackgroundOpacity);

	Nan::SetPrototypeMethod(tpl, "GetBackgroundOpacityMaxValue", GetBackgroundOpacityMaxValue);
	Nan::SetPrototypeMethod(tpl, "getBackgroundOpacityMaxValue", GetBackgroundOpacityMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetBackgroundOpacityMinValue", GetBackgroundOpacityMinValue);
	Nan::SetPrototypeMethod(tpl, "getBackgroundOpacityMinValue", GetBackgroundOpacityMinValue);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetGeneratePerturbedLabelSpokes", GetGeneratePerturbedLabelSpokes);
	Nan::SetPrototypeMethod(tpl, "getGeneratePerturbedLabelSpokes", GetGeneratePerturbedLabelSpokes);

	Nan::SetPrototypeMethod(tpl, "GetIteratorType", GetIteratorType);
	Nan::SetPrototypeMethod(tpl, "getIteratorType", GetIteratorType);

	Nan::SetPrototypeMethod(tpl, "GetMargin", GetMargin);
	Nan::SetPrototypeMethod(tpl, "getMargin", GetMargin);

	Nan::SetPrototypeMethod(tpl, "GetMaximumLabelFraction", GetMaximumLabelFraction);
	Nan::SetPrototypeMethod(tpl, "getMaximumLabelFraction", GetMaximumLabelFraction);

	Nan::SetPrototypeMethod(tpl, "GetMaximumLabelFractionMaxValue", GetMaximumLabelFractionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getMaximumLabelFractionMaxValue", GetMaximumLabelFractionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetMaximumLabelFractionMinValue", GetMaximumLabelFractionMinValue);
	Nan::SetPrototypeMethod(tpl, "getMaximumLabelFractionMinValue", GetMaximumLabelFractionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetOutputTraversedBounds", GetOutputTraversedBounds);
	Nan::SetPrototypeMethod(tpl, "getOutputTraversedBounds", GetOutputTraversedBounds);

	Nan::SetPrototypeMethod(tpl, "GetPlaceAllLabels", GetPlaceAllLabels);
	Nan::SetPrototypeMethod(tpl, "getPlaceAllLabels", GetPlaceAllLabels);

	Nan::SetPrototypeMethod(tpl, "GetPositionsAsNormals", GetPositionsAsNormals);
	Nan::SetPrototypeMethod(tpl, "getPositionsAsNormals", GetPositionsAsNormals);

	Nan::SetPrototypeMethod(tpl, "GetRenderStrategy", GetRenderStrategy);
	Nan::SetPrototypeMethod(tpl, "getRenderStrategy", GetRenderStrategy);

	Nan::SetPrototypeMethod(tpl, "GetShape", GetShape);
	Nan::SetPrototypeMethod(tpl, "getShape", GetShape);

	Nan::SetPrototypeMethod(tpl, "GetShapeMaxValue", GetShapeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getShapeMaxValue", GetShapeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetShapeMinValue", GetShapeMinValue);
	Nan::SetPrototypeMethod(tpl, "getShapeMinValue", GetShapeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetStyle", GetStyle);
	Nan::SetPrototypeMethod(tpl, "getStyle", GetStyle);

	Nan::SetPrototypeMethod(tpl, "GetStyleMaxValue", GetStyleMaxValue);
	Nan::SetPrototypeMethod(tpl, "getStyleMaxValue", GetStyleMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetStyleMinValue", GetStyleMinValue);
	Nan::SetPrototypeMethod(tpl, "getStyleMinValue", GetStyleMinValue);

	Nan::SetPrototypeMethod(tpl, "GetUseDepthBuffer", GetUseDepthBuffer);
	Nan::SetPrototypeMethod(tpl, "getUseDepthBuffer", GetUseDepthBuffer);

	Nan::SetPrototypeMethod(tpl, "GetUseUnicodeStrings", GetUseUnicodeStrings);
	Nan::SetPrototypeMethod(tpl, "getUseUnicodeStrings", GetUseUnicodeStrings);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "OutputTraversedBoundsOff", OutputTraversedBoundsOff);
	Nan::SetPrototypeMethod(tpl, "outputTraversedBoundsOff", OutputTraversedBoundsOff);

	Nan::SetPrototypeMethod(tpl, "OutputTraversedBoundsOn", OutputTraversedBoundsOn);
	Nan::SetPrototypeMethod(tpl, "outputTraversedBoundsOn", OutputTraversedBoundsOn);

	Nan::SetPrototypeMethod(tpl, "PlaceAllLabelsOff", PlaceAllLabelsOff);
	Nan::SetPrototypeMethod(tpl, "placeAllLabelsOff", PlaceAllLabelsOff);

	Nan::SetPrototypeMethod(tpl, "PlaceAllLabelsOn", PlaceAllLabelsOn);
	Nan::SetPrototypeMethod(tpl, "placeAllLabelsOn", PlaceAllLabelsOn);

	Nan::SetPrototypeMethod(tpl, "PositionsAsNormalsOff", PositionsAsNormalsOff);
	Nan::SetPrototypeMethod(tpl, "positionsAsNormalsOff", PositionsAsNormalsOff);

	Nan::SetPrototypeMethod(tpl, "PositionsAsNormalsOn", PositionsAsNormalsOn);
	Nan::SetPrototypeMethod(tpl, "positionsAsNormalsOn", PositionsAsNormalsOn);

	Nan::SetPrototypeMethod(tpl, "RenderOverlay", RenderOverlay);
	Nan::SetPrototypeMethod(tpl, "renderOverlay", RenderOverlay);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBackgroundColor", SetBackgroundColor);
	Nan::SetPrototypeMethod(tpl, "setBackgroundColor", SetBackgroundColor);

	Nan::SetPrototypeMethod(tpl, "SetBackgroundOpacity", SetBackgroundOpacity);
	Nan::SetPrototypeMethod(tpl, "setBackgroundOpacity", SetBackgroundOpacity);

	Nan::SetPrototypeMethod(tpl, "SetGeneratePerturbedLabelSpokes", SetGeneratePerturbedLabelSpokes);
	Nan::SetPrototypeMethod(tpl, "setGeneratePerturbedLabelSpokes", SetGeneratePerturbedLabelSpokes);

	Nan::SetPrototypeMethod(tpl, "SetIteratorType", SetIteratorType);
	Nan::SetPrototypeMethod(tpl, "setIteratorType", SetIteratorType);

	Nan::SetPrototypeMethod(tpl, "SetMargin", SetMargin);
	Nan::SetPrototypeMethod(tpl, "setMargin", SetMargin);

	Nan::SetPrototypeMethod(tpl, "SetMaximumLabelFraction", SetMaximumLabelFraction);
	Nan::SetPrototypeMethod(tpl, "setMaximumLabelFraction", SetMaximumLabelFraction);

	Nan::SetPrototypeMethod(tpl, "SetOutputTraversedBounds", SetOutputTraversedBounds);
	Nan::SetPrototypeMethod(tpl, "setOutputTraversedBounds", SetOutputTraversedBounds);

	Nan::SetPrototypeMethod(tpl, "SetPlaceAllLabels", SetPlaceAllLabels);
	Nan::SetPrototypeMethod(tpl, "setPlaceAllLabels", SetPlaceAllLabels);

	Nan::SetPrototypeMethod(tpl, "SetPositionsAsNormals", SetPositionsAsNormals);
	Nan::SetPrototypeMethod(tpl, "setPositionsAsNormals", SetPositionsAsNormals);

	Nan::SetPrototypeMethod(tpl, "SetRenderStrategy", SetRenderStrategy);
	Nan::SetPrototypeMethod(tpl, "setRenderStrategy", SetRenderStrategy);

	Nan::SetPrototypeMethod(tpl, "SetShape", SetShape);
	Nan::SetPrototypeMethod(tpl, "setShape", SetShape);

	Nan::SetPrototypeMethod(tpl, "SetShapeToNone", SetShapeToNone);
	Nan::SetPrototypeMethod(tpl, "setShapeToNone", SetShapeToNone);

	Nan::SetPrototypeMethod(tpl, "SetShapeToRect", SetShapeToRect);
	Nan::SetPrototypeMethod(tpl, "setShapeToRect", SetShapeToRect);

	Nan::SetPrototypeMethod(tpl, "SetShapeToRoundedRect", SetShapeToRoundedRect);
	Nan::SetPrototypeMethod(tpl, "setShapeToRoundedRect", SetShapeToRoundedRect);

	Nan::SetPrototypeMethod(tpl, "SetStyle", SetStyle);
	Nan::SetPrototypeMethod(tpl, "setStyle", SetStyle);

	Nan::SetPrototypeMethod(tpl, "SetStyleToFilled", SetStyleToFilled);
	Nan::SetPrototypeMethod(tpl, "setStyleToFilled", SetStyleToFilled);

	Nan::SetPrototypeMethod(tpl, "SetStyleToOutline", SetStyleToOutline);
	Nan::SetPrototypeMethod(tpl, "setStyleToOutline", SetStyleToOutline);

	Nan::SetPrototypeMethod(tpl, "SetUseDepthBuffer", SetUseDepthBuffer);
	Nan::SetPrototypeMethod(tpl, "setUseDepthBuffer", SetUseDepthBuffer);

	Nan::SetPrototypeMethod(tpl, "SetUseUnicodeStrings", SetUseUnicodeStrings);
	Nan::SetPrototypeMethod(tpl, "setUseUnicodeStrings", SetUseUnicodeStrings);

	Nan::SetPrototypeMethod(tpl, "UseDepthBufferOff", UseDepthBufferOff);
	Nan::SetPrototypeMethod(tpl, "useDepthBufferOff", UseDepthBufferOff);

	Nan::SetPrototypeMethod(tpl, "UseDepthBufferOn", UseDepthBufferOn);
	Nan::SetPrototypeMethod(tpl, "useDepthBufferOn", UseDepthBufferOn);

	Nan::SetPrototypeMethod(tpl, "UseUnicodeStringsOff", UseUnicodeStringsOff);
	Nan::SetPrototypeMethod(tpl, "useUnicodeStringsOff", UseUnicodeStringsOff);

	Nan::SetPrototypeMethod(tpl, "UseUnicodeStringsOn", UseUnicodeStringsOn);
	Nan::SetPrototypeMethod(tpl, "useUnicodeStringsOn", UseUnicodeStringsOn);

	ptpl.Reset( tpl );
}

void VtkLabelPlacementMapperWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkLabelPlacementMapper> native = vtkSmartPointer<vtkLabelPlacementMapper>::New();
		VtkLabelPlacementMapperWrap* obj = new VtkLabelPlacementMapperWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkLabelPlacementMapperWrap::GeneratePerturbedLabelSpokesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GeneratePerturbedLabelSpokesOff();
}

void VtkLabelPlacementMapperWrap::GeneratePerturbedLabelSpokesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GeneratePerturbedLabelSpokesOn();
}

void VtkLabelPlacementMapperWrap::GetAnchorTransform(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	vtkCoordinate * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAnchorTransform();
		VtkCoordinateWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCoordinateWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCoordinateWrap *w = new VtkCoordinateWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLabelPlacementMapperWrap::GetBackgroundOpacity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBackgroundOpacity();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetBackgroundOpacityMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBackgroundOpacityMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetBackgroundOpacityMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBackgroundOpacityMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkLabelPlacementMapperWrap::GetGeneratePerturbedLabelSpokes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGeneratePerturbedLabelSpokes();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetIteratorType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIteratorType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetMargin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMargin();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetMaximumLabelFraction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumLabelFraction();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetMaximumLabelFractionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumLabelFractionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetMaximumLabelFractionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumLabelFractionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetOutputTraversedBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputTraversedBounds();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetPlaceAllLabels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPlaceAllLabels();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetPositionsAsNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPositionsAsNormals();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetRenderStrategy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	vtkLabelRenderStrategy * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRenderStrategy();
		VtkLabelRenderStrategyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkLabelRenderStrategyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkLabelRenderStrategyWrap *w = new VtkLabelRenderStrategyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLabelPlacementMapperWrap::GetShape(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetShape();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetShapeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetShapeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetShapeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetShapeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetStyle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStyle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetStyleMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStyleMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetStyleMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStyleMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetUseDepthBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseDepthBuffer();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::GetUseUnicodeStrings(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseUnicodeStrings();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacementMapperWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	vtkLabelPlacementMapper * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkLabelPlacementMapperWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkLabelPlacementMapperWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkLabelPlacementMapperWrap *w = new VtkLabelPlacementMapperWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLabelPlacementMapperWrap::OutputTraversedBoundsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutputTraversedBoundsOff();
}

void VtkLabelPlacementMapperWrap::OutputTraversedBoundsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutputTraversedBoundsOn();
}

void VtkLabelPlacementMapperWrap::PlaceAllLabelsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PlaceAllLabelsOff();
}

void VtkLabelPlacementMapperWrap::PlaceAllLabelsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PlaceAllLabelsOn();
}

void VtkLabelPlacementMapperWrap::PositionsAsNormalsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PositionsAsNormalsOff();
}

void VtkLabelPlacementMapperWrap::PositionsAsNormalsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PositionsAsNormalsOn();
}

void VtkLabelPlacementMapperWrap::RenderOverlay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkActor2DWrap::ptpl))->HasInstance(info[1]))
		{
			VtkActor2DWrap *a1 = ObjectWrap::Unwrap<VtkActor2DWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->RenderOverlay(
				(vtkViewport *) a0->native.GetPointer(),
				(vtkActor2D *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkLabelPlacementMapper * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkLabelPlacementMapperWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkLabelPlacementMapperWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkLabelPlacementMapperWrap *w = new VtkLabelPlacementMapperWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetBackgroundColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0( v8::Local<v8::Array>::Cast( info[0]->ToObject() ) );
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBackgroundColor(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetBackgroundColor(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetBackgroundOpacity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBackgroundOpacity(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetGeneratePerturbedLabelSpokes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGeneratePerturbedLabelSpokes(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetIteratorType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIteratorType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetMargin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMargin(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetMaximumLabelFraction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumLabelFraction(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetOutputTraversedBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputTraversedBounds(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetPlaceAllLabels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPlaceAllLabels(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetPositionsAsNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPositionsAsNormals(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetRenderStrategy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkLabelRenderStrategyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkLabelRenderStrategyWrap *a0 = ObjectWrap::Unwrap<VtkLabelRenderStrategyWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRenderStrategy(
			(vtkLabelRenderStrategy *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetShape(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetShape(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetShapeToNone(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetShapeToNone();
}

void VtkLabelPlacementMapperWrap::SetShapeToRect(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetShapeToRect();
}

void VtkLabelPlacementMapperWrap::SetShapeToRoundedRect(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetShapeToRoundedRect();
}

void VtkLabelPlacementMapperWrap::SetStyle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetStyle(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetStyleToFilled(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetStyleToFilled();
}

void VtkLabelPlacementMapperWrap::SetStyleToOutline(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetStyleToOutline();
}

void VtkLabelPlacementMapperWrap::SetUseDepthBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseDepthBuffer(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::SetUseUnicodeStrings(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseUnicodeStrings(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacementMapperWrap::UseDepthBufferOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseDepthBufferOff();
}

void VtkLabelPlacementMapperWrap::UseDepthBufferOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseDepthBufferOn();
}

void VtkLabelPlacementMapperWrap::UseUnicodeStringsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseUnicodeStringsOff();
}

void VtkLabelPlacementMapperWrap::UseUnicodeStringsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacementMapperWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacementMapperWrap>(info.Holder());
	vtkLabelPlacementMapper *native = (vtkLabelPlacementMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseUnicodeStringsOn();
}

