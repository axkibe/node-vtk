/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkGraphAlgorithmWrap.h"
#include "vtkKCoreLayoutWrap.h"
#include "vtkObjectWrap.h"
#include "vtkAlgorithmOutputWrap.h"
#include "vtkInformationWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkKCoreLayoutWrap::ptpl;

VtkKCoreLayoutWrap::VtkKCoreLayoutWrap()
{ }

VtkKCoreLayoutWrap::VtkKCoreLayoutWrap(vtkSmartPointer<vtkKCoreLayout> _native)
{ native = _native; }

VtkKCoreLayoutWrap::~VtkKCoreLayoutWrap()
{ }

void VtkKCoreLayoutWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkKCoreLayout").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("KCoreLayout").ToLocalChecked(), ConstructorGetter);
}

void VtkKCoreLayoutWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkKCoreLayoutWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkGraphAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkGraphAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkKCoreLayoutWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CartesianOff", CartesianOff);
	Nan::SetPrototypeMethod(tpl, "cartesianOff", CartesianOff);

	Nan::SetPrototypeMethod(tpl, "CartesianOn", CartesianOn);
	Nan::SetPrototypeMethod(tpl, "cartesianOn", CartesianOn);

	Nan::SetPrototypeMethod(tpl, "FillInputPortInformation", FillInputPortInformation);
	Nan::SetPrototypeMethod(tpl, "fillInputPortInformation", FillInputPortInformation);

	Nan::SetPrototypeMethod(tpl, "GetCartesian", GetCartesian);
	Nan::SetPrototypeMethod(tpl, "getCartesian", GetCartesian);

	Nan::SetPrototypeMethod(tpl, "GetCartesianCoordsXArrayName", GetCartesianCoordsXArrayName);
	Nan::SetPrototypeMethod(tpl, "getCartesianCoordsXArrayName", GetCartesianCoordsXArrayName);

	Nan::SetPrototypeMethod(tpl, "GetCartesianCoordsYArrayName", GetCartesianCoordsYArrayName);
	Nan::SetPrototypeMethod(tpl, "getCartesianCoordsYArrayName", GetCartesianCoordsYArrayName);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetPolar", GetPolar);
	Nan::SetPrototypeMethod(tpl, "getPolar", GetPolar);

	Nan::SetPrototypeMethod(tpl, "GetPolarCoordsAngleArrayName", GetPolarCoordsAngleArrayName);
	Nan::SetPrototypeMethod(tpl, "getPolarCoordsAngleArrayName", GetPolarCoordsAngleArrayName);

	Nan::SetPrototypeMethod(tpl, "GetPolarCoordsRadiusArrayName", GetPolarCoordsRadiusArrayName);
	Nan::SetPrototypeMethod(tpl, "getPolarCoordsRadiusArrayName", GetPolarCoordsRadiusArrayName);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PolarOff", PolarOff);
	Nan::SetPrototypeMethod(tpl, "polarOff", PolarOff);

	Nan::SetPrototypeMethod(tpl, "PolarOn", PolarOn);
	Nan::SetPrototypeMethod(tpl, "polarOn", PolarOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCartesian", SetCartesian);
	Nan::SetPrototypeMethod(tpl, "setCartesian", SetCartesian);

	Nan::SetPrototypeMethod(tpl, "SetCartesianCoordsXArrayName", SetCartesianCoordsXArrayName);
	Nan::SetPrototypeMethod(tpl, "setCartesianCoordsXArrayName", SetCartesianCoordsXArrayName);

	Nan::SetPrototypeMethod(tpl, "SetCartesianCoordsYArrayName", SetCartesianCoordsYArrayName);
	Nan::SetPrototypeMethod(tpl, "setCartesianCoordsYArrayName", SetCartesianCoordsYArrayName);

	Nan::SetPrototypeMethod(tpl, "SetGraphConnection", SetGraphConnection);
	Nan::SetPrototypeMethod(tpl, "setGraphConnection", SetGraphConnection);

	Nan::SetPrototypeMethod(tpl, "SetKCoreLabelArrayName", SetKCoreLabelArrayName);
	Nan::SetPrototypeMethod(tpl, "setKCoreLabelArrayName", SetKCoreLabelArrayName);

	Nan::SetPrototypeMethod(tpl, "SetPolar", SetPolar);
	Nan::SetPrototypeMethod(tpl, "setPolar", SetPolar);

	Nan::SetPrototypeMethod(tpl, "SetPolarCoordsAngleArrayName", SetPolarCoordsAngleArrayName);
	Nan::SetPrototypeMethod(tpl, "setPolarCoordsAngleArrayName", SetPolarCoordsAngleArrayName);

	Nan::SetPrototypeMethod(tpl, "SetPolarCoordsRadiusArrayName", SetPolarCoordsRadiusArrayName);
	Nan::SetPrototypeMethod(tpl, "setPolarCoordsRadiusArrayName", SetPolarCoordsRadiusArrayName);

#ifdef VTK_NODE_PLUS_VTKKCORELAYOUTWRAP_INITPTPL
	VTK_NODE_PLUS_VTKKCORELAYOUTWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkKCoreLayoutWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkKCoreLayout> native = vtkSmartPointer<vtkKCoreLayout>::New();
		VtkKCoreLayoutWrap* obj = new VtkKCoreLayoutWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkKCoreLayoutWrap::CartesianOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CartesianOff();
}

void VtkKCoreLayoutWrap::CartesianOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CartesianOn();
}

void VtkKCoreLayoutWrap::FillInputPortInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[1]))
		{
			VtkInformationWrap *a1 = ObjectWrap::Unwrap<VtkInformationWrap>(info[1]->ToObject());
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->FillInputPortInformation(
				info[0]->Int32Value(),
				(vtkInformation *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkKCoreLayoutWrap::GetCartesian(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCartesian();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkKCoreLayoutWrap::GetCartesianCoordsXArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCartesianCoordsXArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkKCoreLayoutWrap::GetCartesianCoordsYArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCartesianCoordsYArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkKCoreLayoutWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkKCoreLayoutWrap::GetPolar(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPolar();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkKCoreLayoutWrap::GetPolarCoordsAngleArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPolarCoordsAngleArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkKCoreLayoutWrap::GetPolarCoordsRadiusArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPolarCoordsRadiusArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkKCoreLayoutWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkKCoreLayoutWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	vtkKCoreLayout * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkKCoreLayoutWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkKCoreLayoutWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkKCoreLayoutWrap *w = new VtkKCoreLayoutWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkKCoreLayoutWrap::PolarOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PolarOff();
}

void VtkKCoreLayoutWrap::PolarOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PolarOn();
}

void VtkKCoreLayoutWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkKCoreLayout * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkKCoreLayoutWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkKCoreLayoutWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkKCoreLayoutWrap *w = new VtkKCoreLayoutWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkKCoreLayoutWrap::SetCartesian(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCartesian(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkKCoreLayoutWrap::SetCartesianCoordsXArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCartesianCoordsXArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkKCoreLayoutWrap::SetCartesianCoordsYArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCartesianCoordsYArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkKCoreLayoutWrap::SetGraphConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAlgorithmOutputWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGraphConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkKCoreLayoutWrap::SetKCoreLabelArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKCoreLabelArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkKCoreLayoutWrap::SetPolar(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPolar(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkKCoreLayoutWrap::SetPolarCoordsAngleArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPolarCoordsAngleArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkKCoreLayoutWrap::SetPolarCoordsRadiusArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkKCoreLayoutWrap *wrapper = ObjectWrap::Unwrap<VtkKCoreLayoutWrap>(info.Holder());
	vtkKCoreLayout *native = (vtkKCoreLayout *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPolarCoordsRadiusArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

