/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkModelMetadataWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkIdTypeArrayWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkModelMetadataWrap::ptpl;

VtkModelMetadataWrap::VtkModelMetadataWrap()
{ }

VtkModelMetadataWrap::VtkModelMetadataWrap(vtkSmartPointer<vtkModelMetadata> _native)
{ native = _native; }

VtkModelMetadataWrap::~VtkModelMetadataWrap()
{ }

void VtkModelMetadataWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkModelMetadata").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ModelMetadata").ToLocalChecked(), ConstructorGetter);
}

void VtkModelMetadataWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkModelMetadataWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkModelMetadataWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddInformationLine", AddInformationLine);
	Nan::SetPrototypeMethod(tpl, "addInformationLine", AddInformationLine);

	Nan::SetPrototypeMethod(tpl, "AddQARecord", AddQARecord);
	Nan::SetPrototypeMethod(tpl, "addQARecord", AddQARecord);

	Nan::SetPrototypeMethod(tpl, "AddUGridElementVariable", AddUGridElementVariable);
	Nan::SetPrototypeMethod(tpl, "addUGridElementVariable", AddUGridElementVariable);

	Nan::SetPrototypeMethod(tpl, "AddUGridNodeVariable", AddUGridNodeVariable);
	Nan::SetPrototypeMethod(tpl, "addUGridNodeVariable", AddUGridNodeVariable);

	Nan::SetPrototypeMethod(tpl, "AllVariablesDefinedInAllBlocksOff", AllVariablesDefinedInAllBlocksOff);
	Nan::SetPrototypeMethod(tpl, "allVariablesDefinedInAllBlocksOff", AllVariablesDefinedInAllBlocksOff);

	Nan::SetPrototypeMethod(tpl, "AllVariablesDefinedInAllBlocksOn", AllVariablesDefinedInAllBlocksOn);
	Nan::SetPrototypeMethod(tpl, "allVariablesDefinedInAllBlocksOn", AllVariablesDefinedInAllBlocksOn);

	Nan::SetPrototypeMethod(tpl, "ElementVariableIsDefinedInBlock", ElementVariableIsDefinedInBlock);
	Nan::SetPrototypeMethod(tpl, "elementVariableIsDefinedInBlock", ElementVariableIsDefinedInBlock);

	Nan::SetPrototypeMethod(tpl, "ExtractGlobalMetadata", ExtractGlobalMetadata);
	Nan::SetPrototypeMethod(tpl, "extractGlobalMetadata", ExtractGlobalMetadata);

	Nan::SetPrototypeMethod(tpl, "ExtractModelMetadata", ExtractModelMetadata);
	Nan::SetPrototypeMethod(tpl, "extractModelMetadata", ExtractModelMetadata);

	Nan::SetPrototypeMethod(tpl, "FindOriginalElementVariableName", FindOriginalElementVariableName);
	Nan::SetPrototypeMethod(tpl, "findOriginalElementVariableName", FindOriginalElementVariableName);

	Nan::SetPrototypeMethod(tpl, "FindOriginalNodeVariableName", FindOriginalNodeVariableName);
	Nan::SetPrototypeMethod(tpl, "findOriginalNodeVariableName", FindOriginalNodeVariableName);

	Nan::SetPrototypeMethod(tpl, "FreeAllGlobalData", FreeAllGlobalData);
	Nan::SetPrototypeMethod(tpl, "freeAllGlobalData", FreeAllGlobalData);

	Nan::SetPrototypeMethod(tpl, "FreeAllLocalData", FreeAllLocalData);
	Nan::SetPrototypeMethod(tpl, "freeAllLocalData", FreeAllLocalData);

	Nan::SetPrototypeMethod(tpl, "FreeBlockDependentData", FreeBlockDependentData);
	Nan::SetPrototypeMethod(tpl, "freeBlockDependentData", FreeBlockDependentData);

	Nan::SetPrototypeMethod(tpl, "FreeOriginalElementVariableNames", FreeOriginalElementVariableNames);
	Nan::SetPrototypeMethod(tpl, "freeOriginalElementVariableNames", FreeOriginalElementVariableNames);

	Nan::SetPrototypeMethod(tpl, "FreeOriginalNodeVariableNames", FreeOriginalNodeVariableNames);
	Nan::SetPrototypeMethod(tpl, "freeOriginalNodeVariableNames", FreeOriginalNodeVariableNames);

	Nan::SetPrototypeMethod(tpl, "FreeUsedElementVariableNames", FreeUsedElementVariableNames);
	Nan::SetPrototypeMethod(tpl, "freeUsedElementVariableNames", FreeUsedElementVariableNames);

	Nan::SetPrototypeMethod(tpl, "FreeUsedElementVariables", FreeUsedElementVariables);
	Nan::SetPrototypeMethod(tpl, "freeUsedElementVariables", FreeUsedElementVariables);

	Nan::SetPrototypeMethod(tpl, "FreeUsedNodeVariableNames", FreeUsedNodeVariableNames);
	Nan::SetPrototypeMethod(tpl, "freeUsedNodeVariableNames", FreeUsedNodeVariableNames);

	Nan::SetPrototypeMethod(tpl, "FreeUsedNodeVariables", FreeUsedNodeVariables);
	Nan::SetPrototypeMethod(tpl, "freeUsedNodeVariables", FreeUsedNodeVariables);

	Nan::SetPrototypeMethod(tpl, "GetAllVariablesDefinedInAllBlocks", GetAllVariablesDefinedInAllBlocks);
	Nan::SetPrototypeMethod(tpl, "getAllVariablesDefinedInAllBlocks", GetAllVariablesDefinedInAllBlocks);

	Nan::SetPrototypeMethod(tpl, "GetBlockLocalIndex", GetBlockLocalIndex);
	Nan::SetPrototypeMethod(tpl, "getBlockLocalIndex", GetBlockLocalIndex);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDimension", GetDimension);
	Nan::SetPrototypeMethod(tpl, "getDimension", GetDimension);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfBlockProperties", GetNumberOfBlockProperties);
	Nan::SetPrototypeMethod(tpl, "getNumberOfBlockProperties", GetNumberOfBlockProperties);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfBlocks", GetNumberOfBlocks);
	Nan::SetPrototypeMethod(tpl, "getNumberOfBlocks", GetNumberOfBlocks);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfElementVariables", GetNumberOfElementVariables);
	Nan::SetPrototypeMethod(tpl, "getNumberOfElementVariables", GetNumberOfElementVariables);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfGlobalVariables", GetNumberOfGlobalVariables);
	Nan::SetPrototypeMethod(tpl, "getNumberOfGlobalVariables", GetNumberOfGlobalVariables);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfInformationLines", GetNumberOfInformationLines);
	Nan::SetPrototypeMethod(tpl, "getNumberOfInformationLines", GetNumberOfInformationLines);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfNodeSetProperties", GetNumberOfNodeSetProperties);
	Nan::SetPrototypeMethod(tpl, "getNumberOfNodeSetProperties", GetNumberOfNodeSetProperties);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfNodeSets", GetNumberOfNodeSets);
	Nan::SetPrototypeMethod(tpl, "getNumberOfNodeSets", GetNumberOfNodeSets);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfNodeVariables", GetNumberOfNodeVariables);
	Nan::SetPrototypeMethod(tpl, "getNumberOfNodeVariables", GetNumberOfNodeVariables);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfQARecords", GetNumberOfQARecords);
	Nan::SetPrototypeMethod(tpl, "getNumberOfQARecords", GetNumberOfQARecords);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfSideSetProperties", GetNumberOfSideSetProperties);
	Nan::SetPrototypeMethod(tpl, "getNumberOfSideSetProperties", GetNumberOfSideSetProperties);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfSideSets", GetNumberOfSideSets);
	Nan::SetPrototypeMethod(tpl, "getNumberOfSideSets", GetNumberOfSideSets);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfTimeSteps", GetNumberOfTimeSteps);
	Nan::SetPrototypeMethod(tpl, "getNumberOfTimeSteps", GetNumberOfTimeSteps);

	Nan::SetPrototypeMethod(tpl, "GetOriginalNumberOfElementVariables", GetOriginalNumberOfElementVariables);
	Nan::SetPrototypeMethod(tpl, "getOriginalNumberOfElementVariables", GetOriginalNumberOfElementVariables);

	Nan::SetPrototypeMethod(tpl, "GetOriginalNumberOfNodeVariables", GetOriginalNumberOfNodeVariables);
	Nan::SetPrototypeMethod(tpl, "getOriginalNumberOfNodeVariables", GetOriginalNumberOfNodeVariables);

	Nan::SetPrototypeMethod(tpl, "GetSizeBlockAttributeArray", GetSizeBlockAttributeArray);
	Nan::SetPrototypeMethod(tpl, "getSizeBlockAttributeArray", GetSizeBlockAttributeArray);

	Nan::SetPrototypeMethod(tpl, "GetSumDistFactPerNodeSet", GetSumDistFactPerNodeSet);
	Nan::SetPrototypeMethod(tpl, "getSumDistFactPerNodeSet", GetSumDistFactPerNodeSet);

	Nan::SetPrototypeMethod(tpl, "GetSumDistFactPerSideSet", GetSumDistFactPerSideSet);
	Nan::SetPrototypeMethod(tpl, "getSumDistFactPerSideSet", GetSumDistFactPerSideSet);

	Nan::SetPrototypeMethod(tpl, "GetSumElementsPerBlock", GetSumElementsPerBlock);
	Nan::SetPrototypeMethod(tpl, "getSumElementsPerBlock", GetSumElementsPerBlock);

	Nan::SetPrototypeMethod(tpl, "GetSumNodesPerNodeSet", GetSumNodesPerNodeSet);
	Nan::SetPrototypeMethod(tpl, "getSumNodesPerNodeSet", GetSumNodesPerNodeSet);

	Nan::SetPrototypeMethod(tpl, "GetSumSidesPerSideSet", GetSumSidesPerSideSet);
	Nan::SetPrototypeMethod(tpl, "getSumSidesPerSideSet", GetSumSidesPerSideSet);

	Nan::SetPrototypeMethod(tpl, "GetTimeStepIndex", GetTimeStepIndex);
	Nan::SetPrototypeMethod(tpl, "getTimeStepIndex", GetTimeStepIndex);

	Nan::SetPrototypeMethod(tpl, "GetTitle", GetTitle);
	Nan::SetPrototypeMethod(tpl, "getTitle", GetTitle);

	Nan::SetPrototypeMethod(tpl, "HasMetadata", HasMetadata);
	Nan::SetPrototypeMethod(tpl, "hasMetadata", HasMetadata);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "MergeGlobalInformation", MergeGlobalInformation);
	Nan::SetPrototypeMethod(tpl, "mergeGlobalInformation", MergeGlobalInformation);

	Nan::SetPrototypeMethod(tpl, "MergeModelMetadata", MergeModelMetadata);
	Nan::SetPrototypeMethod(tpl, "mergeModelMetadata", MergeModelMetadata);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "Pack", Pack);
	Nan::SetPrototypeMethod(tpl, "pack", Pack);

	Nan::SetPrototypeMethod(tpl, "PrintGlobalInformation", PrintGlobalInformation);
	Nan::SetPrototypeMethod(tpl, "printGlobalInformation", PrintGlobalInformation);

	Nan::SetPrototypeMethod(tpl, "PrintLocalInformation", PrintLocalInformation);
	Nan::SetPrototypeMethod(tpl, "printLocalInformation", PrintLocalInformation);

	Nan::SetPrototypeMethod(tpl, "RemoveMetadata", RemoveMetadata);
	Nan::SetPrototypeMethod(tpl, "removeMetadata", RemoveMetadata);

	Nan::SetPrototypeMethod(tpl, "RemoveUGridElementVariable", RemoveUGridElementVariable);
	Nan::SetPrototypeMethod(tpl, "removeUGridElementVariable", RemoveUGridElementVariable);

	Nan::SetPrototypeMethod(tpl, "RemoveUGridNodeVariable", RemoveUGridNodeVariable);
	Nan::SetPrototypeMethod(tpl, "removeUGridNodeVariable", RemoveUGridNodeVariable);

	Nan::SetPrototypeMethod(tpl, "Reset", Reset);
	Nan::SetPrototypeMethod(tpl, "reset", Reset);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAllVariablesDefinedInAllBlocks", SetAllVariablesDefinedInAllBlocks);
	Nan::SetPrototypeMethod(tpl, "setAllVariablesDefinedInAllBlocks", SetAllVariablesDefinedInAllBlocks);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfBlocks", SetNumberOfBlocks);
	Nan::SetPrototypeMethod(tpl, "setNumberOfBlocks", SetNumberOfBlocks);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfNodeSets", SetNumberOfNodeSets);
	Nan::SetPrototypeMethod(tpl, "setNumberOfNodeSets", SetNumberOfNodeSets);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfSideSets", SetNumberOfSideSets);
	Nan::SetPrototypeMethod(tpl, "setNumberOfSideSets", SetNumberOfSideSets);

	Nan::SetPrototypeMethod(tpl, "SetTimeStepIndex", SetTimeStepIndex);
	Nan::SetPrototypeMethod(tpl, "setTimeStepIndex", SetTimeStepIndex);

	Nan::SetPrototypeMethod(tpl, "SetTitle", SetTitle);
	Nan::SetPrototypeMethod(tpl, "setTitle", SetTitle);

	Nan::SetPrototypeMethod(tpl, "Unpack", Unpack);
	Nan::SetPrototypeMethod(tpl, "unpack", Unpack);

	ptpl.Reset( tpl );
}

void VtkModelMetadataWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkModelMetadata> native = vtkSmartPointer<vtkModelMetadata>::New();
		VtkModelMetadataWrap* obj = new VtkModelMetadataWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkModelMetadataWrap::AddInformationLine(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddInformationLine(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::AddQARecord(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsString())
			{
				Nan::Utf8String a2(info[2]);
				if(info.Length() > 3 && info[3]->IsString())
				{
					Nan::Utf8String a3(info[3]);
										if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->AddQARecord(
						*a0,
						*a1,
						*a2,
						*a3
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::AddUGridElementVariable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->AddUGridElementVariable(
					*a0,
					*a1,
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::AddUGridNodeVariable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->AddUGridNodeVariable(
					*a0,
					*a1,
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::AllVariablesDefinedInAllBlocksOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AllVariablesDefinedInAllBlocksOff();
}

void VtkModelMetadataWrap::AllVariablesDefinedInAllBlocksOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AllVariablesDefinedInAllBlocksOn();
}

void VtkModelMetadataWrap::ElementVariableIsDefinedInBlock(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->ElementVariableIsDefinedInBlock(
				*a0,
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::ExtractGlobalMetadata(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	vtkModelMetadata * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->ExtractGlobalMetadata();
	VtkModelMetadataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkModelMetadataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkModelMetadataWrap *w = new VtkModelMetadataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkModelMetadataWrap::ExtractModelMetadata(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkIdTypeArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkIdTypeArrayWrap *a0 = ObjectWrap::Unwrap<VtkIdTypeArrayWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataSetWrap *a1 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[1]->ToObject());
			vtkModelMetadata * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->ExtractModelMetadata(
				(vtkIdTypeArray *) a0->native.GetPointer(),
				(vtkDataSet *) a1->native.GetPointer()
			);
			VtkModelMetadataWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkModelMetadataWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkModelMetadataWrap *w = new VtkModelMetadataWrap();
			w->native = r;
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::FindOriginalElementVariableName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->FindOriginalElementVariableName(
				*a0,
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::FindOriginalNodeVariableName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->FindOriginalNodeVariableName(
				*a0,
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::FreeAllGlobalData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FreeAllGlobalData();
}

void VtkModelMetadataWrap::FreeAllLocalData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FreeAllLocalData();
}

void VtkModelMetadataWrap::FreeBlockDependentData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FreeBlockDependentData();
}

void VtkModelMetadataWrap::FreeOriginalElementVariableNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FreeOriginalElementVariableNames();
}

void VtkModelMetadataWrap::FreeOriginalNodeVariableNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FreeOriginalNodeVariableNames();
}

void VtkModelMetadataWrap::FreeUsedElementVariableNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FreeUsedElementVariableNames();
}

void VtkModelMetadataWrap::FreeUsedElementVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FreeUsedElementVariables();
}

void VtkModelMetadataWrap::FreeUsedNodeVariableNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FreeUsedNodeVariableNames();
}

void VtkModelMetadataWrap::FreeUsedNodeVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FreeUsedNodeVariables();
}

void VtkModelMetadataWrap::GetAllVariablesDefinedInAllBlocks(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAllVariablesDefinedInAllBlocks();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetBlockLocalIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetBlockLocalIndex(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkModelMetadataWrap::GetDimension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDimension();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetNumberOfBlockProperties(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfBlockProperties();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetNumberOfBlocks(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfBlocks();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetNumberOfElementVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfElementVariables();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetNumberOfGlobalVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfGlobalVariables();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetNumberOfInformationLines(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfInformationLines();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetNumberOfNodeSetProperties(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfNodeSetProperties();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetNumberOfNodeSets(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfNodeSets();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetNumberOfNodeVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfNodeVariables();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetNumberOfQARecords(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfQARecords();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetNumberOfSideSetProperties(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfSideSetProperties();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetNumberOfSideSets(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfSideSets();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetNumberOfTimeSteps(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfTimeSteps();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetOriginalNumberOfElementVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOriginalNumberOfElementVariables();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetOriginalNumberOfNodeVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOriginalNumberOfNodeVariables();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetSizeBlockAttributeArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSizeBlockAttributeArray();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetSumDistFactPerNodeSet(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSumDistFactPerNodeSet();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetSumDistFactPerSideSet(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSumDistFactPerSideSet();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetSumElementsPerBlock(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSumElementsPerBlock();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetSumNodesPerNodeSet(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSumNodesPerNodeSet();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetSumSidesPerSideSet(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSumSidesPerSideSet();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetTimeStepIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTimeStepIndex();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkModelMetadataWrap::GetTitle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTitle();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkModelMetadataWrap::HasMetadata(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->HasMetadata(
			(vtkDataSet *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::MergeGlobalInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkModelMetadataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkModelMetadataWrap *a0 = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->MergeGlobalInformation(
			(vtkModelMetadata *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::MergeModelMetadata(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkModelMetadataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkModelMetadataWrap *a0 = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->MergeModelMetadata(
			(vtkModelMetadata *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	vtkModelMetadata * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkModelMetadataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkModelMetadataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkModelMetadataWrap *w = new VtkModelMetadataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkModelMetadataWrap::Pack(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Pack(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::PrintGlobalInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PrintGlobalInformation();
}

void VtkModelMetadataWrap::PrintLocalInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PrintLocalInformation();
}

void VtkModelMetadataWrap::RemoveMetadata(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveMetadata(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::RemoveUGridElementVariable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RemoveUGridElementVariable(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::RemoveUGridNodeVariable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RemoveUGridNodeVariable(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::Reset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Reset();
}

void VtkModelMetadataWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkModelMetadata * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkModelMetadataWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkModelMetadataWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkModelMetadataWrap *w = new VtkModelMetadataWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::SetAllVariablesDefinedInAllBlocks(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAllVariablesDefinedInAllBlocks(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::SetNumberOfBlocks(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfBlocks(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::SetNumberOfNodeSets(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfNodeSets(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::SetNumberOfSideSets(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfSideSets(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::SetTimeStepIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTimeStepIndex(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::SetTitle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTitle(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkModelMetadataWrap::Unpack(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkModelMetadataWrap *wrapper = ObjectWrap::Unwrap<VtkModelMetadataWrap>(info.Holder());
	vtkModelMetadata *native = (vtkModelMetadata *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->Unpack(
				(vtkDataSet *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

