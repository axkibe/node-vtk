/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKABSTRACTARRAYWRAP_H
#define NATIVE_EXTENSION_VTK_VTKABSTRACTARRAYWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkAbstractArray.h>

#include "vtkObjectWrap.h"
#include "../../plus/plus.h"

class VtkAbstractArrayWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkAbstractArrayWrap(vtkSmartPointer<vtkAbstractArray>);
		VtkAbstractArrayWrap();
		~VtkAbstractArrayWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void CopyComponentNames(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CopyInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CreateArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DISCRETE_VALUES(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DISCRETE_VALUE_SAMPLE_PARAMETERS(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GUI_HIDE(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetArrayType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDataTypeAsString(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDataTypeSize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaxDiscreteValues(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfComponents(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfComponentsMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfComponentsMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetProminentComponentValues(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTuples(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void HasAComponentName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void HasInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void HasStandardMemoryLayout(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void PER_COMPONENT(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Reset(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaxDiscreteValues(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetNumberOfComponents(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKABSTRACTARRAYWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKABSTRACTARRAYWRAP_CLASSDEF
#endif
};

#endif
