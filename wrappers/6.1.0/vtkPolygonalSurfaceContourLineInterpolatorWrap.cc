/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataContourLineInterpolatorWrap.h"
#include "vtkPolygonalSurfaceContourLineInterpolatorWrap.h"
#include "vtkObjectWrap.h"
#include "vtkRendererWrap.h"
#include "vtkContourRepresentationWrap.h"
#include "vtkIdListWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkPolygonalSurfaceContourLineInterpolatorWrap::ptpl;

VtkPolygonalSurfaceContourLineInterpolatorWrap::VtkPolygonalSurfaceContourLineInterpolatorWrap()
{ }

VtkPolygonalSurfaceContourLineInterpolatorWrap::VtkPolygonalSurfaceContourLineInterpolatorWrap(vtkSmartPointer<vtkPolygonalSurfaceContourLineInterpolator> _native)
{ native = _native; }

VtkPolygonalSurfaceContourLineInterpolatorWrap::~VtkPolygonalSurfaceContourLineInterpolatorWrap()
{ }

void VtkPolygonalSurfaceContourLineInterpolatorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkPolygonalSurfaceContourLineInterpolator").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("PolygonalSurfaceContourLineInterpolator").ToLocalChecked(), ConstructorGetter);
}

void VtkPolygonalSurfaceContourLineInterpolatorWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkPolygonalSurfaceContourLineInterpolatorWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataContourLineInterpolatorWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataContourLineInterpolatorWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkPolygonalSurfaceContourLineInterpolatorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetContourPointIds", GetContourPointIds);
	Nan::SetPrototypeMethod(tpl, "getContourPointIds", GetContourPointIds);

	Nan::SetPrototypeMethod(tpl, "GetDistanceOffset", GetDistanceOffset);
	Nan::SetPrototypeMethod(tpl, "getDistanceOffset", GetDistanceOffset);

	Nan::SetPrototypeMethod(tpl, "InterpolateLine", InterpolateLine);
	Nan::SetPrototypeMethod(tpl, "interpolateLine", InterpolateLine);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetDistanceOffset", SetDistanceOffset);
	Nan::SetPrototypeMethod(tpl, "setDistanceOffset", SetDistanceOffset);

	ptpl.Reset( tpl );
}

void VtkPolygonalSurfaceContourLineInterpolatorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkPolygonalSurfaceContourLineInterpolator> native = vtkSmartPointer<vtkPolygonalSurfaceContourLineInterpolator>::New();
		VtkPolygonalSurfaceContourLineInterpolatorWrap* obj = new VtkPolygonalSurfaceContourLineInterpolatorWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkPolygonalSurfaceContourLineInterpolatorWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolygonalSurfaceContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPolygonalSurfaceContourLineInterpolatorWrap>(info.Holder());
	vtkPolygonalSurfaceContourLineInterpolator *native = (vtkPolygonalSurfaceContourLineInterpolator *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPolygonalSurfaceContourLineInterpolatorWrap::GetContourPointIds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolygonalSurfaceContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPolygonalSurfaceContourLineInterpolatorWrap>(info.Holder());
	vtkPolygonalSurfaceContourLineInterpolator *native = (vtkPolygonalSurfaceContourLineInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkContourRepresentationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkContourRepresentationWrap *a0 = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkIdListWrap::ptpl))->HasInstance(info[1]))
		{
			VtkIdListWrap *a1 = ObjectWrap::Unwrap<VtkIdListWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetContourPointIds(
				(vtkContourRepresentation *) a0->native.GetPointer(),
				(vtkIdList *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolygonalSurfaceContourLineInterpolatorWrap::GetDistanceOffset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolygonalSurfaceContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPolygonalSurfaceContourLineInterpolatorWrap>(info.Holder());
	vtkPolygonalSurfaceContourLineInterpolator *native = (vtkPolygonalSurfaceContourLineInterpolator *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDistanceOffset();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolygonalSurfaceContourLineInterpolatorWrap::InterpolateLine(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolygonalSurfaceContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPolygonalSurfaceContourLineInterpolatorWrap>(info.Holder());
	vtkPolygonalSurfaceContourLineInterpolator *native = (vtkPolygonalSurfaceContourLineInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkContourRepresentationWrap::ptpl))->HasInstance(info[1]))
		{
			VtkContourRepresentationWrap *a1 = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->InterpolateLine(
						(vtkRenderer *) a0->native.GetPointer(),
						(vtkContourRepresentation *) a1->native.GetPointer(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolygonalSurfaceContourLineInterpolatorWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolygonalSurfaceContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPolygonalSurfaceContourLineInterpolatorWrap>(info.Holder());
	vtkPolygonalSurfaceContourLineInterpolator *native = (vtkPolygonalSurfaceContourLineInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolygonalSurfaceContourLineInterpolatorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolygonalSurfaceContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPolygonalSurfaceContourLineInterpolatorWrap>(info.Holder());
	vtkPolygonalSurfaceContourLineInterpolator *native = (vtkPolygonalSurfaceContourLineInterpolator *)wrapper->native.GetPointer();
	vtkPolygonalSurfaceContourLineInterpolator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkPolygonalSurfaceContourLineInterpolatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPolygonalSurfaceContourLineInterpolatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolygonalSurfaceContourLineInterpolatorWrap *w = new VtkPolygonalSurfaceContourLineInterpolatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolygonalSurfaceContourLineInterpolatorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolygonalSurfaceContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPolygonalSurfaceContourLineInterpolatorWrap>(info.Holder());
	vtkPolygonalSurfaceContourLineInterpolator *native = (vtkPolygonalSurfaceContourLineInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkPolygonalSurfaceContourLineInterpolator * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkPolygonalSurfaceContourLineInterpolatorWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkPolygonalSurfaceContourLineInterpolatorWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPolygonalSurfaceContourLineInterpolatorWrap *w = new VtkPolygonalSurfaceContourLineInterpolatorWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolygonalSurfaceContourLineInterpolatorWrap::SetDistanceOffset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolygonalSurfaceContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPolygonalSurfaceContourLineInterpolatorWrap>(info.Holder());
	vtkPolygonalSurfaceContourLineInterpolator *native = (vtkPolygonalSurfaceContourLineInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDistanceOffset(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

