/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKSHADOWMAPBAKERPASSWRAP_H
#define NATIVE_EXTENSION_VTK_VTKSHADOWMAPBAKERPASSWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkShadowMapBakerPass.h>

#include "vtkRenderPassWrap.h"
#include "../../plus/plus.h"

class VtkShadowMapBakerPassWrap : public VtkRenderPassWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkShadowMapBakerPassWrap(vtkSmartPointer<vtkShadowMapBakerPass>);
		VtkShadowMapBakerPassWrap();
		~VtkShadowMapBakerPassWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCompositeZPass(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHasShadows(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNeedUpdate(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOpaquePass(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetResolution(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void LightCreatesShadow(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void OCCLUDER(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RECEIVER(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCompositeZPass(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetOpaquePass(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetResolution(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetUpToDate(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKSHADOWMAPBAKERPASSWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKSHADOWMAPBAKERPASSWRAP_CLASSDEF
#endif
};

#endif
