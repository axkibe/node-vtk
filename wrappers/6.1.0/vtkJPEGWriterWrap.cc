/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkImageWriterWrap.h"
#include "vtkJPEGWriterWrap.h"
#include "vtkObjectWrap.h"
#include "vtkUnsignedCharArrayWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkJPEGWriterWrap::ptpl;

VtkJPEGWriterWrap::VtkJPEGWriterWrap()
{ }

VtkJPEGWriterWrap::VtkJPEGWriterWrap(vtkSmartPointer<vtkJPEGWriter> _native)
{ native = _native; }

VtkJPEGWriterWrap::~VtkJPEGWriterWrap()
{ }

void VtkJPEGWriterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkJPEGWriter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("JPEGWriter").ToLocalChecked(), ConstructorGetter);
}

void VtkJPEGWriterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkJPEGWriterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkImageWriterWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkImageWriterWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkJPEGWriterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetQuality", GetQuality);
	Nan::SetPrototypeMethod(tpl, "getQuality", GetQuality);

	Nan::SetPrototypeMethod(tpl, "GetQualityMaxValue", GetQualityMaxValue);
	Nan::SetPrototypeMethod(tpl, "getQualityMaxValue", GetQualityMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetQualityMinValue", GetQualityMinValue);
	Nan::SetPrototypeMethod(tpl, "getQualityMinValue", GetQualityMinValue);

	Nan::SetPrototypeMethod(tpl, "GetResult", GetResult);
	Nan::SetPrototypeMethod(tpl, "getResult", GetResult);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ProgressiveOff", ProgressiveOff);
	Nan::SetPrototypeMethod(tpl, "progressiveOff", ProgressiveOff);

	Nan::SetPrototypeMethod(tpl, "ProgressiveOn", ProgressiveOn);
	Nan::SetPrototypeMethod(tpl, "progressiveOn", ProgressiveOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetQuality", SetQuality);
	Nan::SetPrototypeMethod(tpl, "setQuality", SetQuality);

	Nan::SetPrototypeMethod(tpl, "SetResult", SetResult);
	Nan::SetPrototypeMethod(tpl, "setResult", SetResult);

	Nan::SetPrototypeMethod(tpl, "Write", Write);
	Nan::SetPrototypeMethod(tpl, "write", Write);

	Nan::SetPrototypeMethod(tpl, "WriteToMemoryOff", WriteToMemoryOff);
	Nan::SetPrototypeMethod(tpl, "writeToMemoryOff", WriteToMemoryOff);

	Nan::SetPrototypeMethod(tpl, "WriteToMemoryOn", WriteToMemoryOn);
	Nan::SetPrototypeMethod(tpl, "writeToMemoryOn", WriteToMemoryOn);

	ptpl.Reset( tpl );
}

void VtkJPEGWriterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkJPEGWriter> native = vtkSmartPointer<vtkJPEGWriter>::New();
		VtkJPEGWriterWrap* obj = new VtkJPEGWriterWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkJPEGWriterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkJPEGWriterWrap::GetQuality(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetQuality();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkJPEGWriterWrap::GetQualityMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetQualityMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkJPEGWriterWrap::GetQualityMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetQualityMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkJPEGWriterWrap::GetResult(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	vtkUnsignedCharArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResult();
		VtkUnsignedCharArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkUnsignedCharArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkUnsignedCharArrayWrap *w = new VtkUnsignedCharArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkJPEGWriterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkJPEGWriterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	vtkJPEGWriter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkJPEGWriterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkJPEGWriterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkJPEGWriterWrap *w = new VtkJPEGWriterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkJPEGWriterWrap::ProgressiveOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ProgressiveOff();
}

void VtkJPEGWriterWrap::ProgressiveOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ProgressiveOn();
}

void VtkJPEGWriterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkJPEGWriter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkJPEGWriterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkJPEGWriterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkJPEGWriterWrap *w = new VtkJPEGWriterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkJPEGWriterWrap::SetQuality(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetQuality(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkJPEGWriterWrap::SetResult(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkUnsignedCharArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkUnsignedCharArrayWrap *a0 = ObjectWrap::Unwrap<VtkUnsignedCharArrayWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetResult(
			(vtkUnsignedCharArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkJPEGWriterWrap::Write(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Write();
}

void VtkJPEGWriterWrap::WriteToMemoryOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->WriteToMemoryOff();
}

void VtkJPEGWriterWrap::WriteToMemoryOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkJPEGWriterWrap *wrapper = ObjectWrap::Unwrap<VtkJPEGWriterWrap>(info.Holder());
	vtkJPEGWriter *native = (vtkJPEGWriter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->WriteToMemoryOn();
}

