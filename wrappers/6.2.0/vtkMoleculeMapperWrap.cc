/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkMapperWrap.h"
#include "vtkMoleculeMapperWrap.h"
#include "vtkObjectWrap.h"
#include "vtkMoleculeWrap.h"
#include "vtkSelectionWrap.h"
#include "vtkIdTypeArrayWrap.h"
#include "vtkRendererWrap.h"
#include "vtkActorWrap.h"
#include "vtkWindowWrap.h"
#include "vtkInformationWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkMoleculeMapperWrap::ptpl;

VtkMoleculeMapperWrap::VtkMoleculeMapperWrap()
{ }

VtkMoleculeMapperWrap::VtkMoleculeMapperWrap(vtkSmartPointer<vtkMoleculeMapper> _native)
{ native = _native; }

VtkMoleculeMapperWrap::~VtkMoleculeMapperWrap()
{ }

void VtkMoleculeMapperWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkMoleculeMapper").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("MoleculeMapper").ToLocalChecked(), ConstructorGetter);
}

void VtkMoleculeMapperWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkMoleculeMapperWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkMapperWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkMapperWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkMoleculeMapperWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "FillInputPortInformation", FillInputPortInformation);
	Nan::SetPrototypeMethod(tpl, "fillInputPortInformation", FillInputPortInformation);

	Nan::SetPrototypeMethod(tpl, "GetAtomicRadiusType", GetAtomicRadiusType);
	Nan::SetPrototypeMethod(tpl, "getAtomicRadiusType", GetAtomicRadiusType);

	Nan::SetPrototypeMethod(tpl, "GetAtomicRadiusTypeAsString", GetAtomicRadiusTypeAsString);
	Nan::SetPrototypeMethod(tpl, "getAtomicRadiusTypeAsString", GetAtomicRadiusTypeAsString);

	Nan::SetPrototypeMethod(tpl, "GetBondColor", GetBondColor);
	Nan::SetPrototypeMethod(tpl, "getBondColor", GetBondColor);

	Nan::SetPrototypeMethod(tpl, "GetBondColorMode", GetBondColorMode);
	Nan::SetPrototypeMethod(tpl, "getBondColorMode", GetBondColorMode);

	Nan::SetPrototypeMethod(tpl, "GetBondColorModeAsString", GetBondColorModeAsString);
	Nan::SetPrototypeMethod(tpl, "getBondColorModeAsString", GetBondColorModeAsString);

	Nan::SetPrototypeMethod(tpl, "GetBounds", GetBounds);
	Nan::SetPrototypeMethod(tpl, "getBounds", GetBounds);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetInput", GetInput);
	Nan::SetPrototypeMethod(tpl, "getInput", GetInput);

	Nan::SetPrototypeMethod(tpl, "GetRenderAtoms", GetRenderAtoms);
	Nan::SetPrototypeMethod(tpl, "getRenderAtoms", GetRenderAtoms);

	Nan::SetPrototypeMethod(tpl, "GetRenderBonds", GetRenderBonds);
	Nan::SetPrototypeMethod(tpl, "getRenderBonds", GetRenderBonds);

	Nan::SetPrototypeMethod(tpl, "GetSelectedAtoms", GetSelectedAtoms);
	Nan::SetPrototypeMethod(tpl, "getSelectedAtoms", GetSelectedAtoms);

	Nan::SetPrototypeMethod(tpl, "GetSelectedAtomsAndBonds", GetSelectedAtomsAndBonds);
	Nan::SetPrototypeMethod(tpl, "getSelectedAtomsAndBonds", GetSelectedAtomsAndBonds);

	Nan::SetPrototypeMethod(tpl, "GetSelectedBonds", GetSelectedBonds);
	Nan::SetPrototypeMethod(tpl, "getSelectedBonds", GetSelectedBonds);

	Nan::SetPrototypeMethod(tpl, "GetSupportsSelection", GetSupportsSelection);
	Nan::SetPrototypeMethod(tpl, "getSupportsSelection", GetSupportsSelection);

	Nan::SetPrototypeMethod(tpl, "GetUseMultiCylindersForBonds", GetUseMultiCylindersForBonds);
	Nan::SetPrototypeMethod(tpl, "getUseMultiCylindersForBonds", GetUseMultiCylindersForBonds);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "Render", Render);
	Nan::SetPrototypeMethod(tpl, "render", Render);

	Nan::SetPrototypeMethod(tpl, "RenderAtomsOff", RenderAtomsOff);
	Nan::SetPrototypeMethod(tpl, "renderAtomsOff", RenderAtomsOff);

	Nan::SetPrototypeMethod(tpl, "RenderAtomsOn", RenderAtomsOn);
	Nan::SetPrototypeMethod(tpl, "renderAtomsOn", RenderAtomsOn);

	Nan::SetPrototypeMethod(tpl, "RenderBondsOff", RenderBondsOff);
	Nan::SetPrototypeMethod(tpl, "renderBondsOff", RenderBondsOff);

	Nan::SetPrototypeMethod(tpl, "RenderBondsOn", RenderBondsOn);
	Nan::SetPrototypeMethod(tpl, "renderBondsOn", RenderBondsOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAtomicRadiusType", SetAtomicRadiusType);
	Nan::SetPrototypeMethod(tpl, "setAtomicRadiusType", SetAtomicRadiusType);

	Nan::SetPrototypeMethod(tpl, "SetAtomicRadiusTypeToCovalentRadius", SetAtomicRadiusTypeToCovalentRadius);
	Nan::SetPrototypeMethod(tpl, "setAtomicRadiusTypeToCovalentRadius", SetAtomicRadiusTypeToCovalentRadius);

	Nan::SetPrototypeMethod(tpl, "SetAtomicRadiusTypeToUnitRadius", SetAtomicRadiusTypeToUnitRadius);
	Nan::SetPrototypeMethod(tpl, "setAtomicRadiusTypeToUnitRadius", SetAtomicRadiusTypeToUnitRadius);

	Nan::SetPrototypeMethod(tpl, "SetAtomicRadiusTypeToVDWRadius", SetAtomicRadiusTypeToVDWRadius);
	Nan::SetPrototypeMethod(tpl, "setAtomicRadiusTypeToVDWRadius", SetAtomicRadiusTypeToVDWRadius);

	Nan::SetPrototypeMethod(tpl, "SetBondColor", SetBondColor);
	Nan::SetPrototypeMethod(tpl, "setBondColor", SetBondColor);

	Nan::SetPrototypeMethod(tpl, "SetBondColorMode", SetBondColorMode);
	Nan::SetPrototypeMethod(tpl, "setBondColorMode", SetBondColorMode);

	Nan::SetPrototypeMethod(tpl, "SetBondColorModeToDiscreteByAtom", SetBondColorModeToDiscreteByAtom);
	Nan::SetPrototypeMethod(tpl, "setBondColorModeToDiscreteByAtom", SetBondColorModeToDiscreteByAtom);

	Nan::SetPrototypeMethod(tpl, "SetBondColorModeToSingleColor", SetBondColorModeToSingleColor);
	Nan::SetPrototypeMethod(tpl, "setBondColorModeToSingleColor", SetBondColorModeToSingleColor);

	Nan::SetPrototypeMethod(tpl, "SetInputData", SetInputData);
	Nan::SetPrototypeMethod(tpl, "setInputData", SetInputData);

	Nan::SetPrototypeMethod(tpl, "SetRenderAtoms", SetRenderAtoms);
	Nan::SetPrototypeMethod(tpl, "setRenderAtoms", SetRenderAtoms);

	Nan::SetPrototypeMethod(tpl, "SetRenderBonds", SetRenderBonds);
	Nan::SetPrototypeMethod(tpl, "setRenderBonds", SetRenderBonds);

	Nan::SetPrototypeMethod(tpl, "SetUseMultiCylindersForBonds", SetUseMultiCylindersForBonds);
	Nan::SetPrototypeMethod(tpl, "setUseMultiCylindersForBonds", SetUseMultiCylindersForBonds);

	Nan::SetPrototypeMethod(tpl, "UseBallAndStickSettings", UseBallAndStickSettings);
	Nan::SetPrototypeMethod(tpl, "useBallAndStickSettings", UseBallAndStickSettings);

	Nan::SetPrototypeMethod(tpl, "UseFastSettings", UseFastSettings);
	Nan::SetPrototypeMethod(tpl, "useFastSettings", UseFastSettings);

	Nan::SetPrototypeMethod(tpl, "UseLiquoriceStickSettings", UseLiquoriceStickSettings);
	Nan::SetPrototypeMethod(tpl, "useLiquoriceStickSettings", UseLiquoriceStickSettings);

	Nan::SetPrototypeMethod(tpl, "UseMultiCylindersForBondsOff", UseMultiCylindersForBondsOff);
	Nan::SetPrototypeMethod(tpl, "useMultiCylindersForBondsOff", UseMultiCylindersForBondsOff);

	Nan::SetPrototypeMethod(tpl, "UseMultiCylindersForBondsOn", UseMultiCylindersForBondsOn);
	Nan::SetPrototypeMethod(tpl, "useMultiCylindersForBondsOn", UseMultiCylindersForBondsOn);

	Nan::SetPrototypeMethod(tpl, "UseVDWSpheresSettings", UseVDWSpheresSettings);
	Nan::SetPrototypeMethod(tpl, "useVDWSpheresSettings", UseVDWSpheresSettings);

#ifdef VTK_NODE_PLUS_VTKMOLECULEMAPPERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKMOLECULEMAPPERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkMoleculeMapperWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkMoleculeMapper> native = vtkSmartPointer<vtkMoleculeMapper>::New();
		VtkMoleculeMapperWrap* obj = new VtkMoleculeMapperWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkMoleculeMapperWrap::FillInputPortInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[1]))
		{
			VtkInformationWrap *a1 = ObjectWrap::Unwrap<VtkInformationWrap>(info[1]->ToObject());
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->FillInputPortInformation(
				info[0]->Int32Value(),
				(vtkInformation *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::GetAtomicRadiusType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAtomicRadiusType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMoleculeMapperWrap::GetAtomicRadiusTypeAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAtomicRadiusTypeAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMoleculeMapperWrap::GetBondColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	unsigned char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBondColor();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(unsigned char));
	Local<v8::Uint8Array> at = v8::Uint8Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(unsigned char));
	info.GetReturnValue().Set(at);
}

void VtkMoleculeMapperWrap::GetBondColorMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBondColorMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMoleculeMapperWrap::GetBondColorModeAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBondColorModeAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMoleculeMapperWrap::GetBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetBounds(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[6];
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 6; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetBounds(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMoleculeMapperWrap::GetInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	vtkMolecule * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInput();
	VtkMoleculeWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkMoleculeWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMoleculeWrap *w = new VtkMoleculeWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMoleculeMapperWrap::GetRenderAtoms(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRenderAtoms();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMoleculeMapperWrap::GetRenderBonds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRenderBonds();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMoleculeMapperWrap::GetSelectedAtoms(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkSelectionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkSelectionWrap *a0 = ObjectWrap::Unwrap<VtkSelectionWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkIdTypeArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkIdTypeArrayWrap *a1 = ObjectWrap::Unwrap<VtkIdTypeArrayWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetSelectedAtoms(
				(vtkSelection *) a0->native.GetPointer(),
				(vtkIdTypeArray *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::GetSelectedAtomsAndBonds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkSelectionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkSelectionWrap *a0 = ObjectWrap::Unwrap<VtkSelectionWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkIdTypeArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkIdTypeArrayWrap *a1 = ObjectWrap::Unwrap<VtkIdTypeArrayWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject() && (Nan::New(VtkIdTypeArrayWrap::ptpl))->HasInstance(info[2]))
			{
				VtkIdTypeArrayWrap *a2 = ObjectWrap::Unwrap<VtkIdTypeArrayWrap>(info[2]->ToObject());
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->GetSelectedAtomsAndBonds(
					(vtkSelection *) a0->native.GetPointer(),
					(vtkIdTypeArray *) a1->native.GetPointer(),
					(vtkIdTypeArray *) a2->native.GetPointer()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::GetSelectedBonds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkSelectionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkSelectionWrap *a0 = ObjectWrap::Unwrap<VtkSelectionWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkIdTypeArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkIdTypeArrayWrap *a1 = ObjectWrap::Unwrap<VtkIdTypeArrayWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetSelectedBonds(
				(vtkSelection *) a0->native.GetPointer(),
				(vtkIdTypeArray *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::GetSupportsSelection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSupportsSelection();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMoleculeMapperWrap::GetUseMultiCylindersForBonds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseMultiCylindersForBonds();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMoleculeMapperWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	vtkMoleculeMapper * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkMoleculeMapperWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkMoleculeMapperWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMoleculeMapperWrap *w = new VtkMoleculeMapperWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMoleculeMapperWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::Render(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkActorWrap::ptpl))->HasInstance(info[1]))
		{
			VtkActorWrap *a1 = ObjectWrap::Unwrap<VtkActorWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->Render(
				(vtkRenderer *) a0->native.GetPointer(),
				(vtkActor *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::RenderAtomsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RenderAtomsOff();
}

void VtkMoleculeMapperWrap::RenderAtomsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RenderAtomsOn();
}

void VtkMoleculeMapperWrap::RenderBondsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RenderBondsOff();
}

void VtkMoleculeMapperWrap::RenderBondsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RenderBondsOn();
}

void VtkMoleculeMapperWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkMoleculeMapper * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkMoleculeMapperWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkMoleculeMapperWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkMoleculeMapperWrap *w = new VtkMoleculeMapperWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::SetAtomicRadiusType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAtomicRadiusType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::SetAtomicRadiusTypeToCovalentRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetAtomicRadiusTypeToCovalentRadius();
}

void VtkMoleculeMapperWrap::SetAtomicRadiusTypeToUnitRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetAtomicRadiusTypeToUnitRadius();
}

void VtkMoleculeMapperWrap::SetAtomicRadiusTypeToVDWRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetAtomicRadiusTypeToVDWRadius();
}

void VtkMoleculeMapperWrap::SetBondColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsUint8Array())
	{
		v8::Local<v8::Uint8Array>a0(v8::Local<v8::Uint8Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBondColor(
			(unsigned char *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		unsigned char b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsUint32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Uint32Value();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBondColor(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsUint32())
	{
		if(info.Length() > 1 && info[1]->IsUint32())
		{
			if(info.Length() > 2 && info[2]->IsUint32())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetBondColor(
					info[0]->Uint32Value(),
					info[1]->Uint32Value(),
					info[2]->Uint32Value()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::SetBondColorMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBondColorMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::SetBondColorModeToDiscreteByAtom(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetBondColorModeToDiscreteByAtom();
}

void VtkMoleculeMapperWrap::SetBondColorModeToSingleColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetBondColorModeToSingleColor();
}

void VtkMoleculeMapperWrap::SetInputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkMoleculeWrap::ptpl))->HasInstance(info[0]))
	{
		VtkMoleculeWrap *a0 = ObjectWrap::Unwrap<VtkMoleculeWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputData(
			(vtkMolecule *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::SetRenderAtoms(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRenderAtoms(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::SetRenderBonds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRenderBonds(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::SetUseMultiCylindersForBonds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseMultiCylindersForBonds(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMoleculeMapperWrap::UseBallAndStickSettings(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseBallAndStickSettings();
}

void VtkMoleculeMapperWrap::UseFastSettings(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseFastSettings();
}

void VtkMoleculeMapperWrap::UseLiquoriceStickSettings(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseLiquoriceStickSettings();
}

void VtkMoleculeMapperWrap::UseMultiCylindersForBondsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseMultiCylindersForBondsOff();
}

void VtkMoleculeMapperWrap::UseMultiCylindersForBondsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseMultiCylindersForBondsOn();
}

void VtkMoleculeMapperWrap::UseVDWSpheresSettings(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMoleculeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMoleculeMapperWrap>(info.Holder());
	vtkMoleculeMapper *native = (vtkMoleculeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseVDWSpheresSettings();
}

