/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkDataSetAlgorithmWrap.h"
#include "vtkIdFilterWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkIdFilterWrap::ptpl;

VtkIdFilterWrap::VtkIdFilterWrap()
{ }

VtkIdFilterWrap::VtkIdFilterWrap(vtkSmartPointer<vtkIdFilter> _native)
{ native = _native; }

VtkIdFilterWrap::~VtkIdFilterWrap()
{ }

void VtkIdFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkIdFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("IdFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkIdFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkIdFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkDataSetAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkDataSetAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkIdFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CellIdsOff", CellIdsOff);
	Nan::SetPrototypeMethod(tpl, "cellIdsOff", CellIdsOff);

	Nan::SetPrototypeMethod(tpl, "CellIdsOn", CellIdsOn);
	Nan::SetPrototypeMethod(tpl, "cellIdsOn", CellIdsOn);

	Nan::SetPrototypeMethod(tpl, "FieldDataOff", FieldDataOff);
	Nan::SetPrototypeMethod(tpl, "fieldDataOff", FieldDataOff);

	Nan::SetPrototypeMethod(tpl, "FieldDataOn", FieldDataOn);
	Nan::SetPrototypeMethod(tpl, "fieldDataOn", FieldDataOn);

	Nan::SetPrototypeMethod(tpl, "GetCellIds", GetCellIds);
	Nan::SetPrototypeMethod(tpl, "getCellIds", GetCellIds);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetFieldData", GetFieldData);
	Nan::SetPrototypeMethod(tpl, "getFieldData", GetFieldData);

	Nan::SetPrototypeMethod(tpl, "GetIdsArrayName", GetIdsArrayName);
	Nan::SetPrototypeMethod(tpl, "getIdsArrayName", GetIdsArrayName);

	Nan::SetPrototypeMethod(tpl, "GetPointIds", GetPointIds);
	Nan::SetPrototypeMethod(tpl, "getPointIds", GetPointIds);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PointIdsOff", PointIdsOff);
	Nan::SetPrototypeMethod(tpl, "pointIdsOff", PointIdsOff);

	Nan::SetPrototypeMethod(tpl, "PointIdsOn", PointIdsOn);
	Nan::SetPrototypeMethod(tpl, "pointIdsOn", PointIdsOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCellIds", SetCellIds);
	Nan::SetPrototypeMethod(tpl, "setCellIds", SetCellIds);

	Nan::SetPrototypeMethod(tpl, "SetFieldData", SetFieldData);
	Nan::SetPrototypeMethod(tpl, "setFieldData", SetFieldData);

	Nan::SetPrototypeMethod(tpl, "SetIdsArrayName", SetIdsArrayName);
	Nan::SetPrototypeMethod(tpl, "setIdsArrayName", SetIdsArrayName);

	Nan::SetPrototypeMethod(tpl, "SetPointIds", SetPointIds);
	Nan::SetPrototypeMethod(tpl, "setPointIds", SetPointIds);

	ptpl.Reset( tpl );
}

void VtkIdFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkIdFilter> native = vtkSmartPointer<vtkIdFilter>::New();
		VtkIdFilterWrap* obj = new VtkIdFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkIdFilterWrap::CellIdsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CellIdsOff();
}

void VtkIdFilterWrap::CellIdsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CellIdsOn();
}

void VtkIdFilterWrap::FieldDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FieldDataOff();
}

void VtkIdFilterWrap::FieldDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FieldDataOn();
}

void VtkIdFilterWrap::GetCellIds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCellIds();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIdFilterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkIdFilterWrap::GetFieldData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFieldData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIdFilterWrap::GetIdsArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIdsArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkIdFilterWrap::GetPointIds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointIds();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIdFilterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIdFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
	vtkIdFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkIdFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkIdFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkIdFilterWrap *w = new VtkIdFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkIdFilterWrap::PointIdsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PointIdsOff();
}

void VtkIdFilterWrap::PointIdsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PointIdsOn();
}

void VtkIdFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkIdFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkIdFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkIdFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkIdFilterWrap *w = new VtkIdFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIdFilterWrap::SetCellIds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCellIds(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIdFilterWrap::SetFieldData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFieldData(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIdFilterWrap::SetIdsArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIdsArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIdFilterWrap::SetPointIds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIdFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIdFilterWrap>(info.Holder());
	vtkIdFilter *native = (vtkIdFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPointIds(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

