/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkGeometryFilterWrap.h"
#include "vtkObjectWrap.h"
#include "vtkIncrementalPointLocatorWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkGeometryFilterWrap::ptpl;

VtkGeometryFilterWrap::VtkGeometryFilterWrap()
{ }

VtkGeometryFilterWrap::VtkGeometryFilterWrap(vtkSmartPointer<vtkGeometryFilter> _native)
{ native = _native; }

VtkGeometryFilterWrap::~VtkGeometryFilterWrap()
{ }

void VtkGeometryFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkGeometryFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("GeometryFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkGeometryFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkGeometryFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkGeometryFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CellClippingOff", CellClippingOff);
	Nan::SetPrototypeMethod(tpl, "cellClippingOff", CellClippingOff);

	Nan::SetPrototypeMethod(tpl, "CellClippingOn", CellClippingOn);
	Nan::SetPrototypeMethod(tpl, "cellClippingOn", CellClippingOn);

	Nan::SetPrototypeMethod(tpl, "CreateDefaultLocator", CreateDefaultLocator);
	Nan::SetPrototypeMethod(tpl, "createDefaultLocator", CreateDefaultLocator);

	Nan::SetPrototypeMethod(tpl, "ExtentClippingOff", ExtentClippingOff);
	Nan::SetPrototypeMethod(tpl, "extentClippingOff", ExtentClippingOff);

	Nan::SetPrototypeMethod(tpl, "ExtentClippingOn", ExtentClippingOn);
	Nan::SetPrototypeMethod(tpl, "extentClippingOn", ExtentClippingOn);

	Nan::SetPrototypeMethod(tpl, "GetCellClipping", GetCellClipping);
	Nan::SetPrototypeMethod(tpl, "getCellClipping", GetCellClipping);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetExtent", GetExtent);
	Nan::SetPrototypeMethod(tpl, "getExtent", GetExtent);

	Nan::SetPrototypeMethod(tpl, "GetExtentClipping", GetExtentClipping);
	Nan::SetPrototypeMethod(tpl, "getExtentClipping", GetExtentClipping);

	Nan::SetPrototypeMethod(tpl, "GetLocator", GetLocator);
	Nan::SetPrototypeMethod(tpl, "getLocator", GetLocator);

	Nan::SetPrototypeMethod(tpl, "GetMerging", GetMerging);
	Nan::SetPrototypeMethod(tpl, "getMerging", GetMerging);

	Nan::SetPrototypeMethod(tpl, "GetPointClipping", GetPointClipping);
	Nan::SetPrototypeMethod(tpl, "getPointClipping", GetPointClipping);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "MergingOff", MergingOff);
	Nan::SetPrototypeMethod(tpl, "mergingOff", MergingOff);

	Nan::SetPrototypeMethod(tpl, "MergingOn", MergingOn);
	Nan::SetPrototypeMethod(tpl, "mergingOn", MergingOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PointClippingOff", PointClippingOff);
	Nan::SetPrototypeMethod(tpl, "pointClippingOff", PointClippingOff);

	Nan::SetPrototypeMethod(tpl, "PointClippingOn", PointClippingOn);
	Nan::SetPrototypeMethod(tpl, "pointClippingOn", PointClippingOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCellClipping", SetCellClipping);
	Nan::SetPrototypeMethod(tpl, "setCellClipping", SetCellClipping);

	Nan::SetPrototypeMethod(tpl, "SetExtent", SetExtent);
	Nan::SetPrototypeMethod(tpl, "setExtent", SetExtent);

	Nan::SetPrototypeMethod(tpl, "SetExtentClipping", SetExtentClipping);
	Nan::SetPrototypeMethod(tpl, "setExtentClipping", SetExtentClipping);

	Nan::SetPrototypeMethod(tpl, "SetLocator", SetLocator);
	Nan::SetPrototypeMethod(tpl, "setLocator", SetLocator);

	Nan::SetPrototypeMethod(tpl, "SetMerging", SetMerging);
	Nan::SetPrototypeMethod(tpl, "setMerging", SetMerging);

	Nan::SetPrototypeMethod(tpl, "SetPointClipping", SetPointClipping);
	Nan::SetPrototypeMethod(tpl, "setPointClipping", SetPointClipping);

	ptpl.Reset( tpl );
}

void VtkGeometryFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkGeometryFilter> native = vtkSmartPointer<vtkGeometryFilter>::New();
		VtkGeometryFilterWrap* obj = new VtkGeometryFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkGeometryFilterWrap::CellClippingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CellClippingOff();
}

void VtkGeometryFilterWrap::CellClippingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CellClippingOn();
}

void VtkGeometryFilterWrap::CreateDefaultLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CreateDefaultLocator();
}

void VtkGeometryFilterWrap::ExtentClippingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ExtentClippingOff();
}

void VtkGeometryFilterWrap::ExtentClippingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ExtentClippingOn();
}

void VtkGeometryFilterWrap::GetCellClipping(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCellClipping();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeometryFilterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGeometryFilterWrap::GetExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetExtent();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 6 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 6);
	memcpy(ab->GetContents().Data(), r, 6 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkGeometryFilterWrap::GetExtentClipping(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetExtentClipping();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeometryFilterWrap::GetLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	vtkIncrementalPointLocator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLocator();
	VtkIncrementalPointLocatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkIncrementalPointLocatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkIncrementalPointLocatorWrap *w = new VtkIncrementalPointLocatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGeometryFilterWrap::GetMerging(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMerging();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeometryFilterWrap::GetPointClipping(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointClipping();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeometryFilterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeometryFilterWrap::MergingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->MergingOff();
}

void VtkGeometryFilterWrap::MergingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->MergingOn();
}

void VtkGeometryFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	vtkGeometryFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkGeometryFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkGeometryFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGeometryFilterWrap *w = new VtkGeometryFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGeometryFilterWrap::PointClippingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PointClippingOff();
}

void VtkGeometryFilterWrap::PointClippingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PointClippingOn();
}

void VtkGeometryFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkGeometryFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkGeometryFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkGeometryFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkGeometryFilterWrap *w = new VtkGeometryFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeometryFilterWrap::SetCellClipping(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCellClipping(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeometryFilterWrap::SetExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetExtent(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[6];
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 6; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetExtent(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() > 4 && info[4]->IsNumber())
					{
						if(info.Length() > 5 && info[5]->IsNumber())
						{
														if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->SetExtent(
								info[0]->NumberValue(),
								info[1]->NumberValue(),
								info[2]->NumberValue(),
								info[3]->NumberValue(),
								info[4]->NumberValue(),
								info[5]->NumberValue()
							);
							return;
						}
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeometryFilterWrap::SetExtentClipping(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetExtentClipping(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeometryFilterWrap::SetLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkIncrementalPointLocatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkIncrementalPointLocatorWrap *a0 = ObjectWrap::Unwrap<VtkIncrementalPointLocatorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLocator(
			(vtkIncrementalPointLocator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeometryFilterWrap::SetMerging(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMerging(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeometryFilterWrap::SetPointClipping(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeometryFilterWrap *wrapper = ObjectWrap::Unwrap<VtkGeometryFilterWrap>(info.Holder());
	vtkGeometryFilter *native = (vtkGeometryFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPointClipping(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

