/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkAbstractWidgetWrap.h"
#include "vtkContinuousValueWidgetWrap.h"
#include "vtkObjectWrap.h"
#include "vtkContinuousValueWidgetRepresentationWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkContinuousValueWidgetWrap::ptpl;

VtkContinuousValueWidgetWrap::VtkContinuousValueWidgetWrap()
{ }

VtkContinuousValueWidgetWrap::VtkContinuousValueWidgetWrap(vtkSmartPointer<vtkContinuousValueWidget> _native)
{ native = _native; }

VtkContinuousValueWidgetWrap::~VtkContinuousValueWidgetWrap()
{ }

void VtkContinuousValueWidgetWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkContinuousValueWidget").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ContinuousValueWidget").ToLocalChecked(), ConstructorGetter);
}

void VtkContinuousValueWidgetWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkContinuousValueWidgetWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkAbstractWidgetWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkAbstractWidgetWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkContinuousValueWidgetWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetContinuousValueWidgetRepresentation", GetContinuousValueWidgetRepresentation);
	Nan::SetPrototypeMethod(tpl, "getContinuousValueWidgetRepresentation", GetContinuousValueWidgetRepresentation);

	Nan::SetPrototypeMethod(tpl, "GetValue", GetValue);
	Nan::SetPrototypeMethod(tpl, "getValue", GetValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetRepresentation", SetRepresentation);
	Nan::SetPrototypeMethod(tpl, "setRepresentation", SetRepresentation);

	Nan::SetPrototypeMethod(tpl, "SetValue", SetValue);
	Nan::SetPrototypeMethod(tpl, "setValue", SetValue);

	ptpl.Reset( tpl );
}

void VtkContinuousValueWidgetWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkContinuousValueWidgetWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContinuousValueWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkContinuousValueWidgetWrap>(info.Holder());
	vtkContinuousValueWidget *native = (vtkContinuousValueWidget *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkContinuousValueWidgetWrap::GetContinuousValueWidgetRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContinuousValueWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkContinuousValueWidgetWrap>(info.Holder());
	vtkContinuousValueWidget *native = (vtkContinuousValueWidget *)wrapper->native.GetPointer();
	vtkContinuousValueWidgetRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetContinuousValueWidgetRepresentation();
		VtkContinuousValueWidgetRepresentationWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkContinuousValueWidgetRepresentationWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkContinuousValueWidgetRepresentationWrap *w = new VtkContinuousValueWidgetRepresentationWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContinuousValueWidgetWrap::GetValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContinuousValueWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkContinuousValueWidgetWrap>(info.Holder());
	vtkContinuousValueWidget *native = (vtkContinuousValueWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContinuousValueWidgetWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContinuousValueWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkContinuousValueWidgetWrap>(info.Holder());
	vtkContinuousValueWidget *native = (vtkContinuousValueWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContinuousValueWidgetWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContinuousValueWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkContinuousValueWidgetWrap>(info.Holder());
	vtkContinuousValueWidget *native = (vtkContinuousValueWidget *)wrapper->native.GetPointer();
	vtkContinuousValueWidget * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkContinuousValueWidgetWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkContinuousValueWidgetWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkContinuousValueWidgetWrap *w = new VtkContinuousValueWidgetWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContinuousValueWidgetWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContinuousValueWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkContinuousValueWidgetWrap>(info.Holder());
	vtkContinuousValueWidget *native = (vtkContinuousValueWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkContinuousValueWidget * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkContinuousValueWidgetWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkContinuousValueWidgetWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkContinuousValueWidgetWrap *w = new VtkContinuousValueWidgetWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContinuousValueWidgetWrap::SetRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContinuousValueWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkContinuousValueWidgetWrap>(info.Holder());
	vtkContinuousValueWidget *native = (vtkContinuousValueWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkContinuousValueWidgetRepresentationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkContinuousValueWidgetRepresentationWrap *a0 = ObjectWrap::Unwrap<VtkContinuousValueWidgetRepresentationWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRepresentation(
			(vtkContinuousValueWidgetRepresentation *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContinuousValueWidgetWrap::SetValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContinuousValueWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkContinuousValueWidgetWrap>(info.Holder());
	vtkContinuousValueWidget *native = (vtkContinuousValueWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

