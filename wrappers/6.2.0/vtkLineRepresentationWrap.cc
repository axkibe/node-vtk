/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkWidgetRepresentationWrap.h"
#include "vtkLineRepresentationWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPointHandleRepresentation3DWrap.h"
#include "vtkPropertyWrap.h"
#include "vtkPolyDataWrap.h"
#include "vtkPropCollectionWrap.h"
#include "vtkWindowWrap.h"
#include "vtkViewportWrap.h"
#include "vtkRendererWrap.h"
#include "vtkFollowerWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkLineRepresentationWrap::ptpl;

VtkLineRepresentationWrap::VtkLineRepresentationWrap()
{ }

VtkLineRepresentationWrap::VtkLineRepresentationWrap(vtkSmartPointer<vtkLineRepresentation> _native)
{ native = _native; }

VtkLineRepresentationWrap::~VtkLineRepresentationWrap()
{ }

void VtkLineRepresentationWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkLineRepresentation").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("LineRepresentation").ToLocalChecked(), ConstructorGetter);
}

void VtkLineRepresentationWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkLineRepresentationWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkWidgetRepresentationWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkWidgetRepresentationWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkLineRepresentationWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "BuildRepresentation", BuildRepresentation);
	Nan::SetPrototypeMethod(tpl, "buildRepresentation", BuildRepresentation);

	Nan::SetPrototypeMethod(tpl, "ComputeInteractionState", ComputeInteractionState);
	Nan::SetPrototypeMethod(tpl, "computeInteractionState", ComputeInteractionState);

	Nan::SetPrototypeMethod(tpl, "DistanceAnnotationVisibilityOff", DistanceAnnotationVisibilityOff);
	Nan::SetPrototypeMethod(tpl, "distanceAnnotationVisibilityOff", DistanceAnnotationVisibilityOff);

	Nan::SetPrototypeMethod(tpl, "DistanceAnnotationVisibilityOn", DistanceAnnotationVisibilityOn);
	Nan::SetPrototypeMethod(tpl, "distanceAnnotationVisibilityOn", DistanceAnnotationVisibilityOn);

	Nan::SetPrototypeMethod(tpl, "GetActors", GetActors);
	Nan::SetPrototypeMethod(tpl, "getActors", GetActors);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDistance", GetDistance);
	Nan::SetPrototypeMethod(tpl, "getDistance", GetDistance);

	Nan::SetPrototypeMethod(tpl, "GetDistanceAnnotationFormat", GetDistanceAnnotationFormat);
	Nan::SetPrototypeMethod(tpl, "getDistanceAnnotationFormat", GetDistanceAnnotationFormat);

	Nan::SetPrototypeMethod(tpl, "GetDistanceAnnotationProperty", GetDistanceAnnotationProperty);
	Nan::SetPrototypeMethod(tpl, "getDistanceAnnotationProperty", GetDistanceAnnotationProperty);

	Nan::SetPrototypeMethod(tpl, "GetDistanceAnnotationVisibility", GetDistanceAnnotationVisibility);
	Nan::SetPrototypeMethod(tpl, "getDistanceAnnotationVisibility", GetDistanceAnnotationVisibility);

	Nan::SetPrototypeMethod(tpl, "GetEndPoint2Property", GetEndPoint2Property);
	Nan::SetPrototypeMethod(tpl, "getEndPoint2Property", GetEndPoint2Property);

	Nan::SetPrototypeMethod(tpl, "GetEndPointProperty", GetEndPointProperty);
	Nan::SetPrototypeMethod(tpl, "getEndPointProperty", GetEndPointProperty);

	Nan::SetPrototypeMethod(tpl, "GetInteractionStateMaxValue", GetInteractionStateMaxValue);
	Nan::SetPrototypeMethod(tpl, "getInteractionStateMaxValue", GetInteractionStateMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetInteractionStateMinValue", GetInteractionStateMinValue);
	Nan::SetPrototypeMethod(tpl, "getInteractionStateMinValue", GetInteractionStateMinValue);

	Nan::SetPrototypeMethod(tpl, "GetLineHandleRepresentation", GetLineHandleRepresentation);
	Nan::SetPrototypeMethod(tpl, "getLineHandleRepresentation", GetLineHandleRepresentation);

	Nan::SetPrototypeMethod(tpl, "GetLineProperty", GetLineProperty);
	Nan::SetPrototypeMethod(tpl, "getLineProperty", GetLineProperty);

	Nan::SetPrototypeMethod(tpl, "GetPoint1Representation", GetPoint1Representation);
	Nan::SetPrototypeMethod(tpl, "getPoint1Representation", GetPoint1Representation);

	Nan::SetPrototypeMethod(tpl, "GetPoint2Representation", GetPoint2Representation);
	Nan::SetPrototypeMethod(tpl, "getPoint2Representation", GetPoint2Representation);

	Nan::SetPrototypeMethod(tpl, "GetPolyData", GetPolyData);
	Nan::SetPrototypeMethod(tpl, "getPolyData", GetPolyData);

	Nan::SetPrototypeMethod(tpl, "GetRepresentationState", GetRepresentationState);
	Nan::SetPrototypeMethod(tpl, "getRepresentationState", GetRepresentationState);

	Nan::SetPrototypeMethod(tpl, "GetResolution", GetResolution);
	Nan::SetPrototypeMethod(tpl, "getResolution", GetResolution);

	Nan::SetPrototypeMethod(tpl, "GetSelectedEndPoint2Property", GetSelectedEndPoint2Property);
	Nan::SetPrototypeMethod(tpl, "getSelectedEndPoint2Property", GetSelectedEndPoint2Property);

	Nan::SetPrototypeMethod(tpl, "GetSelectedEndPointProperty", GetSelectedEndPointProperty);
	Nan::SetPrototypeMethod(tpl, "getSelectedEndPointProperty", GetSelectedEndPointProperty);

	Nan::SetPrototypeMethod(tpl, "GetSelectedLineProperty", GetSelectedLineProperty);
	Nan::SetPrototypeMethod(tpl, "getSelectedLineProperty", GetSelectedLineProperty);

	Nan::SetPrototypeMethod(tpl, "GetTextActor", GetTextActor);
	Nan::SetPrototypeMethod(tpl, "getTextActor", GetTextActor);

	Nan::SetPrototypeMethod(tpl, "GetTolerance", GetTolerance);
	Nan::SetPrototypeMethod(tpl, "getTolerance", GetTolerance);

	Nan::SetPrototypeMethod(tpl, "GetToleranceMaxValue", GetToleranceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getToleranceMaxValue", GetToleranceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetToleranceMinValue", GetToleranceMinValue);
	Nan::SetPrototypeMethod(tpl, "getToleranceMinValue", GetToleranceMinValue);

	Nan::SetPrototypeMethod(tpl, "HasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "hasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "InstantiateHandleRepresentation", InstantiateHandleRepresentation);
	Nan::SetPrototypeMethod(tpl, "instantiateHandleRepresentation", InstantiateHandleRepresentation);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "RenderOpaqueGeometry", RenderOpaqueGeometry);
	Nan::SetPrototypeMethod(tpl, "renderOpaqueGeometry", RenderOpaqueGeometry);

	Nan::SetPrototypeMethod(tpl, "RenderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "renderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetDistanceAnnotationFormat", SetDistanceAnnotationFormat);
	Nan::SetPrototypeMethod(tpl, "setDistanceAnnotationFormat", SetDistanceAnnotationFormat);

	Nan::SetPrototypeMethod(tpl, "SetDistanceAnnotationScale", SetDistanceAnnotationScale);
	Nan::SetPrototypeMethod(tpl, "setDistanceAnnotationScale", SetDistanceAnnotationScale);

	Nan::SetPrototypeMethod(tpl, "SetDistanceAnnotationVisibility", SetDistanceAnnotationVisibility);
	Nan::SetPrototypeMethod(tpl, "setDistanceAnnotationVisibility", SetDistanceAnnotationVisibility);

	Nan::SetPrototypeMethod(tpl, "SetHandleRepresentation", SetHandleRepresentation);
	Nan::SetPrototypeMethod(tpl, "setHandleRepresentation", SetHandleRepresentation);

	Nan::SetPrototypeMethod(tpl, "SetInteractionState", SetInteractionState);
	Nan::SetPrototypeMethod(tpl, "setInteractionState", SetInteractionState);

	Nan::SetPrototypeMethod(tpl, "SetLineColor", SetLineColor);
	Nan::SetPrototypeMethod(tpl, "setLineColor", SetLineColor);

	Nan::SetPrototypeMethod(tpl, "SetRenderer", SetRenderer);
	Nan::SetPrototypeMethod(tpl, "setRenderer", SetRenderer);

	Nan::SetPrototypeMethod(tpl, "SetRepresentationState", SetRepresentationState);
	Nan::SetPrototypeMethod(tpl, "setRepresentationState", SetRepresentationState);

	Nan::SetPrototypeMethod(tpl, "SetResolution", SetResolution);
	Nan::SetPrototypeMethod(tpl, "setResolution", SetResolution);

	Nan::SetPrototypeMethod(tpl, "SetTolerance", SetTolerance);
	Nan::SetPrototypeMethod(tpl, "setTolerance", SetTolerance);

	ptpl.Reset( tpl );
}

void VtkLineRepresentationWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkLineRepresentation> native = vtkSmartPointer<vtkLineRepresentation>::New();
		VtkLineRepresentationWrap* obj = new VtkLineRepresentationWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkLineRepresentationWrap::BuildRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BuildRepresentation();
}

void VtkLineRepresentationWrap::ComputeInteractionState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->ComputeInteractionState(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::DistanceAnnotationVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DistanceAnnotationVisibilityOff();
}

void VtkLineRepresentationWrap::DistanceAnnotationVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DistanceAnnotationVisibilityOn();
}

void VtkLineRepresentationWrap::GetActors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropCollectionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropCollectionWrap *a0 = ObjectWrap::Unwrap<VtkPropCollectionWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetActors(
			(vtkPropCollection *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkLineRepresentationWrap::GetDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDistance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLineRepresentationWrap::GetDistanceAnnotationFormat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDistanceAnnotationFormat();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkLineRepresentationWrap::GetDistanceAnnotationProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDistanceAnnotationProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLineRepresentationWrap::GetDistanceAnnotationVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDistanceAnnotationVisibility();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLineRepresentationWrap::GetEndPoint2Property(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEndPoint2Property();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLineRepresentationWrap::GetEndPointProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEndPointProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLineRepresentationWrap::GetInteractionStateMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInteractionStateMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLineRepresentationWrap::GetInteractionStateMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInteractionStateMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLineRepresentationWrap::GetLineHandleRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	vtkPointHandleRepresentation3D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLineHandleRepresentation();
		VtkPointHandleRepresentation3DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPointHandleRepresentation3DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPointHandleRepresentation3DWrap *w = new VtkPointHandleRepresentation3DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLineRepresentationWrap::GetLineProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLineProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLineRepresentationWrap::GetPoint1Representation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	vtkPointHandleRepresentation3D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPoint1Representation();
		VtkPointHandleRepresentation3DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPointHandleRepresentation3DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPointHandleRepresentation3DWrap *w = new VtkPointHandleRepresentation3DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLineRepresentationWrap::GetPoint2Representation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	vtkPointHandleRepresentation3D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPoint2Representation();
		VtkPointHandleRepresentation3DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPointHandleRepresentation3DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPointHandleRepresentation3DWrap *w = new VtkPointHandleRepresentation3DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLineRepresentationWrap::GetPolyData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetPolyData(
			(vtkPolyData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::GetRepresentationState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRepresentationState();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLineRepresentationWrap::GetResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLineRepresentationWrap::GetSelectedEndPoint2Property(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedEndPoint2Property();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLineRepresentationWrap::GetSelectedEndPointProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedEndPointProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLineRepresentationWrap::GetSelectedLineProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedLineProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLineRepresentationWrap::GetTextActor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	vtkFollower * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTextActor();
		VtkFollowerWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkFollowerWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkFollowerWrap *w = new VtkFollowerWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLineRepresentationWrap::GetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLineRepresentationWrap::GetToleranceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetToleranceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLineRepresentationWrap::GetToleranceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetToleranceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLineRepresentationWrap::HasTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasTranslucentPolygonalGeometry();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLineRepresentationWrap::InstantiateHandleRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InstantiateHandleRepresentation();
}

void VtkLineRepresentationWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	vtkLineRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkLineRepresentationWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkLineRepresentationWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkLineRepresentationWrap *w = new VtkLineRepresentationWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLineRepresentationWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOpaqueGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::RenderTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderTranslucentPolygonalGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkLineRepresentation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkLineRepresentationWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkLineRepresentationWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkLineRepresentationWrap *w = new VtkLineRepresentationWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::SetDistanceAnnotationFormat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDistanceAnnotationFormat(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::SetDistanceAnnotationScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetDistanceAnnotationScale(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::SetDistanceAnnotationVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDistanceAnnotationVisibility(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::SetHandleRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPointHandleRepresentation3DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPointHandleRepresentation3DWrap *a0 = ObjectWrap::Unwrap<VtkPointHandleRepresentation3DWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHandleRepresentation(
			(vtkPointHandleRepresentation3D *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::SetInteractionState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInteractionState(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::SetLineColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetLineColor(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::SetRenderer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRenderer(
			(vtkRenderer *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::SetRepresentationState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRepresentationState(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::SetResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetResolution(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLineRepresentationWrap::SetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLineRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkLineRepresentationWrap>(info.Holder());
	vtkLineRepresentation *native = (vtkLineRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTolerance(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

