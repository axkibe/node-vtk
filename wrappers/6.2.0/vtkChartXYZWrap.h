/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKCHARTXYZWRAP_H
#define NATIVE_EXTENSION_VTK_VTKCHARTXYZWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkChartXYZ.h>

#include "vtkContextItemWrap.h"

class VtkChartXYZWrap : public VtkContextItemWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkChartXYZWrap(vtkSmartPointer<vtkChartXYZ>);
		VtkChartXYZWrap();
		~VtkChartXYZWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void ClearPlots(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAxis(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Paint(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RecalculateBounds(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RecalculateTransform(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAngle(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAnnotationLink(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAroundX(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAutoRotate(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetDecorateAxes(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFitToScene(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Update(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
