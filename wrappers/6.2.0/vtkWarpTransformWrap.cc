/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkAbstractTransformWrap.h"
#include "vtkWarpTransformWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkWarpTransformWrap::ptpl;

VtkWarpTransformWrap::VtkWarpTransformWrap()
{ }

VtkWarpTransformWrap::VtkWarpTransformWrap(vtkSmartPointer<vtkWarpTransform> _native)
{ native = _native; }

VtkWarpTransformWrap::~VtkWarpTransformWrap()
{ }

void VtkWarpTransformWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkWarpTransform").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("WarpTransform").ToLocalChecked(), ConstructorGetter);
}

void VtkWarpTransformWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkWarpTransformWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkAbstractTransformWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkAbstractTransformWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkWarpTransformWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetInverseFlag", GetInverseFlag);
	Nan::SetPrototypeMethod(tpl, "getInverseFlag", GetInverseFlag);

	Nan::SetPrototypeMethod(tpl, "GetInverseIterations", GetInverseIterations);
	Nan::SetPrototypeMethod(tpl, "getInverseIterations", GetInverseIterations);

	Nan::SetPrototypeMethod(tpl, "GetInverseTolerance", GetInverseTolerance);
	Nan::SetPrototypeMethod(tpl, "getInverseTolerance", GetInverseTolerance);

	Nan::SetPrototypeMethod(tpl, "InternalTransformPoint", InternalTransformPoint);
	Nan::SetPrototypeMethod(tpl, "internalTransformPoint", InternalTransformPoint);

	Nan::SetPrototypeMethod(tpl, "Inverse", Inverse);
	Nan::SetPrototypeMethod(tpl, "inverse", Inverse);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetInverseIterations", SetInverseIterations);
	Nan::SetPrototypeMethod(tpl, "setInverseIterations", SetInverseIterations);

	Nan::SetPrototypeMethod(tpl, "SetInverseTolerance", SetInverseTolerance);
	Nan::SetPrototypeMethod(tpl, "setInverseTolerance", SetInverseTolerance);

	Nan::SetPrototypeMethod(tpl, "TemplateTransformInverse", TemplateTransformInverse);
	Nan::SetPrototypeMethod(tpl, "templateTransformInverse", TemplateTransformInverse);

	Nan::SetPrototypeMethod(tpl, "TemplateTransformPoint", TemplateTransformPoint);
	Nan::SetPrototypeMethod(tpl, "templateTransformPoint", TemplateTransformPoint);

	ptpl.Reset( tpl );
}

void VtkWarpTransformWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkWarpTransformWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkWarpTransformWrap::GetInverseFlag(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInverseFlag();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkWarpTransformWrap::GetInverseIterations(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInverseIterations();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkWarpTransformWrap::GetInverseTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInverseTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkWarpTransformWrap::InternalTransformPoint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0( v8::Local<v8::Array>::Cast( info[0]->ToObject() ) );
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1( v8::Local<v8::Array>::Cast( info[1]->ToObject() ) );
			double b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->InternalTransformPoint(
				b0,
				b1
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpTransformWrap::Inverse(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Inverse();
}

void VtkWarpTransformWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpTransformWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	vtkWarpTransform * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkWarpTransformWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkWarpTransformWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkWarpTransformWrap *w = new VtkWarpTransformWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkWarpTransformWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkWarpTransform * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkWarpTransformWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkWarpTransformWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkWarpTransformWrap *w = new VtkWarpTransformWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpTransformWrap::SetInverseIterations(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInverseIterations(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpTransformWrap::SetInverseTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInverseTolerance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpTransformWrap::TemplateTransformInverse(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0( v8::Local<v8::Array>::Cast( info[0]->ToObject() ) );
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1( v8::Local<v8::Array>::Cast( info[1]->ToObject() ) );
			double b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->TemplateTransformInverse(
				b0,
				b1
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpTransformWrap::TemplateTransformPoint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpTransformWrap *wrapper = ObjectWrap::Unwrap<VtkWarpTransformWrap>(info.Holder());
	vtkWarpTransform *native = (vtkWarpTransform *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0( v8::Local<v8::Array>::Cast( info[0]->ToObject() ) );
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1( v8::Local<v8::Array>::Cast( info[1]->ToObject() ) );
			double b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->TemplateTransformPoint(
				b0,
				b1
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

