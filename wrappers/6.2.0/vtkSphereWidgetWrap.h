/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKSPHEREWIDGETWRAP_H
#define NATIVE_EXTENSION_VTK_VTKSPHEREWIDGETWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkSphereWidget.h>

#include "vtk3DWidgetWrap.h"

class VtkSphereWidgetWrap : public Vtk3DWidgetWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkSphereWidgetWrap(vtkSmartPointer<vtkSphereWidget>);
		VtkSphereWidgetWrap();
		~VtkSphereWidgetWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetCenter(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHandleProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHandleVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPhiResolution(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPolyData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRepresentationMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRepresentationMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetScale(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSelectedHandleProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSelectedSphereProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSphere(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSphereProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetThetaResolution(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTranslation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void HandleVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void HandleVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void PlaceWidget(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ScaleOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ScaleOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCenter(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetEnabled(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetHandleDirection(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetHandleVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetPhiResolution(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRepresentationToOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRepresentationToSurface(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRepresentationToWireframe(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetScale(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetThetaResolution(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetTranslation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void TranslationOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void TranslationOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
