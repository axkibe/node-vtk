/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkGraphLayoutStrategyWrap.h"
#include "vtkSimple3DCirclesStrategyWrap.h"
#include "vtkObjectWrap.h"
#include "vtkAbstractArrayWrap.h"
#include "vtkIntArrayWrap.h"
#include "vtkIdTypeArrayWrap.h"
#include "vtkGraphWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkSimple3DCirclesStrategyWrap::ptpl;

VtkSimple3DCirclesStrategyWrap::VtkSimple3DCirclesStrategyWrap()
{ }

VtkSimple3DCirclesStrategyWrap::VtkSimple3DCirclesStrategyWrap(vtkSmartPointer<vtkSimple3DCirclesStrategy> _native)
{ native = _native; }

VtkSimple3DCirclesStrategyWrap::~VtkSimple3DCirclesStrategyWrap()
{ }

void VtkSimple3DCirclesStrategyWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkSimple3DCirclesStrategy").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("Simple3DCirclesStrategy").ToLocalChecked(), ConstructorGetter);
}

void VtkSimple3DCirclesStrategyWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkSimple3DCirclesStrategyWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkGraphLayoutStrategyWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkGraphLayoutStrategyWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkSimple3DCirclesStrategyWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AutoHeightOff", AutoHeightOff);
	Nan::SetPrototypeMethod(tpl, "autoHeightOff", AutoHeightOff);

	Nan::SetPrototypeMethod(tpl, "AutoHeightOn", AutoHeightOn);
	Nan::SetPrototypeMethod(tpl, "autoHeightOn", AutoHeightOn);

	Nan::SetPrototypeMethod(tpl, "ForceToUseUniversalStartPointsFinderOff", ForceToUseUniversalStartPointsFinderOff);
	Nan::SetPrototypeMethod(tpl, "forceToUseUniversalStartPointsFinderOff", ForceToUseUniversalStartPointsFinderOff);

	Nan::SetPrototypeMethod(tpl, "ForceToUseUniversalStartPointsFinderOn", ForceToUseUniversalStartPointsFinderOn);
	Nan::SetPrototypeMethod(tpl, "forceToUseUniversalStartPointsFinderOn", ForceToUseUniversalStartPointsFinderOn);

	Nan::SetPrototypeMethod(tpl, "GetAutoHeight", GetAutoHeight);
	Nan::SetPrototypeMethod(tpl, "getAutoHeight", GetAutoHeight);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetForceToUseUniversalStartPointsFinder", GetForceToUseUniversalStartPointsFinder);
	Nan::SetPrototypeMethod(tpl, "getForceToUseUniversalStartPointsFinder", GetForceToUseUniversalStartPointsFinder);

	Nan::SetPrototypeMethod(tpl, "GetHeight", GetHeight);
	Nan::SetPrototypeMethod(tpl, "getHeight", GetHeight);

	Nan::SetPrototypeMethod(tpl, "GetHierarchicalLayers", GetHierarchicalLayers);
	Nan::SetPrototypeMethod(tpl, "getHierarchicalLayers", GetHierarchicalLayers);

	Nan::SetPrototypeMethod(tpl, "GetHierarchicalOrder", GetHierarchicalOrder);
	Nan::SetPrototypeMethod(tpl, "getHierarchicalOrder", GetHierarchicalOrder);

	Nan::SetPrototypeMethod(tpl, "GetMarkedStartVertices", GetMarkedStartVertices);
	Nan::SetPrototypeMethod(tpl, "getMarkedStartVertices", GetMarkedStartVertices);

	Nan::SetPrototypeMethod(tpl, "GetMethod", GetMethod);
	Nan::SetPrototypeMethod(tpl, "getMethod", GetMethod);

	Nan::SetPrototypeMethod(tpl, "GetMinimumDegree", GetMinimumDegree);
	Nan::SetPrototypeMethod(tpl, "getMinimumDegree", GetMinimumDegree);

	Nan::SetPrototypeMethod(tpl, "GetMinimumRadian", GetMinimumRadian);
	Nan::SetPrototypeMethod(tpl, "getMinimumRadian", GetMinimumRadian);

	Nan::SetPrototypeMethod(tpl, "GetRadius", GetRadius);
	Nan::SetPrototypeMethod(tpl, "getRadius", GetRadius);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "Layout", Layout);
	Nan::SetPrototypeMethod(tpl, "layout", Layout);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAutoHeight", SetAutoHeight);
	Nan::SetPrototypeMethod(tpl, "setAutoHeight", SetAutoHeight);

	Nan::SetPrototypeMethod(tpl, "SetDirection", SetDirection);
	Nan::SetPrototypeMethod(tpl, "setDirection", SetDirection);

	Nan::SetPrototypeMethod(tpl, "SetForceToUseUniversalStartPointsFinder", SetForceToUseUniversalStartPointsFinder);
	Nan::SetPrototypeMethod(tpl, "setForceToUseUniversalStartPointsFinder", SetForceToUseUniversalStartPointsFinder);

	Nan::SetPrototypeMethod(tpl, "SetGraph", SetGraph);
	Nan::SetPrototypeMethod(tpl, "setGraph", SetGraph);

	Nan::SetPrototypeMethod(tpl, "SetHeight", SetHeight);
	Nan::SetPrototypeMethod(tpl, "setHeight", SetHeight);

	Nan::SetPrototypeMethod(tpl, "SetHierarchicalLayers", SetHierarchicalLayers);
	Nan::SetPrototypeMethod(tpl, "setHierarchicalLayers", SetHierarchicalLayers);

	Nan::SetPrototypeMethod(tpl, "SetHierarchicalOrder", SetHierarchicalOrder);
	Nan::SetPrototypeMethod(tpl, "setHierarchicalOrder", SetHierarchicalOrder);

	Nan::SetPrototypeMethod(tpl, "SetMarkedStartVertices", SetMarkedStartVertices);
	Nan::SetPrototypeMethod(tpl, "setMarkedStartVertices", SetMarkedStartVertices);

	Nan::SetPrototypeMethod(tpl, "SetMethod", SetMethod);
	Nan::SetPrototypeMethod(tpl, "setMethod", SetMethod);

	Nan::SetPrototypeMethod(tpl, "SetMinimumDegree", SetMinimumDegree);
	Nan::SetPrototypeMethod(tpl, "setMinimumDegree", SetMinimumDegree);

	Nan::SetPrototypeMethod(tpl, "SetMinimumRadian", SetMinimumRadian);
	Nan::SetPrototypeMethod(tpl, "setMinimumRadian", SetMinimumRadian);

	Nan::SetPrototypeMethod(tpl, "SetOrigin", SetOrigin);
	Nan::SetPrototypeMethod(tpl, "setOrigin", SetOrigin);

	Nan::SetPrototypeMethod(tpl, "SetRadius", SetRadius);
	Nan::SetPrototypeMethod(tpl, "setRadius", SetRadius);

	ptpl.Reset( tpl );
}

void VtkSimple3DCirclesStrategyWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkSimple3DCirclesStrategy> native = vtkSmartPointer<vtkSimple3DCirclesStrategy>::New();
		VtkSimple3DCirclesStrategyWrap* obj = new VtkSimple3DCirclesStrategyWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkSimple3DCirclesStrategyWrap::AutoHeightOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AutoHeightOff();
}

void VtkSimple3DCirclesStrategyWrap::AutoHeightOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AutoHeightOn();
}

void VtkSimple3DCirclesStrategyWrap::ForceToUseUniversalStartPointsFinderOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ForceToUseUniversalStartPointsFinderOff();
}

void VtkSimple3DCirclesStrategyWrap::ForceToUseUniversalStartPointsFinderOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ForceToUseUniversalStartPointsFinderOn();
}

void VtkSimple3DCirclesStrategyWrap::GetAutoHeight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAutoHeight();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSimple3DCirclesStrategyWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkSimple3DCirclesStrategyWrap::GetForceToUseUniversalStartPointsFinder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetForceToUseUniversalStartPointsFinder();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSimple3DCirclesStrategyWrap::GetHeight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHeight();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSimple3DCirclesStrategyWrap::GetHierarchicalLayers(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	vtkIntArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHierarchicalLayers();
		VtkIntArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkIntArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkIntArrayWrap *w = new VtkIntArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSimple3DCirclesStrategyWrap::GetHierarchicalOrder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	vtkIdTypeArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHierarchicalOrder();
		VtkIdTypeArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkIdTypeArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkIdTypeArrayWrap *w = new VtkIdTypeArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSimple3DCirclesStrategyWrap::GetMarkedStartVertices(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	vtkAbstractArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMarkedStartVertices();
		VtkAbstractArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAbstractArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAbstractArrayWrap *w = new VtkAbstractArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSimple3DCirclesStrategyWrap::GetMethod(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMethod();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSimple3DCirclesStrategyWrap::GetMinimumDegree(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMinimumDegree();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSimple3DCirclesStrategyWrap::GetMinimumRadian(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMinimumRadian();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSimple3DCirclesStrategyWrap::GetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSimple3DCirclesStrategyWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::Layout(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Layout();
}

void VtkSimple3DCirclesStrategyWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	vtkSimple3DCirclesStrategy * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkSimple3DCirclesStrategyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkSimple3DCirclesStrategyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkSimple3DCirclesStrategyWrap *w = new VtkSimple3DCirclesStrategyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSimple3DCirclesStrategyWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkSimple3DCirclesStrategy * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkSimple3DCirclesStrategyWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkSimple3DCirclesStrategyWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkSimple3DCirclesStrategyWrap *w = new VtkSimple3DCirclesStrategyWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetAutoHeight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAutoHeight(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetDirection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetDirection(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetForceToUseUniversalStartPointsFinder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetForceToUseUniversalStartPointsFinder(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetGraph(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkGraphWrap::ptpl))->HasInstance(info[0]))
	{
		VtkGraphWrap *a0 = ObjectWrap::Unwrap<VtkGraphWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGraph(
			(vtkGraph *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetHeight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHeight(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetHierarchicalLayers(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkIntArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkIntArrayWrap *a0 = ObjectWrap::Unwrap<VtkIntArrayWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHierarchicalLayers(
			(vtkIntArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetHierarchicalOrder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkIdTypeArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkIdTypeArrayWrap *a0 = ObjectWrap::Unwrap<VtkIdTypeArrayWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHierarchicalOrder(
			(vtkIdTypeArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetMarkedStartVertices(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractArrayWrap *a0 = ObjectWrap::Unwrap<VtkAbstractArrayWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMarkedStartVertices(
			(vtkAbstractArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetMethod(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMethod(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetMinimumDegree(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMinimumDegree(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetMinimumRadian(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMinimumRadian(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetOrigin(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSimple3DCirclesStrategyWrap::SetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSimple3DCirclesStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkSimple3DCirclesStrategyWrap>(info.Holder());
	vtkSimple3DCirclesStrategy *native = (vtkSimple3DCirclesStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

