/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkSectorSourceWrap.h"
#include "vtkObjectWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkSectorSourceWrap::ptpl;

VtkSectorSourceWrap::VtkSectorSourceWrap()
{ }

VtkSectorSourceWrap::VtkSectorSourceWrap(vtkSmartPointer<vtkSectorSource> _native)
{ native = _native; }

VtkSectorSourceWrap::~VtkSectorSourceWrap()
{ }

void VtkSectorSourceWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkSectorSource").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("SectorSource").ToLocalChecked(), ConstructorGetter);
}

void VtkSectorSourceWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkSectorSourceWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkSectorSourceWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetCircumferentialResolution", GetCircumferentialResolution);
	Nan::SetPrototypeMethod(tpl, "getCircumferentialResolution", GetCircumferentialResolution);

	Nan::SetPrototypeMethod(tpl, "GetCircumferentialResolutionMaxValue", GetCircumferentialResolutionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getCircumferentialResolutionMaxValue", GetCircumferentialResolutionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetCircumferentialResolutionMinValue", GetCircumferentialResolutionMinValue);
	Nan::SetPrototypeMethod(tpl, "getCircumferentialResolutionMinValue", GetCircumferentialResolutionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetEndAngle", GetEndAngle);
	Nan::SetPrototypeMethod(tpl, "getEndAngle", GetEndAngle);

	Nan::SetPrototypeMethod(tpl, "GetEndAngleMaxValue", GetEndAngleMaxValue);
	Nan::SetPrototypeMethod(tpl, "getEndAngleMaxValue", GetEndAngleMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetEndAngleMinValue", GetEndAngleMinValue);
	Nan::SetPrototypeMethod(tpl, "getEndAngleMinValue", GetEndAngleMinValue);

	Nan::SetPrototypeMethod(tpl, "GetInnerRadius", GetInnerRadius);
	Nan::SetPrototypeMethod(tpl, "getInnerRadius", GetInnerRadius);

	Nan::SetPrototypeMethod(tpl, "GetInnerRadiusMaxValue", GetInnerRadiusMaxValue);
	Nan::SetPrototypeMethod(tpl, "getInnerRadiusMaxValue", GetInnerRadiusMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetInnerRadiusMinValue", GetInnerRadiusMinValue);
	Nan::SetPrototypeMethod(tpl, "getInnerRadiusMinValue", GetInnerRadiusMinValue);

	Nan::SetPrototypeMethod(tpl, "GetOuterRadius", GetOuterRadius);
	Nan::SetPrototypeMethod(tpl, "getOuterRadius", GetOuterRadius);

	Nan::SetPrototypeMethod(tpl, "GetOuterRadiusMaxValue", GetOuterRadiusMaxValue);
	Nan::SetPrototypeMethod(tpl, "getOuterRadiusMaxValue", GetOuterRadiusMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetOuterRadiusMinValue", GetOuterRadiusMinValue);
	Nan::SetPrototypeMethod(tpl, "getOuterRadiusMinValue", GetOuterRadiusMinValue);

	Nan::SetPrototypeMethod(tpl, "GetRadialResolution", GetRadialResolution);
	Nan::SetPrototypeMethod(tpl, "getRadialResolution", GetRadialResolution);

	Nan::SetPrototypeMethod(tpl, "GetRadialResolutionMaxValue", GetRadialResolutionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getRadialResolutionMaxValue", GetRadialResolutionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetRadialResolutionMinValue", GetRadialResolutionMinValue);
	Nan::SetPrototypeMethod(tpl, "getRadialResolutionMinValue", GetRadialResolutionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetStartAngle", GetStartAngle);
	Nan::SetPrototypeMethod(tpl, "getStartAngle", GetStartAngle);

	Nan::SetPrototypeMethod(tpl, "GetStartAngleMaxValue", GetStartAngleMaxValue);
	Nan::SetPrototypeMethod(tpl, "getStartAngleMaxValue", GetStartAngleMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetStartAngleMinValue", GetStartAngleMinValue);
	Nan::SetPrototypeMethod(tpl, "getStartAngleMinValue", GetStartAngleMinValue);

	Nan::SetPrototypeMethod(tpl, "GetZCoord", GetZCoord);
	Nan::SetPrototypeMethod(tpl, "getZCoord", GetZCoord);

	Nan::SetPrototypeMethod(tpl, "GetZCoordMaxValue", GetZCoordMaxValue);
	Nan::SetPrototypeMethod(tpl, "getZCoordMaxValue", GetZCoordMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetZCoordMinValue", GetZCoordMinValue);
	Nan::SetPrototypeMethod(tpl, "getZCoordMinValue", GetZCoordMinValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCircumferentialResolution", SetCircumferentialResolution);
	Nan::SetPrototypeMethod(tpl, "setCircumferentialResolution", SetCircumferentialResolution);

	Nan::SetPrototypeMethod(tpl, "SetEndAngle", SetEndAngle);
	Nan::SetPrototypeMethod(tpl, "setEndAngle", SetEndAngle);

	Nan::SetPrototypeMethod(tpl, "SetInnerRadius", SetInnerRadius);
	Nan::SetPrototypeMethod(tpl, "setInnerRadius", SetInnerRadius);

	Nan::SetPrototypeMethod(tpl, "SetOuterRadius", SetOuterRadius);
	Nan::SetPrototypeMethod(tpl, "setOuterRadius", SetOuterRadius);

	Nan::SetPrototypeMethod(tpl, "SetRadialResolution", SetRadialResolution);
	Nan::SetPrototypeMethod(tpl, "setRadialResolution", SetRadialResolution);

	Nan::SetPrototypeMethod(tpl, "SetStartAngle", SetStartAngle);
	Nan::SetPrototypeMethod(tpl, "setStartAngle", SetStartAngle);

	Nan::SetPrototypeMethod(tpl, "SetZCoord", SetZCoord);
	Nan::SetPrototypeMethod(tpl, "setZCoord", SetZCoord);

#ifdef VTK_NODE_PLUS_VTKSECTORSOURCEWRAP_INITPTPL
	VTK_NODE_PLUS_VTKSECTORSOURCEWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkSectorSourceWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkSectorSource> native = vtkSmartPointer<vtkSectorSource>::New();
		VtkSectorSourceWrap* obj = new VtkSectorSourceWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkSectorSourceWrap::GetCircumferentialResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCircumferentialResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetCircumferentialResolutionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCircumferentialResolutionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetCircumferentialResolutionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCircumferentialResolutionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkSectorSourceWrap::GetEndAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEndAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetEndAngleMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEndAngleMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetEndAngleMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEndAngleMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetInnerRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInnerRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetInnerRadiusMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInnerRadiusMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetInnerRadiusMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInnerRadiusMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetOuterRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOuterRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetOuterRadiusMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOuterRadiusMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetOuterRadiusMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOuterRadiusMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetRadialResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadialResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetRadialResolutionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadialResolutionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetRadialResolutionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadialResolutionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetStartAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStartAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetStartAngleMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStartAngleMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetStartAngleMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStartAngleMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetZCoord(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZCoord();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetZCoordMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZCoordMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::GetZCoordMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZCoordMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSectorSourceWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSectorSourceWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	vtkSectorSource * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkSectorSourceWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkSectorSourceWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkSectorSourceWrap *w = new VtkSectorSourceWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSectorSourceWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkSectorSource * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkSectorSourceWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkSectorSourceWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkSectorSourceWrap *w = new VtkSectorSourceWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSectorSourceWrap::SetCircumferentialResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCircumferentialResolution(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSectorSourceWrap::SetEndAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEndAngle(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSectorSourceWrap::SetInnerRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInnerRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSectorSourceWrap::SetOuterRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOuterRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSectorSourceWrap::SetRadialResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRadialResolution(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSectorSourceWrap::SetStartAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetStartAngle(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSectorSourceWrap::SetZCoord(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSectorSourceWrap *wrapper = ObjectWrap::Unwrap<VtkSectorSourceWrap>(info.Holder());
	vtkSectorSource *native = (vtkSectorSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetZCoord(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

