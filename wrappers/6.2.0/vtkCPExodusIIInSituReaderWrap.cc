/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkMultiBlockDataSetAlgorithmWrap.h"
#include "vtkCPExodusIIInSituReaderWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkCPExodusIIInSituReaderWrap::ptpl;

VtkCPExodusIIInSituReaderWrap::VtkCPExodusIIInSituReaderWrap()
{ }

VtkCPExodusIIInSituReaderWrap::VtkCPExodusIIInSituReaderWrap(vtkSmartPointer<vtkCPExodusIIInSituReader> _native)
{ native = _native; }

VtkCPExodusIIInSituReaderWrap::~VtkCPExodusIIInSituReaderWrap()
{ }

void VtkCPExodusIIInSituReaderWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkCPExodusIIInSituReader").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("CPExodusIIInSituReader").ToLocalChecked(), ConstructorGetter);
}

void VtkCPExodusIIInSituReaderWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkCPExodusIIInSituReaderWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkMultiBlockDataSetAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkMultiBlockDataSetAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkCPExodusIIInSituReaderWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetCurrentTimeStep", GetCurrentTimeStep);
	Nan::SetPrototypeMethod(tpl, "getCurrentTimeStep", GetCurrentTimeStep);

	Nan::SetPrototypeMethod(tpl, "GetFileName", GetFileName);
	Nan::SetPrototypeMethod(tpl, "getFileName", GetFileName);

	Nan::SetPrototypeMethod(tpl, "GetTimeStepRange", GetTimeStepRange);
	Nan::SetPrototypeMethod(tpl, "getTimeStepRange", GetTimeStepRange);

	Nan::SetPrototypeMethod(tpl, "GetTimeStepValue", GetTimeStepValue);
	Nan::SetPrototypeMethod(tpl, "getTimeStepValue", GetTimeStepValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCurrentTimeStep", SetCurrentTimeStep);
	Nan::SetPrototypeMethod(tpl, "setCurrentTimeStep", SetCurrentTimeStep);

	Nan::SetPrototypeMethod(tpl, "SetFileName", SetFileName);
	Nan::SetPrototypeMethod(tpl, "setFileName", SetFileName);

	ptpl.Reset( tpl );
}

void VtkCPExodusIIInSituReaderWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkCPExodusIIInSituReader> native = vtkSmartPointer<vtkCPExodusIIInSituReader>::New();
		VtkCPExodusIIInSituReaderWrap* obj = new VtkCPExodusIIInSituReaderWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkCPExodusIIInSituReaderWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCPExodusIIInSituReaderWrap *wrapper = ObjectWrap::Unwrap<VtkCPExodusIIInSituReaderWrap>(info.Holder());
	vtkCPExodusIIInSituReader *native = (vtkCPExodusIIInSituReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCPExodusIIInSituReaderWrap::GetCurrentTimeStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCPExodusIIInSituReaderWrap *wrapper = ObjectWrap::Unwrap<VtkCPExodusIIInSituReaderWrap>(info.Holder());
	vtkCPExodusIIInSituReader *native = (vtkCPExodusIIInSituReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCurrentTimeStep();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCPExodusIIInSituReaderWrap::GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCPExodusIIInSituReaderWrap *wrapper = ObjectWrap::Unwrap<VtkCPExodusIIInSituReaderWrap>(info.Holder());
	vtkCPExodusIIInSituReader *native = (vtkCPExodusIIInSituReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCPExodusIIInSituReaderWrap::GetTimeStepRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCPExodusIIInSituReaderWrap *wrapper = ObjectWrap::Unwrap<VtkCPExodusIIInSituReaderWrap>(info.Holder());
	vtkCPExodusIIInSituReader *native = (vtkCPExodusIIInSituReader *)wrapper->native.GetPointer();
	int const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTimeStepRange();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 2 * sizeof(int));
	Local<v8::Int32Array> at = v8::Int32Array::New(ab, 0, 2);
	memcpy(ab->GetContents().Data(), r, 2 * sizeof(int));
	info.GetReturnValue().Set(at);
}

void VtkCPExodusIIInSituReaderWrap::GetTimeStepValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCPExodusIIInSituReaderWrap *wrapper = ObjectWrap::Unwrap<VtkCPExodusIIInSituReaderWrap>(info.Holder());
	vtkCPExodusIIInSituReader *native = (vtkCPExodusIIInSituReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		double r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetTimeStepValue(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCPExodusIIInSituReaderWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCPExodusIIInSituReaderWrap *wrapper = ObjectWrap::Unwrap<VtkCPExodusIIInSituReaderWrap>(info.Holder());
	vtkCPExodusIIInSituReader *native = (vtkCPExodusIIInSituReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCPExodusIIInSituReaderWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCPExodusIIInSituReaderWrap *wrapper = ObjectWrap::Unwrap<VtkCPExodusIIInSituReaderWrap>(info.Holder());
	vtkCPExodusIIInSituReader *native = (vtkCPExodusIIInSituReader *)wrapper->native.GetPointer();
	vtkCPExodusIIInSituReader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkCPExodusIIInSituReaderWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCPExodusIIInSituReaderWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCPExodusIIInSituReaderWrap *w = new VtkCPExodusIIInSituReaderWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCPExodusIIInSituReaderWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCPExodusIIInSituReaderWrap *wrapper = ObjectWrap::Unwrap<VtkCPExodusIIInSituReaderWrap>(info.Holder());
	vtkCPExodusIIInSituReader *native = (vtkCPExodusIIInSituReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkCPExodusIIInSituReader * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkCPExodusIIInSituReaderWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkCPExodusIIInSituReaderWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkCPExodusIIInSituReaderWrap *w = new VtkCPExodusIIInSituReaderWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCPExodusIIInSituReaderWrap::SetCurrentTimeStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCPExodusIIInSituReaderWrap *wrapper = ObjectWrap::Unwrap<VtkCPExodusIIInSituReaderWrap>(info.Holder());
	vtkCPExodusIIInSituReader *native = (vtkCPExodusIIInSituReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCurrentTimeStep(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCPExodusIIInSituReaderWrap::SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCPExodusIIInSituReaderWrap *wrapper = ObjectWrap::Unwrap<VtkCPExodusIIInSituReaderWrap>(info.Holder());
	vtkCPExodusIIInSituReader *native = (vtkCPExodusIIInSituReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

