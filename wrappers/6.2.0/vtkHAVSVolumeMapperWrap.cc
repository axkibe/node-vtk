/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkUnstructuredGridVolumeMapperWrap.h"
#include "vtkHAVSVolumeMapperWrap.h"
#include "vtkObjectWrap.h"
#include "vtkRendererWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkHAVSVolumeMapperWrap::ptpl;

VtkHAVSVolumeMapperWrap::VtkHAVSVolumeMapperWrap()
{ }

VtkHAVSVolumeMapperWrap::VtkHAVSVolumeMapperWrap(vtkSmartPointer<vtkHAVSVolumeMapper> _native)
{ native = _native; }

VtkHAVSVolumeMapperWrap::~VtkHAVSVolumeMapperWrap()
{ }

void VtkHAVSVolumeMapperWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkHAVSVolumeMapper").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("HAVSVolumeMapper").ToLocalChecked(), ConstructorGetter);
}

void VtkHAVSVolumeMapperWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkHAVSVolumeMapperWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkUnstructuredGridVolumeMapperWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkUnstructuredGridVolumeMapperWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkHAVSVolumeMapperWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetGPUDataStructures", GetGPUDataStructures);
	Nan::SetPrototypeMethod(tpl, "getGPUDataStructures", GetGPUDataStructures);

	Nan::SetPrototypeMethod(tpl, "GetKBufferSize", GetKBufferSize);
	Nan::SetPrototypeMethod(tpl, "getKBufferSize", GetKBufferSize);

	Nan::SetPrototypeMethod(tpl, "GetLevelOfDetail", GetLevelOfDetail);
	Nan::SetPrototypeMethod(tpl, "getLevelOfDetail", GetLevelOfDetail);

	Nan::SetPrototypeMethod(tpl, "GetLevelOfDetailMethod", GetLevelOfDetailMethod);
	Nan::SetPrototypeMethod(tpl, "getLevelOfDetailMethod", GetLevelOfDetailMethod);

	Nan::SetPrototypeMethod(tpl, "GetPartiallyRemoveNonConvexities", GetPartiallyRemoveNonConvexities);
	Nan::SetPrototypeMethod(tpl, "getPartiallyRemoveNonConvexities", GetPartiallyRemoveNonConvexities);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetKBufferSize", SetKBufferSize);
	Nan::SetPrototypeMethod(tpl, "setKBufferSize", SetKBufferSize);

	Nan::SetPrototypeMethod(tpl, "SetKBufferSizeTo2", SetKBufferSizeTo2);
	Nan::SetPrototypeMethod(tpl, "setKBufferSizeTo2", SetKBufferSizeTo2);

	Nan::SetPrototypeMethod(tpl, "SetKBufferSizeTo6", SetKBufferSizeTo6);
	Nan::SetPrototypeMethod(tpl, "setKBufferSizeTo6", SetKBufferSizeTo6);

	Nan::SetPrototypeMethod(tpl, "SetLevelOfDetail", SetLevelOfDetail);
	Nan::SetPrototypeMethod(tpl, "setLevelOfDetail", SetLevelOfDetail);

	Nan::SetPrototypeMethod(tpl, "SetLevelOfDetailMethod", SetLevelOfDetailMethod);
	Nan::SetPrototypeMethod(tpl, "setLevelOfDetailMethod", SetLevelOfDetailMethod);

	Nan::SetPrototypeMethod(tpl, "SetLevelOfDetailMethodArea", SetLevelOfDetailMethodArea);
	Nan::SetPrototypeMethod(tpl, "setLevelOfDetailMethodArea", SetLevelOfDetailMethodArea);

	Nan::SetPrototypeMethod(tpl, "SetLevelOfDetailMethodField", SetLevelOfDetailMethodField);
	Nan::SetPrototypeMethod(tpl, "setLevelOfDetailMethodField", SetLevelOfDetailMethodField);

	Nan::SetPrototypeMethod(tpl, "SetPartiallyRemoveNonConvexities", SetPartiallyRemoveNonConvexities);
	Nan::SetPrototypeMethod(tpl, "setPartiallyRemoveNonConvexities", SetPartiallyRemoveNonConvexities);

	Nan::SetPrototypeMethod(tpl, "SupportedByHardware", SupportedByHardware);
	Nan::SetPrototypeMethod(tpl, "supportedByHardware", SupportedByHardware);

	ptpl.Reset( tpl );
}

void VtkHAVSVolumeMapperWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkHAVSVolumeMapper> native = vtkSmartPointer<vtkHAVSVolumeMapper>::New();
		VtkHAVSVolumeMapperWrap* obj = new VtkHAVSVolumeMapperWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkHAVSVolumeMapperWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkHAVSVolumeMapperWrap::GetGPUDataStructures(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGPUDataStructures();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHAVSVolumeMapperWrap::GetKBufferSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetKBufferSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHAVSVolumeMapperWrap::GetLevelOfDetail(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLevelOfDetail();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHAVSVolumeMapperWrap::GetLevelOfDetailMethod(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLevelOfDetailMethod();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHAVSVolumeMapperWrap::GetPartiallyRemoveNonConvexities(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPartiallyRemoveNonConvexities();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHAVSVolumeMapperWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHAVSVolumeMapperWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	vtkHAVSVolumeMapper * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkHAVSVolumeMapperWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkHAVSVolumeMapperWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkHAVSVolumeMapperWrap *w = new VtkHAVSVolumeMapperWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkHAVSVolumeMapperWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkHAVSVolumeMapper * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkHAVSVolumeMapperWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkHAVSVolumeMapperWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkHAVSVolumeMapperWrap *w = new VtkHAVSVolumeMapperWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHAVSVolumeMapperWrap::SetKBufferSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKBufferSize(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHAVSVolumeMapperWrap::SetKBufferSizeTo2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetKBufferSizeTo2();
}

void VtkHAVSVolumeMapperWrap::SetKBufferSizeTo6(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetKBufferSizeTo6();
}

void VtkHAVSVolumeMapperWrap::SetLevelOfDetail(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLevelOfDetail(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHAVSVolumeMapperWrap::SetLevelOfDetailMethod(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLevelOfDetailMethod(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHAVSVolumeMapperWrap::SetLevelOfDetailMethodArea(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetLevelOfDetailMethodArea();
}

void VtkHAVSVolumeMapperWrap::SetLevelOfDetailMethodField(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetLevelOfDetailMethodField();
}

void VtkHAVSVolumeMapperWrap::SetPartiallyRemoveNonConvexities(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPartiallyRemoveNonConvexities(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHAVSVolumeMapperWrap::SupportedByHardware(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHAVSVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkHAVSVolumeMapperWrap>(info.Holder());
	vtkHAVSVolumeMapper *native = (vtkHAVSVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		bool r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SupportedByHardware(
			(vtkRenderer *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

