/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkPixelBufferObjectWrap.h"
#include "vtkRenderWindowWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkPixelBufferObjectWrap::ptpl;

VtkPixelBufferObjectWrap::VtkPixelBufferObjectWrap()
{ }

VtkPixelBufferObjectWrap::VtkPixelBufferObjectWrap(vtkSmartPointer<vtkPixelBufferObject> _native)
{ native = _native; }

VtkPixelBufferObjectWrap::~VtkPixelBufferObjectWrap()
{ }

void VtkPixelBufferObjectWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkPixelBufferObject").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("PixelBufferObject").ToLocalChecked(), ConstructorGetter);
}

void VtkPixelBufferObjectWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkPixelBufferObjectWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkPixelBufferObjectWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "BindToPackedBuffer", BindToPackedBuffer);
	Nan::SetPrototypeMethod(tpl, "bindToPackedBuffer", BindToPackedBuffer);

	Nan::SetPrototypeMethod(tpl, "BindToUnPackedBuffer", BindToUnPackedBuffer);
	Nan::SetPrototypeMethod(tpl, "bindToUnPackedBuffer", BindToUnPackedBuffer);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetComponents", GetComponents);
	Nan::SetPrototypeMethod(tpl, "getComponents", GetComponents);

	Nan::SetPrototypeMethod(tpl, "GetContext", GetContext);
	Nan::SetPrototypeMethod(tpl, "getContext", GetContext);

	Nan::SetPrototypeMethod(tpl, "GetType", GetType);
	Nan::SetPrototypeMethod(tpl, "getType", GetType);

	Nan::SetPrototypeMethod(tpl, "GetUsage", GetUsage);
	Nan::SetPrototypeMethod(tpl, "getUsage", GetUsage);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "IsSupported", IsSupported);
	Nan::SetPrototypeMethod(tpl, "isSupported", IsSupported);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseMemory", ReleaseMemory);
	Nan::SetPrototypeMethod(tpl, "releaseMemory", ReleaseMemory);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetComponents", SetComponents);
	Nan::SetPrototypeMethod(tpl, "setComponents", SetComponents);

	Nan::SetPrototypeMethod(tpl, "SetContext", SetContext);
	Nan::SetPrototypeMethod(tpl, "setContext", SetContext);

	Nan::SetPrototypeMethod(tpl, "SetType", SetType);
	Nan::SetPrototypeMethod(tpl, "setType", SetType);

	Nan::SetPrototypeMethod(tpl, "SetUsage", SetUsage);
	Nan::SetPrototypeMethod(tpl, "setUsage", SetUsage);

	Nan::SetPrototypeMethod(tpl, "UnBind", UnBind);
	Nan::SetPrototypeMethod(tpl, "unBind", UnBind);

	Nan::SetPrototypeMethod(tpl, "UnmapPackedBuffer", UnmapPackedBuffer);
	Nan::SetPrototypeMethod(tpl, "unmapPackedBuffer", UnmapPackedBuffer);

	Nan::SetPrototypeMethod(tpl, "UnmapUnpackedBuffer", UnmapUnpackedBuffer);
	Nan::SetPrototypeMethod(tpl, "unmapUnpackedBuffer", UnmapUnpackedBuffer);

	ptpl.Reset( tpl );
}

void VtkPixelBufferObjectWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkPixelBufferObject> native = vtkSmartPointer<vtkPixelBufferObject>::New();
		VtkPixelBufferObjectWrap* obj = new VtkPixelBufferObjectWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkPixelBufferObjectWrap::BindToPackedBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BindToPackedBuffer();
}

void VtkPixelBufferObjectWrap::BindToUnPackedBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BindToUnPackedBuffer();
}

void VtkPixelBufferObjectWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPixelBufferObjectWrap::GetComponents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComponents();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPixelBufferObjectWrap::GetContext(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	vtkRenderWindow * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetContext();
		VtkRenderWindowWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderWindowWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderWindowWrap *w = new VtkRenderWindowWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPixelBufferObjectWrap::GetType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPixelBufferObjectWrap::GetUsage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUsage();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPixelBufferObjectWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPixelBufferObjectWrap::IsSupported(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRenderWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRenderWindowWrap *a0 = ObjectWrap::Unwrap<VtkRenderWindowWrap>(info[0]->ToObject());
		bool r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsSupported(
			(vtkRenderWindow *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPixelBufferObjectWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	vtkPixelBufferObject * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkPixelBufferObjectWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPixelBufferObjectWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPixelBufferObjectWrap *w = new VtkPixelBufferObjectWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPixelBufferObjectWrap::ReleaseMemory(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReleaseMemory();
}

void VtkPixelBufferObjectWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkPixelBufferObject * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkPixelBufferObjectWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkPixelBufferObjectWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPixelBufferObjectWrap *w = new VtkPixelBufferObjectWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPixelBufferObjectWrap::SetComponents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComponents(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPixelBufferObjectWrap::SetContext(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRenderWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRenderWindowWrap *a0 = ObjectWrap::Unwrap<VtkRenderWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetContext(
			(vtkRenderWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPixelBufferObjectWrap::SetType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPixelBufferObjectWrap::SetUsage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUsage(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPixelBufferObjectWrap::UnBind(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UnBind();
}

void VtkPixelBufferObjectWrap::UnmapPackedBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UnmapPackedBuffer();
}

void VtkPixelBufferObjectWrap::UnmapUnpackedBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPixelBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkPixelBufferObjectWrap>(info.Holder());
	vtkPixelBufferObject *native = (vtkPixelBufferObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UnmapUnpackedBuffer();
}

