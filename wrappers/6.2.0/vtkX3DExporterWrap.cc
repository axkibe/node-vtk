/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkExporterWrap.h"
#include "vtkX3DExporterWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkX3DExporterWrap::ptpl;

VtkX3DExporterWrap::VtkX3DExporterWrap()
{ }

VtkX3DExporterWrap::VtkX3DExporterWrap(vtkSmartPointer<vtkX3DExporter> _native)
{ native = _native; }

VtkX3DExporterWrap::~VtkX3DExporterWrap()
{ }

void VtkX3DExporterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkX3DExporter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("X3DExporter").ToLocalChecked(), ConstructorGetter);
}

void VtkX3DExporterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkX3DExporterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkExporterWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkExporterWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkX3DExporterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "BinaryOff", BinaryOff);
	Nan::SetPrototypeMethod(tpl, "binaryOff", BinaryOff);

	Nan::SetPrototypeMethod(tpl, "BinaryOn", BinaryOn);
	Nan::SetPrototypeMethod(tpl, "binaryOn", BinaryOn);

	Nan::SetPrototypeMethod(tpl, "FastestOff", FastestOff);
	Nan::SetPrototypeMethod(tpl, "fastestOff", FastestOff);

	Nan::SetPrototypeMethod(tpl, "FastestOn", FastestOn);
	Nan::SetPrototypeMethod(tpl, "fastestOn", FastestOn);

	Nan::SetPrototypeMethod(tpl, "GetBinary", GetBinary);
	Nan::SetPrototypeMethod(tpl, "getBinary", GetBinary);

	Nan::SetPrototypeMethod(tpl, "GetBinaryMaxValue", GetBinaryMaxValue);
	Nan::SetPrototypeMethod(tpl, "getBinaryMaxValue", GetBinaryMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetBinaryMinValue", GetBinaryMinValue);
	Nan::SetPrototypeMethod(tpl, "getBinaryMinValue", GetBinaryMinValue);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetFastest", GetFastest);
	Nan::SetPrototypeMethod(tpl, "getFastest", GetFastest);

	Nan::SetPrototypeMethod(tpl, "GetFastestMaxValue", GetFastestMaxValue);
	Nan::SetPrototypeMethod(tpl, "getFastestMaxValue", GetFastestMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetFastestMinValue", GetFastestMinValue);
	Nan::SetPrototypeMethod(tpl, "getFastestMinValue", GetFastestMinValue);

	Nan::SetPrototypeMethod(tpl, "GetFileName", GetFileName);
	Nan::SetPrototypeMethod(tpl, "getFileName", GetFileName);

	Nan::SetPrototypeMethod(tpl, "GetOutputString", GetOutputString);
	Nan::SetPrototypeMethod(tpl, "getOutputString", GetOutputString);

	Nan::SetPrototypeMethod(tpl, "GetOutputStringLength", GetOutputStringLength);
	Nan::SetPrototypeMethod(tpl, "getOutputStringLength", GetOutputStringLength);

	Nan::SetPrototypeMethod(tpl, "GetSpeed", GetSpeed);
	Nan::SetPrototypeMethod(tpl, "getSpeed", GetSpeed);

	Nan::SetPrototypeMethod(tpl, "GetWriteToOutputString", GetWriteToOutputString);
	Nan::SetPrototypeMethod(tpl, "getWriteToOutputString", GetWriteToOutputString);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RegisterAndGetOutputString", RegisterAndGetOutputString);
	Nan::SetPrototypeMethod(tpl, "registerAndGetOutputString", RegisterAndGetOutputString);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBinary", SetBinary);
	Nan::SetPrototypeMethod(tpl, "setBinary", SetBinary);

	Nan::SetPrototypeMethod(tpl, "SetFastest", SetFastest);
	Nan::SetPrototypeMethod(tpl, "setFastest", SetFastest);

	Nan::SetPrototypeMethod(tpl, "SetFileName", SetFileName);
	Nan::SetPrototypeMethod(tpl, "setFileName", SetFileName);

	Nan::SetPrototypeMethod(tpl, "SetSpeed", SetSpeed);
	Nan::SetPrototypeMethod(tpl, "setSpeed", SetSpeed);

	Nan::SetPrototypeMethod(tpl, "SetWriteToOutputString", SetWriteToOutputString);
	Nan::SetPrototypeMethod(tpl, "setWriteToOutputString", SetWriteToOutputString);

	Nan::SetPrototypeMethod(tpl, "WriteToOutputStringOff", WriteToOutputStringOff);
	Nan::SetPrototypeMethod(tpl, "writeToOutputStringOff", WriteToOutputStringOff);

	Nan::SetPrototypeMethod(tpl, "WriteToOutputStringOn", WriteToOutputStringOn);
	Nan::SetPrototypeMethod(tpl, "writeToOutputStringOn", WriteToOutputStringOn);

	ptpl.Reset( tpl );
}

void VtkX3DExporterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkX3DExporter> native = vtkSmartPointer<vtkX3DExporter>::New();
		VtkX3DExporterWrap* obj = new VtkX3DExporterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkX3DExporterWrap::BinaryOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BinaryOff();
}

void VtkX3DExporterWrap::BinaryOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BinaryOn();
}

void VtkX3DExporterWrap::FastestOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FastestOff();
}

void VtkX3DExporterWrap::FastestOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FastestOn();
}

void VtkX3DExporterWrap::GetBinary(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBinary();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkX3DExporterWrap::GetBinaryMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBinaryMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkX3DExporterWrap::GetBinaryMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBinaryMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkX3DExporterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkX3DExporterWrap::GetFastest(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFastest();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkX3DExporterWrap::GetFastestMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFastestMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkX3DExporterWrap::GetFastestMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFastestMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkX3DExporterWrap::GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkX3DExporterWrap::GetOutputString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkX3DExporterWrap::GetOutputStringLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputStringLength();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkX3DExporterWrap::GetSpeed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpeed();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkX3DExporterWrap::GetWriteToOutputString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetWriteToOutputString();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkX3DExporterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkX3DExporterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	vtkX3DExporter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkX3DExporterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkX3DExporterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkX3DExporterWrap *w = new VtkX3DExporterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkX3DExporterWrap::RegisterAndGetOutputString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->RegisterAndGetOutputString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkX3DExporterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkX3DExporter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkX3DExporterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkX3DExporterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkX3DExporterWrap *w = new VtkX3DExporterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkX3DExporterWrap::SetBinary(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBinary(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkX3DExporterWrap::SetFastest(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFastest(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkX3DExporterWrap::SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkX3DExporterWrap::SetSpeed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSpeed(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkX3DExporterWrap::SetWriteToOutputString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetWriteToOutputString(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkX3DExporterWrap::WriteToOutputStringOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->WriteToOutputStringOff();
}

void VtkX3DExporterWrap::WriteToOutputStringOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkX3DExporterWrap *wrapper = ObjectWrap::Unwrap<VtkX3DExporterWrap>(info.Holder());
	vtkX3DExporter *native = (vtkX3DExporter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->WriteToOutputStringOn();
}

