/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkTableAlgorithmWrap.h"
#include "vtkBivariateLinearTableThresholdWrap.h"
#include "vtkObjectWrap.h"
#include "vtkIdTypeArrayWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkBivariateLinearTableThresholdWrap::ptpl;

VtkBivariateLinearTableThresholdWrap::VtkBivariateLinearTableThresholdWrap()
{ }

VtkBivariateLinearTableThresholdWrap::VtkBivariateLinearTableThresholdWrap(vtkSmartPointer<vtkBivariateLinearTableThreshold> _native)
{ native = _native; }

VtkBivariateLinearTableThresholdWrap::~VtkBivariateLinearTableThresholdWrap()
{ }

void VtkBivariateLinearTableThresholdWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkBivariateLinearTableThreshold").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("BivariateLinearTableThreshold").ToLocalChecked(), ConstructorGetter);
}

void VtkBivariateLinearTableThresholdWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkBivariateLinearTableThresholdWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkTableAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkTableAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkBivariateLinearTableThresholdWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddLineEquation", AddLineEquation);
	Nan::SetPrototypeMethod(tpl, "addLineEquation", AddLineEquation);

	Nan::SetPrototypeMethod(tpl, "ClearColumnsToThreshold", ClearColumnsToThreshold);
	Nan::SetPrototypeMethod(tpl, "clearColumnsToThreshold", ClearColumnsToThreshold);

	Nan::SetPrototypeMethod(tpl, "ClearLineEquations", ClearLineEquations);
	Nan::SetPrototypeMethod(tpl, "clearLineEquations", ClearLineEquations);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetColumnRanges", GetColumnRanges);
	Nan::SetPrototypeMethod(tpl, "getColumnRanges", GetColumnRanges);

	Nan::SetPrototypeMethod(tpl, "GetDistanceThreshold", GetDistanceThreshold);
	Nan::SetPrototypeMethod(tpl, "getDistanceThreshold", GetDistanceThreshold);

	Nan::SetPrototypeMethod(tpl, "GetInclusive", GetInclusive);
	Nan::SetPrototypeMethod(tpl, "getInclusive", GetInclusive);

	Nan::SetPrototypeMethod(tpl, "GetLinearThresholdType", GetLinearThresholdType);
	Nan::SetPrototypeMethod(tpl, "getLinearThresholdType", GetLinearThresholdType);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfColumnsToThreshold", GetNumberOfColumnsToThreshold);
	Nan::SetPrototypeMethod(tpl, "getNumberOfColumnsToThreshold", GetNumberOfColumnsToThreshold);

	Nan::SetPrototypeMethod(tpl, "GetSelectedRowIds", GetSelectedRowIds);
	Nan::SetPrototypeMethod(tpl, "getSelectedRowIds", GetSelectedRowIds);

	Nan::SetPrototypeMethod(tpl, "GetUseNormalizedDistance", GetUseNormalizedDistance);
	Nan::SetPrototypeMethod(tpl, "getUseNormalizedDistance", GetUseNormalizedDistance);

	Nan::SetPrototypeMethod(tpl, "Initialize", Initialize);
	Nan::SetPrototypeMethod(tpl, "initialize", Initialize);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetColumnRanges", SetColumnRanges);
	Nan::SetPrototypeMethod(tpl, "setColumnRanges", SetColumnRanges);

	Nan::SetPrototypeMethod(tpl, "SetDistanceThreshold", SetDistanceThreshold);
	Nan::SetPrototypeMethod(tpl, "setDistanceThreshold", SetDistanceThreshold);

	Nan::SetPrototypeMethod(tpl, "SetInclusive", SetInclusive);
	Nan::SetPrototypeMethod(tpl, "setInclusive", SetInclusive);

	Nan::SetPrototypeMethod(tpl, "SetLinearThresholdType", SetLinearThresholdType);
	Nan::SetPrototypeMethod(tpl, "setLinearThresholdType", SetLinearThresholdType);

	Nan::SetPrototypeMethod(tpl, "SetLinearThresholdTypeToAbove", SetLinearThresholdTypeToAbove);
	Nan::SetPrototypeMethod(tpl, "setLinearThresholdTypeToAbove", SetLinearThresholdTypeToAbove);

	Nan::SetPrototypeMethod(tpl, "SetLinearThresholdTypeToBelow", SetLinearThresholdTypeToBelow);
	Nan::SetPrototypeMethod(tpl, "setLinearThresholdTypeToBelow", SetLinearThresholdTypeToBelow);

	Nan::SetPrototypeMethod(tpl, "SetLinearThresholdTypeToBetween", SetLinearThresholdTypeToBetween);
	Nan::SetPrototypeMethod(tpl, "setLinearThresholdTypeToBetween", SetLinearThresholdTypeToBetween);

	Nan::SetPrototypeMethod(tpl, "SetLinearThresholdTypeToNear", SetLinearThresholdTypeToNear);
	Nan::SetPrototypeMethod(tpl, "setLinearThresholdTypeToNear", SetLinearThresholdTypeToNear);

	Nan::SetPrototypeMethod(tpl, "SetUseNormalizedDistance", SetUseNormalizedDistance);
	Nan::SetPrototypeMethod(tpl, "setUseNormalizedDistance", SetUseNormalizedDistance);

	Nan::SetPrototypeMethod(tpl, "UseNormalizedDistanceOff", UseNormalizedDistanceOff);
	Nan::SetPrototypeMethod(tpl, "useNormalizedDistanceOff", UseNormalizedDistanceOff);

	Nan::SetPrototypeMethod(tpl, "UseNormalizedDistanceOn", UseNormalizedDistanceOn);
	Nan::SetPrototypeMethod(tpl, "useNormalizedDistanceOn", UseNormalizedDistanceOn);

	ptpl.Reset( tpl );
}

void VtkBivariateLinearTableThresholdWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkBivariateLinearTableThreshold> native = vtkSmartPointer<vtkBivariateLinearTableThreshold>::New();
		VtkBivariateLinearTableThresholdWrap* obj = new VtkBivariateLinearTableThresholdWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkBivariateLinearTableThresholdWrap::AddLineEquation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->AddLineEquation(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBivariateLinearTableThresholdWrap::ClearColumnsToThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ClearColumnsToThreshold();
}

void VtkBivariateLinearTableThresholdWrap::ClearLineEquations(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ClearLineEquations();
}

void VtkBivariateLinearTableThresholdWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkBivariateLinearTableThresholdWrap::GetColumnRanges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetColumnRanges();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 2 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 2);
	memcpy(ab->GetContents().Data(), r, 2 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkBivariateLinearTableThresholdWrap::GetDistanceThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDistanceThreshold();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBivariateLinearTableThresholdWrap::GetInclusive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInclusive();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBivariateLinearTableThresholdWrap::GetLinearThresholdType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLinearThresholdType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBivariateLinearTableThresholdWrap::GetNumberOfColumnsToThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfColumnsToThreshold();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBivariateLinearTableThresholdWrap::GetSelectedRowIds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkIdTypeArray * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetSelectedRowIds(
			info[0]->Int32Value()
		);
		VtkIdTypeArrayWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkIdTypeArrayWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkIdTypeArrayWrap *w = new VtkIdTypeArrayWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBivariateLinearTableThresholdWrap::GetUseNormalizedDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseNormalizedDistance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBivariateLinearTableThresholdWrap::Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Initialize();
}

void VtkBivariateLinearTableThresholdWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBivariateLinearTableThresholdWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	vtkBivariateLinearTableThreshold * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkBivariateLinearTableThresholdWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkBivariateLinearTableThresholdWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkBivariateLinearTableThresholdWrap *w = new VtkBivariateLinearTableThresholdWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkBivariateLinearTableThresholdWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkBivariateLinearTableThreshold * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkBivariateLinearTableThresholdWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkBivariateLinearTableThresholdWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkBivariateLinearTableThresholdWrap *w = new VtkBivariateLinearTableThresholdWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBivariateLinearTableThresholdWrap::SetColumnRanges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColumnRanges(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[2];
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 2; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColumnRanges(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetColumnRanges(
				info[0]->NumberValue(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBivariateLinearTableThresholdWrap::SetDistanceThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDistanceThreshold(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBivariateLinearTableThresholdWrap::SetInclusive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInclusive(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBivariateLinearTableThresholdWrap::SetLinearThresholdType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLinearThresholdType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBivariateLinearTableThresholdWrap::SetLinearThresholdTypeToAbove(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetLinearThresholdTypeToAbove();
}

void VtkBivariateLinearTableThresholdWrap::SetLinearThresholdTypeToBelow(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetLinearThresholdTypeToBelow();
}

void VtkBivariateLinearTableThresholdWrap::SetLinearThresholdTypeToBetween(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetLinearThresholdTypeToBetween();
}

void VtkBivariateLinearTableThresholdWrap::SetLinearThresholdTypeToNear(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetLinearThresholdTypeToNear();
}

void VtkBivariateLinearTableThresholdWrap::SetUseNormalizedDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseNormalizedDistance(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBivariateLinearTableThresholdWrap::UseNormalizedDistanceOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseNormalizedDistanceOff();
}

void VtkBivariateLinearTableThresholdWrap::UseNormalizedDistanceOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBivariateLinearTableThresholdWrap *wrapper = ObjectWrap::Unwrap<VtkBivariateLinearTableThresholdWrap>(info.Holder());
	vtkBivariateLinearTableThreshold *native = (vtkBivariateLinearTableThreshold *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseNormalizedDistanceOn();
}

