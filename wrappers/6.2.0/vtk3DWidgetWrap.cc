/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkInteractorObserverWrap.h"
#include "vtk3DWidgetWrap.h"
#include "vtkObjectWrap.h"
#include "vtkProp3DWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkAlgorithmOutputWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> Vtk3DWidgetWrap::ptpl;

Vtk3DWidgetWrap::Vtk3DWidgetWrap()
{ }

Vtk3DWidgetWrap::Vtk3DWidgetWrap(vtkSmartPointer<vtk3DWidget> _native)
{ native = _native; }

Vtk3DWidgetWrap::~Vtk3DWidgetWrap()
{ }

void Vtk3DWidgetWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtk3DWidget").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("3DWidget").ToLocalChecked(), ConstructorGetter);
}

void Vtk3DWidgetWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void Vtk3DWidgetWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkInteractorObserverWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkInteractorObserverWrap::ptpl));
	tpl->SetClassName(Nan::New("Vtk3DWidgetWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetHandleSize", GetHandleSize);
	Nan::SetPrototypeMethod(tpl, "getHandleSize", GetHandleSize);

	Nan::SetPrototypeMethod(tpl, "GetHandleSizeMaxValue", GetHandleSizeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getHandleSizeMaxValue", GetHandleSizeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetHandleSizeMinValue", GetHandleSizeMinValue);
	Nan::SetPrototypeMethod(tpl, "getHandleSizeMinValue", GetHandleSizeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetInput", GetInput);
	Nan::SetPrototypeMethod(tpl, "getInput", GetInput);

	Nan::SetPrototypeMethod(tpl, "GetPlaceFactor", GetPlaceFactor);
	Nan::SetPrototypeMethod(tpl, "getPlaceFactor", GetPlaceFactor);

	Nan::SetPrototypeMethod(tpl, "GetPlaceFactorMaxValue", GetPlaceFactorMaxValue);
	Nan::SetPrototypeMethod(tpl, "getPlaceFactorMaxValue", GetPlaceFactorMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetPlaceFactorMinValue", GetPlaceFactorMinValue);
	Nan::SetPrototypeMethod(tpl, "getPlaceFactorMinValue", GetPlaceFactorMinValue);

	Nan::SetPrototypeMethod(tpl, "GetProp3D", GetProp3D);
	Nan::SetPrototypeMethod(tpl, "getProp3D", GetProp3D);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PlaceWidget", PlaceWidget);
	Nan::SetPrototypeMethod(tpl, "placeWidget", PlaceWidget);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetHandleSize", SetHandleSize);
	Nan::SetPrototypeMethod(tpl, "setHandleSize", SetHandleSize);

	Nan::SetPrototypeMethod(tpl, "SetInputConnection", SetInputConnection);
	Nan::SetPrototypeMethod(tpl, "setInputConnection", SetInputConnection);

	Nan::SetPrototypeMethod(tpl, "SetInputData", SetInputData);
	Nan::SetPrototypeMethod(tpl, "setInputData", SetInputData);

	Nan::SetPrototypeMethod(tpl, "SetPlaceFactor", SetPlaceFactor);
	Nan::SetPrototypeMethod(tpl, "setPlaceFactor", SetPlaceFactor);

	Nan::SetPrototypeMethod(tpl, "SetProp3D", SetProp3D);
	Nan::SetPrototypeMethod(tpl, "setProp3D", SetProp3D);

	ptpl.Reset( tpl );
}

void Vtk3DWidgetWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void Vtk3DWidgetWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void Vtk3DWidgetWrap::GetHandleSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHandleSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void Vtk3DWidgetWrap::GetHandleSizeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHandleSizeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void Vtk3DWidgetWrap::GetHandleSizeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHandleSizeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void Vtk3DWidgetWrap::GetInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInput();
		VtkDataSetWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataSetWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void Vtk3DWidgetWrap::GetPlaceFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPlaceFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void Vtk3DWidgetWrap::GetPlaceFactorMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPlaceFactorMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void Vtk3DWidgetWrap::GetPlaceFactorMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPlaceFactorMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void Vtk3DWidgetWrap::GetProp3D(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	vtkProp3D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProp3D();
		VtkProp3DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkProp3DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkProp3DWrap *w = new VtkProp3DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void Vtk3DWidgetWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void Vtk3DWidgetWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	vtk3DWidget * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		Vtk3DWidgetWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(Vtk3DWidgetWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	Vtk3DWidgetWrap *w = new Vtk3DWidgetWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void Vtk3DWidgetWrap::PlaceWidget(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() > 4 && info[4]->IsNumber())
					{
						if(info.Length() > 5 && info[5]->IsNumber())
						{
							if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->PlaceWidget(
								info[0]->NumberValue(),
								info[1]->NumberValue(),
								info[2]->NumberValue(),
								info[3]->NumberValue(),
								info[4]->NumberValue(),
								info[5]->NumberValue()
							);
							return;
						}
					}
				}
			}
		}
	}
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PlaceWidget();
}

void Vtk3DWidgetWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtk3DWidget * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			Vtk3DWidgetWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(Vtk3DWidgetWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		Vtk3DWidgetWrap *w = new Vtk3DWidgetWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void Vtk3DWidgetWrap::SetHandleSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHandleSize(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void Vtk3DWidgetWrap::SetInputConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAlgorithmOutputWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void Vtk3DWidgetWrap::SetInputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputData(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void Vtk3DWidgetWrap::SetPlaceFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPlaceFactor(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void Vtk3DWidgetWrap::SetProp3D(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	Vtk3DWidgetWrap *wrapper = ObjectWrap::Unwrap<Vtk3DWidgetWrap>(info.Holder());
	vtk3DWidget *native = (vtk3DWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkProp3DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkProp3DWrap *a0 = ObjectWrap::Unwrap<VtkProp3DWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProp3D(
			(vtkProp3D *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

