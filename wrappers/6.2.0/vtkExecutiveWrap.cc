/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkExecutiveWrap.h"
#include "vtkAlgorithmWrap.h"
#include "vtkInformationWrap.h"
#include "vtkInformationVectorWrap.h"
#include "vtkDataObjectWrap.h"
#include "vtkInformationExecutivePortKeyWrap.h"
#include "vtkInformationExecutivePortVectorKeyWrap.h"
#include "vtkInformationIntegerKeyWrap.h"
#include "vtkInformationKeyVectorKeyWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkExecutiveWrap::ptpl;

VtkExecutiveWrap::VtkExecutiveWrap()
{ }

VtkExecutiveWrap::VtkExecutiveWrap(vtkSmartPointer<vtkExecutive> _native)
{ native = _native; }

VtkExecutiveWrap::~VtkExecutiveWrap()
{ }

void VtkExecutiveWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkExecutive").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("Executive").ToLocalChecked(), ConstructorGetter);
}

void VtkExecutiveWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkExecutiveWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkExecutiveWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ALGORITHM_AFTER_FORWARD", ALGORITHM_AFTER_FORWARD);

	Nan::SetPrototypeMethod(tpl, "ALGORITHM_BEFORE_FORWARD", ALGORITHM_BEFORE_FORWARD);

	Nan::SetPrototypeMethod(tpl, "ALGORITHM_DIRECTION", ALGORITHM_DIRECTION);

	Nan::SetPrototypeMethod(tpl, "CONSUMERS", CONSUMERS);

	Nan::SetPrototypeMethod(tpl, "FORWARD_DIRECTION", FORWARD_DIRECTION);

	Nan::SetPrototypeMethod(tpl, "FROM_OUTPUT_PORT", FROM_OUTPUT_PORT);

	Nan::SetPrototypeMethod(tpl, "GetAlgorithm", GetAlgorithm);
	Nan::SetPrototypeMethod(tpl, "getAlgorithm", GetAlgorithm);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetInputData", GetInputData);
	Nan::SetPrototypeMethod(tpl, "getInputData", GetInputData);

	Nan::SetPrototypeMethod(tpl, "GetInputExecutive", GetInputExecutive);
	Nan::SetPrototypeMethod(tpl, "getInputExecutive", GetInputExecutive);

	Nan::SetPrototypeMethod(tpl, "GetInputInformation", GetInputInformation);
	Nan::SetPrototypeMethod(tpl, "getInputInformation", GetInputInformation);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfInputConnections", GetNumberOfInputConnections);
	Nan::SetPrototypeMethod(tpl, "getNumberOfInputConnections", GetNumberOfInputConnections);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfInputPorts", GetNumberOfInputPorts);
	Nan::SetPrototypeMethod(tpl, "getNumberOfInputPorts", GetNumberOfInputPorts);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfOutputPorts", GetNumberOfOutputPorts);
	Nan::SetPrototypeMethod(tpl, "getNumberOfOutputPorts", GetNumberOfOutputPorts);

	Nan::SetPrototypeMethod(tpl, "GetOutputData", GetOutputData);
	Nan::SetPrototypeMethod(tpl, "getOutputData", GetOutputData);

	Nan::SetPrototypeMethod(tpl, "GetOutputInformation", GetOutputInformation);
	Nan::SetPrototypeMethod(tpl, "getOutputInformation", GetOutputInformation);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "KEYS_TO_COPY", KEYS_TO_COPY);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PRODUCER", PRODUCER);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetOutputData", SetOutputData);
	Nan::SetPrototypeMethod(tpl, "setOutputData", SetOutputData);

	Nan::SetPrototypeMethod(tpl, "SetSharedOutputInformation", SetSharedOutputInformation);
	Nan::SetPrototypeMethod(tpl, "setSharedOutputInformation", SetSharedOutputInformation);

	Nan::SetPrototypeMethod(tpl, "Update", Update);
	Nan::SetPrototypeMethod(tpl, "update", Update);

	Nan::SetPrototypeMethod(tpl, "UpdateInformation", UpdateInformation);
	Nan::SetPrototypeMethod(tpl, "updateInformation", UpdateInformation);

	ptpl.Reset( tpl );
}

void VtkExecutiveWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkExecutiveWrap::ALGORITHM_AFTER_FORWARD(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->ALGORITHM_AFTER_FORWARD();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExecutiveWrap::ALGORITHM_BEFORE_FORWARD(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->ALGORITHM_BEFORE_FORWARD();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExecutiveWrap::ALGORITHM_DIRECTION(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->ALGORITHM_DIRECTION();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExecutiveWrap::CONSUMERS(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	vtkInformationExecutivePortVectorKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->CONSUMERS();
		VtkInformationExecutivePortVectorKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationExecutivePortVectorKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationExecutivePortVectorKeyWrap *w = new VtkInformationExecutivePortVectorKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExecutiveWrap::FORWARD_DIRECTION(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->FORWARD_DIRECTION();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExecutiveWrap::FROM_OUTPUT_PORT(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->FROM_OUTPUT_PORT();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExecutiveWrap::GetAlgorithm(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	vtkAlgorithm * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAlgorithm();
		VtkAlgorithmWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAlgorithmWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAlgorithmWrap *w = new VtkAlgorithmWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExecutiveWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkExecutiveWrap::GetInputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkDataObject * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetInputData(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
				VtkDataObjectWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkDataObjectWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkDataObjectWrap *w = new VtkDataObjectWrap();
			w->native = r;
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExecutiveWrap::GetInputExecutive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkExecutive * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetInputExecutive(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
				VtkExecutiveWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkExecutiveWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkExecutiveWrap *w = new VtkExecutiveWrap();
			w->native = r;
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExecutiveWrap::GetInputInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkInformation * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetInputInformation(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
				VtkInformationWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkInformationWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkInformationWrap *w = new VtkInformationWrap();
			w->native = r;
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
		vtkInformationVector * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetInputInformation(
			info[0]->Int32Value()
		);
			VtkInformationVectorWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkInformationVectorWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkInformationVectorWrap *w = new VtkInformationVectorWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExecutiveWrap::GetNumberOfInputConnections(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfInputConnections(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExecutiveWrap::GetNumberOfInputPorts(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfInputPorts();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExecutiveWrap::GetNumberOfOutputPorts(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfOutputPorts();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExecutiveWrap::GetOutputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkDataObject * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetOutputData(
			info[0]->Int32Value()
		);
			VtkDataObjectWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkDataObjectWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDataObjectWrap *w = new VtkDataObjectWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExecutiveWrap::GetOutputInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkInformation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetOutputInformation(
			info[0]->Int32Value()
		);
			VtkInformationWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkInformationWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkInformationWrap *w = new VtkInformationWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	vtkInformationVector * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputInformation();
		VtkInformationVectorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationVectorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationVectorWrap *w = new VtkInformationVectorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExecutiveWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExecutiveWrap::KEYS_TO_COPY(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	vtkInformationKeyVectorKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->KEYS_TO_COPY();
		VtkInformationKeyVectorKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationKeyVectorKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationKeyVectorKeyWrap *w = new VtkInformationKeyVectorKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExecutiveWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	vtkExecutive * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkExecutiveWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkExecutiveWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkExecutiveWrap *w = new VtkExecutiveWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExecutiveWrap::PRODUCER(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	vtkInformationExecutivePortKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->PRODUCER();
		VtkInformationExecutivePortKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationExecutivePortKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationExecutivePortKeyWrap *w = new VtkInformationExecutivePortKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExecutiveWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkExecutive * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkExecutiveWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkExecutiveWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkExecutiveWrap *w = new VtkExecutiveWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExecutiveWrap::SetOutputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataObjectWrap *a1 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[2]))
			{
				VtkInformationWrap *a2 = ObjectWrap::Unwrap<VtkInformationWrap>(info[2]->ToObject());
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetOutputData(
					info[0]->Int32Value(),
					(vtkDataObject *) a1->native.GetPointer(),
					(vtkInformation *) a2->native.GetPointer()
				);
				return;
			}
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetOutputData(
				info[0]->Int32Value(),
				(vtkDataObject *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExecutiveWrap::SetSharedOutputInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationVectorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationVectorWrap *a0 = ObjectWrap::Unwrap<VtkInformationVectorWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSharedOutputInformation(
			(vtkInformationVector *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExecutiveWrap::Update(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->Update(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->Update();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExecutiveWrap::UpdateInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExecutiveWrap *wrapper = ObjectWrap::Unwrap<VtkExecutiveWrap>(info.Holder());
	vtkExecutive *native = (vtkExecutive *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UpdateInformation();
	info.GetReturnValue().Set(Nan::New(r));
}

