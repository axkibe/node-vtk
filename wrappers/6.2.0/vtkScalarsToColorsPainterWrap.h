/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKSCALARSTOCOLORSPAINTERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKSCALARSTOCOLORSPAINTERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkScalarsToColorsPainter.h>

#include "vtkPainterWrap.h"

class VtkScalarsToColorsPainterWrap : public VtkPainterWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkScalarsToColorsPainterWrap(vtkSmartPointer<vtkScalarsToColorsPainter>);
		VtkScalarsToColorsPainterWrap();
		~VtkScalarsToColorsPainterWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void ARRAY_ACCESS_MODE(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ARRAY_COMPONENT(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ARRAY_ID(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ARRAY_NAME(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void COLOR_MODE(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CreateDefaultLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void FIELD_DATA_TUPLE_ID(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOutput(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPremultiplyColorsWithAlpha(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void INTERPOLATE_SCALARS_BEFORE_MAPPING(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void LOOKUP_TABLE(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SCALAR_MATERIAL_MODE(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SCALAR_MODE(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SCALAR_RANGE(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SCALAR_VISIBILITY(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void USE_LOOKUP_TABLE_SCALAR_RANGE(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
