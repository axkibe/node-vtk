/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkLinearTransformWrap.h"
#include "vtkIterativeClosestPointTransformWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkCellLocatorWrap.h"
#include "vtkLandmarkTransformWrap.h"
#include "vtkAbstractTransformWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkIterativeClosestPointTransformWrap::ptpl;

VtkIterativeClosestPointTransformWrap::VtkIterativeClosestPointTransformWrap()
{ }

VtkIterativeClosestPointTransformWrap::VtkIterativeClosestPointTransformWrap(vtkSmartPointer<vtkIterativeClosestPointTransform> _native)
{ native = _native; }

VtkIterativeClosestPointTransformWrap::~VtkIterativeClosestPointTransformWrap()
{ }

void VtkIterativeClosestPointTransformWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkIterativeClosestPointTransform").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("IterativeClosestPointTransform").ToLocalChecked(), ConstructorGetter);
}

void VtkIterativeClosestPointTransformWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkIterativeClosestPointTransformWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkLinearTransformWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkLinearTransformWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkIterativeClosestPointTransformWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CheckMeanDistanceOff", CheckMeanDistanceOff);
	Nan::SetPrototypeMethod(tpl, "checkMeanDistanceOff", CheckMeanDistanceOff);

	Nan::SetPrototypeMethod(tpl, "CheckMeanDistanceOn", CheckMeanDistanceOn);
	Nan::SetPrototypeMethod(tpl, "checkMeanDistanceOn", CheckMeanDistanceOn);

	Nan::SetPrototypeMethod(tpl, "GetCheckMeanDistance", GetCheckMeanDistance);
	Nan::SetPrototypeMethod(tpl, "getCheckMeanDistance", GetCheckMeanDistance);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetLandmarkTransform", GetLandmarkTransform);
	Nan::SetPrototypeMethod(tpl, "getLandmarkTransform", GetLandmarkTransform);

	Nan::SetPrototypeMethod(tpl, "GetLocator", GetLocator);
	Nan::SetPrototypeMethod(tpl, "getLocator", GetLocator);

	Nan::SetPrototypeMethod(tpl, "GetMaximumMeanDistance", GetMaximumMeanDistance);
	Nan::SetPrototypeMethod(tpl, "getMaximumMeanDistance", GetMaximumMeanDistance);

	Nan::SetPrototypeMethod(tpl, "GetMaximumNumberOfIterations", GetMaximumNumberOfIterations);
	Nan::SetPrototypeMethod(tpl, "getMaximumNumberOfIterations", GetMaximumNumberOfIterations);

	Nan::SetPrototypeMethod(tpl, "GetMaximumNumberOfLandmarks", GetMaximumNumberOfLandmarks);
	Nan::SetPrototypeMethod(tpl, "getMaximumNumberOfLandmarks", GetMaximumNumberOfLandmarks);

	Nan::SetPrototypeMethod(tpl, "GetMeanDistance", GetMeanDistance);
	Nan::SetPrototypeMethod(tpl, "getMeanDistance", GetMeanDistance);

	Nan::SetPrototypeMethod(tpl, "GetMeanDistanceMode", GetMeanDistanceMode);
	Nan::SetPrototypeMethod(tpl, "getMeanDistanceMode", GetMeanDistanceMode);

	Nan::SetPrototypeMethod(tpl, "GetMeanDistanceModeAsString", GetMeanDistanceModeAsString);
	Nan::SetPrototypeMethod(tpl, "getMeanDistanceModeAsString", GetMeanDistanceModeAsString);

	Nan::SetPrototypeMethod(tpl, "GetMeanDistanceModeMaxValue", GetMeanDistanceModeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getMeanDistanceModeMaxValue", GetMeanDistanceModeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetMeanDistanceModeMinValue", GetMeanDistanceModeMinValue);
	Nan::SetPrototypeMethod(tpl, "getMeanDistanceModeMinValue", GetMeanDistanceModeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfIterations", GetNumberOfIterations);
	Nan::SetPrototypeMethod(tpl, "getNumberOfIterations", GetNumberOfIterations);

	Nan::SetPrototypeMethod(tpl, "GetSource", GetSource);
	Nan::SetPrototypeMethod(tpl, "getSource", GetSource);

	Nan::SetPrototypeMethod(tpl, "GetStartByMatchingCentroids", GetStartByMatchingCentroids);
	Nan::SetPrototypeMethod(tpl, "getStartByMatchingCentroids", GetStartByMatchingCentroids);

	Nan::SetPrototypeMethod(tpl, "GetTarget", GetTarget);
	Nan::SetPrototypeMethod(tpl, "getTarget", GetTarget);

	Nan::SetPrototypeMethod(tpl, "Inverse", Inverse);
	Nan::SetPrototypeMethod(tpl, "inverse", Inverse);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "MakeTransform", MakeTransform);
	Nan::SetPrototypeMethod(tpl, "makeTransform", MakeTransform);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCheckMeanDistance", SetCheckMeanDistance);
	Nan::SetPrototypeMethod(tpl, "setCheckMeanDistance", SetCheckMeanDistance);

	Nan::SetPrototypeMethod(tpl, "SetLocator", SetLocator);
	Nan::SetPrototypeMethod(tpl, "setLocator", SetLocator);

	Nan::SetPrototypeMethod(tpl, "SetMaximumMeanDistance", SetMaximumMeanDistance);
	Nan::SetPrototypeMethod(tpl, "setMaximumMeanDistance", SetMaximumMeanDistance);

	Nan::SetPrototypeMethod(tpl, "SetMaximumNumberOfIterations", SetMaximumNumberOfIterations);
	Nan::SetPrototypeMethod(tpl, "setMaximumNumberOfIterations", SetMaximumNumberOfIterations);

	Nan::SetPrototypeMethod(tpl, "SetMaximumNumberOfLandmarks", SetMaximumNumberOfLandmarks);
	Nan::SetPrototypeMethod(tpl, "setMaximumNumberOfLandmarks", SetMaximumNumberOfLandmarks);

	Nan::SetPrototypeMethod(tpl, "SetMeanDistanceMode", SetMeanDistanceMode);
	Nan::SetPrototypeMethod(tpl, "setMeanDistanceMode", SetMeanDistanceMode);

	Nan::SetPrototypeMethod(tpl, "SetMeanDistanceModeToAbsoluteValue", SetMeanDistanceModeToAbsoluteValue);
	Nan::SetPrototypeMethod(tpl, "setMeanDistanceModeToAbsoluteValue", SetMeanDistanceModeToAbsoluteValue);

	Nan::SetPrototypeMethod(tpl, "SetMeanDistanceModeToRMS", SetMeanDistanceModeToRMS);
	Nan::SetPrototypeMethod(tpl, "setMeanDistanceModeToRMS", SetMeanDistanceModeToRMS);

	Nan::SetPrototypeMethod(tpl, "SetSource", SetSource);
	Nan::SetPrototypeMethod(tpl, "setSource", SetSource);

	Nan::SetPrototypeMethod(tpl, "SetStartByMatchingCentroids", SetStartByMatchingCentroids);
	Nan::SetPrototypeMethod(tpl, "setStartByMatchingCentroids", SetStartByMatchingCentroids);

	Nan::SetPrototypeMethod(tpl, "SetTarget", SetTarget);
	Nan::SetPrototypeMethod(tpl, "setTarget", SetTarget);

	Nan::SetPrototypeMethod(tpl, "StartByMatchingCentroidsOff", StartByMatchingCentroidsOff);
	Nan::SetPrototypeMethod(tpl, "startByMatchingCentroidsOff", StartByMatchingCentroidsOff);

	Nan::SetPrototypeMethod(tpl, "StartByMatchingCentroidsOn", StartByMatchingCentroidsOn);
	Nan::SetPrototypeMethod(tpl, "startByMatchingCentroidsOn", StartByMatchingCentroidsOn);

	ptpl.Reset( tpl );
}

void VtkIterativeClosestPointTransformWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkIterativeClosestPointTransform> native = vtkSmartPointer<vtkIterativeClosestPointTransform>::New();
		VtkIterativeClosestPointTransformWrap* obj = new VtkIterativeClosestPointTransformWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkIterativeClosestPointTransformWrap::CheckMeanDistanceOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CheckMeanDistanceOff();
}

void VtkIterativeClosestPointTransformWrap::CheckMeanDistanceOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CheckMeanDistanceOn();
}

void VtkIterativeClosestPointTransformWrap::GetCheckMeanDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCheckMeanDistance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIterativeClosestPointTransformWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkIterativeClosestPointTransformWrap::GetLandmarkTransform(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	vtkLandmarkTransform * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLandmarkTransform();
		VtkLandmarkTransformWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkLandmarkTransformWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkLandmarkTransformWrap *w = new VtkLandmarkTransformWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkIterativeClosestPointTransformWrap::GetLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	vtkCellLocator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLocator();
		VtkCellLocatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCellLocatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCellLocatorWrap *w = new VtkCellLocatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkIterativeClosestPointTransformWrap::GetMaximumMeanDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumMeanDistance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIterativeClosestPointTransformWrap::GetMaximumNumberOfIterations(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumNumberOfIterations();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIterativeClosestPointTransformWrap::GetMaximumNumberOfLandmarks(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumNumberOfLandmarks();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIterativeClosestPointTransformWrap::GetMeanDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMeanDistance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIterativeClosestPointTransformWrap::GetMeanDistanceMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMeanDistanceMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIterativeClosestPointTransformWrap::GetMeanDistanceModeAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMeanDistanceModeAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkIterativeClosestPointTransformWrap::GetMeanDistanceModeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMeanDistanceModeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIterativeClosestPointTransformWrap::GetMeanDistanceModeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMeanDistanceModeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIterativeClosestPointTransformWrap::GetNumberOfIterations(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfIterations();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIterativeClosestPointTransformWrap::GetSource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSource();
		VtkDataSetWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataSetWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkIterativeClosestPointTransformWrap::GetStartByMatchingCentroids(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStartByMatchingCentroids();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIterativeClosestPointTransformWrap::GetTarget(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTarget();
		VtkDataSetWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataSetWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkIterativeClosestPointTransformWrap::Inverse(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Inverse();
}

void VtkIterativeClosestPointTransformWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIterativeClosestPointTransformWrap::MakeTransform(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	vtkAbstractTransform * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->MakeTransform();
		VtkAbstractTransformWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAbstractTransformWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAbstractTransformWrap *w = new VtkAbstractTransformWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkIterativeClosestPointTransformWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	vtkIterativeClosestPointTransform * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkIterativeClosestPointTransformWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkIterativeClosestPointTransformWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkIterativeClosestPointTransformWrap *w = new VtkIterativeClosestPointTransformWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkIterativeClosestPointTransformWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkIterativeClosestPointTransform * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkIterativeClosestPointTransformWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkIterativeClosestPointTransformWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkIterativeClosestPointTransformWrap *w = new VtkIterativeClosestPointTransformWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIterativeClosestPointTransformWrap::SetCheckMeanDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCheckMeanDistance(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIterativeClosestPointTransformWrap::SetLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkCellLocatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkCellLocatorWrap *a0 = ObjectWrap::Unwrap<VtkCellLocatorWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLocator(
			(vtkCellLocator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIterativeClosestPointTransformWrap::SetMaximumMeanDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumMeanDistance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIterativeClosestPointTransformWrap::SetMaximumNumberOfIterations(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumNumberOfIterations(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIterativeClosestPointTransformWrap::SetMaximumNumberOfLandmarks(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumNumberOfLandmarks(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIterativeClosestPointTransformWrap::SetMeanDistanceMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMeanDistanceMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIterativeClosestPointTransformWrap::SetMeanDistanceModeToAbsoluteValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetMeanDistanceModeToAbsoluteValue();
}

void VtkIterativeClosestPointTransformWrap::SetMeanDistanceModeToRMS(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetMeanDistanceModeToRMS();
}

void VtkIterativeClosestPointTransformWrap::SetSource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSource(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIterativeClosestPointTransformWrap::SetStartByMatchingCentroids(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetStartByMatchingCentroids(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIterativeClosestPointTransformWrap::SetTarget(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTarget(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIterativeClosestPointTransformWrap::StartByMatchingCentroidsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->StartByMatchingCentroidsOff();
}

void VtkIterativeClosestPointTransformWrap::StartByMatchingCentroidsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIterativeClosestPointTransformWrap *wrapper = ObjectWrap::Unwrap<VtkIterativeClosestPointTransformWrap>(info.Holder());
	vtkIterativeClosestPointTransform *native = (vtkIterativeClosestPointTransform *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->StartByMatchingCentroidsOn();
}

