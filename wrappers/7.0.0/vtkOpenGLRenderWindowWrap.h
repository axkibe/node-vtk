/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKOPENGLRENDERWINDOWWRAP_H
#define NATIVE_EXTENSION_VTK_VTKOPENGLRENDERWINDOWWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkOpenGLRenderWindow.h>

#include "vtkRenderWindowWrap.h"
#include "../../plus/plus.h"

class VtkOpenGLRenderWindowWrap : public VtkRenderWindowWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkOpenGLRenderWindowWrap(vtkSmartPointer<vtkOpenGLRenderWindow>);
		VtkOpenGLRenderWindowWrap();
		~VtkOpenGLRenderWindowWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetBackBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetBackLeftBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetBackRightBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetContextCreationTime(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetContextSupportsOpenGL32(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDefaultTextureInternalFormat(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDepthBufferSize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFrontBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFrontLeftBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFrontRightBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGlobalMaximumNumberOfMultiSamples(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaximumHardwareLineWidth(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPixelData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRGBACharPixelData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRGBAPixelData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetZbufferData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsPointSpriteBugPresent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void OpenGLInit(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void OpenGLInitContext(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void OpenGLInitState(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Render(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetContextSupportsOpenGL32(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGlobalMaximumNumberOfMultiSamples(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetPixelData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRGBACharPixelData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRGBAPixelData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetZbufferData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void StereoUpdate(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void WaitForCompletion(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKOPENGLRENDERWINDOWWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKOPENGLRENDERWINDOWWRAP_CLASSDEF
#endif
};

#endif
