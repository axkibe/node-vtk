/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkLabelPlacerWrap.h"
#include "vtkObjectWrap.h"
#include "vtkRendererWrap.h"
#include "vtkCoordinateWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkLabelPlacerWrap::ptpl;

VtkLabelPlacerWrap::VtkLabelPlacerWrap()
{ }

VtkLabelPlacerWrap::VtkLabelPlacerWrap(vtkSmartPointer<vtkLabelPlacer> _native)
{ native = _native; }

VtkLabelPlacerWrap::~VtkLabelPlacerWrap()
{ }

void VtkLabelPlacerWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkLabelPlacer").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("LabelPlacer").ToLocalChecked(), ConstructorGetter);
}

void VtkLabelPlacerWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkLabelPlacerWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkLabelPlacerWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GeneratePerturbedLabelSpokesOff", GeneratePerturbedLabelSpokesOff);
	Nan::SetPrototypeMethod(tpl, "generatePerturbedLabelSpokesOff", GeneratePerturbedLabelSpokesOff);

	Nan::SetPrototypeMethod(tpl, "GeneratePerturbedLabelSpokesOn", GeneratePerturbedLabelSpokesOn);
	Nan::SetPrototypeMethod(tpl, "generatePerturbedLabelSpokesOn", GeneratePerturbedLabelSpokesOn);

	Nan::SetPrototypeMethod(tpl, "GetAnchorTransform", GetAnchorTransform);
	Nan::SetPrototypeMethod(tpl, "getAnchorTransform", GetAnchorTransform);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetGeneratePerturbedLabelSpokes", GetGeneratePerturbedLabelSpokes);
	Nan::SetPrototypeMethod(tpl, "getGeneratePerturbedLabelSpokes", GetGeneratePerturbedLabelSpokes);

	Nan::SetPrototypeMethod(tpl, "GetGravity", GetGravity);
	Nan::SetPrototypeMethod(tpl, "getGravity", GetGravity);

	Nan::SetPrototypeMethod(tpl, "GetIteratorType", GetIteratorType);
	Nan::SetPrototypeMethod(tpl, "getIteratorType", GetIteratorType);

	Nan::SetPrototypeMethod(tpl, "GetMaximumLabelFraction", GetMaximumLabelFraction);
	Nan::SetPrototypeMethod(tpl, "getMaximumLabelFraction", GetMaximumLabelFraction);

	Nan::SetPrototypeMethod(tpl, "GetMaximumLabelFractionMaxValue", GetMaximumLabelFractionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getMaximumLabelFractionMaxValue", GetMaximumLabelFractionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetMaximumLabelFractionMinValue", GetMaximumLabelFractionMinValue);
	Nan::SetPrototypeMethod(tpl, "getMaximumLabelFractionMinValue", GetMaximumLabelFractionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetOutputCoordinateSystem", GetOutputCoordinateSystem);
	Nan::SetPrototypeMethod(tpl, "getOutputCoordinateSystem", GetOutputCoordinateSystem);

	Nan::SetPrototypeMethod(tpl, "GetOutputCoordinateSystemMaxValue", GetOutputCoordinateSystemMaxValue);
	Nan::SetPrototypeMethod(tpl, "getOutputCoordinateSystemMaxValue", GetOutputCoordinateSystemMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetOutputCoordinateSystemMinValue", GetOutputCoordinateSystemMinValue);
	Nan::SetPrototypeMethod(tpl, "getOutputCoordinateSystemMinValue", GetOutputCoordinateSystemMinValue);

	Nan::SetPrototypeMethod(tpl, "GetOutputTraversedBounds", GetOutputTraversedBounds);
	Nan::SetPrototypeMethod(tpl, "getOutputTraversedBounds", GetOutputTraversedBounds);

	Nan::SetPrototypeMethod(tpl, "GetPositionsAsNormals", GetPositionsAsNormals);
	Nan::SetPrototypeMethod(tpl, "getPositionsAsNormals", GetPositionsAsNormals);

	Nan::SetPrototypeMethod(tpl, "GetRenderer", GetRenderer);
	Nan::SetPrototypeMethod(tpl, "getRenderer", GetRenderer);

	Nan::SetPrototypeMethod(tpl, "GetUseDepthBuffer", GetUseDepthBuffer);
	Nan::SetPrototypeMethod(tpl, "getUseDepthBuffer", GetUseDepthBuffer);

	Nan::SetPrototypeMethod(tpl, "GetUseUnicodeStrings", GetUseUnicodeStrings);
	Nan::SetPrototypeMethod(tpl, "getUseUnicodeStrings", GetUseUnicodeStrings);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "OutputCoordinateSystemDisplay", OutputCoordinateSystemDisplay);
	Nan::SetPrototypeMethod(tpl, "outputCoordinateSystemDisplay", OutputCoordinateSystemDisplay);

	Nan::SetPrototypeMethod(tpl, "OutputCoordinateSystemWorld", OutputCoordinateSystemWorld);
	Nan::SetPrototypeMethod(tpl, "outputCoordinateSystemWorld", OutputCoordinateSystemWorld);

	Nan::SetPrototypeMethod(tpl, "OutputTraversedBoundsOff", OutputTraversedBoundsOff);
	Nan::SetPrototypeMethod(tpl, "outputTraversedBoundsOff", OutputTraversedBoundsOff);

	Nan::SetPrototypeMethod(tpl, "OutputTraversedBoundsOn", OutputTraversedBoundsOn);
	Nan::SetPrototypeMethod(tpl, "outputTraversedBoundsOn", OutputTraversedBoundsOn);

	Nan::SetPrototypeMethod(tpl, "PositionsAsNormalsOff", PositionsAsNormalsOff);
	Nan::SetPrototypeMethod(tpl, "positionsAsNormalsOff", PositionsAsNormalsOff);

	Nan::SetPrototypeMethod(tpl, "PositionsAsNormalsOn", PositionsAsNormalsOn);
	Nan::SetPrototypeMethod(tpl, "positionsAsNormalsOn", PositionsAsNormalsOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetGeneratePerturbedLabelSpokes", SetGeneratePerturbedLabelSpokes);
	Nan::SetPrototypeMethod(tpl, "setGeneratePerturbedLabelSpokes", SetGeneratePerturbedLabelSpokes);

	Nan::SetPrototypeMethod(tpl, "SetGravity", SetGravity);
	Nan::SetPrototypeMethod(tpl, "setGravity", SetGravity);

	Nan::SetPrototypeMethod(tpl, "SetIteratorType", SetIteratorType);
	Nan::SetPrototypeMethod(tpl, "setIteratorType", SetIteratorType);

	Nan::SetPrototypeMethod(tpl, "SetMaximumLabelFraction", SetMaximumLabelFraction);
	Nan::SetPrototypeMethod(tpl, "setMaximumLabelFraction", SetMaximumLabelFraction);

	Nan::SetPrototypeMethod(tpl, "SetOutputCoordinateSystem", SetOutputCoordinateSystem);
	Nan::SetPrototypeMethod(tpl, "setOutputCoordinateSystem", SetOutputCoordinateSystem);

	Nan::SetPrototypeMethod(tpl, "SetOutputTraversedBounds", SetOutputTraversedBounds);
	Nan::SetPrototypeMethod(tpl, "setOutputTraversedBounds", SetOutputTraversedBounds);

	Nan::SetPrototypeMethod(tpl, "SetPositionsAsNormals", SetPositionsAsNormals);
	Nan::SetPrototypeMethod(tpl, "setPositionsAsNormals", SetPositionsAsNormals);

	Nan::SetPrototypeMethod(tpl, "SetRenderer", SetRenderer);
	Nan::SetPrototypeMethod(tpl, "setRenderer", SetRenderer);

	Nan::SetPrototypeMethod(tpl, "SetUseDepthBuffer", SetUseDepthBuffer);
	Nan::SetPrototypeMethod(tpl, "setUseDepthBuffer", SetUseDepthBuffer);

	Nan::SetPrototypeMethod(tpl, "SetUseUnicodeStrings", SetUseUnicodeStrings);
	Nan::SetPrototypeMethod(tpl, "setUseUnicodeStrings", SetUseUnicodeStrings);

	Nan::SetPrototypeMethod(tpl, "UseDepthBufferOff", UseDepthBufferOff);
	Nan::SetPrototypeMethod(tpl, "useDepthBufferOff", UseDepthBufferOff);

	Nan::SetPrototypeMethod(tpl, "UseDepthBufferOn", UseDepthBufferOn);
	Nan::SetPrototypeMethod(tpl, "useDepthBufferOn", UseDepthBufferOn);

	Nan::SetPrototypeMethod(tpl, "UseUnicodeStringsOff", UseUnicodeStringsOff);
	Nan::SetPrototypeMethod(tpl, "useUnicodeStringsOff", UseUnicodeStringsOff);

	Nan::SetPrototypeMethod(tpl, "UseUnicodeStringsOn", UseUnicodeStringsOn);
	Nan::SetPrototypeMethod(tpl, "useUnicodeStringsOn", UseUnicodeStringsOn);

	ptpl.Reset( tpl );
}

void VtkLabelPlacerWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkLabelPlacer> native = vtkSmartPointer<vtkLabelPlacer>::New();
		VtkLabelPlacerWrap* obj = new VtkLabelPlacerWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkLabelPlacerWrap::GeneratePerturbedLabelSpokesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GeneratePerturbedLabelSpokesOff();
}

void VtkLabelPlacerWrap::GeneratePerturbedLabelSpokesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GeneratePerturbedLabelSpokesOn();
}

void VtkLabelPlacerWrap::GetAnchorTransform(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	vtkCoordinate * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAnchorTransform();
		VtkCoordinateWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCoordinateWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCoordinateWrap *w = new VtkCoordinateWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLabelPlacerWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkLabelPlacerWrap::GetGeneratePerturbedLabelSpokes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGeneratePerturbedLabelSpokes();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::GetGravity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGravity();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::GetIteratorType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIteratorType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::GetMaximumLabelFraction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumLabelFraction();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::GetMaximumLabelFractionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumLabelFractionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::GetMaximumLabelFractionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumLabelFractionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::GetOutputCoordinateSystem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputCoordinateSystem();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::GetOutputCoordinateSystemMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputCoordinateSystemMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::GetOutputCoordinateSystemMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputCoordinateSystemMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::GetOutputTraversedBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputTraversedBounds();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::GetPositionsAsNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPositionsAsNormals();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::GetRenderer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	vtkRenderer * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRenderer();
		VtkRendererWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRendererWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRendererWrap *w = new VtkRendererWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLabelPlacerWrap::GetUseDepthBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseDepthBuffer();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::GetUseUnicodeStrings(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseUnicodeStrings();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLabelPlacerWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacerWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	vtkLabelPlacer * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkLabelPlacerWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkLabelPlacerWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkLabelPlacerWrap *w = new VtkLabelPlacerWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLabelPlacerWrap::OutputCoordinateSystemDisplay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutputCoordinateSystemDisplay();
}

void VtkLabelPlacerWrap::OutputCoordinateSystemWorld(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutputCoordinateSystemWorld();
}

void VtkLabelPlacerWrap::OutputTraversedBoundsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutputTraversedBoundsOff();
}

void VtkLabelPlacerWrap::OutputTraversedBoundsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutputTraversedBoundsOn();
}

void VtkLabelPlacerWrap::PositionsAsNormalsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PositionsAsNormalsOff();
}

void VtkLabelPlacerWrap::PositionsAsNormalsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PositionsAsNormalsOn();
}

void VtkLabelPlacerWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkLabelPlacer * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkLabelPlacerWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkLabelPlacerWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkLabelPlacerWrap *w = new VtkLabelPlacerWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacerWrap::SetGeneratePerturbedLabelSpokes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGeneratePerturbedLabelSpokes(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacerWrap::SetGravity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGravity(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacerWrap::SetIteratorType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIteratorType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacerWrap::SetMaximumLabelFraction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumLabelFraction(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacerWrap::SetOutputCoordinateSystem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputCoordinateSystem(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacerWrap::SetOutputTraversedBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputTraversedBounds(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacerWrap::SetPositionsAsNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPositionsAsNormals(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacerWrap::SetRenderer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRenderer(
			(vtkRenderer *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacerWrap::SetUseDepthBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseDepthBuffer(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacerWrap::SetUseUnicodeStrings(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseUnicodeStrings(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLabelPlacerWrap::UseDepthBufferOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseDepthBufferOff();
}

void VtkLabelPlacerWrap::UseDepthBufferOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseDepthBufferOn();
}

void VtkLabelPlacerWrap::UseUnicodeStringsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseUnicodeStringsOff();
}

void VtkLabelPlacerWrap::UseUnicodeStringsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLabelPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkLabelPlacerWrap>(info.Holder());
	vtkLabelPlacer *native = (vtkLabelPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseUnicodeStringsOn();
}

