/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtk3DWidgetWrap.h"
#include "vtkImageTracerWidgetWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPropertyWrap.h"
#include "vtkPropWrap.h"
#include "vtkPolyDataWrap.h"
#include "vtkGlyphSource2DWrap.h"
#include "vtkPointsWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkImageTracerWidgetWrap::ptpl;

VtkImageTracerWidgetWrap::VtkImageTracerWidgetWrap()
{ }

VtkImageTracerWidgetWrap::VtkImageTracerWidgetWrap(vtkSmartPointer<vtkImageTracerWidget> _native)
{ native = _native; }

VtkImageTracerWidgetWrap::~VtkImageTracerWidgetWrap()
{ }

void VtkImageTracerWidgetWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkImageTracerWidget").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ImageTracerWidget").ToLocalChecked(), ConstructorGetter);
}

void VtkImageTracerWidgetWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkImageTracerWidgetWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	Vtk3DWidgetWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(Vtk3DWidgetWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkImageTracerWidgetWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AutoCloseOff", AutoCloseOff);
	Nan::SetPrototypeMethod(tpl, "autoCloseOff", AutoCloseOff);

	Nan::SetPrototypeMethod(tpl, "AutoCloseOn", AutoCloseOn);
	Nan::SetPrototypeMethod(tpl, "autoCloseOn", AutoCloseOn);

	Nan::SetPrototypeMethod(tpl, "GetAutoClose", GetAutoClose);
	Nan::SetPrototypeMethod(tpl, "getAutoClose", GetAutoClose);

	Nan::SetPrototypeMethod(tpl, "GetCaptureRadius", GetCaptureRadius);
	Nan::SetPrototypeMethod(tpl, "getCaptureRadius", GetCaptureRadius);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetGlyphSource", GetGlyphSource);
	Nan::SetPrototypeMethod(tpl, "getGlyphSource", GetGlyphSource);

	Nan::SetPrototypeMethod(tpl, "GetHandleLeftMouseButton", GetHandleLeftMouseButton);
	Nan::SetPrototypeMethod(tpl, "getHandleLeftMouseButton", GetHandleLeftMouseButton);

	Nan::SetPrototypeMethod(tpl, "GetHandleMiddleMouseButton", GetHandleMiddleMouseButton);
	Nan::SetPrototypeMethod(tpl, "getHandleMiddleMouseButton", GetHandleMiddleMouseButton);

	Nan::SetPrototypeMethod(tpl, "GetHandlePosition", GetHandlePosition);
	Nan::SetPrototypeMethod(tpl, "getHandlePosition", GetHandlePosition);

	Nan::SetPrototypeMethod(tpl, "GetHandleProperty", GetHandleProperty);
	Nan::SetPrototypeMethod(tpl, "getHandleProperty", GetHandleProperty);

	Nan::SetPrototypeMethod(tpl, "GetHandleRightMouseButton", GetHandleRightMouseButton);
	Nan::SetPrototypeMethod(tpl, "getHandleRightMouseButton", GetHandleRightMouseButton);

	Nan::SetPrototypeMethod(tpl, "GetImageSnapType", GetImageSnapType);
	Nan::SetPrototypeMethod(tpl, "getImageSnapType", GetImageSnapType);

	Nan::SetPrototypeMethod(tpl, "GetImageSnapTypeMaxValue", GetImageSnapTypeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getImageSnapTypeMaxValue", GetImageSnapTypeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetImageSnapTypeMinValue", GetImageSnapTypeMinValue);
	Nan::SetPrototypeMethod(tpl, "getImageSnapTypeMinValue", GetImageSnapTypeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetInteraction", GetInteraction);
	Nan::SetPrototypeMethod(tpl, "getInteraction", GetInteraction);

	Nan::SetPrototypeMethod(tpl, "GetLineProperty", GetLineProperty);
	Nan::SetPrototypeMethod(tpl, "getLineProperty", GetLineProperty);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfHandles", GetNumberOfHandles);
	Nan::SetPrototypeMethod(tpl, "getNumberOfHandles", GetNumberOfHandles);

	Nan::SetPrototypeMethod(tpl, "GetPath", GetPath);
	Nan::SetPrototypeMethod(tpl, "getPath", GetPath);

	Nan::SetPrototypeMethod(tpl, "GetProjectToPlane", GetProjectToPlane);
	Nan::SetPrototypeMethod(tpl, "getProjectToPlane", GetProjectToPlane);

	Nan::SetPrototypeMethod(tpl, "GetProjectionNormal", GetProjectionNormal);
	Nan::SetPrototypeMethod(tpl, "getProjectionNormal", GetProjectionNormal);

	Nan::SetPrototypeMethod(tpl, "GetProjectionNormalMaxValue", GetProjectionNormalMaxValue);
	Nan::SetPrototypeMethod(tpl, "getProjectionNormalMaxValue", GetProjectionNormalMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetProjectionNormalMinValue", GetProjectionNormalMinValue);
	Nan::SetPrototypeMethod(tpl, "getProjectionNormalMinValue", GetProjectionNormalMinValue);

	Nan::SetPrototypeMethod(tpl, "GetProjectionPosition", GetProjectionPosition);
	Nan::SetPrototypeMethod(tpl, "getProjectionPosition", GetProjectionPosition);

	Nan::SetPrototypeMethod(tpl, "GetSelectedHandleProperty", GetSelectedHandleProperty);
	Nan::SetPrototypeMethod(tpl, "getSelectedHandleProperty", GetSelectedHandleProperty);

	Nan::SetPrototypeMethod(tpl, "GetSelectedLineProperty", GetSelectedLineProperty);
	Nan::SetPrototypeMethod(tpl, "getSelectedLineProperty", GetSelectedLineProperty);

	Nan::SetPrototypeMethod(tpl, "GetSnapToImage", GetSnapToImage);
	Nan::SetPrototypeMethod(tpl, "getSnapToImage", GetSnapToImage);

	Nan::SetPrototypeMethod(tpl, "HandleLeftMouseButtonOff", HandleLeftMouseButtonOff);
	Nan::SetPrototypeMethod(tpl, "handleLeftMouseButtonOff", HandleLeftMouseButtonOff);

	Nan::SetPrototypeMethod(tpl, "HandleLeftMouseButtonOn", HandleLeftMouseButtonOn);
	Nan::SetPrototypeMethod(tpl, "handleLeftMouseButtonOn", HandleLeftMouseButtonOn);

	Nan::SetPrototypeMethod(tpl, "HandleMiddleMouseButtonOff", HandleMiddleMouseButtonOff);
	Nan::SetPrototypeMethod(tpl, "handleMiddleMouseButtonOff", HandleMiddleMouseButtonOff);

	Nan::SetPrototypeMethod(tpl, "HandleMiddleMouseButtonOn", HandleMiddleMouseButtonOn);
	Nan::SetPrototypeMethod(tpl, "handleMiddleMouseButtonOn", HandleMiddleMouseButtonOn);

	Nan::SetPrototypeMethod(tpl, "HandleRightMouseButtonOff", HandleRightMouseButtonOff);
	Nan::SetPrototypeMethod(tpl, "handleRightMouseButtonOff", HandleRightMouseButtonOff);

	Nan::SetPrototypeMethod(tpl, "HandleRightMouseButtonOn", HandleRightMouseButtonOn);
	Nan::SetPrototypeMethod(tpl, "handleRightMouseButtonOn", HandleRightMouseButtonOn);

	Nan::SetPrototypeMethod(tpl, "InitializeHandles", InitializeHandles);
	Nan::SetPrototypeMethod(tpl, "initializeHandles", InitializeHandles);

	Nan::SetPrototypeMethod(tpl, "InteractionOff", InteractionOff);
	Nan::SetPrototypeMethod(tpl, "interactionOff", InteractionOff);

	Nan::SetPrototypeMethod(tpl, "InteractionOn", InteractionOn);
	Nan::SetPrototypeMethod(tpl, "interactionOn", InteractionOn);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "IsClosed", IsClosed);
	Nan::SetPrototypeMethod(tpl, "isClosed", IsClosed);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PlaceWidget", PlaceWidget);
	Nan::SetPrototypeMethod(tpl, "placeWidget", PlaceWidget);

	Nan::SetPrototypeMethod(tpl, "ProjectToPlaneOff", ProjectToPlaneOff);
	Nan::SetPrototypeMethod(tpl, "projectToPlaneOff", ProjectToPlaneOff);

	Nan::SetPrototypeMethod(tpl, "ProjectToPlaneOn", ProjectToPlaneOn);
	Nan::SetPrototypeMethod(tpl, "projectToPlaneOn", ProjectToPlaneOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAutoClose", SetAutoClose);
	Nan::SetPrototypeMethod(tpl, "setAutoClose", SetAutoClose);

	Nan::SetPrototypeMethod(tpl, "SetCaptureRadius", SetCaptureRadius);
	Nan::SetPrototypeMethod(tpl, "setCaptureRadius", SetCaptureRadius);

	Nan::SetPrototypeMethod(tpl, "SetEnabled", SetEnabled);
	Nan::SetPrototypeMethod(tpl, "setEnabled", SetEnabled);

	Nan::SetPrototypeMethod(tpl, "SetHandleLeftMouseButton", SetHandleLeftMouseButton);
	Nan::SetPrototypeMethod(tpl, "setHandleLeftMouseButton", SetHandleLeftMouseButton);

	Nan::SetPrototypeMethod(tpl, "SetHandleMiddleMouseButton", SetHandleMiddleMouseButton);
	Nan::SetPrototypeMethod(tpl, "setHandleMiddleMouseButton", SetHandleMiddleMouseButton);

	Nan::SetPrototypeMethod(tpl, "SetHandlePosition", SetHandlePosition);
	Nan::SetPrototypeMethod(tpl, "setHandlePosition", SetHandlePosition);

	Nan::SetPrototypeMethod(tpl, "SetHandleProperty", SetHandleProperty);
	Nan::SetPrototypeMethod(tpl, "setHandleProperty", SetHandleProperty);

	Nan::SetPrototypeMethod(tpl, "SetHandleRightMouseButton", SetHandleRightMouseButton);
	Nan::SetPrototypeMethod(tpl, "setHandleRightMouseButton", SetHandleRightMouseButton);

	Nan::SetPrototypeMethod(tpl, "SetImageSnapType", SetImageSnapType);
	Nan::SetPrototypeMethod(tpl, "setImageSnapType", SetImageSnapType);

	Nan::SetPrototypeMethod(tpl, "SetInteraction", SetInteraction);
	Nan::SetPrototypeMethod(tpl, "setInteraction", SetInteraction);

	Nan::SetPrototypeMethod(tpl, "SetLineProperty", SetLineProperty);
	Nan::SetPrototypeMethod(tpl, "setLineProperty", SetLineProperty);

	Nan::SetPrototypeMethod(tpl, "SetProjectToPlane", SetProjectToPlane);
	Nan::SetPrototypeMethod(tpl, "setProjectToPlane", SetProjectToPlane);

	Nan::SetPrototypeMethod(tpl, "SetProjectionNormal", SetProjectionNormal);
	Nan::SetPrototypeMethod(tpl, "setProjectionNormal", SetProjectionNormal);

	Nan::SetPrototypeMethod(tpl, "SetProjectionNormalToXAxes", SetProjectionNormalToXAxes);
	Nan::SetPrototypeMethod(tpl, "setProjectionNormalToXAxes", SetProjectionNormalToXAxes);

	Nan::SetPrototypeMethod(tpl, "SetProjectionNormalToYAxes", SetProjectionNormalToYAxes);
	Nan::SetPrototypeMethod(tpl, "setProjectionNormalToYAxes", SetProjectionNormalToYAxes);

	Nan::SetPrototypeMethod(tpl, "SetProjectionNormalToZAxes", SetProjectionNormalToZAxes);
	Nan::SetPrototypeMethod(tpl, "setProjectionNormalToZAxes", SetProjectionNormalToZAxes);

	Nan::SetPrototypeMethod(tpl, "SetProjectionPosition", SetProjectionPosition);
	Nan::SetPrototypeMethod(tpl, "setProjectionPosition", SetProjectionPosition);

	Nan::SetPrototypeMethod(tpl, "SetSelectedHandleProperty", SetSelectedHandleProperty);
	Nan::SetPrototypeMethod(tpl, "setSelectedHandleProperty", SetSelectedHandleProperty);

	Nan::SetPrototypeMethod(tpl, "SetSelectedLineProperty", SetSelectedLineProperty);
	Nan::SetPrototypeMethod(tpl, "setSelectedLineProperty", SetSelectedLineProperty);

	Nan::SetPrototypeMethod(tpl, "SetSnapToImage", SetSnapToImage);
	Nan::SetPrototypeMethod(tpl, "setSnapToImage", SetSnapToImage);

	Nan::SetPrototypeMethod(tpl, "SetViewProp", SetViewProp);
	Nan::SetPrototypeMethod(tpl, "setViewProp", SetViewProp);

	Nan::SetPrototypeMethod(tpl, "SnapToImageOff", SnapToImageOff);
	Nan::SetPrototypeMethod(tpl, "snapToImageOff", SnapToImageOff);

	Nan::SetPrototypeMethod(tpl, "SnapToImageOn", SnapToImageOn);
	Nan::SetPrototypeMethod(tpl, "snapToImageOn", SnapToImageOn);

	ptpl.Reset( tpl );
}

void VtkImageTracerWidgetWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageTracerWidget> native = vtkSmartPointer<vtkImageTracerWidget>::New();
		VtkImageTracerWidgetWrap* obj = new VtkImageTracerWidgetWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageTracerWidgetWrap::AutoCloseOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AutoCloseOff();
}

void VtkImageTracerWidgetWrap::AutoCloseOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AutoCloseOn();
}

void VtkImageTracerWidgetWrap::GetAutoClose(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAutoClose();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetCaptureRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCaptureRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageTracerWidgetWrap::GetGlyphSource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	vtkGlyphSource2D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGlyphSource();
		VtkGlyphSource2DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkGlyphSource2DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGlyphSource2DWrap *w = new VtkGlyphSource2DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageTracerWidgetWrap::GetHandleLeftMouseButton(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHandleLeftMouseButton();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetHandleMiddleMouseButton(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHandleMiddleMouseButton();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetHandlePosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsFloat64Array())
		{
			v8::Local<v8::Float64Array>a1(v8::Local<v8::Float64Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetHandlePosition(
				info[0]->Int32Value(),
				(double *)(a1->Buffer()->GetContents().Data())
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			double b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetHandlePosition(
				info[0]->Int32Value(),
				b1
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::GetHandleProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHandleProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageTracerWidgetWrap::GetHandleRightMouseButton(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHandleRightMouseButton();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetImageSnapType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImageSnapType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetImageSnapTypeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImageSnapTypeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetImageSnapTypeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImageSnapTypeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetInteraction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInteraction();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetLineProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLineProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageTracerWidgetWrap::GetNumberOfHandles(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfHandles();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetPath(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetPath(
			(vtkPolyData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::GetProjectToPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProjectToPlane();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetProjectionNormal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProjectionNormal();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetProjectionNormalMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProjectionNormalMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetProjectionNormalMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProjectionNormalMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetProjectionPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProjectionPosition();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::GetSelectedHandleProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedHandleProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageTracerWidgetWrap::GetSelectedLineProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedLineProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageTracerWidgetWrap::GetSnapToImage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSnapToImage();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::HandleLeftMouseButtonOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->HandleLeftMouseButtonOff();
}

void VtkImageTracerWidgetWrap::HandleLeftMouseButtonOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->HandleLeftMouseButtonOn();
}

void VtkImageTracerWidgetWrap::HandleMiddleMouseButtonOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->HandleMiddleMouseButtonOff();
}

void VtkImageTracerWidgetWrap::HandleMiddleMouseButtonOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->HandleMiddleMouseButtonOn();
}

void VtkImageTracerWidgetWrap::HandleRightMouseButtonOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->HandleRightMouseButtonOff();
}

void VtkImageTracerWidgetWrap::HandleRightMouseButtonOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->HandleRightMouseButtonOn();
}

void VtkImageTracerWidgetWrap::InitializeHandles(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPointsWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPointsWrap *a0 = ObjectWrap::Unwrap<VtkPointsWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->InitializeHandles(
			(vtkPoints *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::InteractionOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InteractionOff();
}

void VtkImageTracerWidgetWrap::InteractionOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InteractionOn();
}

void VtkImageTracerWidgetWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::IsClosed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->IsClosed();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageTracerWidgetWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	vtkImageTracerWidget * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkImageTracerWidgetWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImageTracerWidgetWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageTracerWidgetWrap *w = new VtkImageTracerWidgetWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageTracerWidgetWrap::PlaceWidget(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->PlaceWidget(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[6];
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 6; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->PlaceWidget(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() > 4 && info[4]->IsNumber())
					{
						if(info.Length() > 5 && info[5]->IsNumber())
						{
							if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->PlaceWidget(
								info[0]->NumberValue(),
								info[1]->NumberValue(),
								info[2]->NumberValue(),
								info[3]->NumberValue(),
								info[4]->NumberValue(),
								info[5]->NumberValue()
							);
							return;
						}
					}
				}
			}
		}
	}
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PlaceWidget();
}

void VtkImageTracerWidgetWrap::ProjectToPlaneOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ProjectToPlaneOff();
}

void VtkImageTracerWidgetWrap::ProjectToPlaneOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ProjectToPlaneOn();
}

void VtkImageTracerWidgetWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageTracerWidget * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkImageTracerWidgetWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkImageTracerWidgetWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageTracerWidgetWrap *w = new VtkImageTracerWidgetWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetAutoClose(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAutoClose(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetCaptureRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCaptureRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetEnabled(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEnabled(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetHandleLeftMouseButton(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHandleLeftMouseButton(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetHandleMiddleMouseButton(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHandleMiddleMouseButton(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetHandlePosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsFloat64Array())
		{
			v8::Local<v8::Float64Array>a1(v8::Local<v8::Float64Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetHandlePosition(
				info[0]->Int32Value(),
				(double *)(a1->Buffer()->GetContents().Data())
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			double b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetHandlePosition(
				info[0]->Int32Value(),
				b1
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->SetHandlePosition(
						info[0]->Int32Value(),
						info[1]->NumberValue(),
						info[2]->NumberValue(),
						info[3]->NumberValue()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetHandleProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropertyWrap *a0 = ObjectWrap::Unwrap<VtkPropertyWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHandleProperty(
			(vtkProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetHandleRightMouseButton(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHandleRightMouseButton(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetImageSnapType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetImageSnapType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetInteraction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInteraction(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetLineProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropertyWrap *a0 = ObjectWrap::Unwrap<VtkPropertyWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLineProperty(
			(vtkProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetProjectToPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProjectToPlane(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetProjectionNormal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProjectionNormal(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetProjectionNormalToXAxes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetProjectionNormalToXAxes();
}

void VtkImageTracerWidgetWrap::SetProjectionNormalToYAxes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetProjectionNormalToYAxes();
}

void VtkImageTracerWidgetWrap::SetProjectionNormalToZAxes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetProjectionNormalToZAxes();
}

void VtkImageTracerWidgetWrap::SetProjectionPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProjectionPosition(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetSelectedHandleProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropertyWrap *a0 = ObjectWrap::Unwrap<VtkPropertyWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSelectedHandleProperty(
			(vtkProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetSelectedLineProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropertyWrap *a0 = ObjectWrap::Unwrap<VtkPropertyWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSelectedLineProperty(
			(vtkProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetSnapToImage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSnapToImage(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SetViewProp(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropWrap *a0 = ObjectWrap::Unwrap<VtkPropWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetViewProp(
			(vtkProp *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageTracerWidgetWrap::SnapToImageOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SnapToImageOff();
}

void VtkImageTracerWidgetWrap::SnapToImageOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageTracerWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImageTracerWidgetWrap>(info.Holder());
	vtkImageTracerWidget *native = (vtkImageTracerWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SnapToImageOn();
}

