/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkGeoTreeNodeWrap.h"
#include "vtkGeoTerrainNodeWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPolyDataWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkGeoTerrainNodeWrap::ptpl;

VtkGeoTerrainNodeWrap::VtkGeoTerrainNodeWrap()
{ }

VtkGeoTerrainNodeWrap::VtkGeoTerrainNodeWrap(vtkSmartPointer<vtkGeoTerrainNode> _native)
{ native = _native; }

VtkGeoTerrainNodeWrap::~VtkGeoTerrainNodeWrap()
{ }

void VtkGeoTerrainNodeWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkGeoTerrainNode").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("GeoTerrainNode").ToLocalChecked(), ConstructorGetter);
}

void VtkGeoTerrainNodeWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkGeoTerrainNodeWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkGeoTreeNodeWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkGeoTreeNodeWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkGeoTerrainNodeWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "DeleteData", DeleteData);
	Nan::SetPrototypeMethod(tpl, "deleteData", DeleteData);

	Nan::SetPrototypeMethod(tpl, "GetAltitude", GetAltitude);
	Nan::SetPrototypeMethod(tpl, "getAltitude", GetAltitude);

	Nan::SetPrototypeMethod(tpl, "GetBoundingSphereCenter", GetBoundingSphereCenter);
	Nan::SetPrototypeMethod(tpl, "getBoundingSphereCenter", GetBoundingSphereCenter);

	Nan::SetPrototypeMethod(tpl, "GetBoundingSphereRadius", GetBoundingSphereRadius);
	Nan::SetPrototypeMethod(tpl, "getBoundingSphereRadius", GetBoundingSphereRadius);

	Nan::SetPrototypeMethod(tpl, "GetChild", GetChild);
	Nan::SetPrototypeMethod(tpl, "getChild", GetChild);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetCornerNormal00", GetCornerNormal00);
	Nan::SetPrototypeMethod(tpl, "getCornerNormal00", GetCornerNormal00);

	Nan::SetPrototypeMethod(tpl, "GetCornerNormal01", GetCornerNormal01);
	Nan::SetPrototypeMethod(tpl, "getCornerNormal01", GetCornerNormal01);

	Nan::SetPrototypeMethod(tpl, "GetCornerNormal10", GetCornerNormal10);
	Nan::SetPrototypeMethod(tpl, "getCornerNormal10", GetCornerNormal10);

	Nan::SetPrototypeMethod(tpl, "GetCornerNormal11", GetCornerNormal11);
	Nan::SetPrototypeMethod(tpl, "getCornerNormal11", GetCornerNormal11);

	Nan::SetPrototypeMethod(tpl, "GetCoverage", GetCoverage);
	Nan::SetPrototypeMethod(tpl, "getCoverage", GetCoverage);

	Nan::SetPrototypeMethod(tpl, "GetError", GetError);
	Nan::SetPrototypeMethod(tpl, "getError", GetError);

	Nan::SetPrototypeMethod(tpl, "GetGraticuleLevel", GetGraticuleLevel);
	Nan::SetPrototypeMethod(tpl, "getGraticuleLevel", GetGraticuleLevel);

	Nan::SetPrototypeMethod(tpl, "GetModel", GetModel);
	Nan::SetPrototypeMethod(tpl, "getModel", GetModel);

	Nan::SetPrototypeMethod(tpl, "GetParent", GetParent);
	Nan::SetPrototypeMethod(tpl, "getParent", GetParent);

	Nan::SetPrototypeMethod(tpl, "GetProjectionBounds", GetProjectionBounds);
	Nan::SetPrototypeMethod(tpl, "getProjectionBounds", GetProjectionBounds);

	Nan::SetPrototypeMethod(tpl, "HasData", HasData);
	Nan::SetPrototypeMethod(tpl, "hasData", HasData);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCoverage", SetCoverage);
	Nan::SetPrototypeMethod(tpl, "setCoverage", SetCoverage);

	Nan::SetPrototypeMethod(tpl, "SetError", SetError);
	Nan::SetPrototypeMethod(tpl, "setError", SetError);

	Nan::SetPrototypeMethod(tpl, "SetGraticuleLevel", SetGraticuleLevel);
	Nan::SetPrototypeMethod(tpl, "setGraticuleLevel", SetGraticuleLevel);

	Nan::SetPrototypeMethod(tpl, "SetModel", SetModel);
	Nan::SetPrototypeMethod(tpl, "setModel", SetModel);

	Nan::SetPrototypeMethod(tpl, "SetProjectionBounds", SetProjectionBounds);
	Nan::SetPrototypeMethod(tpl, "setProjectionBounds", SetProjectionBounds);

	Nan::SetPrototypeMethod(tpl, "ShallowCopy", ShallowCopy);
	Nan::SetPrototypeMethod(tpl, "shallowCopy", ShallowCopy);

	Nan::SetPrototypeMethod(tpl, "UpdateBoundingSphere", UpdateBoundingSphere);
	Nan::SetPrototypeMethod(tpl, "updateBoundingSphere", UpdateBoundingSphere);

#ifdef VTK_NODE_PLUS_VTKGEOTERRAINNODEWRAP_INITPTPL
	VTK_NODE_PLUS_VTKGEOTERRAINNODEWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkGeoTerrainNodeWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkGeoTerrainNode> native = vtkSmartPointer<vtkGeoTerrainNode>::New();
		VtkGeoTerrainNodeWrap* obj = new VtkGeoTerrainNodeWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkGeoTerrainNodeWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkGeoTreeNodeWrap::ptpl))->HasInstance(info[0]))
	{
		VtkGeoTreeNodeWrap *a0 = ObjectWrap::Unwrap<VtkGeoTreeNodeWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DeepCopy(
			(vtkGeoTreeNode *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoTerrainNodeWrap::DeleteData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DeleteData();
}

void VtkGeoTerrainNodeWrap::GetAltitude(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			double r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetAltitude(
				info[0]->NumberValue(),
				info[1]->NumberValue()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoTerrainNodeWrap::GetBoundingSphereCenter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBoundingSphereCenter();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkGeoTerrainNodeWrap::GetBoundingSphereRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBoundingSphereRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoTerrainNodeWrap::GetChild(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkGeoTerrainNode * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetChild(
			info[0]->Int32Value()
		);
		VtkGeoTerrainNodeWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkGeoTerrainNodeWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkGeoTerrainNodeWrap *w = new VtkGeoTerrainNodeWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoTerrainNodeWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGeoTerrainNodeWrap::GetCornerNormal00(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCornerNormal00();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkGeoTerrainNodeWrap::GetCornerNormal01(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCornerNormal01();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkGeoTerrainNodeWrap::GetCornerNormal10(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCornerNormal10();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkGeoTerrainNodeWrap::GetCornerNormal11(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCornerNormal11();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkGeoTerrainNodeWrap::GetCoverage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	float r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCoverage();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoTerrainNodeWrap::GetError(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetError();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoTerrainNodeWrap::GetGraticuleLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGraticuleLevel();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoTerrainNodeWrap::GetModel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	vtkPolyData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetModel();
	VtkPolyDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPolyDataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataWrap *w = new VtkPolyDataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGeoTerrainNodeWrap::GetParent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	vtkGeoTerrainNode * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetParent();
	VtkGeoTerrainNodeWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkGeoTerrainNodeWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGeoTerrainNodeWrap *w = new VtkGeoTerrainNodeWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGeoTerrainNodeWrap::GetProjectionBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProjectionBounds();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 4 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 4);
	memcpy(ab->GetContents().Data(), r, 4 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkGeoTerrainNodeWrap::HasData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoTerrainNodeWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoTerrainNodeWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	vtkGeoTerrainNode * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkGeoTerrainNodeWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkGeoTerrainNodeWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGeoTerrainNodeWrap *w = new VtkGeoTerrainNodeWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGeoTerrainNodeWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkGeoTerrainNode * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkGeoTerrainNodeWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkGeoTerrainNodeWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkGeoTerrainNodeWrap *w = new VtkGeoTerrainNodeWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoTerrainNodeWrap::SetCoverage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCoverage(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoTerrainNodeWrap::SetError(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetError(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoTerrainNodeWrap::SetGraticuleLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGraticuleLevel(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoTerrainNodeWrap::SetModel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetModel(
			(vtkPolyData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoTerrainNodeWrap::SetProjectionBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 4 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProjectionBounds(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[4];
		if( a0->Length() < 4 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 4; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProjectionBounds(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
										if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->SetProjectionBounds(
						info[0]->NumberValue(),
						info[1]->NumberValue(),
						info[2]->NumberValue(),
						info[3]->NumberValue()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoTerrainNodeWrap::ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkGeoTreeNodeWrap::ptpl))->HasInstance(info[0]))
	{
		VtkGeoTreeNodeWrap *a0 = ObjectWrap::Unwrap<VtkGeoTreeNodeWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ShallowCopy(
			(vtkGeoTreeNode *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoTerrainNodeWrap::UpdateBoundingSphere(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoTerrainNodeWrap *wrapper = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info.Holder());
	vtkGeoTerrainNode *native = (vtkGeoTerrainNode *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UpdateBoundingSphere();
}

