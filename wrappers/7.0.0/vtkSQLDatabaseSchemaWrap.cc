/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkSQLDatabaseSchemaWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkSQLDatabaseSchemaWrap::ptpl;

VtkSQLDatabaseSchemaWrap::VtkSQLDatabaseSchemaWrap()
{ }

VtkSQLDatabaseSchemaWrap::VtkSQLDatabaseSchemaWrap(vtkSmartPointer<vtkSQLDatabaseSchema> _native)
{ native = _native; }

VtkSQLDatabaseSchemaWrap::~VtkSQLDatabaseSchemaWrap()
{ }

void VtkSQLDatabaseSchemaWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkSQLDatabaseSchema").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("SQLDatabaseSchema").ToLocalChecked(), ConstructorGetter);
}

void VtkSQLDatabaseSchemaWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkSQLDatabaseSchemaWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkSQLDatabaseSchemaWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddColumnToIndex", AddColumnToIndex);
	Nan::SetPrototypeMethod(tpl, "addColumnToIndex", AddColumnToIndex);

	Nan::SetPrototypeMethod(tpl, "AddColumnToTable", AddColumnToTable);
	Nan::SetPrototypeMethod(tpl, "addColumnToTable", AddColumnToTable);

	Nan::SetPrototypeMethod(tpl, "AddIndexToTable", AddIndexToTable);
	Nan::SetPrototypeMethod(tpl, "addIndexToTable", AddIndexToTable);

	Nan::SetPrototypeMethod(tpl, "AddOptionToTable", AddOptionToTable);
	Nan::SetPrototypeMethod(tpl, "addOptionToTable", AddOptionToTable);

	Nan::SetPrototypeMethod(tpl, "AddPreamble", AddPreamble);
	Nan::SetPrototypeMethod(tpl, "addPreamble", AddPreamble);

	Nan::SetPrototypeMethod(tpl, "AddTable", AddTable);
	Nan::SetPrototypeMethod(tpl, "addTable", AddTable);

	Nan::SetPrototypeMethod(tpl, "AddTableMultipleArguments", AddTableMultipleArguments);
	Nan::SetPrototypeMethod(tpl, "addTableMultipleArguments", AddTableMultipleArguments);

	Nan::SetPrototypeMethod(tpl, "AddTriggerToTable", AddTriggerToTable);
	Nan::SetPrototypeMethod(tpl, "addTriggerToTable", AddTriggerToTable);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetColumnAttributesFromHandle", GetColumnAttributesFromHandle);
	Nan::SetPrototypeMethod(tpl, "getColumnAttributesFromHandle", GetColumnAttributesFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetColumnHandleFromName", GetColumnHandleFromName);
	Nan::SetPrototypeMethod(tpl, "getColumnHandleFromName", GetColumnHandleFromName);

	Nan::SetPrototypeMethod(tpl, "GetColumnNameFromHandle", GetColumnNameFromHandle);
	Nan::SetPrototypeMethod(tpl, "getColumnNameFromHandle", GetColumnNameFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetColumnSizeFromHandle", GetColumnSizeFromHandle);
	Nan::SetPrototypeMethod(tpl, "getColumnSizeFromHandle", GetColumnSizeFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetColumnTypeFromHandle", GetColumnTypeFromHandle);
	Nan::SetPrototypeMethod(tpl, "getColumnTypeFromHandle", GetColumnTypeFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetIndexColumnNameFromHandle", GetIndexColumnNameFromHandle);
	Nan::SetPrototypeMethod(tpl, "getIndexColumnNameFromHandle", GetIndexColumnNameFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetIndexHandleFromName", GetIndexHandleFromName);
	Nan::SetPrototypeMethod(tpl, "getIndexHandleFromName", GetIndexHandleFromName);

	Nan::SetPrototypeMethod(tpl, "GetIndexNameFromHandle", GetIndexNameFromHandle);
	Nan::SetPrototypeMethod(tpl, "getIndexNameFromHandle", GetIndexNameFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetIndexTypeFromHandle", GetIndexTypeFromHandle);
	Nan::SetPrototypeMethod(tpl, "getIndexTypeFromHandle", GetIndexTypeFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetName", GetName);
	Nan::SetPrototypeMethod(tpl, "getName", GetName);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfColumnNamesInIndex", GetNumberOfColumnNamesInIndex);
	Nan::SetPrototypeMethod(tpl, "getNumberOfColumnNamesInIndex", GetNumberOfColumnNamesInIndex);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfColumnsInTable", GetNumberOfColumnsInTable);
	Nan::SetPrototypeMethod(tpl, "getNumberOfColumnsInTable", GetNumberOfColumnsInTable);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfIndicesInTable", GetNumberOfIndicesInTable);
	Nan::SetPrototypeMethod(tpl, "getNumberOfIndicesInTable", GetNumberOfIndicesInTable);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfOptionsInTable", GetNumberOfOptionsInTable);
	Nan::SetPrototypeMethod(tpl, "getNumberOfOptionsInTable", GetNumberOfOptionsInTable);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPreambles", GetNumberOfPreambles);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPreambles", GetNumberOfPreambles);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfTables", GetNumberOfTables);
	Nan::SetPrototypeMethod(tpl, "getNumberOfTables", GetNumberOfTables);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfTriggersInTable", GetNumberOfTriggersInTable);
	Nan::SetPrototypeMethod(tpl, "getNumberOfTriggersInTable", GetNumberOfTriggersInTable);

	Nan::SetPrototypeMethod(tpl, "GetOptionBackendFromHandle", GetOptionBackendFromHandle);
	Nan::SetPrototypeMethod(tpl, "getOptionBackendFromHandle", GetOptionBackendFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetOptionTextFromHandle", GetOptionTextFromHandle);
	Nan::SetPrototypeMethod(tpl, "getOptionTextFromHandle", GetOptionTextFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetPreambleActionFromHandle", GetPreambleActionFromHandle);
	Nan::SetPrototypeMethod(tpl, "getPreambleActionFromHandle", GetPreambleActionFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetPreambleBackendFromHandle", GetPreambleBackendFromHandle);
	Nan::SetPrototypeMethod(tpl, "getPreambleBackendFromHandle", GetPreambleBackendFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetPreambleHandleFromName", GetPreambleHandleFromName);
	Nan::SetPrototypeMethod(tpl, "getPreambleHandleFromName", GetPreambleHandleFromName);

	Nan::SetPrototypeMethod(tpl, "GetPreambleNameFromHandle", GetPreambleNameFromHandle);
	Nan::SetPrototypeMethod(tpl, "getPreambleNameFromHandle", GetPreambleNameFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetTableHandleFromName", GetTableHandleFromName);
	Nan::SetPrototypeMethod(tpl, "getTableHandleFromName", GetTableHandleFromName);

	Nan::SetPrototypeMethod(tpl, "GetTableNameFromHandle", GetTableNameFromHandle);
	Nan::SetPrototypeMethod(tpl, "getTableNameFromHandle", GetTableNameFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetTriggerActionFromHandle", GetTriggerActionFromHandle);
	Nan::SetPrototypeMethod(tpl, "getTriggerActionFromHandle", GetTriggerActionFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetTriggerBackendFromHandle", GetTriggerBackendFromHandle);
	Nan::SetPrototypeMethod(tpl, "getTriggerBackendFromHandle", GetTriggerBackendFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetTriggerHandleFromName", GetTriggerHandleFromName);
	Nan::SetPrototypeMethod(tpl, "getTriggerHandleFromName", GetTriggerHandleFromName);

	Nan::SetPrototypeMethod(tpl, "GetTriggerNameFromHandle", GetTriggerNameFromHandle);
	Nan::SetPrototypeMethod(tpl, "getTriggerNameFromHandle", GetTriggerNameFromHandle);

	Nan::SetPrototypeMethod(tpl, "GetTriggerTypeFromHandle", GetTriggerTypeFromHandle);
	Nan::SetPrototypeMethod(tpl, "getTriggerTypeFromHandle", GetTriggerTypeFromHandle);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "Reset", Reset);
	Nan::SetPrototypeMethod(tpl, "reset", Reset);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetName", SetName);
	Nan::SetPrototypeMethod(tpl, "setName", SetName);

	ptpl.Reset( tpl );
}

void VtkSQLDatabaseSchemaWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkSQLDatabaseSchema> native = vtkSmartPointer<vtkSQLDatabaseSchema>::New();
		VtkSQLDatabaseSchemaWrap* obj = new VtkSQLDatabaseSchemaWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkSQLDatabaseSchemaWrap::AddColumnToIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsString())
			{
				Nan::Utf8String a2(info[2]);
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->AddColumnToIndex(
					*a0,
					*a1,
					*a2
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->AddColumnToIndex(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::AddColumnToTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsString())
			{
				Nan::Utf8String a2(info[2]);
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() > 4 && info[4]->IsString())
					{
						Nan::Utf8String a4(info[4]);
						int r;
						if(info.Length() != 5)
						{
							Nan::ThrowError("Too many parameters.");
							return;
						}
						r = native->AddColumnToTable(
							*a0,
							info[1]->Int32Value(),
							*a2,
							info[3]->Int32Value(),
							*a4
						);
						info.GetReturnValue().Set(Nan::New(r));
						return;
					}
				}
			}
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsString())
			{
				Nan::Utf8String a2(info[2]);
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() > 4 && info[4]->IsString())
					{
						Nan::Utf8String a4(info[4]);
						int r;
						if(info.Length() != 5)
						{
							Nan::ThrowError("Too many parameters.");
							return;
						}
						r = native->AddColumnToTable(
							info[0]->Int32Value(),
							info[1]->Int32Value(),
							*a2,
							info[3]->Int32Value(),
							*a4
						);
						info.GetReturnValue().Set(Nan::New(r));
						return;
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::AddIndexToTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsString())
			{
				Nan::Utf8String a2(info[2]);
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->AddIndexToTable(
					*a0,
					info[1]->Int32Value(),
					*a2
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsString())
			{
				Nan::Utf8String a2(info[2]);
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->AddIndexToTable(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					*a2
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::AddOptionToTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsString())
			{
				Nan::Utf8String a2(info[2]);
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->AddOptionToTable(
					*a0,
					*a1,
					*a2
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsString())
			{
				Nan::Utf8String a2(info[2]);
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->AddOptionToTable(
					info[0]->Int32Value(),
					*a1,
					*a2
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::AddPreamble(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsString())
			{
				Nan::Utf8String a2(info[2]);
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->AddPreamble(
					*a0,
					*a1,
					*a2
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::AddTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->AddTable(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::AddTableMultipleArguments(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->AddTableMultipleArguments(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::AddTriggerToTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsString())
			{
				Nan::Utf8String a2(info[2]);
				if(info.Length() > 3 && info[3]->IsString())
				{
					Nan::Utf8String a3(info[3]);
					if(info.Length() > 4 && info[4]->IsString())
					{
						Nan::Utf8String a4(info[4]);
						int r;
						if(info.Length() != 5)
						{
							Nan::ThrowError("Too many parameters.");
							return;
						}
						r = native->AddTriggerToTable(
							*a0,
							info[1]->Int32Value(),
							*a2,
							*a3,
							*a4
						);
						info.GetReturnValue().Set(Nan::New(r));
						return;
					}
				}
			}
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsString())
			{
				Nan::Utf8String a2(info[2]);
				if(info.Length() > 3 && info[3]->IsString())
				{
					Nan::Utf8String a3(info[3]);
					if(info.Length() > 4 && info[4]->IsString())
					{
						Nan::Utf8String a4(info[4]);
						int r;
						if(info.Length() != 5)
						{
							Nan::ThrowError("Too many parameters.");
							return;
						}
						r = native->AddTriggerToTable(
							info[0]->Int32Value(),
							info[1]->Int32Value(),
							*a2,
							*a3,
							*a4
						);
						info.GetReturnValue().Set(Nan::New(r));
						return;
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkSQLDatabaseSchemaWrap::GetColumnAttributesFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetColumnAttributesFromHandle(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetColumnHandleFromName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetColumnHandleFromName(
				*a0,
				*a1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetColumnNameFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetColumnNameFromHandle(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetColumnSizeFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetColumnSizeFromHandle(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetColumnTypeFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetColumnTypeFromHandle(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetIndexColumnNameFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				char const * r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->GetIndexColumnNameFromHandle(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetIndexHandleFromName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetIndexHandleFromName(
				*a0,
				*a1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetIndexNameFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetIndexNameFromHandle(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetIndexTypeFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetIndexTypeFromHandle(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkSQLDatabaseSchemaWrap::GetNumberOfColumnNamesInIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetNumberOfColumnNamesInIndex(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetNumberOfColumnsInTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfColumnsInTable(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetNumberOfIndicesInTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfIndicesInTable(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetNumberOfOptionsInTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfOptionsInTable(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetNumberOfPreambles(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPreambles();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSQLDatabaseSchemaWrap::GetNumberOfTables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfTables();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSQLDatabaseSchemaWrap::GetNumberOfTriggersInTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfTriggersInTable(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetOptionBackendFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetOptionBackendFromHandle(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetOptionTextFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetOptionTextFromHandle(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetPreambleActionFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPreambleActionFromHandle(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetPreambleBackendFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPreambleBackendFromHandle(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetPreambleHandleFromName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPreambleHandleFromName(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetPreambleNameFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPreambleNameFromHandle(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetTableHandleFromName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetTableHandleFromName(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetTableNameFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetTableNameFromHandle(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetTriggerActionFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetTriggerActionFromHandle(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetTriggerBackendFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetTriggerBackendFromHandle(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetTriggerHandleFromName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetTriggerHandleFromName(
				*a0,
				*a1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetTriggerNameFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetTriggerNameFromHandle(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::GetTriggerTypeFromHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetTriggerTypeFromHandle(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	vtkSQLDatabaseSchema * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkSQLDatabaseSchemaWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkSQLDatabaseSchemaWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkSQLDatabaseSchemaWrap *w = new VtkSQLDatabaseSchemaWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSQLDatabaseSchemaWrap::Reset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Reset();
}

void VtkSQLDatabaseSchemaWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkSQLDatabaseSchema * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkSQLDatabaseSchemaWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkSQLDatabaseSchemaWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkSQLDatabaseSchemaWrap *w = new VtkSQLDatabaseSchemaWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSQLDatabaseSchemaWrap::SetName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSQLDatabaseSchemaWrap *wrapper = ObjectWrap::Unwrap<VtkSQLDatabaseSchemaWrap>(info.Holder());
	vtkSQLDatabaseSchema *native = (vtkSQLDatabaseSchema *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

