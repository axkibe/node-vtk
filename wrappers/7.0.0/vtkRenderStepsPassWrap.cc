/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkRenderPassWrap.h"
#include "vtkRenderStepsPassWrap.h"
#include "vtkObjectWrap.h"
#include "vtkWindowWrap.h"
#include "vtkCameraPassWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkRenderStepsPassWrap::ptpl;

VtkRenderStepsPassWrap::VtkRenderStepsPassWrap()
{ }

VtkRenderStepsPassWrap::VtkRenderStepsPassWrap(vtkSmartPointer<vtkRenderStepsPass> _native)
{ native = _native; }

VtkRenderStepsPassWrap::~VtkRenderStepsPassWrap()
{ }

void VtkRenderStepsPassWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkRenderStepsPass").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("RenderStepsPass").ToLocalChecked(), ConstructorGetter);
}

void VtkRenderStepsPassWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkRenderStepsPassWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkRenderPassWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkRenderPassWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkRenderStepsPassWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetCameraPass", GetCameraPass);
	Nan::SetPrototypeMethod(tpl, "getCameraPass", GetCameraPass);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetLightsPass", GetLightsPass);
	Nan::SetPrototypeMethod(tpl, "getLightsPass", GetLightsPass);

	Nan::SetPrototypeMethod(tpl, "GetOpaquePass", GetOpaquePass);
	Nan::SetPrototypeMethod(tpl, "getOpaquePass", GetOpaquePass);

	Nan::SetPrototypeMethod(tpl, "GetOverlayPass", GetOverlayPass);
	Nan::SetPrototypeMethod(tpl, "getOverlayPass", GetOverlayPass);

	Nan::SetPrototypeMethod(tpl, "GetPostProcessPass", GetPostProcessPass);
	Nan::SetPrototypeMethod(tpl, "getPostProcessPass", GetPostProcessPass);

	Nan::SetPrototypeMethod(tpl, "GetTranslucentPass", GetTranslucentPass);
	Nan::SetPrototypeMethod(tpl, "getTranslucentPass", GetTranslucentPass);

	Nan::SetPrototypeMethod(tpl, "GetVolumetricPass", GetVolumetricPass);
	Nan::SetPrototypeMethod(tpl, "getVolumetricPass", GetVolumetricPass);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCameraPass", SetCameraPass);
	Nan::SetPrototypeMethod(tpl, "setCameraPass", SetCameraPass);

	Nan::SetPrototypeMethod(tpl, "SetLightsPass", SetLightsPass);
	Nan::SetPrototypeMethod(tpl, "setLightsPass", SetLightsPass);

	Nan::SetPrototypeMethod(tpl, "SetOpaquePass", SetOpaquePass);
	Nan::SetPrototypeMethod(tpl, "setOpaquePass", SetOpaquePass);

	Nan::SetPrototypeMethod(tpl, "SetOverlayPass", SetOverlayPass);
	Nan::SetPrototypeMethod(tpl, "setOverlayPass", SetOverlayPass);

	Nan::SetPrototypeMethod(tpl, "SetPostProcessPass", SetPostProcessPass);
	Nan::SetPrototypeMethod(tpl, "setPostProcessPass", SetPostProcessPass);

	Nan::SetPrototypeMethod(tpl, "SetTranslucentPass", SetTranslucentPass);
	Nan::SetPrototypeMethod(tpl, "setTranslucentPass", SetTranslucentPass);

	Nan::SetPrototypeMethod(tpl, "SetVolumetricPass", SetVolumetricPass);
	Nan::SetPrototypeMethod(tpl, "setVolumetricPass", SetVolumetricPass);

	ptpl.Reset( tpl );
}

void VtkRenderStepsPassWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkRenderStepsPass> native = vtkSmartPointer<vtkRenderStepsPass>::New();
		VtkRenderStepsPassWrap* obj = new VtkRenderStepsPassWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkRenderStepsPassWrap::GetCameraPass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	vtkCameraPass * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCameraPass();
		VtkCameraPassWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCameraPassWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCameraPassWrap *w = new VtkCameraPassWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderStepsPassWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRenderStepsPassWrap::GetLightsPass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	vtkRenderPass * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLightsPass();
		VtkRenderPassWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderPassWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderPassWrap *w = new VtkRenderPassWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderStepsPassWrap::GetOpaquePass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	vtkRenderPass * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOpaquePass();
		VtkRenderPassWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderPassWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderPassWrap *w = new VtkRenderPassWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderStepsPassWrap::GetOverlayPass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	vtkRenderPass * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOverlayPass();
		VtkRenderPassWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderPassWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderPassWrap *w = new VtkRenderPassWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderStepsPassWrap::GetPostProcessPass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	vtkRenderPass * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPostProcessPass();
		VtkRenderPassWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderPassWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderPassWrap *w = new VtkRenderPassWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderStepsPassWrap::GetTranslucentPass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	vtkRenderPass * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTranslucentPass();
		VtkRenderPassWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderPassWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderPassWrap *w = new VtkRenderPassWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderStepsPassWrap::GetVolumetricPass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	vtkRenderPass * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVolumetricPass();
		VtkRenderPassWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderPassWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderPassWrap *w = new VtkRenderPassWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderStepsPassWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderStepsPassWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	vtkRenderStepsPass * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkRenderStepsPassWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderStepsPassWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderStepsPassWrap *w = new VtkRenderStepsPassWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderStepsPassWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderStepsPassWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkRenderStepsPass * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkRenderStepsPassWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkRenderStepsPassWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkRenderStepsPassWrap *w = new VtkRenderStepsPassWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderStepsPassWrap::SetCameraPass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkCameraPassWrap::ptpl))->HasInstance(info[0]))
	{
		VtkCameraPassWrap *a0 = ObjectWrap::Unwrap<VtkCameraPassWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCameraPass(
			(vtkCameraPass *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderStepsPassWrap::SetLightsPass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRenderPassWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRenderPassWrap *a0 = ObjectWrap::Unwrap<VtkRenderPassWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLightsPass(
			(vtkRenderPass *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderStepsPassWrap::SetOpaquePass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRenderPassWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRenderPassWrap *a0 = ObjectWrap::Unwrap<VtkRenderPassWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOpaquePass(
			(vtkRenderPass *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderStepsPassWrap::SetOverlayPass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRenderPassWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRenderPassWrap *a0 = ObjectWrap::Unwrap<VtkRenderPassWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOverlayPass(
			(vtkRenderPass *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderStepsPassWrap::SetPostProcessPass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRenderPassWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRenderPassWrap *a0 = ObjectWrap::Unwrap<VtkRenderPassWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPostProcessPass(
			(vtkRenderPass *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderStepsPassWrap::SetTranslucentPass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRenderPassWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRenderPassWrap *a0 = ObjectWrap::Unwrap<VtkRenderPassWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTranslucentPass(
			(vtkRenderPass *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderStepsPassWrap::SetVolumetricPass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderStepsPassWrap *wrapper = ObjectWrap::Unwrap<VtkRenderStepsPassWrap>(info.Holder());
	vtkRenderStepsPass *native = (vtkRenderStepsPass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRenderPassWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRenderPassWrap *a0 = ObjectWrap::Unwrap<VtkRenderPassWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVolumetricPass(
			(vtkRenderPass *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

