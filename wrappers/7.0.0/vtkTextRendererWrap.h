/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKTEXTRENDERERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKTEXTRENDERERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkTextRenderer.h>

#include "vtkObjectWrap.h"

class VtkTextRendererWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkTextRendererWrap(vtkSmartPointer<vtkTextRenderer>);
		VtkTextRendererWrap();
		~VtkTextRendererWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void FreeTypeIsSupported(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDefaultBackend(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void MathTextIsSupported(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetDefaultBackend(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetScaleToPowerOfTwo(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
