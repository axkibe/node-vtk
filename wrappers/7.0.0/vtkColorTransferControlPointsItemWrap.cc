/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkControlPointsItemWrap.h"
#include "vtkColorTransferControlPointsItemWrap.h"
#include "vtkObjectWrap.h"
#include "vtkColorTransferFunctionWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkColorTransferControlPointsItemWrap::ptpl;

VtkColorTransferControlPointsItemWrap::VtkColorTransferControlPointsItemWrap()
{ }

VtkColorTransferControlPointsItemWrap::VtkColorTransferControlPointsItemWrap(vtkSmartPointer<vtkColorTransferControlPointsItem> _native)
{ native = _native; }

VtkColorTransferControlPointsItemWrap::~VtkColorTransferControlPointsItemWrap()
{ }

void VtkColorTransferControlPointsItemWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkColorTransferControlPointsItem").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ColorTransferControlPointsItem").ToLocalChecked(), ConstructorGetter);
}

void VtkColorTransferControlPointsItemWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkColorTransferControlPointsItemWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkControlPointsItemWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkControlPointsItemWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkColorTransferControlPointsItemWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetColorFill", GetColorFill);
	Nan::SetPrototypeMethod(tpl, "getColorFill", GetColorFill);

	Nan::SetPrototypeMethod(tpl, "GetColorTransferFunction", GetColorTransferFunction);
	Nan::SetPrototypeMethod(tpl, "getColorTransferFunction", GetColorTransferFunction);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetColorFill", SetColorFill);
	Nan::SetPrototypeMethod(tpl, "setColorFill", SetColorFill);

	Nan::SetPrototypeMethod(tpl, "SetColorTransferFunction", SetColorTransferFunction);
	Nan::SetPrototypeMethod(tpl, "setColorTransferFunction", SetColorTransferFunction);

	ptpl.Reset( tpl );
}

void VtkColorTransferControlPointsItemWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkColorTransferControlPointsItem> native = vtkSmartPointer<vtkColorTransferControlPointsItem>::New();
		VtkColorTransferControlPointsItemWrap* obj = new VtkColorTransferControlPointsItemWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkColorTransferControlPointsItemWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkColorTransferControlPointsItemWrap *wrapper = ObjectWrap::Unwrap<VtkColorTransferControlPointsItemWrap>(info.Holder());
	vtkColorTransferControlPointsItem *native = (vtkColorTransferControlPointsItem *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkColorTransferControlPointsItemWrap::GetColorFill(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkColorTransferControlPointsItemWrap *wrapper = ObjectWrap::Unwrap<VtkColorTransferControlPointsItemWrap>(info.Holder());
	vtkColorTransferControlPointsItem *native = (vtkColorTransferControlPointsItem *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetColorFill();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkColorTransferControlPointsItemWrap::GetColorTransferFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkColorTransferControlPointsItemWrap *wrapper = ObjectWrap::Unwrap<VtkColorTransferControlPointsItemWrap>(info.Holder());
	vtkColorTransferControlPointsItem *native = (vtkColorTransferControlPointsItem *)wrapper->native.GetPointer();
	vtkColorTransferFunction * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetColorTransferFunction();
	VtkColorTransferFunctionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkColorTransferFunctionWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkColorTransferFunctionWrap *w = new VtkColorTransferFunctionWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkColorTransferControlPointsItemWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkColorTransferControlPointsItemWrap *wrapper = ObjectWrap::Unwrap<VtkColorTransferControlPointsItemWrap>(info.Holder());
	vtkColorTransferControlPointsItem *native = (vtkColorTransferControlPointsItem *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkColorTransferControlPointsItemWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkColorTransferControlPointsItemWrap *wrapper = ObjectWrap::Unwrap<VtkColorTransferControlPointsItemWrap>(info.Holder());
	vtkColorTransferControlPointsItem *native = (vtkColorTransferControlPointsItem *)wrapper->native.GetPointer();
	vtkColorTransferControlPointsItem * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkColorTransferControlPointsItemWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkColorTransferControlPointsItemWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkColorTransferControlPointsItemWrap *w = new VtkColorTransferControlPointsItemWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkColorTransferControlPointsItemWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkColorTransferControlPointsItemWrap *wrapper = ObjectWrap::Unwrap<VtkColorTransferControlPointsItemWrap>(info.Holder());
	vtkColorTransferControlPointsItem *native = (vtkColorTransferControlPointsItem *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkColorTransferControlPointsItem * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkColorTransferControlPointsItemWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkColorTransferControlPointsItemWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkColorTransferControlPointsItemWrap *w = new VtkColorTransferControlPointsItemWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkColorTransferControlPointsItemWrap::SetColorFill(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkColorTransferControlPointsItemWrap *wrapper = ObjectWrap::Unwrap<VtkColorTransferControlPointsItemWrap>(info.Holder());
	vtkColorTransferControlPointsItem *native = (vtkColorTransferControlPointsItem *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColorFill(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkColorTransferControlPointsItemWrap::SetColorTransferFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkColorTransferControlPointsItemWrap *wrapper = ObjectWrap::Unwrap<VtkColorTransferControlPointsItemWrap>(info.Holder());
	vtkColorTransferControlPointsItem *native = (vtkColorTransferControlPointsItem *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkColorTransferFunctionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkColorTransferFunctionWrap *a0 = ObjectWrap::Unwrap<VtkColorTransferFunctionWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColorTransferFunction(
			(vtkColorTransferFunction *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

