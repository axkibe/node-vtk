/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKGPUVOLUMERAYCASTMAPPERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKGPUVOLUMERAYCASTMAPPERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkGPUVolumeRayCastMapper.h>

#include "vtkVolumeMapperWrap.h"

class VtkGPUVolumeRayCastMapperWrap : public VtkVolumeMapperWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkGPUVolumeRayCastMapperWrap(vtkSmartPointer<vtkGPUVolumeRayCastMapper>);
		VtkGPUVolumeRayCastMapperWrap();
		~VtkGPUVolumeRayCastMapperWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AutoAdjustSampleDistancesOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void AutoAdjustSampleDistancesOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CreateCanonicalView(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GPURender(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAutoAdjustSampleDistances(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAutoAdjustSampleDistancesMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAutoAdjustSampleDistancesMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetColorImage(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDepthImage(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaskInput(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaskType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRenderToImage(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetReportProgress(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsRenderSupported(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Render(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RenderToImageOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RenderToImageOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAutoAdjustSampleDistances(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaskInput(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaskType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaskTypeToBinary(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaskTypeToLabelMap(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRenderToImage(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetReportProgress(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
