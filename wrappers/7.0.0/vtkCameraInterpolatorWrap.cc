/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkObjectWrap.h"
#include "vtkCameraInterpolatorWrap.h"
#include "vtkCameraWrap.h"
#include "vtkTupleInterpolatorWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkCameraInterpolatorWrap::ptpl;

VtkCameraInterpolatorWrap::VtkCameraInterpolatorWrap()
{ }

VtkCameraInterpolatorWrap::VtkCameraInterpolatorWrap(vtkSmartPointer<vtkCameraInterpolator> _native)
{ native = _native; }

VtkCameraInterpolatorWrap::~VtkCameraInterpolatorWrap()
{ }

void VtkCameraInterpolatorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkCameraInterpolator").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("CameraInterpolator").ToLocalChecked(), ConstructorGetter);
}

void VtkCameraInterpolatorWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkCameraInterpolatorWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkCameraInterpolatorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddCamera", AddCamera);
	Nan::SetPrototypeMethod(tpl, "addCamera", AddCamera);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetClippingRangeInterpolator", GetClippingRangeInterpolator);
	Nan::SetPrototypeMethod(tpl, "getClippingRangeInterpolator", GetClippingRangeInterpolator);

	Nan::SetPrototypeMethod(tpl, "GetFocalPointInterpolator", GetFocalPointInterpolator);
	Nan::SetPrototypeMethod(tpl, "getFocalPointInterpolator", GetFocalPointInterpolator);

	Nan::SetPrototypeMethod(tpl, "GetInterpolationType", GetInterpolationType);
	Nan::SetPrototypeMethod(tpl, "getInterpolationType", GetInterpolationType);

	Nan::SetPrototypeMethod(tpl, "GetInterpolationTypeMaxValue", GetInterpolationTypeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getInterpolationTypeMaxValue", GetInterpolationTypeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetInterpolationTypeMinValue", GetInterpolationTypeMinValue);
	Nan::SetPrototypeMethod(tpl, "getInterpolationTypeMinValue", GetInterpolationTypeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetMTime", GetMTime);
	Nan::SetPrototypeMethod(tpl, "getMTime", GetMTime);

	Nan::SetPrototypeMethod(tpl, "GetMaximumT", GetMaximumT);
	Nan::SetPrototypeMethod(tpl, "getMaximumT", GetMaximumT);

	Nan::SetPrototypeMethod(tpl, "GetMinimumT", GetMinimumT);
	Nan::SetPrototypeMethod(tpl, "getMinimumT", GetMinimumT);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfCameras", GetNumberOfCameras);
	Nan::SetPrototypeMethod(tpl, "getNumberOfCameras", GetNumberOfCameras);

	Nan::SetPrototypeMethod(tpl, "GetParallelScaleInterpolator", GetParallelScaleInterpolator);
	Nan::SetPrototypeMethod(tpl, "getParallelScaleInterpolator", GetParallelScaleInterpolator);

	Nan::SetPrototypeMethod(tpl, "GetPositionInterpolator", GetPositionInterpolator);
	Nan::SetPrototypeMethod(tpl, "getPositionInterpolator", GetPositionInterpolator);

	Nan::SetPrototypeMethod(tpl, "GetViewAngleInterpolator", GetViewAngleInterpolator);
	Nan::SetPrototypeMethod(tpl, "getViewAngleInterpolator", GetViewAngleInterpolator);

	Nan::SetPrototypeMethod(tpl, "GetViewUpInterpolator", GetViewUpInterpolator);
	Nan::SetPrototypeMethod(tpl, "getViewUpInterpolator", GetViewUpInterpolator);

	Nan::SetPrototypeMethod(tpl, "Initialize", Initialize);
	Nan::SetPrototypeMethod(tpl, "initialize", Initialize);

	Nan::SetPrototypeMethod(tpl, "InterpolateCamera", InterpolateCamera);
	Nan::SetPrototypeMethod(tpl, "interpolateCamera", InterpolateCamera);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RemoveCamera", RemoveCamera);
	Nan::SetPrototypeMethod(tpl, "removeCamera", RemoveCamera);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetClippingRangeInterpolator", SetClippingRangeInterpolator);
	Nan::SetPrototypeMethod(tpl, "setClippingRangeInterpolator", SetClippingRangeInterpolator);

	Nan::SetPrototypeMethod(tpl, "SetFocalPointInterpolator", SetFocalPointInterpolator);
	Nan::SetPrototypeMethod(tpl, "setFocalPointInterpolator", SetFocalPointInterpolator);

	Nan::SetPrototypeMethod(tpl, "SetInterpolationType", SetInterpolationType);
	Nan::SetPrototypeMethod(tpl, "setInterpolationType", SetInterpolationType);

	Nan::SetPrototypeMethod(tpl, "SetInterpolationTypeToLinear", SetInterpolationTypeToLinear);
	Nan::SetPrototypeMethod(tpl, "setInterpolationTypeToLinear", SetInterpolationTypeToLinear);

	Nan::SetPrototypeMethod(tpl, "SetInterpolationTypeToManual", SetInterpolationTypeToManual);
	Nan::SetPrototypeMethod(tpl, "setInterpolationTypeToManual", SetInterpolationTypeToManual);

	Nan::SetPrototypeMethod(tpl, "SetInterpolationTypeToSpline", SetInterpolationTypeToSpline);
	Nan::SetPrototypeMethod(tpl, "setInterpolationTypeToSpline", SetInterpolationTypeToSpline);

	Nan::SetPrototypeMethod(tpl, "SetParallelScaleInterpolator", SetParallelScaleInterpolator);
	Nan::SetPrototypeMethod(tpl, "setParallelScaleInterpolator", SetParallelScaleInterpolator);

	Nan::SetPrototypeMethod(tpl, "SetPositionInterpolator", SetPositionInterpolator);
	Nan::SetPrototypeMethod(tpl, "setPositionInterpolator", SetPositionInterpolator);

	Nan::SetPrototypeMethod(tpl, "SetViewAngleInterpolator", SetViewAngleInterpolator);
	Nan::SetPrototypeMethod(tpl, "setViewAngleInterpolator", SetViewAngleInterpolator);

	Nan::SetPrototypeMethod(tpl, "SetViewUpInterpolator", SetViewUpInterpolator);
	Nan::SetPrototypeMethod(tpl, "setViewUpInterpolator", SetViewUpInterpolator);

#ifdef VTK_NODE_PLUS_VTKCAMERAINTERPOLATORWRAP_INITPTPL
	VTK_NODE_PLUS_VTKCAMERAINTERPOLATORWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkCameraInterpolatorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkCameraInterpolator> native = vtkSmartPointer<vtkCameraInterpolator>::New();
		VtkCameraInterpolatorWrap* obj = new VtkCameraInterpolatorWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkCameraInterpolatorWrap::AddCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkCameraWrap::ptpl))->HasInstance(info[1]))
		{
			VtkCameraWrap *a1 = ObjectWrap::Unwrap<VtkCameraWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->AddCamera(
				info[0]->NumberValue(),
				(vtkCamera *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCameraInterpolatorWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCameraInterpolatorWrap::GetClippingRangeInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	vtkTupleInterpolator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClippingRangeInterpolator();
	VtkTupleInterpolatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTupleInterpolatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTupleInterpolatorWrap *w = new VtkTupleInterpolatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCameraInterpolatorWrap::GetFocalPointInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	vtkTupleInterpolator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFocalPointInterpolator();
	VtkTupleInterpolatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTupleInterpolatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTupleInterpolatorWrap *w = new VtkTupleInterpolatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCameraInterpolatorWrap::GetInterpolationType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInterpolationType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCameraInterpolatorWrap::GetInterpolationTypeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInterpolationTypeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCameraInterpolatorWrap::GetInterpolationTypeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInterpolationTypeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCameraInterpolatorWrap::GetMTime(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	unsigned int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMTime();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCameraInterpolatorWrap::GetMaximumT(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumT();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCameraInterpolatorWrap::GetMinimumT(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMinimumT();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCameraInterpolatorWrap::GetNumberOfCameras(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfCameras();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCameraInterpolatorWrap::GetParallelScaleInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	vtkTupleInterpolator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetParallelScaleInterpolator();
	VtkTupleInterpolatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTupleInterpolatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTupleInterpolatorWrap *w = new VtkTupleInterpolatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCameraInterpolatorWrap::GetPositionInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	vtkTupleInterpolator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPositionInterpolator();
	VtkTupleInterpolatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTupleInterpolatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTupleInterpolatorWrap *w = new VtkTupleInterpolatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCameraInterpolatorWrap::GetViewAngleInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	vtkTupleInterpolator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetViewAngleInterpolator();
	VtkTupleInterpolatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTupleInterpolatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTupleInterpolatorWrap *w = new VtkTupleInterpolatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCameraInterpolatorWrap::GetViewUpInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	vtkTupleInterpolator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetViewUpInterpolator();
	VtkTupleInterpolatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTupleInterpolatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTupleInterpolatorWrap *w = new VtkTupleInterpolatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCameraInterpolatorWrap::Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Initialize();
}

void VtkCameraInterpolatorWrap::InterpolateCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkCameraWrap::ptpl))->HasInstance(info[1]))
		{
			VtkCameraWrap *a1 = ObjectWrap::Unwrap<VtkCameraWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->InterpolateCamera(
				info[0]->NumberValue(),
				(vtkCamera *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCameraInterpolatorWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCameraInterpolatorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	vtkCameraInterpolator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkCameraInterpolatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCameraInterpolatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCameraInterpolatorWrap *w = new VtkCameraInterpolatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCameraInterpolatorWrap::RemoveCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveCamera(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCameraInterpolatorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkCameraInterpolator * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkCameraInterpolatorWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkCameraInterpolatorWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkCameraInterpolatorWrap *w = new VtkCameraInterpolatorWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCameraInterpolatorWrap::SetClippingRangeInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTupleInterpolatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTupleInterpolatorWrap *a0 = ObjectWrap::Unwrap<VtkTupleInterpolatorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetClippingRangeInterpolator(
			(vtkTupleInterpolator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCameraInterpolatorWrap::SetFocalPointInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTupleInterpolatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTupleInterpolatorWrap *a0 = ObjectWrap::Unwrap<VtkTupleInterpolatorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFocalPointInterpolator(
			(vtkTupleInterpolator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCameraInterpolatorWrap::SetInterpolationType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInterpolationType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCameraInterpolatorWrap::SetInterpolationTypeToLinear(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInterpolationTypeToLinear();
}

void VtkCameraInterpolatorWrap::SetInterpolationTypeToManual(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInterpolationTypeToManual();
}

void VtkCameraInterpolatorWrap::SetInterpolationTypeToSpline(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInterpolationTypeToSpline();
}

void VtkCameraInterpolatorWrap::SetParallelScaleInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTupleInterpolatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTupleInterpolatorWrap *a0 = ObjectWrap::Unwrap<VtkTupleInterpolatorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetParallelScaleInterpolator(
			(vtkTupleInterpolator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCameraInterpolatorWrap::SetPositionInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTupleInterpolatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTupleInterpolatorWrap *a0 = ObjectWrap::Unwrap<VtkTupleInterpolatorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPositionInterpolator(
			(vtkTupleInterpolator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCameraInterpolatorWrap::SetViewAngleInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTupleInterpolatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTupleInterpolatorWrap *a0 = ObjectWrap::Unwrap<VtkTupleInterpolatorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetViewAngleInterpolator(
			(vtkTupleInterpolator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCameraInterpolatorWrap::SetViewUpInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCameraInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkCameraInterpolatorWrap>(info.Holder());
	vtkCameraInterpolator *native = (vtkCameraInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTupleInterpolatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTupleInterpolatorWrap *a0 = ObjectWrap::Unwrap<VtkTupleInterpolatorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetViewUpInterpolator(
			(vtkTupleInterpolator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

