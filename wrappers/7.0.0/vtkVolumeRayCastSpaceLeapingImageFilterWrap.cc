/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkThreadedImageAlgorithmWrap.h"
#include "vtkVolumeRayCastSpaceLeapingImageFilterWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDataArrayWrap.h"
#include "vtkImageDataWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkVolumeRayCastSpaceLeapingImageFilterWrap::ptpl;

VtkVolumeRayCastSpaceLeapingImageFilterWrap::VtkVolumeRayCastSpaceLeapingImageFilterWrap()
{ }

VtkVolumeRayCastSpaceLeapingImageFilterWrap::VtkVolumeRayCastSpaceLeapingImageFilterWrap(vtkSmartPointer<vtkVolumeRayCastSpaceLeapingImageFilter> _native)
{ native = _native; }

VtkVolumeRayCastSpaceLeapingImageFilterWrap::~VtkVolumeRayCastSpaceLeapingImageFilterWrap()
{ }

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkVolumeRayCastSpaceLeapingImageFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("VolumeRayCastSpaceLeapingImageFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkThreadedImageAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkThreadedImageAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkVolumeRayCastSpaceLeapingImageFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ComputeGradientOpacityOff", ComputeGradientOpacityOff);
	Nan::SetPrototypeMethod(tpl, "computeGradientOpacityOff", ComputeGradientOpacityOff);

	Nan::SetPrototypeMethod(tpl, "ComputeGradientOpacityOn", ComputeGradientOpacityOn);
	Nan::SetPrototypeMethod(tpl, "computeGradientOpacityOn", ComputeGradientOpacityOn);

	Nan::SetPrototypeMethod(tpl, "ComputeInputExtentsForOutput", ComputeInputExtentsForOutput);
	Nan::SetPrototypeMethod(tpl, "computeInputExtentsForOutput", ComputeInputExtentsForOutput);

	Nan::SetPrototypeMethod(tpl, "ComputeMinMaxOff", ComputeMinMaxOff);
	Nan::SetPrototypeMethod(tpl, "computeMinMaxOff", ComputeMinMaxOff);

	Nan::SetPrototypeMethod(tpl, "ComputeMinMaxOn", ComputeMinMaxOn);
	Nan::SetPrototypeMethod(tpl, "computeMinMaxOn", ComputeMinMaxOn);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetComputeGradientOpacity", GetComputeGradientOpacity);
	Nan::SetPrototypeMethod(tpl, "getComputeGradientOpacity", GetComputeGradientOpacity);

	Nan::SetPrototypeMethod(tpl, "GetComputeMinMax", GetComputeMinMax);
	Nan::SetPrototypeMethod(tpl, "getComputeMinMax", GetComputeMinMax);

	Nan::SetPrototypeMethod(tpl, "GetCurrentScalars", GetCurrentScalars);
	Nan::SetPrototypeMethod(tpl, "getCurrentScalars", GetCurrentScalars);

	Nan::SetPrototypeMethod(tpl, "GetIndependentComponents", GetIndependentComponents);
	Nan::SetPrototypeMethod(tpl, "getIndependentComponents", GetIndependentComponents);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfIndependentComponents", GetNumberOfIndependentComponents);
	Nan::SetPrototypeMethod(tpl, "getNumberOfIndependentComponents", GetNumberOfIndependentComponents);

	Nan::SetPrototypeMethod(tpl, "GetUpdateGradientOpacityFlags", GetUpdateGradientOpacityFlags);
	Nan::SetPrototypeMethod(tpl, "getUpdateGradientOpacityFlags", GetUpdateGradientOpacityFlags);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCache", SetCache);
	Nan::SetPrototypeMethod(tpl, "setCache", SetCache);

	Nan::SetPrototypeMethod(tpl, "SetComputeGradientOpacity", SetComputeGradientOpacity);
	Nan::SetPrototypeMethod(tpl, "setComputeGradientOpacity", SetComputeGradientOpacity);

	Nan::SetPrototypeMethod(tpl, "SetComputeMinMax", SetComputeMinMax);
	Nan::SetPrototypeMethod(tpl, "setComputeMinMax", SetComputeMinMax);

	Nan::SetPrototypeMethod(tpl, "SetCurrentScalars", SetCurrentScalars);
	Nan::SetPrototypeMethod(tpl, "setCurrentScalars", SetCurrentScalars);

	Nan::SetPrototypeMethod(tpl, "SetIndependentComponents", SetIndependentComponents);
	Nan::SetPrototypeMethod(tpl, "setIndependentComponents", SetIndependentComponents);

	Nan::SetPrototypeMethod(tpl, "SetTableSize", SetTableSize);
	Nan::SetPrototypeMethod(tpl, "setTableSize", SetTableSize);

	Nan::SetPrototypeMethod(tpl, "SetUpdateGradientOpacityFlags", SetUpdateGradientOpacityFlags);
	Nan::SetPrototypeMethod(tpl, "setUpdateGradientOpacityFlags", SetUpdateGradientOpacityFlags);

	Nan::SetPrototypeMethod(tpl, "UpdateGradientOpacityFlagsOff", UpdateGradientOpacityFlagsOff);
	Nan::SetPrototypeMethod(tpl, "updateGradientOpacityFlagsOff", UpdateGradientOpacityFlagsOff);

	Nan::SetPrototypeMethod(tpl, "UpdateGradientOpacityFlagsOn", UpdateGradientOpacityFlagsOn);
	Nan::SetPrototypeMethod(tpl, "updateGradientOpacityFlagsOn", UpdateGradientOpacityFlagsOn);

	ptpl.Reset( tpl );
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkVolumeRayCastSpaceLeapingImageFilter> native = vtkSmartPointer<vtkVolumeRayCastSpaceLeapingImageFilter>::New();
		VtkVolumeRayCastSpaceLeapingImageFilterWrap* obj = new VtkVolumeRayCastSpaceLeapingImageFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::ComputeGradientOpacityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeGradientOpacityOff();
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::ComputeGradientOpacityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeGradientOpacityOn();
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::ComputeInputExtentsForOutput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		if(info.Length() > 1 && info[1]->IsInt32Array())
		{
			v8::Local<v8::Int32Array>a1(v8::Local<v8::Int32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			if(info.Length() > 2 && info[2]->IsInt32Array())
			{
				v8::Local<v8::Int32Array>a2(v8::Local<v8::Int32Array>::Cast(info[2]->ToObject()));
				if( a2->Length() < 6 )
				{
					Nan::ThrowError("Array too short.");
					return;
				}

				if(info.Length() > 3 && info[3]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[3]))
				{
					VtkImageDataWrap *a3 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[3]->ToObject());
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->ComputeInputExtentsForOutput(
						(int *)(a0->Buffer()->GetContents().Data()),
						(int *)(a1->Buffer()->GetContents().Data()),
						(int *)(a2->Buffer()->GetContents().Data()),
						(vtkImageData *) a3->native.GetPointer()
					);
					return;
				}
			}
			else if(info.Length() > 2 && info[2]->IsArray())
			{
				v8::Local<v8::Array>a2(v8::Local<v8::Array>::Cast(info[2]->ToObject()));
				int b2[6];
				if( a2->Length() < 6 )
				{
					Nan::ThrowError("Array too short.");
					return;
				}

				for( i = 0; i < 6; i++ )
				{
					if( !a2->Get(i)->IsInt32() )
					{
						Nan::ThrowError("Array contents invalid.");
						return;
					}
					b2[i] = a2->Get(i)->Int32Value();
				}
				if(info.Length() > 3 && info[3]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[3]))
				{
					VtkImageDataWrap *a3 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[3]->ToObject());
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->ComputeInputExtentsForOutput(
						(int *)(a0->Buffer()->GetContents().Data()),
						(int *)(a1->Buffer()->GetContents().Data()),
						b2,
						(vtkImageData *) a3->native.GetPointer()
					);
					return;
				}
			}
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			int b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsInt32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Int32Value();
			}
			if(info.Length() > 2 && info[2]->IsArray())
			{
				v8::Local<v8::Array>a2(v8::Local<v8::Array>::Cast(info[2]->ToObject()));
				int b2[6];
				if( a2->Length() < 6 )
				{
					Nan::ThrowError("Array too short.");
					return;
				}

				for( i = 0; i < 6; i++ )
				{
					if( !a2->Get(i)->IsInt32() )
					{
						Nan::ThrowError("Array contents invalid.");
						return;
					}
					b2[i] = a2->Get(i)->Int32Value();
				}
				if(info.Length() > 3 && info[3]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[3]))
				{
					VtkImageDataWrap *a3 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[3]->ToObject());
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->ComputeInputExtentsForOutput(
						(int *)(a0->Buffer()->GetContents().Data()),
						b1,
						b2,
						(vtkImageData *) a3->native.GetPointer()
					);
					return;
				}
			}
		}
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[6];
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 6; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
		if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			int b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsInt32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Int32Value();
			}
			if(info.Length() > 2 && info[2]->IsArray())
			{
				v8::Local<v8::Array>a2(v8::Local<v8::Array>::Cast(info[2]->ToObject()));
				int b2[6];
				if( a2->Length() < 6 )
				{
					Nan::ThrowError("Array too short.");
					return;
				}

				for( i = 0; i < 6; i++ )
				{
					if( !a2->Get(i)->IsInt32() )
					{
						Nan::ThrowError("Array contents invalid.");
						return;
					}
					b2[i] = a2->Get(i)->Int32Value();
				}
				if(info.Length() > 3 && info[3]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[3]))
				{
					VtkImageDataWrap *a3 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[3]->ToObject());
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->ComputeInputExtentsForOutput(
						b0,
						b1,
						b2,
						(vtkImageData *) a3->native.GetPointer()
					);
					return;
				}
			}
		}
		else if(info.Length() > 1 && info[1]->IsInt32Array())
		{
			v8::Local<v8::Int32Array>a1(v8::Local<v8::Int32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			if(info.Length() > 2 && info[2]->IsArray())
			{
				v8::Local<v8::Array>a2(v8::Local<v8::Array>::Cast(info[2]->ToObject()));
				int b2[6];
				if( a2->Length() < 6 )
				{
					Nan::ThrowError("Array too short.");
					return;
				}

				for( i = 0; i < 6; i++ )
				{
					if( !a2->Get(i)->IsInt32() )
					{
						Nan::ThrowError("Array contents invalid.");
						return;
					}
					b2[i] = a2->Get(i)->Int32Value();
				}
				if(info.Length() > 3 && info[3]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[3]))
				{
					VtkImageDataWrap *a3 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[3]->ToObject());
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->ComputeInputExtentsForOutput(
						b0,
						(int *)(a1->Buffer()->GetContents().Data()),
						b2,
						(vtkImageData *) a3->native.GetPointer()
					);
					return;
				}
			}
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			int b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsInt32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Int32Value();
			}
			if(info.Length() > 2 && info[2]->IsInt32Array())
			{
				v8::Local<v8::Int32Array>a2(v8::Local<v8::Int32Array>::Cast(info[2]->ToObject()));
				if( a2->Length() < 6 )
				{
					Nan::ThrowError("Array too short.");
					return;
				}

				if(info.Length() > 3 && info[3]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[3]))
				{
					VtkImageDataWrap *a3 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[3]->ToObject());
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->ComputeInputExtentsForOutput(
						(int *)(a0->Buffer()->GetContents().Data()),
						b1,
						(int *)(a2->Buffer()->GetContents().Data()),
						(vtkImageData *) a3->native.GetPointer()
					);
					return;
				}
			}
		}
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[6];
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 6; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
		if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			int b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsInt32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Int32Value();
			}
			if(info.Length() > 2 && info[2]->IsInt32Array())
			{
				v8::Local<v8::Int32Array>a2(v8::Local<v8::Int32Array>::Cast(info[2]->ToObject()));
				if( a2->Length() < 6 )
				{
					Nan::ThrowError("Array too short.");
					return;
				}

				if(info.Length() > 3 && info[3]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[3]))
				{
					VtkImageDataWrap *a3 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[3]->ToObject());
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->ComputeInputExtentsForOutput(
						b0,
						b1,
						(int *)(a2->Buffer()->GetContents().Data()),
						(vtkImageData *) a3->native.GetPointer()
					);
					return;
				}
			}
		}
		else if(info.Length() > 1 && info[1]->IsInt32Array())
		{
			v8::Local<v8::Int32Array>a1(v8::Local<v8::Int32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			if(info.Length() > 2 && info[2]->IsInt32Array())
			{
				v8::Local<v8::Int32Array>a2(v8::Local<v8::Int32Array>::Cast(info[2]->ToObject()));
				if( a2->Length() < 6 )
				{
					Nan::ThrowError("Array too short.");
					return;
				}

				if(info.Length() > 3 && info[3]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[3]))
				{
					VtkImageDataWrap *a3 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[3]->ToObject());
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->ComputeInputExtentsForOutput(
						b0,
						(int *)(a1->Buffer()->GetContents().Data()),
						(int *)(a2->Buffer()->GetContents().Data()),
						(vtkImageData *) a3->native.GetPointer()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::ComputeMinMaxOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeMinMaxOff();
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::ComputeMinMaxOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeMinMaxOn();
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::GetComputeGradientOpacity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeGradientOpacity();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::GetComputeMinMax(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeMinMax();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::GetCurrentScalars(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	vtkDataArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCurrentScalars();
		VtkDataArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataArrayWrap *w = new VtkDataArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::GetIndependentComponents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIndependentComponents();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::GetNumberOfIndependentComponents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfIndependentComponents();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::GetUpdateGradientOpacityFlags(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUpdateGradientOpacityFlags();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	vtkVolumeRayCastSpaceLeapingImageFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkVolumeRayCastSpaceLeapingImageFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkVolumeRayCastSpaceLeapingImageFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *w = new VtkVolumeRayCastSpaceLeapingImageFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkVolumeRayCastSpaceLeapingImageFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkVolumeRayCastSpaceLeapingImageFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkVolumeRayCastSpaceLeapingImageFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkVolumeRayCastSpaceLeapingImageFilterWrap *w = new VtkVolumeRayCastSpaceLeapingImageFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::SetCache(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImageDataWrap *a0 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCache(
			(vtkImageData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::SetComputeGradientOpacity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeGradientOpacity(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::SetComputeMinMax(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeMinMax(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::SetCurrentScalars(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataArrayWrap *a0 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCurrentScalars(
			(vtkDataArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::SetIndependentComponents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIndependentComponents(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::SetTableSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 4 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTableSize(
			(int *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[4];
		if( a0->Length() < 4 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 4; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTableSize(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->SetTableSize(
						info[0]->Int32Value(),
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::SetUpdateGradientOpacityFlags(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUpdateGradientOpacityFlags(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::UpdateGradientOpacityFlagsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UpdateGradientOpacityFlagsOff();
}

void VtkVolumeRayCastSpaceLeapingImageFilterWrap::UpdateGradientOpacityFlagsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeRayCastSpaceLeapingImageFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeRayCastSpaceLeapingImageFilterWrap>(info.Holder());
	vtkVolumeRayCastSpaceLeapingImageFilter *native = (vtkVolumeRayCastSpaceLeapingImageFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UpdateGradientOpacityFlagsOn();
}

