/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKBIVARIATELINEARTABLETHRESHOLDWRAP_H
#define NATIVE_EXTENSION_VTK_VTKBIVARIATELINEARTABLETHRESHOLDWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkBivariateLinearTableThreshold.h>

#include "vtkTableAlgorithmWrap.h"
#include "../../plus/plus.h"

class VtkBivariateLinearTableThresholdWrap : public VtkTableAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkBivariateLinearTableThresholdWrap(vtkSmartPointer<vtkBivariateLinearTableThreshold>);
		VtkBivariateLinearTableThresholdWrap();
		~VtkBivariateLinearTableThresholdWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AddLineEquation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ClearColumnsToThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ClearLineEquations(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetColumnRanges(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDistanceThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInclusive(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLinearThresholdType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfColumnsToThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSelectedRowIds(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetUseNormalizedDistance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetColumnRanges(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetDistanceThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetInclusive(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLinearThresholdType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLinearThresholdTypeToAbove(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLinearThresholdTypeToBelow(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLinearThresholdTypeToBetween(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLinearThresholdTypeToNear(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetUseNormalizedDistance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UseNormalizedDistanceOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UseNormalizedDistanceOn(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKBIVARIATELINEARTABLETHRESHOLDWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKBIVARIATELINEARTABLETHRESHOLDWRAP_CLASSDEF
#endif
};

#endif
