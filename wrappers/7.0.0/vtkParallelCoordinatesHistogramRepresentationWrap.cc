/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkParallelCoordinatesRepresentationWrap.h"
#include "vtkParallelCoordinatesHistogramRepresentationWrap.h"
#include "vtkObjectWrap.h"
#include "vtkViewThemeWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkParallelCoordinatesHistogramRepresentationWrap::ptpl;

VtkParallelCoordinatesHistogramRepresentationWrap::VtkParallelCoordinatesHistogramRepresentationWrap()
{ }

VtkParallelCoordinatesHistogramRepresentationWrap::VtkParallelCoordinatesHistogramRepresentationWrap(vtkSmartPointer<vtkParallelCoordinatesHistogramRepresentation> _native)
{ native = _native; }

VtkParallelCoordinatesHistogramRepresentationWrap::~VtkParallelCoordinatesHistogramRepresentationWrap()
{ }

void VtkParallelCoordinatesHistogramRepresentationWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkParallelCoordinatesHistogramRepresentation").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ParallelCoordinatesHistogramRepresentation").ToLocalChecked(), ConstructorGetter);
}

void VtkParallelCoordinatesHistogramRepresentationWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkParallelCoordinatesHistogramRepresentationWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkParallelCoordinatesRepresentationWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkParallelCoordinatesRepresentationWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkParallelCoordinatesHistogramRepresentationWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ApplyViewTheme", ApplyViewTheme);
	Nan::SetPrototypeMethod(tpl, "applyViewTheme", ApplyViewTheme);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetHistogramLookupTableRange", GetHistogramLookupTableRange);
	Nan::SetPrototypeMethod(tpl, "getHistogramLookupTableRange", GetHistogramLookupTableRange);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfHistogramBins", GetNumberOfHistogramBins);
	Nan::SetPrototypeMethod(tpl, "getNumberOfHistogramBins", GetNumberOfHistogramBins);

	Nan::SetPrototypeMethod(tpl, "GetPreferredNumberOfOutliers", GetPreferredNumberOfOutliers);
	Nan::SetPrototypeMethod(tpl, "getPreferredNumberOfOutliers", GetPreferredNumberOfOutliers);

	Nan::SetPrototypeMethod(tpl, "GetShowOutliers", GetShowOutliers);
	Nan::SetPrototypeMethod(tpl, "getShowOutliers", GetShowOutliers);

	Nan::SetPrototypeMethod(tpl, "GetUseHistograms", GetUseHistograms);
	Nan::SetPrototypeMethod(tpl, "getUseHistograms", GetUseHistograms);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetHistogramLookupTableRange", SetHistogramLookupTableRange);
	Nan::SetPrototypeMethod(tpl, "setHistogramLookupTableRange", SetHistogramLookupTableRange);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfHistogramBins", SetNumberOfHistogramBins);
	Nan::SetPrototypeMethod(tpl, "setNumberOfHistogramBins", SetNumberOfHistogramBins);

	Nan::SetPrototypeMethod(tpl, "SetPreferredNumberOfOutliers", SetPreferredNumberOfOutliers);
	Nan::SetPrototypeMethod(tpl, "setPreferredNumberOfOutliers", SetPreferredNumberOfOutliers);

	Nan::SetPrototypeMethod(tpl, "SetRangeAtPosition", SetRangeAtPosition);
	Nan::SetPrototypeMethod(tpl, "setRangeAtPosition", SetRangeAtPosition);

	Nan::SetPrototypeMethod(tpl, "SetShowOutliers", SetShowOutliers);
	Nan::SetPrototypeMethod(tpl, "setShowOutliers", SetShowOutliers);

	Nan::SetPrototypeMethod(tpl, "SetUseHistograms", SetUseHistograms);
	Nan::SetPrototypeMethod(tpl, "setUseHistograms", SetUseHistograms);

	Nan::SetPrototypeMethod(tpl, "ShowOutliersOff", ShowOutliersOff);
	Nan::SetPrototypeMethod(tpl, "showOutliersOff", ShowOutliersOff);

	Nan::SetPrototypeMethod(tpl, "ShowOutliersOn", ShowOutliersOn);
	Nan::SetPrototypeMethod(tpl, "showOutliersOn", ShowOutliersOn);

	Nan::SetPrototypeMethod(tpl, "SwapAxisPositions", SwapAxisPositions);
	Nan::SetPrototypeMethod(tpl, "swapAxisPositions", SwapAxisPositions);

	Nan::SetPrototypeMethod(tpl, "UseHistogramsOff", UseHistogramsOff);
	Nan::SetPrototypeMethod(tpl, "useHistogramsOff", UseHistogramsOff);

	Nan::SetPrototypeMethod(tpl, "UseHistogramsOn", UseHistogramsOn);
	Nan::SetPrototypeMethod(tpl, "useHistogramsOn", UseHistogramsOn);

#ifdef VTK_NODE_PLUS_VTKPARALLELCOORDINATESHISTOGRAMREPRESENTATIONWRAP_INITPTPL
	VTK_NODE_PLUS_VTKPARALLELCOORDINATESHISTOGRAMREPRESENTATIONWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkParallelCoordinatesHistogramRepresentationWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkParallelCoordinatesHistogramRepresentation> native = vtkSmartPointer<vtkParallelCoordinatesHistogramRepresentation>::New();
		VtkParallelCoordinatesHistogramRepresentationWrap* obj = new VtkParallelCoordinatesHistogramRepresentationWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkParallelCoordinatesHistogramRepresentationWrap::ApplyViewTheme(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewThemeWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewThemeWrap *a0 = ObjectWrap::Unwrap<VtkViewThemeWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ApplyViewTheme(
			(vtkViewTheme *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesHistogramRepresentationWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkParallelCoordinatesHistogramRepresentationWrap::GetHistogramLookupTableRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHistogramLookupTableRange();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 2 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 2);
	memcpy(ab->GetContents().Data(), r, 2 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkParallelCoordinatesHistogramRepresentationWrap::GetNumberOfHistogramBins(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	int const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfHistogramBins();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 2 * sizeof(int));
	Local<v8::Int32Array> at = v8::Int32Array::New(ab, 0, 2);
	memcpy(ab->GetContents().Data(), r, 2 * sizeof(int));
	info.GetReturnValue().Set(at);
}

void VtkParallelCoordinatesHistogramRepresentationWrap::GetPreferredNumberOfOutliers(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPreferredNumberOfOutliers();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParallelCoordinatesHistogramRepresentationWrap::GetShowOutliers(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetShowOutliers();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParallelCoordinatesHistogramRepresentationWrap::GetUseHistograms(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseHistograms();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParallelCoordinatesHistogramRepresentationWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesHistogramRepresentationWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	vtkParallelCoordinatesHistogramRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkParallelCoordinatesHistogramRepresentationWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkParallelCoordinatesHistogramRepresentationWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkParallelCoordinatesHistogramRepresentationWrap *w = new VtkParallelCoordinatesHistogramRepresentationWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkParallelCoordinatesHistogramRepresentationWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkParallelCoordinatesHistogramRepresentation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkParallelCoordinatesHistogramRepresentationWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkParallelCoordinatesHistogramRepresentationWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkParallelCoordinatesHistogramRepresentationWrap *w = new VtkParallelCoordinatesHistogramRepresentationWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesHistogramRepresentationWrap::SetHistogramLookupTableRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHistogramLookupTableRange(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[2];
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 2; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHistogramLookupTableRange(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetHistogramLookupTableRange(
				info[0]->NumberValue(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesHistogramRepresentationWrap::SetNumberOfHistogramBins(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetNumberOfHistogramBins(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesHistogramRepresentationWrap::SetPreferredNumberOfOutliers(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPreferredNumberOfOutliers(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesHistogramRepresentationWrap::SetRangeAtPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsFloat64Array())
		{
			v8::Local<v8::Float64Array>a1(v8::Local<v8::Float64Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 2 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetRangeAtPosition(
				info[0]->Int32Value(),
				(double *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			double b1[2];
			if( a1->Length() < 2 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 2; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetRangeAtPosition(
				info[0]->Int32Value(),
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesHistogramRepresentationWrap::SetShowOutliers(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetShowOutliers(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesHistogramRepresentationWrap::SetUseHistograms(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseHistograms(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesHistogramRepresentationWrap::ShowOutliersOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ShowOutliersOff();
}

void VtkParallelCoordinatesHistogramRepresentationWrap::ShowOutliersOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ShowOutliersOn();
}

void VtkParallelCoordinatesHistogramRepresentationWrap::SwapAxisPositions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SwapAxisPositions(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesHistogramRepresentationWrap::UseHistogramsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseHistogramsOff();
}

void VtkParallelCoordinatesHistogramRepresentationWrap::UseHistogramsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesHistogramRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesHistogramRepresentationWrap>(info.Holder());
	vtkParallelCoordinatesHistogramRepresentation *native = (vtkParallelCoordinatesHistogramRepresentation *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseHistogramsOn();
}

