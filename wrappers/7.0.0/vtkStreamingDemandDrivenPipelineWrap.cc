/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkDemandDrivenPipelineWrap.h"
#include "vtkStreamingDemandDrivenPipelineWrap.h"
#include "vtkObjectWrap.h"
#include "vtkInformationWrap.h"
#include "vtkInformationRequestKeyWrap.h"
#include "vtkInformationIntegerKeyWrap.h"
#include "vtkInformationIntegerVectorKeyWrap.h"
#include "vtkInformationDoubleVectorKeyWrap.h"
#include "vtkInformationDoubleKeyWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkStreamingDemandDrivenPipelineWrap::ptpl;

VtkStreamingDemandDrivenPipelineWrap::VtkStreamingDemandDrivenPipelineWrap()
{ }

VtkStreamingDemandDrivenPipelineWrap::VtkStreamingDemandDrivenPipelineWrap(vtkSmartPointer<vtkStreamingDemandDrivenPipeline> _native)
{ native = _native; }

VtkStreamingDemandDrivenPipelineWrap::~VtkStreamingDemandDrivenPipelineWrap()
{ }

void VtkStreamingDemandDrivenPipelineWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkStreamingDemandDrivenPipeline").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("StreamingDemandDrivenPipeline").ToLocalChecked(), ConstructorGetter);
}

void VtkStreamingDemandDrivenPipelineWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkStreamingDemandDrivenPipelineWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkDemandDrivenPipelineWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkDemandDrivenPipelineWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkStreamingDemandDrivenPipelineWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "BOUNDS", BOUNDS);

	Nan::SetPrototypeMethod(tpl, "COMBINED_UPDATE_EXTENT", COMBINED_UPDATE_EXTENT);

	Nan::SetPrototypeMethod(tpl, "CONTINUE_EXECUTING", CONTINUE_EXECUTING);

	Nan::SetPrototypeMethod(tpl, "EXACT_EXTENT", EXACT_EXTENT);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetRequestExactExtent", GetRequestExactExtent);
	Nan::SetPrototypeMethod(tpl, "getRequestExactExtent", GetRequestExactExtent);

	Nan::SetPrototypeMethod(tpl, "GetUpdateExtent", GetUpdateExtent);
	Nan::SetPrototypeMethod(tpl, "getUpdateExtent", GetUpdateExtent);

	Nan::SetPrototypeMethod(tpl, "GetUpdateGhostLevel", GetUpdateGhostLevel);
	Nan::SetPrototypeMethod(tpl, "getUpdateGhostLevel", GetUpdateGhostLevel);

	Nan::SetPrototypeMethod(tpl, "GetUpdateNumberOfPieces", GetUpdateNumberOfPieces);
	Nan::SetPrototypeMethod(tpl, "getUpdateNumberOfPieces", GetUpdateNumberOfPieces);

	Nan::SetPrototypeMethod(tpl, "GetUpdatePiece", GetUpdatePiece);
	Nan::SetPrototypeMethod(tpl, "getUpdatePiece", GetUpdatePiece);

	Nan::SetPrototypeMethod(tpl, "GetWholeExtent", GetWholeExtent);
	Nan::SetPrototypeMethod(tpl, "getWholeExtent", GetWholeExtent);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PropagateTime", PropagateTime);
	Nan::SetPrototypeMethod(tpl, "propagateTime", PropagateTime);

	Nan::SetPrototypeMethod(tpl, "PropagateUpdateExtent", PropagateUpdateExtent);
	Nan::SetPrototypeMethod(tpl, "propagateUpdateExtent", PropagateUpdateExtent);

	Nan::SetPrototypeMethod(tpl, "REQUEST_TIME_DEPENDENT_INFORMATION", REQUEST_TIME_DEPENDENT_INFORMATION);

	Nan::SetPrototypeMethod(tpl, "REQUEST_UPDATE_EXTENT", REQUEST_UPDATE_EXTENT);

	Nan::SetPrototypeMethod(tpl, "REQUEST_UPDATE_TIME", REQUEST_UPDATE_TIME);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetRequestExactExtent", SetRequestExactExtent);
	Nan::SetPrototypeMethod(tpl, "setRequestExactExtent", SetRequestExactExtent);

	Nan::SetPrototypeMethod(tpl, "SetUpdateExtent", SetUpdateExtent);
	Nan::SetPrototypeMethod(tpl, "setUpdateExtent", SetUpdateExtent);

	Nan::SetPrototypeMethod(tpl, "SetUpdateExtentToWholeExtent", SetUpdateExtentToWholeExtent);
	Nan::SetPrototypeMethod(tpl, "setUpdateExtentToWholeExtent", SetUpdateExtentToWholeExtent);

	Nan::SetPrototypeMethod(tpl, "SetUpdateGhostLevel", SetUpdateGhostLevel);
	Nan::SetPrototypeMethod(tpl, "setUpdateGhostLevel", SetUpdateGhostLevel);

	Nan::SetPrototypeMethod(tpl, "SetUpdateNumberOfPieces", SetUpdateNumberOfPieces);
	Nan::SetPrototypeMethod(tpl, "setUpdateNumberOfPieces", SetUpdateNumberOfPieces);

	Nan::SetPrototypeMethod(tpl, "SetUpdatePiece", SetUpdatePiece);
	Nan::SetPrototypeMethod(tpl, "setUpdatePiece", SetUpdatePiece);

	Nan::SetPrototypeMethod(tpl, "SetUpdateTimeStep", SetUpdateTimeStep);
	Nan::SetPrototypeMethod(tpl, "setUpdateTimeStep", SetUpdateTimeStep);

	Nan::SetPrototypeMethod(tpl, "SetWholeExtent", SetWholeExtent);
	Nan::SetPrototypeMethod(tpl, "setWholeExtent", SetWholeExtent);

	Nan::SetPrototypeMethod(tpl, "TIME_DEPENDENT_INFORMATION", TIME_DEPENDENT_INFORMATION);

	Nan::SetPrototypeMethod(tpl, "TIME_RANGE", TIME_RANGE);

	Nan::SetPrototypeMethod(tpl, "TIME_STEPS", TIME_STEPS);

	Nan::SetPrototypeMethod(tpl, "UNRESTRICTED_UPDATE_EXTENT", UNRESTRICTED_UPDATE_EXTENT);

	Nan::SetPrototypeMethod(tpl, "UPDATE_EXTENT", UPDATE_EXTENT);

	Nan::SetPrototypeMethod(tpl, "UPDATE_EXTENT_INITIALIZED", UPDATE_EXTENT_INITIALIZED);

	Nan::SetPrototypeMethod(tpl, "UPDATE_NUMBER_OF_GHOST_LEVELS", UPDATE_NUMBER_OF_GHOST_LEVELS);

	Nan::SetPrototypeMethod(tpl, "UPDATE_NUMBER_OF_PIECES", UPDATE_NUMBER_OF_PIECES);

	Nan::SetPrototypeMethod(tpl, "UPDATE_PIECE_NUMBER", UPDATE_PIECE_NUMBER);

	Nan::SetPrototypeMethod(tpl, "UPDATE_TIME_STEP", UPDATE_TIME_STEP);

	Nan::SetPrototypeMethod(tpl, "Update", Update);
	Nan::SetPrototypeMethod(tpl, "update", Update);

	Nan::SetPrototypeMethod(tpl, "UpdateTimeDependentInformation", UpdateTimeDependentInformation);
	Nan::SetPrototypeMethod(tpl, "updateTimeDependentInformation", UpdateTimeDependentInformation);

	Nan::SetPrototypeMethod(tpl, "UpdateWholeExtent", UpdateWholeExtent);
	Nan::SetPrototypeMethod(tpl, "updateWholeExtent", UpdateWholeExtent);

	Nan::SetPrototypeMethod(tpl, "WHOLE_EXTENT", WHOLE_EXTENT);

	ptpl.Reset( tpl );
}

void VtkStreamingDemandDrivenPipelineWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkStreamingDemandDrivenPipeline> native = vtkSmartPointer<vtkStreamingDemandDrivenPipeline>::New();
		VtkStreamingDemandDrivenPipelineWrap* obj = new VtkStreamingDemandDrivenPipelineWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkStreamingDemandDrivenPipelineWrap::BOUNDS(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationDoubleVectorKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->BOUNDS();
		VtkInformationDoubleVectorKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationDoubleVectorKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationDoubleVectorKeyWrap *w = new VtkInformationDoubleVectorKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::COMBINED_UPDATE_EXTENT(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerVectorKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->COMBINED_UPDATE_EXTENT();
		VtkInformationIntegerVectorKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerVectorKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerVectorKeyWrap *w = new VtkInformationIntegerVectorKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::CONTINUE_EXECUTING(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->CONTINUE_EXECUTING();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::EXACT_EXTENT(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->EXACT_EXTENT();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkStreamingDemandDrivenPipelineWrap::GetRequestExactExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetRequestExactExtent(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::GetUpdateExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32Array())
		{
			v8::Local<v8::Int32Array>a1(v8::Local<v8::Int32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetUpdateExtent(
				(vtkInformation *) a0->native.GetPointer(),
				(int *)(a1->Buffer()->GetContents().Data())
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			int b1[6];
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 6; i++ )
			{
				if( !a1->Get(i)->IsInt32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Int32Value();
			}
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetUpdateExtent(
				(vtkInformation *) a0->native.GetPointer(),
				b1
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::GetUpdateGhostLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetUpdateGhostLevel(
			(vtkInformation *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::GetUpdateNumberOfPieces(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetUpdateNumberOfPieces(
			(vtkInformation *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::GetUpdatePiece(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetUpdatePiece(
			(vtkInformation *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::GetWholeExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32Array())
		{
			v8::Local<v8::Int32Array>a1(v8::Local<v8::Int32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetWholeExtent(
				(vtkInformation *) a0->native.GetPointer(),
				(int *)(a1->Buffer()->GetContents().Data())
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			int b1[6];
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 6; i++ )
			{
				if( !a1->Get(i)->IsInt32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Int32Value();
			}
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetWholeExtent(
				(vtkInformation *) a0->native.GetPointer(),
				b1
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkStreamingDemandDrivenPipeline * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkStreamingDemandDrivenPipelineWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkStreamingDemandDrivenPipelineWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStreamingDemandDrivenPipelineWrap *w = new VtkStreamingDemandDrivenPipelineWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::PropagateTime(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->PropagateTime(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::PropagateUpdateExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->PropagateUpdateExtent(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::REQUEST_TIME_DEPENDENT_INFORMATION(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationRequestKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->REQUEST_TIME_DEPENDENT_INFORMATION();
		VtkInformationRequestKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationRequestKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationRequestKeyWrap *w = new VtkInformationRequestKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::REQUEST_UPDATE_EXTENT(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationRequestKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->REQUEST_UPDATE_EXTENT();
		VtkInformationRequestKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationRequestKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationRequestKeyWrap *w = new VtkInformationRequestKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::REQUEST_UPDATE_TIME(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationRequestKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->REQUEST_UPDATE_TIME();
		VtkInformationRequestKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationRequestKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationRequestKeyWrap *w = new VtkInformationRequestKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkStreamingDemandDrivenPipeline * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkStreamingDemandDrivenPipelineWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkStreamingDemandDrivenPipelineWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkStreamingDemandDrivenPipelineWrap *w = new VtkStreamingDemandDrivenPipelineWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::SetRequestExactExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetRequestExactExtent(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::SetUpdateExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32Array())
		{
			v8::Local<v8::Int32Array>a1(v8::Local<v8::Int32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUpdateExtent(
				(vtkInformation *) a0->native.GetPointer(),
				(int *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			int b1[6];
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 6; i++ )
			{
				if( !a1->Get(i)->IsInt32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Int32Value();
			}
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUpdateExtent(
				(vtkInformation *) a0->native.GetPointer(),
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->SetUpdateExtent(
						(vtkInformation *) a0->native.GetPointer(),
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32Array())
		{
			v8::Local<v8::Int32Array>a1(v8::Local<v8::Int32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUpdateExtent(
				info[0]->Int32Value(),
				(int *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			int b1[6];
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 6; i++ )
			{
				if( !a1->Get(i)->IsInt32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Int32Value();
			}
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUpdateExtent(
				info[0]->Int32Value(),
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() > 4 && info[4]->IsInt32())
					{
						if(info.Length() > 5 && info[5]->IsInt32())
						{
							if(info.Length() > 6 && info[6]->IsInt32())
							{
								int r;
								if(info.Length() != 7)
								{
									Nan::ThrowError("Too many parameters.");
									return;
								}
								r = native->SetUpdateExtent(
									info[0]->Int32Value(),
									info[1]->Int32Value(),
									info[2]->Int32Value(),
									info[3]->Int32Value(),
									info[4]->Int32Value(),
									info[5]->Int32Value(),
									info[6]->Int32Value()
								);
								info.GetReturnValue().Set(Nan::New(r));
								return;
							}
						}
					}
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->SetUpdateExtent(
						info[0]->Int32Value(),
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::SetUpdateExtentToWholeExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SetUpdateExtentToWholeExtent(
			(vtkInformation *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SetUpdateExtentToWholeExtent(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::SetUpdateGhostLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUpdateGhostLevel(
				(vtkInformation *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::SetUpdateNumberOfPieces(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUpdateNumberOfPieces(
				(vtkInformation *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::SetUpdatePiece(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUpdatePiece(
				(vtkInformation *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::SetUpdateTimeStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUpdateTimeStep(
				(vtkInformation *) a0->native.GetPointer(),
				info[1]->NumberValue()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUpdateTimeStep(
				info[0]->Int32Value(),
				info[1]->NumberValue()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::SetWholeExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32Array())
		{
			v8::Local<v8::Int32Array>a1(v8::Local<v8::Int32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetWholeExtent(
				(vtkInformation *) a0->native.GetPointer(),
				(int *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			int b1[6];
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 6; i++ )
			{
				if( !a1->Get(i)->IsInt32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Int32Value();
			}
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetWholeExtent(
				(vtkInformation *) a0->native.GetPointer(),
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::TIME_DEPENDENT_INFORMATION(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->TIME_DEPENDENT_INFORMATION();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::TIME_RANGE(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationDoubleVectorKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->TIME_RANGE();
		VtkInformationDoubleVectorKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationDoubleVectorKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationDoubleVectorKeyWrap *w = new VtkInformationDoubleVectorKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::TIME_STEPS(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationDoubleVectorKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->TIME_STEPS();
		VtkInformationDoubleVectorKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationDoubleVectorKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationDoubleVectorKeyWrap *w = new VtkInformationDoubleVectorKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::UNRESTRICTED_UPDATE_EXTENT(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UNRESTRICTED_UPDATE_EXTENT();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::UPDATE_EXTENT(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerVectorKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UPDATE_EXTENT();
		VtkInformationIntegerVectorKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerVectorKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerVectorKeyWrap *w = new VtkInformationIntegerVectorKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::UPDATE_EXTENT_INITIALIZED(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UPDATE_EXTENT_INITIALIZED();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::UPDATE_NUMBER_OF_GHOST_LEVELS(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UPDATE_NUMBER_OF_GHOST_LEVELS();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::UPDATE_NUMBER_OF_PIECES(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UPDATE_NUMBER_OF_PIECES();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::UPDATE_PIECE_NUMBER(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UPDATE_PIECE_NUMBER();
		VtkInformationIntegerKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::UPDATE_TIME_STEP(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationDoubleKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UPDATE_TIME_STEP();
		VtkInformationDoubleKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationDoubleKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationDoubleKeyWrap *w = new VtkInformationDoubleKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamingDemandDrivenPipelineWrap::Update(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->Update(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->Update();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamingDemandDrivenPipelineWrap::UpdateTimeDependentInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->UpdateTimeDependentInformation(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamingDemandDrivenPipelineWrap::UpdateWholeExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UpdateWholeExtent();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamingDemandDrivenPipelineWrap::WHOLE_EXTENT(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamingDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkStreamingDemandDrivenPipelineWrap>(info.Holder());
	vtkStreamingDemandDrivenPipeline *native = (vtkStreamingDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerVectorKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->WHOLE_EXTENT();
		VtkInformationIntegerVectorKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationIntegerVectorKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerVectorKeyWrap *w = new VtkInformationIntegerVectorKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

