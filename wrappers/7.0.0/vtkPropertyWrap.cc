/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkObjectWrap.h"
#include "vtkPropertyWrap.h"
#include "vtkActorWrap.h"
#include "vtkRendererWrap.h"
#include "vtkShaderDeviceAdapter2Wrap.h"
#include "vtkTextureWrap.h"
#include "vtkWindowWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkPropertyWrap::ptpl;

VtkPropertyWrap::VtkPropertyWrap()
{ }

VtkPropertyWrap::VtkPropertyWrap(vtkSmartPointer<vtkProperty> _native)
{ native = _native; }

VtkPropertyWrap::~VtkPropertyWrap()
{ }

void VtkPropertyWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkProperty").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("Property").ToLocalChecked(), ConstructorGetter);
}

void VtkPropertyWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkPropertyWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkPropertyWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddShaderVariable", AddShaderVariable);
	Nan::SetPrototypeMethod(tpl, "addShaderVariable", AddShaderVariable);

	Nan::SetPrototypeMethod(tpl, "BackfaceCullingOff", BackfaceCullingOff);
	Nan::SetPrototypeMethod(tpl, "backfaceCullingOff", BackfaceCullingOff);

	Nan::SetPrototypeMethod(tpl, "BackfaceCullingOn", BackfaceCullingOn);
	Nan::SetPrototypeMethod(tpl, "backfaceCullingOn", BackfaceCullingOn);

	Nan::SetPrototypeMethod(tpl, "BackfaceRender", BackfaceRender);
	Nan::SetPrototypeMethod(tpl, "backfaceRender", BackfaceRender);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "EdgeVisibilityOff", EdgeVisibilityOff);
	Nan::SetPrototypeMethod(tpl, "edgeVisibilityOff", EdgeVisibilityOff);

	Nan::SetPrototypeMethod(tpl, "EdgeVisibilityOn", EdgeVisibilityOn);
	Nan::SetPrototypeMethod(tpl, "edgeVisibilityOn", EdgeVisibilityOn);

	Nan::SetPrototypeMethod(tpl, "FrontfaceCullingOff", FrontfaceCullingOff);
	Nan::SetPrototypeMethod(tpl, "frontfaceCullingOff", FrontfaceCullingOff);

	Nan::SetPrototypeMethod(tpl, "FrontfaceCullingOn", FrontfaceCullingOn);
	Nan::SetPrototypeMethod(tpl, "frontfaceCullingOn", FrontfaceCullingOn);

	Nan::SetPrototypeMethod(tpl, "GetAmbient", GetAmbient);
	Nan::SetPrototypeMethod(tpl, "getAmbient", GetAmbient);

	Nan::SetPrototypeMethod(tpl, "GetAmbientColor", GetAmbientColor);
	Nan::SetPrototypeMethod(tpl, "getAmbientColor", GetAmbientColor);

	Nan::SetPrototypeMethod(tpl, "GetAmbientMaxValue", GetAmbientMaxValue);
	Nan::SetPrototypeMethod(tpl, "getAmbientMaxValue", GetAmbientMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetAmbientMinValue", GetAmbientMinValue);
	Nan::SetPrototypeMethod(tpl, "getAmbientMinValue", GetAmbientMinValue);

	Nan::SetPrototypeMethod(tpl, "GetBackfaceCulling", GetBackfaceCulling);
	Nan::SetPrototypeMethod(tpl, "getBackfaceCulling", GetBackfaceCulling);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetColor", GetColor);
	Nan::SetPrototypeMethod(tpl, "getColor", GetColor);

	Nan::SetPrototypeMethod(tpl, "GetDiffuse", GetDiffuse);
	Nan::SetPrototypeMethod(tpl, "getDiffuse", GetDiffuse);

	Nan::SetPrototypeMethod(tpl, "GetDiffuseColor", GetDiffuseColor);
	Nan::SetPrototypeMethod(tpl, "getDiffuseColor", GetDiffuseColor);

	Nan::SetPrototypeMethod(tpl, "GetDiffuseMaxValue", GetDiffuseMaxValue);
	Nan::SetPrototypeMethod(tpl, "getDiffuseMaxValue", GetDiffuseMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetDiffuseMinValue", GetDiffuseMinValue);
	Nan::SetPrototypeMethod(tpl, "getDiffuseMinValue", GetDiffuseMinValue);

	Nan::SetPrototypeMethod(tpl, "GetEdgeColor", GetEdgeColor);
	Nan::SetPrototypeMethod(tpl, "getEdgeColor", GetEdgeColor);

	Nan::SetPrototypeMethod(tpl, "GetEdgeVisibility", GetEdgeVisibility);
	Nan::SetPrototypeMethod(tpl, "getEdgeVisibility", GetEdgeVisibility);

	Nan::SetPrototypeMethod(tpl, "GetFrontfaceCulling", GetFrontfaceCulling);
	Nan::SetPrototypeMethod(tpl, "getFrontfaceCulling", GetFrontfaceCulling);

	Nan::SetPrototypeMethod(tpl, "GetInterpolation", GetInterpolation);
	Nan::SetPrototypeMethod(tpl, "getInterpolation", GetInterpolation);

	Nan::SetPrototypeMethod(tpl, "GetInterpolationAsString", GetInterpolationAsString);
	Nan::SetPrototypeMethod(tpl, "getInterpolationAsString", GetInterpolationAsString);

	Nan::SetPrototypeMethod(tpl, "GetInterpolationMaxValue", GetInterpolationMaxValue);
	Nan::SetPrototypeMethod(tpl, "getInterpolationMaxValue", GetInterpolationMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetInterpolationMinValue", GetInterpolationMinValue);
	Nan::SetPrototypeMethod(tpl, "getInterpolationMinValue", GetInterpolationMinValue);

	Nan::SetPrototypeMethod(tpl, "GetLighting", GetLighting);
	Nan::SetPrototypeMethod(tpl, "getLighting", GetLighting);

	Nan::SetPrototypeMethod(tpl, "GetLineStipplePattern", GetLineStipplePattern);
	Nan::SetPrototypeMethod(tpl, "getLineStipplePattern", GetLineStipplePattern);

	Nan::SetPrototypeMethod(tpl, "GetLineStippleRepeatFactor", GetLineStippleRepeatFactor);
	Nan::SetPrototypeMethod(tpl, "getLineStippleRepeatFactor", GetLineStippleRepeatFactor);

	Nan::SetPrototypeMethod(tpl, "GetLineStippleRepeatFactorMaxValue", GetLineStippleRepeatFactorMaxValue);
	Nan::SetPrototypeMethod(tpl, "getLineStippleRepeatFactorMaxValue", GetLineStippleRepeatFactorMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetLineStippleRepeatFactorMinValue", GetLineStippleRepeatFactorMinValue);
	Nan::SetPrototypeMethod(tpl, "getLineStippleRepeatFactorMinValue", GetLineStippleRepeatFactorMinValue);

	Nan::SetPrototypeMethod(tpl, "GetLineWidth", GetLineWidth);
	Nan::SetPrototypeMethod(tpl, "getLineWidth", GetLineWidth);

	Nan::SetPrototypeMethod(tpl, "GetLineWidthMaxValue", GetLineWidthMaxValue);
	Nan::SetPrototypeMethod(tpl, "getLineWidthMaxValue", GetLineWidthMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetLineWidthMinValue", GetLineWidthMinValue);
	Nan::SetPrototypeMethod(tpl, "getLineWidthMinValue", GetLineWidthMinValue);

	Nan::SetPrototypeMethod(tpl, "GetMaterialName", GetMaterialName);
	Nan::SetPrototypeMethod(tpl, "getMaterialName", GetMaterialName);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfTextures", GetNumberOfTextures);
	Nan::SetPrototypeMethod(tpl, "getNumberOfTextures", GetNumberOfTextures);

	Nan::SetPrototypeMethod(tpl, "GetOpacity", GetOpacity);
	Nan::SetPrototypeMethod(tpl, "getOpacity", GetOpacity);

	Nan::SetPrototypeMethod(tpl, "GetOpacityMaxValue", GetOpacityMaxValue);
	Nan::SetPrototypeMethod(tpl, "getOpacityMaxValue", GetOpacityMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetOpacityMinValue", GetOpacityMinValue);
	Nan::SetPrototypeMethod(tpl, "getOpacityMinValue", GetOpacityMinValue);

	Nan::SetPrototypeMethod(tpl, "GetPointSize", GetPointSize);
	Nan::SetPrototypeMethod(tpl, "getPointSize", GetPointSize);

	Nan::SetPrototypeMethod(tpl, "GetPointSizeMaxValue", GetPointSizeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getPointSizeMaxValue", GetPointSizeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetPointSizeMinValue", GetPointSizeMinValue);
	Nan::SetPrototypeMethod(tpl, "getPointSizeMinValue", GetPointSizeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetRepresentation", GetRepresentation);
	Nan::SetPrototypeMethod(tpl, "getRepresentation", GetRepresentation);

	Nan::SetPrototypeMethod(tpl, "GetRepresentationAsString", GetRepresentationAsString);
	Nan::SetPrototypeMethod(tpl, "getRepresentationAsString", GetRepresentationAsString);

	Nan::SetPrototypeMethod(tpl, "GetRepresentationMaxValue", GetRepresentationMaxValue);
	Nan::SetPrototypeMethod(tpl, "getRepresentationMaxValue", GetRepresentationMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetRepresentationMinValue", GetRepresentationMinValue);
	Nan::SetPrototypeMethod(tpl, "getRepresentationMinValue", GetRepresentationMinValue);

	Nan::SetPrototypeMethod(tpl, "GetShaderDeviceAdapter2", GetShaderDeviceAdapter2);
	Nan::SetPrototypeMethod(tpl, "getShaderDeviceAdapter2", GetShaderDeviceAdapter2);

	Nan::SetPrototypeMethod(tpl, "GetShading", GetShading);
	Nan::SetPrototypeMethod(tpl, "getShading", GetShading);

	Nan::SetPrototypeMethod(tpl, "GetSpecular", GetSpecular);
	Nan::SetPrototypeMethod(tpl, "getSpecular", GetSpecular);

	Nan::SetPrototypeMethod(tpl, "GetSpecularColor", GetSpecularColor);
	Nan::SetPrototypeMethod(tpl, "getSpecularColor", GetSpecularColor);

	Nan::SetPrototypeMethod(tpl, "GetSpecularMaxValue", GetSpecularMaxValue);
	Nan::SetPrototypeMethod(tpl, "getSpecularMaxValue", GetSpecularMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetSpecularMinValue", GetSpecularMinValue);
	Nan::SetPrototypeMethod(tpl, "getSpecularMinValue", GetSpecularMinValue);

	Nan::SetPrototypeMethod(tpl, "GetSpecularPower", GetSpecularPower);
	Nan::SetPrototypeMethod(tpl, "getSpecularPower", GetSpecularPower);

	Nan::SetPrototypeMethod(tpl, "GetSpecularPowerMaxValue", GetSpecularPowerMaxValue);
	Nan::SetPrototypeMethod(tpl, "getSpecularPowerMaxValue", GetSpecularPowerMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetSpecularPowerMinValue", GetSpecularPowerMinValue);
	Nan::SetPrototypeMethod(tpl, "getSpecularPowerMinValue", GetSpecularPowerMinValue);

	Nan::SetPrototypeMethod(tpl, "GetTexture", GetTexture);
	Nan::SetPrototypeMethod(tpl, "getTexture", GetTexture);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "LightingOff", LightingOff);
	Nan::SetPrototypeMethod(tpl, "lightingOff", LightingOff);

	Nan::SetPrototypeMethod(tpl, "LightingOn", LightingOn);
	Nan::SetPrototypeMethod(tpl, "lightingOn", LightingOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PostRender", PostRender);
	Nan::SetPrototypeMethod(tpl, "postRender", PostRender);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "RemoveAllTextures", RemoveAllTextures);
	Nan::SetPrototypeMethod(tpl, "removeAllTextures", RemoveAllTextures);

	Nan::SetPrototypeMethod(tpl, "RemoveTexture", RemoveTexture);
	Nan::SetPrototypeMethod(tpl, "removeTexture", RemoveTexture);

	Nan::SetPrototypeMethod(tpl, "Render", Render);
	Nan::SetPrototypeMethod(tpl, "render", Render);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAmbient", SetAmbient);
	Nan::SetPrototypeMethod(tpl, "setAmbient", SetAmbient);

	Nan::SetPrototypeMethod(tpl, "SetAmbientColor", SetAmbientColor);
	Nan::SetPrototypeMethod(tpl, "setAmbientColor", SetAmbientColor);

	Nan::SetPrototypeMethod(tpl, "SetBackfaceCulling", SetBackfaceCulling);
	Nan::SetPrototypeMethod(tpl, "setBackfaceCulling", SetBackfaceCulling);

	Nan::SetPrototypeMethod(tpl, "SetColor", SetColor);
	Nan::SetPrototypeMethod(tpl, "setColor", SetColor);

	Nan::SetPrototypeMethod(tpl, "SetDiffuse", SetDiffuse);
	Nan::SetPrototypeMethod(tpl, "setDiffuse", SetDiffuse);

	Nan::SetPrototypeMethod(tpl, "SetDiffuseColor", SetDiffuseColor);
	Nan::SetPrototypeMethod(tpl, "setDiffuseColor", SetDiffuseColor);

	Nan::SetPrototypeMethod(tpl, "SetEdgeColor", SetEdgeColor);
	Nan::SetPrototypeMethod(tpl, "setEdgeColor", SetEdgeColor);

	Nan::SetPrototypeMethod(tpl, "SetEdgeVisibility", SetEdgeVisibility);
	Nan::SetPrototypeMethod(tpl, "setEdgeVisibility", SetEdgeVisibility);

	Nan::SetPrototypeMethod(tpl, "SetFrontfaceCulling", SetFrontfaceCulling);
	Nan::SetPrototypeMethod(tpl, "setFrontfaceCulling", SetFrontfaceCulling);

	Nan::SetPrototypeMethod(tpl, "SetInterpolation", SetInterpolation);
	Nan::SetPrototypeMethod(tpl, "setInterpolation", SetInterpolation);

	Nan::SetPrototypeMethod(tpl, "SetInterpolationToFlat", SetInterpolationToFlat);
	Nan::SetPrototypeMethod(tpl, "setInterpolationToFlat", SetInterpolationToFlat);

	Nan::SetPrototypeMethod(tpl, "SetInterpolationToGouraud", SetInterpolationToGouraud);
	Nan::SetPrototypeMethod(tpl, "setInterpolationToGouraud", SetInterpolationToGouraud);

	Nan::SetPrototypeMethod(tpl, "SetInterpolationToPhong", SetInterpolationToPhong);
	Nan::SetPrototypeMethod(tpl, "setInterpolationToPhong", SetInterpolationToPhong);

	Nan::SetPrototypeMethod(tpl, "SetLighting", SetLighting);
	Nan::SetPrototypeMethod(tpl, "setLighting", SetLighting);

	Nan::SetPrototypeMethod(tpl, "SetLineStipplePattern", SetLineStipplePattern);
	Nan::SetPrototypeMethod(tpl, "setLineStipplePattern", SetLineStipplePattern);

	Nan::SetPrototypeMethod(tpl, "SetLineStippleRepeatFactor", SetLineStippleRepeatFactor);
	Nan::SetPrototypeMethod(tpl, "setLineStippleRepeatFactor", SetLineStippleRepeatFactor);

	Nan::SetPrototypeMethod(tpl, "SetLineWidth", SetLineWidth);
	Nan::SetPrototypeMethod(tpl, "setLineWidth", SetLineWidth);

	Nan::SetPrototypeMethod(tpl, "SetOpacity", SetOpacity);
	Nan::SetPrototypeMethod(tpl, "setOpacity", SetOpacity);

	Nan::SetPrototypeMethod(tpl, "SetPointSize", SetPointSize);
	Nan::SetPrototypeMethod(tpl, "setPointSize", SetPointSize);

	Nan::SetPrototypeMethod(tpl, "SetRepresentation", SetRepresentation);
	Nan::SetPrototypeMethod(tpl, "setRepresentation", SetRepresentation);

	Nan::SetPrototypeMethod(tpl, "SetRepresentationToPoints", SetRepresentationToPoints);
	Nan::SetPrototypeMethod(tpl, "setRepresentationToPoints", SetRepresentationToPoints);

	Nan::SetPrototypeMethod(tpl, "SetRepresentationToSurface", SetRepresentationToSurface);
	Nan::SetPrototypeMethod(tpl, "setRepresentationToSurface", SetRepresentationToSurface);

	Nan::SetPrototypeMethod(tpl, "SetRepresentationToWireframe", SetRepresentationToWireframe);
	Nan::SetPrototypeMethod(tpl, "setRepresentationToWireframe", SetRepresentationToWireframe);

	Nan::SetPrototypeMethod(tpl, "SetShading", SetShading);
	Nan::SetPrototypeMethod(tpl, "setShading", SetShading);

	Nan::SetPrototypeMethod(tpl, "SetSpecular", SetSpecular);
	Nan::SetPrototypeMethod(tpl, "setSpecular", SetSpecular);

	Nan::SetPrototypeMethod(tpl, "SetSpecularColor", SetSpecularColor);
	Nan::SetPrototypeMethod(tpl, "setSpecularColor", SetSpecularColor);

	Nan::SetPrototypeMethod(tpl, "SetSpecularPower", SetSpecularPower);
	Nan::SetPrototypeMethod(tpl, "setSpecularPower", SetSpecularPower);

	Nan::SetPrototypeMethod(tpl, "SetTexture", SetTexture);
	Nan::SetPrototypeMethod(tpl, "setTexture", SetTexture);

	Nan::SetPrototypeMethod(tpl, "ShadingOff", ShadingOff);
	Nan::SetPrototypeMethod(tpl, "shadingOff", ShadingOff);

	Nan::SetPrototypeMethod(tpl, "ShadingOn", ShadingOn);
	Nan::SetPrototypeMethod(tpl, "shadingOn", ShadingOn);

#ifdef VTK_NODE_PLUS_VTKPROPERTYWRAP_INITPTPL
	VTK_NODE_PLUS_VTKPROPERTYWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkPropertyWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkProperty> native = vtkSmartPointer<vtkProperty>::New();
		VtkPropertyWrap* obj = new VtkPropertyWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkPropertyWrap::AddShaderVariable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
										if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->AddShaderVariable(
						*a0,
						info[1]->NumberValue(),
						info[2]->NumberValue(),
						info[3]->NumberValue()
					);
					return;
				}
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->AddShaderVariable(
					*a0,
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->AddShaderVariable(
				*a0,
				info[1]->NumberValue()
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
										if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->AddShaderVariable(
						*a0,
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					return;
				}
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->AddShaderVariable(
					*a0,
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				return;
			}
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->AddShaderVariable(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
										if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->AddShaderVariable(
						*a0,
						info[1]->NumberValue(),
						info[2]->NumberValue(),
						info[3]->NumberValue()
					);
					return;
				}
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->AddShaderVariable(
					*a0,
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->AddShaderVariable(
				*a0,
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::BackfaceCullingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BackfaceCullingOff();
}

void VtkPropertyWrap::BackfaceCullingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BackfaceCullingOn();
}

void VtkPropertyWrap::BackfaceRender(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkActorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkActorWrap *a0 = ObjectWrap::Unwrap<VtkActorWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[1]))
		{
			VtkRendererWrap *a1 = ObjectWrap::Unwrap<VtkRendererWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->BackfaceRender(
				(vtkActor *) a0->native.GetPointer(),
				(vtkRenderer *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropertyWrap *a0 = ObjectWrap::Unwrap<VtkPropertyWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DeepCopy(
			(vtkProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::EdgeVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EdgeVisibilityOff();
}

void VtkPropertyWrap::EdgeVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EdgeVisibilityOn();
}

void VtkPropertyWrap::FrontfaceCullingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FrontfaceCullingOff();
}

void VtkPropertyWrap::FrontfaceCullingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FrontfaceCullingOn();
}

void VtkPropertyWrap::GetAmbient(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAmbient();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetAmbientColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAmbientColor();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkPropertyWrap::GetAmbientMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAmbientMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetAmbientMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAmbientMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetBackfaceCulling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBackfaceCulling();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPropertyWrap::GetColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetColor(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetColor(
			b0
		);
		return;
	}
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetColor();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkPropertyWrap::GetDiffuse(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDiffuse();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetDiffuseColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDiffuseColor();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkPropertyWrap::GetDiffuseMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDiffuseMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetDiffuseMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDiffuseMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetEdgeColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEdgeColor();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkPropertyWrap::GetEdgeVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEdgeVisibility();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetFrontfaceCulling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFrontfaceCulling();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetInterpolation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInterpolation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetInterpolationAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInterpolationAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPropertyWrap::GetInterpolationMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInterpolationMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetInterpolationMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInterpolationMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetLighting(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLighting();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetLineStipplePattern(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLineStipplePattern();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetLineStippleRepeatFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLineStippleRepeatFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetLineStippleRepeatFactorMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLineStippleRepeatFactorMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetLineStippleRepeatFactorMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLineStippleRepeatFactorMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetLineWidth(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	float r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLineWidth();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetLineWidthMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	float r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLineWidthMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetLineWidthMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	float r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLineWidthMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetMaterialName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaterialName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPropertyWrap::GetNumberOfTextures(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfTextures();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetOpacity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOpacity();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetOpacityMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOpacityMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetOpacityMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOpacityMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetPointSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	float r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetPointSizeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	float r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointSizeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetPointSizeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	float r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointSizeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRepresentation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetRepresentationAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRepresentationAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPropertyWrap::GetRepresentationMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRepresentationMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetRepresentationMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRepresentationMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetShaderDeviceAdapter2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	vtkShaderDeviceAdapter2 * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetShaderDeviceAdapter2();
	VtkShaderDeviceAdapter2Wrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkShaderDeviceAdapter2Wrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkShaderDeviceAdapter2Wrap *w = new VtkShaderDeviceAdapter2Wrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPropertyWrap::GetShading(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetShading();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetSpecular(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpecular();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetSpecularColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpecularColor();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkPropertyWrap::GetSpecularMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpecularMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetSpecularMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpecularMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetSpecularPower(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpecularPower();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetSpecularPowerMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpecularPowerMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetSpecularPowerMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpecularPowerMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPropertyWrap::GetTexture(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		vtkTexture * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetTexture(
			*a0
		);
		VtkTextureWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkTextureWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkTextureWrap *w = new VtkTextureWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkTexture * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetTexture(
			info[0]->Int32Value()
		);
		VtkTextureWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkTextureWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkTextureWrap *w = new VtkTextureWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::LightingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LightingOff();
}

void VtkPropertyWrap::LightingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LightingOn();
}

void VtkPropertyWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPropertyWrap::PostRender(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkActorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkActorWrap *a0 = ObjectWrap::Unwrap<VtkActorWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[1]))
		{
			VtkRendererWrap *a1 = ObjectWrap::Unwrap<VtkRendererWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->PostRender(
				(vtkActor *) a0->native.GetPointer(),
				(vtkRenderer *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::RemoveAllTextures(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllTextures();
}

void VtkPropertyWrap::RemoveTexture(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveTexture(
			*a0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveTexture(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::Render(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkActorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkActorWrap *a0 = ObjectWrap::Unwrap<VtkActorWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[1]))
		{
			VtkRendererWrap *a1 = ObjectWrap::Unwrap<VtkRendererWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->Render(
				(vtkActor *) a0->native.GetPointer(),
				(vtkRenderer *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkProperty * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkPropertyWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPropertyWrap *w = new VtkPropertyWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetAmbient(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAmbient(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetAmbientColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAmbientColor(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAmbientColor(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetAmbientColor(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetBackfaceCulling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBackfaceCulling(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColor(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColor(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetColor(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetDiffuse(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDiffuse(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetDiffuseColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDiffuseColor(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDiffuseColor(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetDiffuseColor(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetEdgeColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEdgeColor(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEdgeColor(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetEdgeColor(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetEdgeVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEdgeVisibility(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetFrontfaceCulling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFrontfaceCulling(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetInterpolation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInterpolation(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetInterpolationToFlat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInterpolationToFlat();
}

void VtkPropertyWrap::SetInterpolationToGouraud(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInterpolationToGouraud();
}

void VtkPropertyWrap::SetInterpolationToPhong(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInterpolationToPhong();
}

void VtkPropertyWrap::SetLighting(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLighting(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetLineStipplePattern(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLineStipplePattern(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetLineStippleRepeatFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLineStippleRepeatFactor(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetLineWidth(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLineWidth(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetOpacity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOpacity(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetPointSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPointSize(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRepresentation(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetRepresentationToPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetRepresentationToPoints();
}

void VtkPropertyWrap::SetRepresentationToSurface(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetRepresentationToSurface();
}

void VtkPropertyWrap::SetRepresentationToWireframe(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetRepresentationToWireframe();
}

void VtkPropertyWrap::SetShading(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetShading(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetSpecular(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSpecular(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetSpecularColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSpecularColor(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSpecularColor(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetSpecularColor(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetSpecularPower(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSpecularPower(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::SetTexture(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkTextureWrap::ptpl))->HasInstance(info[1]))
		{
			VtkTextureWrap *a1 = ObjectWrap::Unwrap<VtkTextureWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetTexture(
				*a0,
				(vtkTexture *) a1->native.GetPointer()
			);
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkTextureWrap::ptpl))->HasInstance(info[1]))
		{
			VtkTextureWrap *a1 = ObjectWrap::Unwrap<VtkTextureWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetTexture(
				info[0]->Int32Value(),
				(vtkTexture *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPropertyWrap::ShadingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ShadingOff();
}

void VtkPropertyWrap::ShadingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPropertyWrap *wrapper = ObjectWrap::Unwrap<VtkPropertyWrap>(info.Holder());
	vtkProperty *native = (vtkProperty *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ShadingOn();
}

