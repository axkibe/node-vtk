/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataSourceWidgetWrap.h"
#include "vtkImplicitPlaneWidgetWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPolyDataWrap.h"
#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkPlaneWrap.h"
#include "vtkPropertyWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkImplicitPlaneWidgetWrap::ptpl;

VtkImplicitPlaneWidgetWrap::VtkImplicitPlaneWidgetWrap()
{ }

VtkImplicitPlaneWidgetWrap::VtkImplicitPlaneWidgetWrap(vtkSmartPointer<vtkImplicitPlaneWidget> _native)
{ native = _native; }

VtkImplicitPlaneWidgetWrap::~VtkImplicitPlaneWidgetWrap()
{ }

void VtkImplicitPlaneWidgetWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkImplicitPlaneWidget").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ImplicitPlaneWidget").ToLocalChecked(), ConstructorGetter);
}

void VtkImplicitPlaneWidgetWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkImplicitPlaneWidgetWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataSourceWidgetWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataSourceWidgetWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkImplicitPlaneWidgetWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "DrawPlaneOff", DrawPlaneOff);
	Nan::SetPrototypeMethod(tpl, "drawPlaneOff", DrawPlaneOff);

	Nan::SetPrototypeMethod(tpl, "DrawPlaneOn", DrawPlaneOn);
	Nan::SetPrototypeMethod(tpl, "drawPlaneOn", DrawPlaneOn);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDiagonalRatio", GetDiagonalRatio);
	Nan::SetPrototypeMethod(tpl, "getDiagonalRatio", GetDiagonalRatio);

	Nan::SetPrototypeMethod(tpl, "GetDiagonalRatioMaxValue", GetDiagonalRatioMaxValue);
	Nan::SetPrototypeMethod(tpl, "getDiagonalRatioMaxValue", GetDiagonalRatioMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetDiagonalRatioMinValue", GetDiagonalRatioMinValue);
	Nan::SetPrototypeMethod(tpl, "getDiagonalRatioMinValue", GetDiagonalRatioMinValue);

	Nan::SetPrototypeMethod(tpl, "GetDrawPlane", GetDrawPlane);
	Nan::SetPrototypeMethod(tpl, "getDrawPlane", GetDrawPlane);

	Nan::SetPrototypeMethod(tpl, "GetEdgesProperty", GetEdgesProperty);
	Nan::SetPrototypeMethod(tpl, "getEdgesProperty", GetEdgesProperty);

	Nan::SetPrototypeMethod(tpl, "GetNormal", GetNormal);
	Nan::SetPrototypeMethod(tpl, "getNormal", GetNormal);

	Nan::SetPrototypeMethod(tpl, "GetNormalProperty", GetNormalProperty);
	Nan::SetPrototypeMethod(tpl, "getNormalProperty", GetNormalProperty);

	Nan::SetPrototypeMethod(tpl, "GetNormalToXAxis", GetNormalToXAxis);
	Nan::SetPrototypeMethod(tpl, "getNormalToXAxis", GetNormalToXAxis);

	Nan::SetPrototypeMethod(tpl, "GetNormalToYAxis", GetNormalToYAxis);
	Nan::SetPrototypeMethod(tpl, "getNormalToYAxis", GetNormalToYAxis);

	Nan::SetPrototypeMethod(tpl, "GetNormalToZAxis", GetNormalToZAxis);
	Nan::SetPrototypeMethod(tpl, "getNormalToZAxis", GetNormalToZAxis);

	Nan::SetPrototypeMethod(tpl, "GetOrigin", GetOrigin);
	Nan::SetPrototypeMethod(tpl, "getOrigin", GetOrigin);

	Nan::SetPrototypeMethod(tpl, "GetOriginTranslation", GetOriginTranslation);
	Nan::SetPrototypeMethod(tpl, "getOriginTranslation", GetOriginTranslation);

	Nan::SetPrototypeMethod(tpl, "GetOutlineProperty", GetOutlineProperty);
	Nan::SetPrototypeMethod(tpl, "getOutlineProperty", GetOutlineProperty);

	Nan::SetPrototypeMethod(tpl, "GetOutlineTranslation", GetOutlineTranslation);
	Nan::SetPrototypeMethod(tpl, "getOutlineTranslation", GetOutlineTranslation);

	Nan::SetPrototypeMethod(tpl, "GetOutsideBounds", GetOutsideBounds);
	Nan::SetPrototypeMethod(tpl, "getOutsideBounds", GetOutsideBounds);

	Nan::SetPrototypeMethod(tpl, "GetPlane", GetPlane);
	Nan::SetPrototypeMethod(tpl, "getPlane", GetPlane);

	Nan::SetPrototypeMethod(tpl, "GetPlaneProperty", GetPlaneProperty);
	Nan::SetPrototypeMethod(tpl, "getPlaneProperty", GetPlaneProperty);

	Nan::SetPrototypeMethod(tpl, "GetPolyData", GetPolyData);
	Nan::SetPrototypeMethod(tpl, "getPolyData", GetPolyData);

	Nan::SetPrototypeMethod(tpl, "GetPolyDataAlgorithm", GetPolyDataAlgorithm);
	Nan::SetPrototypeMethod(tpl, "getPolyDataAlgorithm", GetPolyDataAlgorithm);

	Nan::SetPrototypeMethod(tpl, "GetScaleEnabled", GetScaleEnabled);
	Nan::SetPrototypeMethod(tpl, "getScaleEnabled", GetScaleEnabled);

	Nan::SetPrototypeMethod(tpl, "GetSelectedNormalProperty", GetSelectedNormalProperty);
	Nan::SetPrototypeMethod(tpl, "getSelectedNormalProperty", GetSelectedNormalProperty);

	Nan::SetPrototypeMethod(tpl, "GetSelectedOutlineProperty", GetSelectedOutlineProperty);
	Nan::SetPrototypeMethod(tpl, "getSelectedOutlineProperty", GetSelectedOutlineProperty);

	Nan::SetPrototypeMethod(tpl, "GetSelectedPlaneProperty", GetSelectedPlaneProperty);
	Nan::SetPrototypeMethod(tpl, "getSelectedPlaneProperty", GetSelectedPlaneProperty);

	Nan::SetPrototypeMethod(tpl, "GetTubing", GetTubing);
	Nan::SetPrototypeMethod(tpl, "getTubing", GetTubing);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "NormalToXAxisOff", NormalToXAxisOff);
	Nan::SetPrototypeMethod(tpl, "normalToXAxisOff", NormalToXAxisOff);

	Nan::SetPrototypeMethod(tpl, "NormalToXAxisOn", NormalToXAxisOn);
	Nan::SetPrototypeMethod(tpl, "normalToXAxisOn", NormalToXAxisOn);

	Nan::SetPrototypeMethod(tpl, "NormalToYAxisOff", NormalToYAxisOff);
	Nan::SetPrototypeMethod(tpl, "normalToYAxisOff", NormalToYAxisOff);

	Nan::SetPrototypeMethod(tpl, "NormalToYAxisOn", NormalToYAxisOn);
	Nan::SetPrototypeMethod(tpl, "normalToYAxisOn", NormalToYAxisOn);

	Nan::SetPrototypeMethod(tpl, "NormalToZAxisOff", NormalToZAxisOff);
	Nan::SetPrototypeMethod(tpl, "normalToZAxisOff", NormalToZAxisOff);

	Nan::SetPrototypeMethod(tpl, "NormalToZAxisOn", NormalToZAxisOn);
	Nan::SetPrototypeMethod(tpl, "normalToZAxisOn", NormalToZAxisOn);

	Nan::SetPrototypeMethod(tpl, "OriginTranslationOff", OriginTranslationOff);
	Nan::SetPrototypeMethod(tpl, "originTranslationOff", OriginTranslationOff);

	Nan::SetPrototypeMethod(tpl, "OriginTranslationOn", OriginTranslationOn);
	Nan::SetPrototypeMethod(tpl, "originTranslationOn", OriginTranslationOn);

	Nan::SetPrototypeMethod(tpl, "OutlineTranslationOff", OutlineTranslationOff);
	Nan::SetPrototypeMethod(tpl, "outlineTranslationOff", OutlineTranslationOff);

	Nan::SetPrototypeMethod(tpl, "OutlineTranslationOn", OutlineTranslationOn);
	Nan::SetPrototypeMethod(tpl, "outlineTranslationOn", OutlineTranslationOn);

	Nan::SetPrototypeMethod(tpl, "OutsideBoundsOff", OutsideBoundsOff);
	Nan::SetPrototypeMethod(tpl, "outsideBoundsOff", OutsideBoundsOff);

	Nan::SetPrototypeMethod(tpl, "OutsideBoundsOn", OutsideBoundsOn);
	Nan::SetPrototypeMethod(tpl, "outsideBoundsOn", OutsideBoundsOn);

	Nan::SetPrototypeMethod(tpl, "PlaceWidget", PlaceWidget);
	Nan::SetPrototypeMethod(tpl, "placeWidget", PlaceWidget);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "ScaleEnabledOff", ScaleEnabledOff);
	Nan::SetPrototypeMethod(tpl, "scaleEnabledOff", ScaleEnabledOff);

	Nan::SetPrototypeMethod(tpl, "ScaleEnabledOn", ScaleEnabledOn);
	Nan::SetPrototypeMethod(tpl, "scaleEnabledOn", ScaleEnabledOn);

	Nan::SetPrototypeMethod(tpl, "SetDiagonalRatio", SetDiagonalRatio);
	Nan::SetPrototypeMethod(tpl, "setDiagonalRatio", SetDiagonalRatio);

	Nan::SetPrototypeMethod(tpl, "SetDrawPlane", SetDrawPlane);
	Nan::SetPrototypeMethod(tpl, "setDrawPlane", SetDrawPlane);

	Nan::SetPrototypeMethod(tpl, "SetEnabled", SetEnabled);
	Nan::SetPrototypeMethod(tpl, "setEnabled", SetEnabled);

	Nan::SetPrototypeMethod(tpl, "SetNormal", SetNormal);
	Nan::SetPrototypeMethod(tpl, "setNormal", SetNormal);

	Nan::SetPrototypeMethod(tpl, "SetNormalToXAxis", SetNormalToXAxis);
	Nan::SetPrototypeMethod(tpl, "setNormalToXAxis", SetNormalToXAxis);

	Nan::SetPrototypeMethod(tpl, "SetNormalToYAxis", SetNormalToYAxis);
	Nan::SetPrototypeMethod(tpl, "setNormalToYAxis", SetNormalToYAxis);

	Nan::SetPrototypeMethod(tpl, "SetNormalToZAxis", SetNormalToZAxis);
	Nan::SetPrototypeMethod(tpl, "setNormalToZAxis", SetNormalToZAxis);

	Nan::SetPrototypeMethod(tpl, "SetOrigin", SetOrigin);
	Nan::SetPrototypeMethod(tpl, "setOrigin", SetOrigin);

	Nan::SetPrototypeMethod(tpl, "SetOriginTranslation", SetOriginTranslation);
	Nan::SetPrototypeMethod(tpl, "setOriginTranslation", SetOriginTranslation);

	Nan::SetPrototypeMethod(tpl, "SetOutlineTranslation", SetOutlineTranslation);
	Nan::SetPrototypeMethod(tpl, "setOutlineTranslation", SetOutlineTranslation);

	Nan::SetPrototypeMethod(tpl, "SetOutsideBounds", SetOutsideBounds);
	Nan::SetPrototypeMethod(tpl, "setOutsideBounds", SetOutsideBounds);

	Nan::SetPrototypeMethod(tpl, "SetScaleEnabled", SetScaleEnabled);
	Nan::SetPrototypeMethod(tpl, "setScaleEnabled", SetScaleEnabled);

	Nan::SetPrototypeMethod(tpl, "SetTubing", SetTubing);
	Nan::SetPrototypeMethod(tpl, "setTubing", SetTubing);

	Nan::SetPrototypeMethod(tpl, "SizeHandles", SizeHandles);
	Nan::SetPrototypeMethod(tpl, "sizeHandles", SizeHandles);

	Nan::SetPrototypeMethod(tpl, "TubingOff", TubingOff);
	Nan::SetPrototypeMethod(tpl, "tubingOff", TubingOff);

	Nan::SetPrototypeMethod(tpl, "TubingOn", TubingOn);
	Nan::SetPrototypeMethod(tpl, "tubingOn", TubingOn);

	Nan::SetPrototypeMethod(tpl, "UpdatePlacement", UpdatePlacement);
	Nan::SetPrototypeMethod(tpl, "updatePlacement", UpdatePlacement);

	ptpl.Reset( tpl );
}

void VtkImplicitPlaneWidgetWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImplicitPlaneWidget> native = vtkSmartPointer<vtkImplicitPlaneWidget>::New();
		VtkImplicitPlaneWidgetWrap* obj = new VtkImplicitPlaneWidgetWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImplicitPlaneWidgetWrap::DrawPlaneOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DrawPlaneOff();
}

void VtkImplicitPlaneWidgetWrap::DrawPlaneOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DrawPlaneOn();
}

void VtkImplicitPlaneWidgetWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImplicitPlaneWidgetWrap::GetDiagonalRatio(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDiagonalRatio();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneWidgetWrap::GetDiagonalRatioMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDiagonalRatioMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneWidgetWrap::GetDiagonalRatioMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDiagonalRatioMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneWidgetWrap::GetDrawPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDrawPlane();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneWidgetWrap::GetEdgesProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEdgesProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneWidgetWrap::GetNormal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetNormal(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetNormal(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::GetNormalProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormalProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneWidgetWrap::GetNormalToXAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormalToXAxis();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneWidgetWrap::GetNormalToYAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormalToYAxis();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneWidgetWrap::GetNormalToZAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormalToZAxis();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneWidgetWrap::GetOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetOrigin(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetOrigin(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::GetOriginTranslation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOriginTranslation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneWidgetWrap::GetOutlineProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutlineProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneWidgetWrap::GetOutlineTranslation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutlineTranslation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneWidgetWrap::GetOutsideBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutsideBounds();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneWidgetWrap::GetPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPlaneWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPlaneWrap *a0 = ObjectWrap::Unwrap<VtkPlaneWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetPlane(
			(vtkPlane *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::GetPlaneProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPlaneProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneWidgetWrap::GetPolyData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetPolyData(
			(vtkPolyData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::GetPolyDataAlgorithm(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	vtkPolyDataAlgorithm * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPolyDataAlgorithm();
		VtkPolyDataAlgorithmWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataAlgorithmWrap *w = new VtkPolyDataAlgorithmWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneWidgetWrap::GetScaleEnabled(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScaleEnabled();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneWidgetWrap::GetSelectedNormalProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedNormalProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneWidgetWrap::GetSelectedOutlineProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedOutlineProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneWidgetWrap::GetSelectedPlaneProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedPlaneProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneWidgetWrap::GetTubing(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTubing();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneWidgetWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	vtkImplicitPlaneWidget * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkImplicitPlaneWidgetWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImplicitPlaneWidgetWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImplicitPlaneWidgetWrap *w = new VtkImplicitPlaneWidgetWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneWidgetWrap::NormalToXAxisOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalToXAxisOff();
}

void VtkImplicitPlaneWidgetWrap::NormalToXAxisOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalToXAxisOn();
}

void VtkImplicitPlaneWidgetWrap::NormalToYAxisOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalToYAxisOff();
}

void VtkImplicitPlaneWidgetWrap::NormalToYAxisOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalToYAxisOn();
}

void VtkImplicitPlaneWidgetWrap::NormalToZAxisOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalToZAxisOff();
}

void VtkImplicitPlaneWidgetWrap::NormalToZAxisOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalToZAxisOn();
}

void VtkImplicitPlaneWidgetWrap::OriginTranslationOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OriginTranslationOff();
}

void VtkImplicitPlaneWidgetWrap::OriginTranslationOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OriginTranslationOn();
}

void VtkImplicitPlaneWidgetWrap::OutlineTranslationOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutlineTranslationOff();
}

void VtkImplicitPlaneWidgetWrap::OutlineTranslationOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutlineTranslationOn();
}

void VtkImplicitPlaneWidgetWrap::OutsideBoundsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutsideBoundsOff();
}

void VtkImplicitPlaneWidgetWrap::OutsideBoundsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutsideBoundsOn();
}

void VtkImplicitPlaneWidgetWrap::PlaceWidget(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->PlaceWidget(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[6];
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 6; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->PlaceWidget(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() > 4 && info[4]->IsNumber())
					{
						if(info.Length() > 5 && info[5]->IsNumber())
						{
							if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->PlaceWidget(
								info[0]->NumberValue(),
								info[1]->NumberValue(),
								info[2]->NumberValue(),
								info[3]->NumberValue(),
								info[4]->NumberValue(),
								info[5]->NumberValue()
							);
							return;
						}
					}
				}
			}
		}
	}
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PlaceWidget();
}

void VtkImplicitPlaneWidgetWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImplicitPlaneWidget * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkImplicitPlaneWidgetWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkImplicitPlaneWidgetWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImplicitPlaneWidgetWrap *w = new VtkImplicitPlaneWidgetWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::ScaleEnabledOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ScaleEnabledOff();
}

void VtkImplicitPlaneWidgetWrap::ScaleEnabledOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ScaleEnabledOn();
}

void VtkImplicitPlaneWidgetWrap::SetDiagonalRatio(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDiagonalRatio(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SetDrawPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDrawPlane(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SetEnabled(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEnabled(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SetNormal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormal(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormal(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetNormal(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SetNormalToXAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalToXAxis(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SetNormalToYAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalToYAxis(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SetNormalToZAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalToZAxis(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SetOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOrigin(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOrigin(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetOrigin(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SetOriginTranslation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOriginTranslation(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SetOutlineTranslation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutlineTranslation(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SetOutsideBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutsideBounds(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SetScaleEnabled(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScaleEnabled(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SetTubing(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTubing(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidgetWrap::SizeHandles(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SizeHandles();
}

void VtkImplicitPlaneWidgetWrap::TubingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TubingOff();
}

void VtkImplicitPlaneWidgetWrap::TubingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TubingOn();
}

void VtkImplicitPlaneWidgetWrap::UpdatePlacement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidgetWrap>(info.Holder());
	vtkImplicitPlaneWidget *native = (vtkImplicitPlaneWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UpdatePlacement();
}

