/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkMultiBlockDataSetAlgorithmWrap.h"
#include "vtkOpenFOAMReaderWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDoubleArrayWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkOpenFOAMReaderWrap::ptpl;

VtkOpenFOAMReaderWrap::VtkOpenFOAMReaderWrap()
{ }

VtkOpenFOAMReaderWrap::VtkOpenFOAMReaderWrap(vtkSmartPointer<vtkOpenFOAMReader> _native)
{ native = _native; }

VtkOpenFOAMReaderWrap::~VtkOpenFOAMReaderWrap()
{ }

void VtkOpenFOAMReaderWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkOpenFOAMReader").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("OpenFOAMReader").ToLocalChecked(), ConstructorGetter);
}

void VtkOpenFOAMReaderWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkOpenFOAMReaderWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkMultiBlockDataSetAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkMultiBlockDataSetAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkOpenFOAMReaderWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddDimensionsToArrayNamesOff", AddDimensionsToArrayNamesOff);
	Nan::SetPrototypeMethod(tpl, "addDimensionsToArrayNamesOff", AddDimensionsToArrayNamesOff);

	Nan::SetPrototypeMethod(tpl, "AddDimensionsToArrayNamesOn", AddDimensionsToArrayNamesOn);
	Nan::SetPrototypeMethod(tpl, "addDimensionsToArrayNamesOn", AddDimensionsToArrayNamesOn);

	Nan::SetPrototypeMethod(tpl, "CacheMeshOff", CacheMeshOff);
	Nan::SetPrototypeMethod(tpl, "cacheMeshOff", CacheMeshOff);

	Nan::SetPrototypeMethod(tpl, "CacheMeshOn", CacheMeshOn);
	Nan::SetPrototypeMethod(tpl, "cacheMeshOn", CacheMeshOn);

	Nan::SetPrototypeMethod(tpl, "CanReadFile", CanReadFile);
	Nan::SetPrototypeMethod(tpl, "canReadFile", CanReadFile);

	Nan::SetPrototypeMethod(tpl, "CreateCellToPointOff", CreateCellToPointOff);
	Nan::SetPrototypeMethod(tpl, "createCellToPointOff", CreateCellToPointOff);

	Nan::SetPrototypeMethod(tpl, "CreateCellToPointOn", CreateCellToPointOn);
	Nan::SetPrototypeMethod(tpl, "createCellToPointOn", CreateCellToPointOn);

	Nan::SetPrototypeMethod(tpl, "DecomposePolyhedraOff", DecomposePolyhedraOff);
	Nan::SetPrototypeMethod(tpl, "decomposePolyhedraOff", DecomposePolyhedraOff);

	Nan::SetPrototypeMethod(tpl, "DecomposePolyhedraOn", DecomposePolyhedraOn);
	Nan::SetPrototypeMethod(tpl, "decomposePolyhedraOn", DecomposePolyhedraOn);

	Nan::SetPrototypeMethod(tpl, "DisableAllCellArrays", DisableAllCellArrays);
	Nan::SetPrototypeMethod(tpl, "disableAllCellArrays", DisableAllCellArrays);

	Nan::SetPrototypeMethod(tpl, "DisableAllLagrangianArrays", DisableAllLagrangianArrays);
	Nan::SetPrototypeMethod(tpl, "disableAllLagrangianArrays", DisableAllLagrangianArrays);

	Nan::SetPrototypeMethod(tpl, "DisableAllPatchArrays", DisableAllPatchArrays);
	Nan::SetPrototypeMethod(tpl, "disableAllPatchArrays", DisableAllPatchArrays);

	Nan::SetPrototypeMethod(tpl, "DisableAllPointArrays", DisableAllPointArrays);
	Nan::SetPrototypeMethod(tpl, "disableAllPointArrays", DisableAllPointArrays);

	Nan::SetPrototypeMethod(tpl, "EnableAllCellArrays", EnableAllCellArrays);
	Nan::SetPrototypeMethod(tpl, "enableAllCellArrays", EnableAllCellArrays);

	Nan::SetPrototypeMethod(tpl, "EnableAllLagrangianArrays", EnableAllLagrangianArrays);
	Nan::SetPrototypeMethod(tpl, "enableAllLagrangianArrays", EnableAllLagrangianArrays);

	Nan::SetPrototypeMethod(tpl, "EnableAllPatchArrays", EnableAllPatchArrays);
	Nan::SetPrototypeMethod(tpl, "enableAllPatchArrays", EnableAllPatchArrays);

	Nan::SetPrototypeMethod(tpl, "EnableAllPointArrays", EnableAllPointArrays);
	Nan::SetPrototypeMethod(tpl, "enableAllPointArrays", EnableAllPointArrays);

	Nan::SetPrototypeMethod(tpl, "GetAddDimensionsToArrayNames", GetAddDimensionsToArrayNames);
	Nan::SetPrototypeMethod(tpl, "getAddDimensionsToArrayNames", GetAddDimensionsToArrayNames);

	Nan::SetPrototypeMethod(tpl, "GetCacheMesh", GetCacheMesh);
	Nan::SetPrototypeMethod(tpl, "getCacheMesh", GetCacheMesh);

	Nan::SetPrototypeMethod(tpl, "GetCellArrayName", GetCellArrayName);
	Nan::SetPrototypeMethod(tpl, "getCellArrayName", GetCellArrayName);

	Nan::SetPrototypeMethod(tpl, "GetCellArrayStatus", GetCellArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getCellArrayStatus", GetCellArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetCreateCellToPoint", GetCreateCellToPoint);
	Nan::SetPrototypeMethod(tpl, "getCreateCellToPoint", GetCreateCellToPoint);

	Nan::SetPrototypeMethod(tpl, "GetDecomposePolyhedra", GetDecomposePolyhedra);
	Nan::SetPrototypeMethod(tpl, "getDecomposePolyhedra", GetDecomposePolyhedra);

	Nan::SetPrototypeMethod(tpl, "GetFileName", GetFileName);
	Nan::SetPrototypeMethod(tpl, "getFileName", GetFileName);

	Nan::SetPrototypeMethod(tpl, "GetLagrangianArrayName", GetLagrangianArrayName);
	Nan::SetPrototypeMethod(tpl, "getLagrangianArrayName", GetLagrangianArrayName);

	Nan::SetPrototypeMethod(tpl, "GetLagrangianArrayStatus", GetLagrangianArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getLagrangianArrayStatus", GetLagrangianArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetListTimeStepsByControlDict", GetListTimeStepsByControlDict);
	Nan::SetPrototypeMethod(tpl, "getListTimeStepsByControlDict", GetListTimeStepsByControlDict);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfCellArrays", GetNumberOfCellArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfCellArrays", GetNumberOfCellArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfLagrangianArrays", GetNumberOfLagrangianArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfLagrangianArrays", GetNumberOfLagrangianArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPatchArrays", GetNumberOfPatchArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPatchArrays", GetNumberOfPatchArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPointArrays", GetNumberOfPointArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPointArrays", GetNumberOfPointArrays);

	Nan::SetPrototypeMethod(tpl, "GetPatchArrayName", GetPatchArrayName);
	Nan::SetPrototypeMethod(tpl, "getPatchArrayName", GetPatchArrayName);

	Nan::SetPrototypeMethod(tpl, "GetPatchArrayStatus", GetPatchArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getPatchArrayStatus", GetPatchArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetPointArrayName", GetPointArrayName);
	Nan::SetPrototypeMethod(tpl, "getPointArrayName", GetPointArrayName);

	Nan::SetPrototypeMethod(tpl, "GetPointArrayStatus", GetPointArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getPointArrayStatus", GetPointArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetPositionsIsIn13Format", GetPositionsIsIn13Format);
	Nan::SetPrototypeMethod(tpl, "getPositionsIsIn13Format", GetPositionsIsIn13Format);

	Nan::SetPrototypeMethod(tpl, "GetReadZones", GetReadZones);
	Nan::SetPrototypeMethod(tpl, "getReadZones", GetReadZones);

	Nan::SetPrototypeMethod(tpl, "GetTimeValues", GetTimeValues);
	Nan::SetPrototypeMethod(tpl, "getTimeValues", GetTimeValues);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "ListTimeStepsByControlDictOff", ListTimeStepsByControlDictOff);
	Nan::SetPrototypeMethod(tpl, "listTimeStepsByControlDictOff", ListTimeStepsByControlDictOff);

	Nan::SetPrototypeMethod(tpl, "ListTimeStepsByControlDictOn", ListTimeStepsByControlDictOn);
	Nan::SetPrototypeMethod(tpl, "listTimeStepsByControlDictOn", ListTimeStepsByControlDictOn);

	Nan::SetPrototypeMethod(tpl, "MakeMetaDataAtTimeStep", MakeMetaDataAtTimeStep);
	Nan::SetPrototypeMethod(tpl, "makeMetaDataAtTimeStep", MakeMetaDataAtTimeStep);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PositionsIsIn13FormatOff", PositionsIsIn13FormatOff);
	Nan::SetPrototypeMethod(tpl, "positionsIsIn13FormatOff", PositionsIsIn13FormatOff);

	Nan::SetPrototypeMethod(tpl, "PositionsIsIn13FormatOn", PositionsIsIn13FormatOn);
	Nan::SetPrototypeMethod(tpl, "positionsIsIn13FormatOn", PositionsIsIn13FormatOn);

	Nan::SetPrototypeMethod(tpl, "ReadZonesOff", ReadZonesOff);
	Nan::SetPrototypeMethod(tpl, "readZonesOff", ReadZonesOff);

	Nan::SetPrototypeMethod(tpl, "ReadZonesOn", ReadZonesOn);
	Nan::SetPrototypeMethod(tpl, "readZonesOn", ReadZonesOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAddDimensionsToArrayNames", SetAddDimensionsToArrayNames);
	Nan::SetPrototypeMethod(tpl, "setAddDimensionsToArrayNames", SetAddDimensionsToArrayNames);

	Nan::SetPrototypeMethod(tpl, "SetCacheMesh", SetCacheMesh);
	Nan::SetPrototypeMethod(tpl, "setCacheMesh", SetCacheMesh);

	Nan::SetPrototypeMethod(tpl, "SetCellArrayStatus", SetCellArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setCellArrayStatus", SetCellArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetCreateCellToPoint", SetCreateCellToPoint);
	Nan::SetPrototypeMethod(tpl, "setCreateCellToPoint", SetCreateCellToPoint);

	Nan::SetPrototypeMethod(tpl, "SetDecomposePolyhedra", SetDecomposePolyhedra);
	Nan::SetPrototypeMethod(tpl, "setDecomposePolyhedra", SetDecomposePolyhedra);

	Nan::SetPrototypeMethod(tpl, "SetFileName", SetFileName);
	Nan::SetPrototypeMethod(tpl, "setFileName", SetFileName);

	Nan::SetPrototypeMethod(tpl, "SetLagrangianArrayStatus", SetLagrangianArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setLagrangianArrayStatus", SetLagrangianArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetListTimeStepsByControlDict", SetListTimeStepsByControlDict);
	Nan::SetPrototypeMethod(tpl, "setListTimeStepsByControlDict", SetListTimeStepsByControlDict);

	Nan::SetPrototypeMethod(tpl, "SetParent", SetParent);
	Nan::SetPrototypeMethod(tpl, "setParent", SetParent);

	Nan::SetPrototypeMethod(tpl, "SetPatchArrayStatus", SetPatchArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setPatchArrayStatus", SetPatchArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetPointArrayStatus", SetPointArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setPointArrayStatus", SetPointArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetPositionsIsIn13Format", SetPositionsIsIn13Format);
	Nan::SetPrototypeMethod(tpl, "setPositionsIsIn13Format", SetPositionsIsIn13Format);

	Nan::SetPrototypeMethod(tpl, "SetReadZones", SetReadZones);
	Nan::SetPrototypeMethod(tpl, "setReadZones", SetReadZones);

	Nan::SetPrototypeMethod(tpl, "SetRefresh", SetRefresh);
	Nan::SetPrototypeMethod(tpl, "setRefresh", SetRefresh);

	Nan::SetPrototypeMethod(tpl, "SetTimeValue", SetTimeValue);
	Nan::SetPrototypeMethod(tpl, "setTimeValue", SetTimeValue);

#ifdef VTK_NODE_PLUS_VTKOPENFOAMREADERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKOPENFOAMREADERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkOpenFOAMReaderWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkOpenFOAMReader> native = vtkSmartPointer<vtkOpenFOAMReader>::New();
		VtkOpenFOAMReaderWrap* obj = new VtkOpenFOAMReaderWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkOpenFOAMReaderWrap::AddDimensionsToArrayNamesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AddDimensionsToArrayNamesOff();
}

void VtkOpenFOAMReaderWrap::AddDimensionsToArrayNamesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AddDimensionsToArrayNamesOn();
}

void VtkOpenFOAMReaderWrap::CacheMeshOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CacheMeshOff();
}

void VtkOpenFOAMReaderWrap::CacheMeshOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CacheMeshOn();
}

void VtkOpenFOAMReaderWrap::CanReadFile(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->CanReadFile(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::CreateCellToPointOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CreateCellToPointOff();
}

void VtkOpenFOAMReaderWrap::CreateCellToPointOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CreateCellToPointOn();
}

void VtkOpenFOAMReaderWrap::DecomposePolyhedraOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DecomposePolyhedraOff();
}

void VtkOpenFOAMReaderWrap::DecomposePolyhedraOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DecomposePolyhedraOn();
}

void VtkOpenFOAMReaderWrap::DisableAllCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DisableAllCellArrays();
}

void VtkOpenFOAMReaderWrap::DisableAllLagrangianArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DisableAllLagrangianArrays();
}

void VtkOpenFOAMReaderWrap::DisableAllPatchArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DisableAllPatchArrays();
}

void VtkOpenFOAMReaderWrap::DisableAllPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DisableAllPointArrays();
}

void VtkOpenFOAMReaderWrap::EnableAllCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EnableAllCellArrays();
}

void VtkOpenFOAMReaderWrap::EnableAllLagrangianArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EnableAllLagrangianArrays();
}

void VtkOpenFOAMReaderWrap::EnableAllPatchArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EnableAllPatchArrays();
}

void VtkOpenFOAMReaderWrap::EnableAllPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EnableAllPointArrays();
}

void VtkOpenFOAMReaderWrap::GetAddDimensionsToArrayNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAddDimensionsToArrayNames();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenFOAMReaderWrap::GetCacheMesh(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCacheMesh();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenFOAMReaderWrap::GetCellArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetCellArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::GetCellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetCellArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenFOAMReaderWrap::GetCreateCellToPoint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCreateCellToPoint();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenFOAMReaderWrap::GetDecomposePolyhedra(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDecomposePolyhedra();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenFOAMReaderWrap::GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenFOAMReaderWrap::GetLagrangianArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetLagrangianArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::GetLagrangianArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetLagrangianArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::GetListTimeStepsByControlDict(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetListTimeStepsByControlDict();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenFOAMReaderWrap::GetNumberOfCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfCellArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenFOAMReaderWrap::GetNumberOfLagrangianArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfLagrangianArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenFOAMReaderWrap::GetNumberOfPatchArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPatchArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenFOAMReaderWrap::GetNumberOfPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPointArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenFOAMReaderWrap::GetPatchArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPatchArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::GetPatchArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPatchArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::GetPointArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPointArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::GetPointArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPointArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::GetPositionsIsIn13Format(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPositionsIsIn13Format();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenFOAMReaderWrap::GetReadZones(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetReadZones();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenFOAMReaderWrap::GetTimeValues(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	vtkDoubleArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTimeValues();
	VtkDoubleArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDoubleArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDoubleArrayWrap *w = new VtkDoubleArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkOpenFOAMReaderWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::ListTimeStepsByControlDictOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ListTimeStepsByControlDictOff();
}

void VtkOpenFOAMReaderWrap::ListTimeStepsByControlDictOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ListTimeStepsByControlDictOn();
}

void VtkOpenFOAMReaderWrap::MakeMetaDataAtTimeStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->MakeMetaDataAtTimeStep(
			info[0]->BooleanValue()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	vtkOpenFOAMReader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkOpenFOAMReaderWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkOpenFOAMReaderWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkOpenFOAMReaderWrap *w = new VtkOpenFOAMReaderWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkOpenFOAMReaderWrap::PositionsIsIn13FormatOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PositionsIsIn13FormatOff();
}

void VtkOpenFOAMReaderWrap::PositionsIsIn13FormatOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PositionsIsIn13FormatOn();
}

void VtkOpenFOAMReaderWrap::ReadZonesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReadZonesOff();
}

void VtkOpenFOAMReaderWrap::ReadZonesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReadZonesOn();
}

void VtkOpenFOAMReaderWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkOpenFOAMReader * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkOpenFOAMReaderWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkOpenFOAMReaderWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkOpenFOAMReaderWrap *w = new VtkOpenFOAMReaderWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetAddDimensionsToArrayNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAddDimensionsToArrayNames(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetCacheMesh(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCacheMesh(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetCellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetCellArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetCreateCellToPoint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCreateCellToPoint(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetDecomposePolyhedra(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDecomposePolyhedra(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetLagrangianArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetLagrangianArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetListTimeStepsByControlDict(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetListTimeStepsByControlDict(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetParent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkOpenFOAMReaderWrap::ptpl))->HasInstance(info[0]))
	{
		VtkOpenFOAMReaderWrap *a0 = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetParent(
			(vtkOpenFOAMReader *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetPatchArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetPatchArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetPointArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetPointArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetPositionsIsIn13Format(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPositionsIsIn13Format(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetReadZones(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetReadZones(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenFOAMReaderWrap::SetRefresh(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetRefresh();
}

void VtkOpenFOAMReaderWrap::SetTimeValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenFOAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkOpenFOAMReaderWrap>(info.Holder());
	vtkOpenFOAMReader *native = (vtkOpenFOAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		bool r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SetTimeValue(
			info[0]->NumberValue()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

