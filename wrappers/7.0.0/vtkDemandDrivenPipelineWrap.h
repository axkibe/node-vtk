/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKDEMANDDRIVENPIPELINEWRAP_H
#define NATIVE_EXTENSION_VTK_VTKDEMANDDRIVENPIPELINEWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkDemandDrivenPipeline.h>

#include "vtkExecutiveWrap.h"

class VtkDemandDrivenPipelineWrap : public VtkExecutiveWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkDemandDrivenPipelineWrap(vtkSmartPointer<vtkDemandDrivenPipeline>);
		VtkDemandDrivenPipelineWrap();
		~VtkDemandDrivenPipelineWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void DATA_NOT_GENERATED(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetReleaseDataFlag(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewDataObject(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RELEASE_DATA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void REQUEST_DATA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void REQUEST_DATA_NOT_GENERATED(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void REQUEST_DATA_OBJECT(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void REQUEST_INFORMATION(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetReleaseDataFlag(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Update(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UpdateData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UpdateDataObject(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UpdateInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UpdatePipelineMTime(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
