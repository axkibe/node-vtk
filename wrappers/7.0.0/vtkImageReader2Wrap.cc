/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkImageAlgorithmWrap.h"
#include "vtkImageReader2Wrap.h"
#include "vtkObjectWrap.h"
#include "vtkStringArrayWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkImageReader2Wrap::ptpl;

VtkImageReader2Wrap::VtkImageReader2Wrap()
{ }

VtkImageReader2Wrap::VtkImageReader2Wrap(vtkSmartPointer<vtkImageReader2> _native)
{ native = _native; }

VtkImageReader2Wrap::~VtkImageReader2Wrap()
{ }

void VtkImageReader2Wrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkImageReader2").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ImageReader2").ToLocalChecked(), ConstructorGetter);
}

void VtkImageReader2Wrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkImageReader2Wrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkImageAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkImageAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkImageReader2Wrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CanReadFile", CanReadFile);
	Nan::SetPrototypeMethod(tpl, "canReadFile", CanReadFile);

	Nan::SetPrototypeMethod(tpl, "ComputeInternalFileName", ComputeInternalFileName);
	Nan::SetPrototypeMethod(tpl, "computeInternalFileName", ComputeInternalFileName);

	Nan::SetPrototypeMethod(tpl, "FileLowerLeftOff", FileLowerLeftOff);
	Nan::SetPrototypeMethod(tpl, "fileLowerLeftOff", FileLowerLeftOff);

	Nan::SetPrototypeMethod(tpl, "FileLowerLeftOn", FileLowerLeftOn);
	Nan::SetPrototypeMethod(tpl, "fileLowerLeftOn", FileLowerLeftOn);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDataByteOrder", GetDataByteOrder);
	Nan::SetPrototypeMethod(tpl, "getDataByteOrder", GetDataByteOrder);

	Nan::SetPrototypeMethod(tpl, "GetDataByteOrderAsString", GetDataByteOrderAsString);
	Nan::SetPrototypeMethod(tpl, "getDataByteOrderAsString", GetDataByteOrderAsString);

	Nan::SetPrototypeMethod(tpl, "GetDataExtent", GetDataExtent);
	Nan::SetPrototypeMethod(tpl, "getDataExtent", GetDataExtent);

	Nan::SetPrototypeMethod(tpl, "GetDataOrigin", GetDataOrigin);
	Nan::SetPrototypeMethod(tpl, "getDataOrigin", GetDataOrigin);

	Nan::SetPrototypeMethod(tpl, "GetDataScalarType", GetDataScalarType);
	Nan::SetPrototypeMethod(tpl, "getDataScalarType", GetDataScalarType);

	Nan::SetPrototypeMethod(tpl, "GetDataSpacing", GetDataSpacing);
	Nan::SetPrototypeMethod(tpl, "getDataSpacing", GetDataSpacing);

	Nan::SetPrototypeMethod(tpl, "GetDescriptiveName", GetDescriptiveName);
	Nan::SetPrototypeMethod(tpl, "getDescriptiveName", GetDescriptiveName);

	Nan::SetPrototypeMethod(tpl, "GetFileDimensionality", GetFileDimensionality);
	Nan::SetPrototypeMethod(tpl, "getFileDimensionality", GetFileDimensionality);

	Nan::SetPrototypeMethod(tpl, "GetFileExtensions", GetFileExtensions);
	Nan::SetPrototypeMethod(tpl, "getFileExtensions", GetFileExtensions);

	Nan::SetPrototypeMethod(tpl, "GetFileLowerLeft", GetFileLowerLeft);
	Nan::SetPrototypeMethod(tpl, "getFileLowerLeft", GetFileLowerLeft);

	Nan::SetPrototypeMethod(tpl, "GetFileName", GetFileName);
	Nan::SetPrototypeMethod(tpl, "getFileName", GetFileName);

	Nan::SetPrototypeMethod(tpl, "GetFileNameSliceOffset", GetFileNameSliceOffset);
	Nan::SetPrototypeMethod(tpl, "getFileNameSliceOffset", GetFileNameSliceOffset);

	Nan::SetPrototypeMethod(tpl, "GetFileNameSliceSpacing", GetFileNameSliceSpacing);
	Nan::SetPrototypeMethod(tpl, "getFileNameSliceSpacing", GetFileNameSliceSpacing);

	Nan::SetPrototypeMethod(tpl, "GetFileNames", GetFileNames);
	Nan::SetPrototypeMethod(tpl, "getFileNames", GetFileNames);

	Nan::SetPrototypeMethod(tpl, "GetFilePattern", GetFilePattern);
	Nan::SetPrototypeMethod(tpl, "getFilePattern", GetFilePattern);

	Nan::SetPrototypeMethod(tpl, "GetFilePrefix", GetFilePrefix);
	Nan::SetPrototypeMethod(tpl, "getFilePrefix", GetFilePrefix);

	Nan::SetPrototypeMethod(tpl, "GetHeaderSize", GetHeaderSize);
	Nan::SetPrototypeMethod(tpl, "getHeaderSize", GetHeaderSize);

	Nan::SetPrototypeMethod(tpl, "GetInternalFileName", GetInternalFileName);
	Nan::SetPrototypeMethod(tpl, "getInternalFileName", GetInternalFileName);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfScalarComponents", GetNumberOfScalarComponents);
	Nan::SetPrototypeMethod(tpl, "getNumberOfScalarComponents", GetNumberOfScalarComponents);

	Nan::SetPrototypeMethod(tpl, "GetSwapBytes", GetSwapBytes);
	Nan::SetPrototypeMethod(tpl, "getSwapBytes", GetSwapBytes);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "OpenFile", OpenFile);
	Nan::SetPrototypeMethod(tpl, "openFile", OpenFile);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SeekFile", SeekFile);
	Nan::SetPrototypeMethod(tpl, "seekFile", SeekFile);

	Nan::SetPrototypeMethod(tpl, "SetDataByteOrder", SetDataByteOrder);
	Nan::SetPrototypeMethod(tpl, "setDataByteOrder", SetDataByteOrder);

	Nan::SetPrototypeMethod(tpl, "SetDataByteOrderToBigEndian", SetDataByteOrderToBigEndian);
	Nan::SetPrototypeMethod(tpl, "setDataByteOrderToBigEndian", SetDataByteOrderToBigEndian);

	Nan::SetPrototypeMethod(tpl, "SetDataByteOrderToLittleEndian", SetDataByteOrderToLittleEndian);
	Nan::SetPrototypeMethod(tpl, "setDataByteOrderToLittleEndian", SetDataByteOrderToLittleEndian);

	Nan::SetPrototypeMethod(tpl, "SetDataExtent", SetDataExtent);
	Nan::SetPrototypeMethod(tpl, "setDataExtent", SetDataExtent);

	Nan::SetPrototypeMethod(tpl, "SetDataOrigin", SetDataOrigin);
	Nan::SetPrototypeMethod(tpl, "setDataOrigin", SetDataOrigin);

	Nan::SetPrototypeMethod(tpl, "SetDataScalarType", SetDataScalarType);
	Nan::SetPrototypeMethod(tpl, "setDataScalarType", SetDataScalarType);

	Nan::SetPrototypeMethod(tpl, "SetDataScalarTypeToChar", SetDataScalarTypeToChar);
	Nan::SetPrototypeMethod(tpl, "setDataScalarTypeToChar", SetDataScalarTypeToChar);

	Nan::SetPrototypeMethod(tpl, "SetDataScalarTypeToDouble", SetDataScalarTypeToDouble);
	Nan::SetPrototypeMethod(tpl, "setDataScalarTypeToDouble", SetDataScalarTypeToDouble);

	Nan::SetPrototypeMethod(tpl, "SetDataScalarTypeToFloat", SetDataScalarTypeToFloat);
	Nan::SetPrototypeMethod(tpl, "setDataScalarTypeToFloat", SetDataScalarTypeToFloat);

	Nan::SetPrototypeMethod(tpl, "SetDataScalarTypeToInt", SetDataScalarTypeToInt);
	Nan::SetPrototypeMethod(tpl, "setDataScalarTypeToInt", SetDataScalarTypeToInt);

	Nan::SetPrototypeMethod(tpl, "SetDataScalarTypeToShort", SetDataScalarTypeToShort);
	Nan::SetPrototypeMethod(tpl, "setDataScalarTypeToShort", SetDataScalarTypeToShort);

	Nan::SetPrototypeMethod(tpl, "SetDataScalarTypeToSignedChar", SetDataScalarTypeToSignedChar);
	Nan::SetPrototypeMethod(tpl, "setDataScalarTypeToSignedChar", SetDataScalarTypeToSignedChar);

	Nan::SetPrototypeMethod(tpl, "SetDataScalarTypeToUnsignedChar", SetDataScalarTypeToUnsignedChar);
	Nan::SetPrototypeMethod(tpl, "setDataScalarTypeToUnsignedChar", SetDataScalarTypeToUnsignedChar);

	Nan::SetPrototypeMethod(tpl, "SetDataScalarTypeToUnsignedInt", SetDataScalarTypeToUnsignedInt);
	Nan::SetPrototypeMethod(tpl, "setDataScalarTypeToUnsignedInt", SetDataScalarTypeToUnsignedInt);

	Nan::SetPrototypeMethod(tpl, "SetDataScalarTypeToUnsignedShort", SetDataScalarTypeToUnsignedShort);
	Nan::SetPrototypeMethod(tpl, "setDataScalarTypeToUnsignedShort", SetDataScalarTypeToUnsignedShort);

	Nan::SetPrototypeMethod(tpl, "SetDataSpacing", SetDataSpacing);
	Nan::SetPrototypeMethod(tpl, "setDataSpacing", SetDataSpacing);

	Nan::SetPrototypeMethod(tpl, "SetFileDimensionality", SetFileDimensionality);
	Nan::SetPrototypeMethod(tpl, "setFileDimensionality", SetFileDimensionality);

	Nan::SetPrototypeMethod(tpl, "SetFileLowerLeft", SetFileLowerLeft);
	Nan::SetPrototypeMethod(tpl, "setFileLowerLeft", SetFileLowerLeft);

	Nan::SetPrototypeMethod(tpl, "SetFileName", SetFileName);
	Nan::SetPrototypeMethod(tpl, "setFileName", SetFileName);

	Nan::SetPrototypeMethod(tpl, "SetFileNameSliceOffset", SetFileNameSliceOffset);
	Nan::SetPrototypeMethod(tpl, "setFileNameSliceOffset", SetFileNameSliceOffset);

	Nan::SetPrototypeMethod(tpl, "SetFileNameSliceSpacing", SetFileNameSliceSpacing);
	Nan::SetPrototypeMethod(tpl, "setFileNameSliceSpacing", SetFileNameSliceSpacing);

	Nan::SetPrototypeMethod(tpl, "SetFileNames", SetFileNames);
	Nan::SetPrototypeMethod(tpl, "setFileNames", SetFileNames);

	Nan::SetPrototypeMethod(tpl, "SetFilePattern", SetFilePattern);
	Nan::SetPrototypeMethod(tpl, "setFilePattern", SetFilePattern);

	Nan::SetPrototypeMethod(tpl, "SetFilePrefix", SetFilePrefix);
	Nan::SetPrototypeMethod(tpl, "setFilePrefix", SetFilePrefix);

	Nan::SetPrototypeMethod(tpl, "SetHeaderSize", SetHeaderSize);
	Nan::SetPrototypeMethod(tpl, "setHeaderSize", SetHeaderSize);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfScalarComponents", SetNumberOfScalarComponents);
	Nan::SetPrototypeMethod(tpl, "setNumberOfScalarComponents", SetNumberOfScalarComponents);

	Nan::SetPrototypeMethod(tpl, "SetSwapBytes", SetSwapBytes);
	Nan::SetPrototypeMethod(tpl, "setSwapBytes", SetSwapBytes);

	Nan::SetPrototypeMethod(tpl, "SwapBytesOff", SwapBytesOff);
	Nan::SetPrototypeMethod(tpl, "swapBytesOff", SwapBytesOff);

	Nan::SetPrototypeMethod(tpl, "SwapBytesOn", SwapBytesOn);
	Nan::SetPrototypeMethod(tpl, "swapBytesOn", SwapBytesOn);

#ifdef VTK_NODE_PLUS_VTKIMAGEREADER2WRAP_INITPTPL
	VTK_NODE_PLUS_VTKIMAGEREADER2WRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkImageReader2Wrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageReader2> native = vtkSmartPointer<vtkImageReader2>::New();
		VtkImageReader2Wrap* obj = new VtkImageReader2Wrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageReader2Wrap::CanReadFile(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->CanReadFile(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::ComputeInternalFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ComputeInternalFileName(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::FileLowerLeftOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FileLowerLeftOff();
}

void VtkImageReader2Wrap::FileLowerLeftOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FileLowerLeftOn();
}

void VtkImageReader2Wrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageReader2Wrap::GetDataByteOrder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataByteOrder();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageReader2Wrap::GetDataByteOrderAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataByteOrderAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageReader2Wrap::GetDataExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	int const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataExtent();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 6 * sizeof(int));
	Local<v8::Int32Array> at = v8::Int32Array::New(ab, 0, 6);
	memcpy(ab->GetContents().Data(), r, 6 * sizeof(int));
	info.GetReturnValue().Set(at);
}

void VtkImageReader2Wrap::GetDataOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataOrigin();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkImageReader2Wrap::GetDataScalarType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataScalarType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageReader2Wrap::GetDataSpacing(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataSpacing();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkImageReader2Wrap::GetDescriptiveName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDescriptiveName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageReader2Wrap::GetFileDimensionality(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileDimensionality();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageReader2Wrap::GetFileExtensions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileExtensions();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageReader2Wrap::GetFileLowerLeft(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileLowerLeft();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageReader2Wrap::GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageReader2Wrap::GetFileNameSliceOffset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileNameSliceOffset();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageReader2Wrap::GetFileNameSliceSpacing(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileNameSliceSpacing();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageReader2Wrap::GetFileNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	vtkStringArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileNames();
	VtkStringArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkStringArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStringArrayWrap *w = new VtkStringArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageReader2Wrap::GetFilePattern(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFilePattern();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageReader2Wrap::GetFilePrefix(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFilePrefix();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageReader2Wrap::GetHeaderSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsUint32())
	{
		unsigned int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetHeaderSize(
			info[0]->Uint32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	unsigned int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHeaderSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageReader2Wrap::GetInternalFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInternalFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageReader2Wrap::GetNumberOfScalarComponents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfScalarComponents();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageReader2Wrap::GetSwapBytes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSwapBytes();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageReader2Wrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	vtkImageReader2 * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkImageReader2Wrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImageReader2Wrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageReader2Wrap *w = new VtkImageReader2Wrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageReader2Wrap::OpenFile(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->OpenFile();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageReader2Wrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageReader2 * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkImageReader2Wrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkImageReader2Wrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageReader2Wrap *w = new VtkImageReader2Wrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SeekFile(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SeekFile(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetDataByteOrder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDataByteOrder(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetDataByteOrderToBigEndian(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataByteOrderToBigEndian();
}

void VtkImageReader2Wrap::SetDataByteOrderToLittleEndian(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataByteOrderToLittleEndian();
}

void VtkImageReader2Wrap::SetDataExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDataExtent(
			(int *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[6];
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 6; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDataExtent(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() > 4 && info[4]->IsInt32())
					{
						if(info.Length() > 5 && info[5]->IsInt32())
						{
														if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->SetDataExtent(
								info[0]->Int32Value(),
								info[1]->Int32Value(),
								info[2]->Int32Value(),
								info[3]->Int32Value(),
								info[4]->Int32Value(),
								info[5]->Int32Value()
							);
							return;
						}
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetDataOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDataOrigin(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDataOrigin(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetDataOrigin(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetDataScalarType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDataScalarType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetDataScalarTypeToChar(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataScalarTypeToChar();
}

void VtkImageReader2Wrap::SetDataScalarTypeToDouble(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataScalarTypeToDouble();
}

void VtkImageReader2Wrap::SetDataScalarTypeToFloat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataScalarTypeToFloat();
}

void VtkImageReader2Wrap::SetDataScalarTypeToInt(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataScalarTypeToInt();
}

void VtkImageReader2Wrap::SetDataScalarTypeToShort(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataScalarTypeToShort();
}

void VtkImageReader2Wrap::SetDataScalarTypeToSignedChar(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataScalarTypeToSignedChar();
}

void VtkImageReader2Wrap::SetDataScalarTypeToUnsignedChar(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataScalarTypeToUnsignedChar();
}

void VtkImageReader2Wrap::SetDataScalarTypeToUnsignedInt(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataScalarTypeToUnsignedInt();
}

void VtkImageReader2Wrap::SetDataScalarTypeToUnsignedShort(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataScalarTypeToUnsignedShort();
}

void VtkImageReader2Wrap::SetDataSpacing(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDataSpacing(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDataSpacing(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetDataSpacing(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetFileDimensionality(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileDimensionality(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetFileLowerLeft(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileLowerLeft(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetFileNameSliceOffset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileNameSliceOffset(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetFileNameSliceSpacing(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileNameSliceSpacing(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetFileNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkStringArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkStringArrayWrap *a0 = ObjectWrap::Unwrap<VtkStringArrayWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileNames(
			(vtkStringArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetFilePattern(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFilePattern(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetFilePrefix(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFilePrefix(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetHeaderSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsUint32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHeaderSize(
			info[0]->Uint32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetNumberOfScalarComponents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfScalarComponents(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SetSwapBytes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSwapBytes(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageReader2Wrap::SwapBytesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SwapBytesOff();
}

void VtkImageReader2Wrap::SwapBytesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageReader2Wrap *wrapper = ObjectWrap::Unwrap<VtkImageReader2Wrap>(info.Holder());
	vtkImageReader2 *native = (vtkImageReader2 *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SwapBytesOn();
}

