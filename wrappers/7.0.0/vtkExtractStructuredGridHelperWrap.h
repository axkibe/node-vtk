/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKEXTRACTSTRUCTUREDGRIDHELPERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKEXTRACTSTRUCTUREDGRIDHELPERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkExtractStructuredGridHelper.h>

#include "vtkObjectWrap.h"

class VtkExtractStructuredGridHelperWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkExtractStructuredGridHelperWrap(vtkSmartPointer<vtkExtractStructuredGridHelper>);
		VtkExtractStructuredGridHelperWrap();
		~VtkExtractStructuredGridHelperWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void ComputeBeginAndEnd(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CopyCellData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CopyPointsAndPointData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMappedExtentValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMappedExtentValueFromIndex(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMappedIndex(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMappedIndexFromExtentValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOutputWholeExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPartitionedOutputExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPartitionedVOI(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsValid(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
