/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkGeoSampleArcsWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkGeoSampleArcsWrap::ptpl;

VtkGeoSampleArcsWrap::VtkGeoSampleArcsWrap()
{ }

VtkGeoSampleArcsWrap::VtkGeoSampleArcsWrap(vtkSmartPointer<vtkGeoSampleArcs> _native)
{ native = _native; }

VtkGeoSampleArcsWrap::~VtkGeoSampleArcsWrap()
{ }

void VtkGeoSampleArcsWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkGeoSampleArcs").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("GeoSampleArcs").ToLocalChecked(), ConstructorGetter);
}

void VtkGeoSampleArcsWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkGeoSampleArcsWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkGeoSampleArcsWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetGlobeRadius", GetGlobeRadius);
	Nan::SetPrototypeMethod(tpl, "getGlobeRadius", GetGlobeRadius);

	Nan::SetPrototypeMethod(tpl, "GetInputCoordinateSystem", GetInputCoordinateSystem);
	Nan::SetPrototypeMethod(tpl, "getInputCoordinateSystem", GetInputCoordinateSystem);

	Nan::SetPrototypeMethod(tpl, "GetMaximumDistanceMeters", GetMaximumDistanceMeters);
	Nan::SetPrototypeMethod(tpl, "getMaximumDistanceMeters", GetMaximumDistanceMeters);

	Nan::SetPrototypeMethod(tpl, "GetOutputCoordinateSystem", GetOutputCoordinateSystem);
	Nan::SetPrototypeMethod(tpl, "getOutputCoordinateSystem", GetOutputCoordinateSystem);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetGlobeRadius", SetGlobeRadius);
	Nan::SetPrototypeMethod(tpl, "setGlobeRadius", SetGlobeRadius);

	Nan::SetPrototypeMethod(tpl, "SetInputCoordinateSystem", SetInputCoordinateSystem);
	Nan::SetPrototypeMethod(tpl, "setInputCoordinateSystem", SetInputCoordinateSystem);

	Nan::SetPrototypeMethod(tpl, "SetInputCoordinateSystemToRectangular", SetInputCoordinateSystemToRectangular);
	Nan::SetPrototypeMethod(tpl, "setInputCoordinateSystemToRectangular", SetInputCoordinateSystemToRectangular);

	Nan::SetPrototypeMethod(tpl, "SetInputCoordinateSystemToSpherical", SetInputCoordinateSystemToSpherical);
	Nan::SetPrototypeMethod(tpl, "setInputCoordinateSystemToSpherical", SetInputCoordinateSystemToSpherical);

	Nan::SetPrototypeMethod(tpl, "SetMaximumDistanceMeters", SetMaximumDistanceMeters);
	Nan::SetPrototypeMethod(tpl, "setMaximumDistanceMeters", SetMaximumDistanceMeters);

	Nan::SetPrototypeMethod(tpl, "SetOutputCoordinateSystem", SetOutputCoordinateSystem);
	Nan::SetPrototypeMethod(tpl, "setOutputCoordinateSystem", SetOutputCoordinateSystem);

	Nan::SetPrototypeMethod(tpl, "SetOutputCoordinateSystemToRectangular", SetOutputCoordinateSystemToRectangular);
	Nan::SetPrototypeMethod(tpl, "setOutputCoordinateSystemToRectangular", SetOutputCoordinateSystemToRectangular);

	Nan::SetPrototypeMethod(tpl, "SetOutputCoordinateSystemToSpherical", SetOutputCoordinateSystemToSpherical);
	Nan::SetPrototypeMethod(tpl, "setOutputCoordinateSystemToSpherical", SetOutputCoordinateSystemToSpherical);

	ptpl.Reset( tpl );
}

void VtkGeoSampleArcsWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkGeoSampleArcs> native = vtkSmartPointer<vtkGeoSampleArcs>::New();
		VtkGeoSampleArcsWrap* obj = new VtkGeoSampleArcsWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkGeoSampleArcsWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGeoSampleArcsWrap::GetGlobeRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGlobeRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoSampleArcsWrap::GetInputCoordinateSystem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInputCoordinateSystem();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoSampleArcsWrap::GetMaximumDistanceMeters(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumDistanceMeters();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoSampleArcsWrap::GetOutputCoordinateSystem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputCoordinateSystem();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoSampleArcsWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoSampleArcsWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
	vtkGeoSampleArcs * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkGeoSampleArcsWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkGeoSampleArcsWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGeoSampleArcsWrap *w = new VtkGeoSampleArcsWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGeoSampleArcsWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkGeoSampleArcs * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkGeoSampleArcsWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkGeoSampleArcsWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkGeoSampleArcsWrap *w = new VtkGeoSampleArcsWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoSampleArcsWrap::SetGlobeRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGlobeRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoSampleArcsWrap::SetInputCoordinateSystem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputCoordinateSystem(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoSampleArcsWrap::SetInputCoordinateSystemToRectangular(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInputCoordinateSystemToRectangular();
}

void VtkGeoSampleArcsWrap::SetInputCoordinateSystemToSpherical(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInputCoordinateSystemToSpherical();
}

void VtkGeoSampleArcsWrap::SetMaximumDistanceMeters(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumDistanceMeters(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoSampleArcsWrap::SetOutputCoordinateSystem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputCoordinateSystem(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoSampleArcsWrap::SetOutputCoordinateSystemToRectangular(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputCoordinateSystemToRectangular();
}

void VtkGeoSampleArcsWrap::SetOutputCoordinateSystemToSpherical(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoSampleArcsWrap *wrapper = ObjectWrap::Unwrap<VtkGeoSampleArcsWrap>(info.Holder());
	vtkGeoSampleArcs *native = (vtkGeoSampleArcs *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputCoordinateSystemToSpherical();
}

