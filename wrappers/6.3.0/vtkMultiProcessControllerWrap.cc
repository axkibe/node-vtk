/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkMultiProcessControllerWrap.h"
#include "vtkProcessWrap.h"
#include "vtkProcessGroupWrap.h"
#include "vtkCommunicatorWrap.h"
#include "vtkDataObjectWrap.h"
#include "vtkDataArrayWrap.h"
#include "vtkIdTypeArrayWrap.h"
#include "vtkSmartPointer<vtkDataObject>Wrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkMultiProcessControllerWrap::ptpl;

VtkMultiProcessControllerWrap::VtkMultiProcessControllerWrap()
{ }

VtkMultiProcessControllerWrap::VtkMultiProcessControllerWrap(vtkSmartPointer<vtkMultiProcessController> _native)
{ native = _native; }

VtkMultiProcessControllerWrap::~VtkMultiProcessControllerWrap()
{ }

void VtkMultiProcessControllerWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkMultiProcessController").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("MultiProcessController").ToLocalChecked(), ConstructorGetter);
}

void VtkMultiProcessControllerWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkMultiProcessControllerWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkMultiProcessControllerWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AllGather", AllGather);
	Nan::SetPrototypeMethod(tpl, "allGather", AllGather);

	Nan::SetPrototypeMethod(tpl, "AllGatherV", AllGatherV);
	Nan::SetPrototypeMethod(tpl, "allGatherV", AllGatherV);

	Nan::SetPrototypeMethod(tpl, "AllReduce", AllReduce);
	Nan::SetPrototypeMethod(tpl, "allReduce", AllReduce);

	Nan::SetPrototypeMethod(tpl, "Barrier", Barrier);
	Nan::SetPrototypeMethod(tpl, "barrier", Barrier);

	Nan::SetPrototypeMethod(tpl, "Broadcast", Broadcast);
	Nan::SetPrototypeMethod(tpl, "broadcast", Broadcast);

	Nan::SetPrototypeMethod(tpl, "BroadcastProcessRMIs", BroadcastProcessRMIs);
	Nan::SetPrototypeMethod(tpl, "broadcastProcessRMIs", BroadcastProcessRMIs);

	Nan::SetPrototypeMethod(tpl, "BroadcastTriggerRMIOff", BroadcastTriggerRMIOff);
	Nan::SetPrototypeMethod(tpl, "broadcastTriggerRMIOff", BroadcastTriggerRMIOff);

	Nan::SetPrototypeMethod(tpl, "BroadcastTriggerRMIOn", BroadcastTriggerRMIOn);
	Nan::SetPrototypeMethod(tpl, "broadcastTriggerRMIOn", BroadcastTriggerRMIOn);

	Nan::SetPrototypeMethod(tpl, "CreateOutputWindow", CreateOutputWindow);
	Nan::SetPrototypeMethod(tpl, "createOutputWindow", CreateOutputWindow);

	Nan::SetPrototypeMethod(tpl, "CreateSubController", CreateSubController);
	Nan::SetPrototypeMethod(tpl, "createSubController", CreateSubController);

	Nan::SetPrototypeMethod(tpl, "Finalize", Finalize);
	Nan::SetPrototypeMethod(tpl, "finalize", Finalize);

	Nan::SetPrototypeMethod(tpl, "Gather", Gather);
	Nan::SetPrototypeMethod(tpl, "gather", Gather);

	Nan::SetPrototypeMethod(tpl, "GatherV", GatherV);
	Nan::SetPrototypeMethod(tpl, "gatherV", GatherV);

	Nan::SetPrototypeMethod(tpl, "GetBreakFlag", GetBreakFlag);
	Nan::SetPrototypeMethod(tpl, "getBreakFlag", GetBreakFlag);

	Nan::SetPrototypeMethod(tpl, "GetBreakRMITag", GetBreakRMITag);
	Nan::SetPrototypeMethod(tpl, "getBreakRMITag", GetBreakRMITag);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetCommunicator", GetCommunicator);
	Nan::SetPrototypeMethod(tpl, "getCommunicator", GetCommunicator);

	Nan::SetPrototypeMethod(tpl, "GetGlobalController", GetGlobalController);
	Nan::SetPrototypeMethod(tpl, "getGlobalController", GetGlobalController);

	Nan::SetPrototypeMethod(tpl, "GetLocalProcessId", GetLocalProcessId);
	Nan::SetPrototypeMethod(tpl, "getLocalProcessId", GetLocalProcessId);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfProcesses", GetNumberOfProcesses);
	Nan::SetPrototypeMethod(tpl, "getNumberOfProcesses", GetNumberOfProcesses);

	Nan::SetPrototypeMethod(tpl, "GetRMIArgTag", GetRMIArgTag);
	Nan::SetPrototypeMethod(tpl, "getRMIArgTag", GetRMIArgTag);

	Nan::SetPrototypeMethod(tpl, "GetRMITag", GetRMITag);
	Nan::SetPrototypeMethod(tpl, "getRMITag", GetRMITag);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "MultipleMethodExecute", MultipleMethodExecute);
	Nan::SetPrototypeMethod(tpl, "multipleMethodExecute", MultipleMethodExecute);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PartitionController", PartitionController);
	Nan::SetPrototypeMethod(tpl, "partitionController", PartitionController);

	Nan::SetPrototypeMethod(tpl, "ProcessRMIs", ProcessRMIs);
	Nan::SetPrototypeMethod(tpl, "processRMIs", ProcessRMIs);

	Nan::SetPrototypeMethod(tpl, "Receive", Receive);
	Nan::SetPrototypeMethod(tpl, "receive", Receive);

	Nan::SetPrototypeMethod(tpl, "ReceiveDataObject", ReceiveDataObject);
	Nan::SetPrototypeMethod(tpl, "receiveDataObject", ReceiveDataObject);

	Nan::SetPrototypeMethod(tpl, "Reduce", Reduce);
	Nan::SetPrototypeMethod(tpl, "reduce", Reduce);

	Nan::SetPrototypeMethod(tpl, "RemoveAllRMICallbacks", RemoveAllRMICallbacks);
	Nan::SetPrototypeMethod(tpl, "removeAllRMICallbacks", RemoveAllRMICallbacks);

	Nan::SetPrototypeMethod(tpl, "RemoveFirstRMI", RemoveFirstRMI);
	Nan::SetPrototypeMethod(tpl, "removeFirstRMI", RemoveFirstRMI);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "Scatter", Scatter);
	Nan::SetPrototypeMethod(tpl, "scatter", Scatter);

	Nan::SetPrototypeMethod(tpl, "Send", Send);
	Nan::SetPrototypeMethod(tpl, "send", Send);

	Nan::SetPrototypeMethod(tpl, "SetBreakFlag", SetBreakFlag);
	Nan::SetPrototypeMethod(tpl, "setBreakFlag", SetBreakFlag);

	Nan::SetPrototypeMethod(tpl, "SetGlobalController", SetGlobalController);
	Nan::SetPrototypeMethod(tpl, "setGlobalController", SetGlobalController);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfProcesses", SetNumberOfProcesses);
	Nan::SetPrototypeMethod(tpl, "setNumberOfProcesses", SetNumberOfProcesses);

	Nan::SetPrototypeMethod(tpl, "SetSingleProcessObject", SetSingleProcessObject);
	Nan::SetPrototypeMethod(tpl, "setSingleProcessObject", SetSingleProcessObject);

	Nan::SetPrototypeMethod(tpl, "SingleMethodExecute", SingleMethodExecute);
	Nan::SetPrototypeMethod(tpl, "singleMethodExecute", SingleMethodExecute);

	Nan::SetPrototypeMethod(tpl, "TriggerBreakRMIs", TriggerBreakRMIs);
	Nan::SetPrototypeMethod(tpl, "triggerBreakRMIs", TriggerBreakRMIs);

	Nan::SetPrototypeMethod(tpl, "TriggerRMI", TriggerRMI);
	Nan::SetPrototypeMethod(tpl, "triggerRMI", TriggerRMI);

	Nan::SetPrototypeMethod(tpl, "TriggerRMIOnAllChildren", TriggerRMIOnAllChildren);
	Nan::SetPrototypeMethod(tpl, "triggerRMIOnAllChildren", TriggerRMIOnAllChildren);

	ptpl.Reset( tpl );
}

void VtkMultiProcessControllerWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkMultiProcessControllerWrap::AllGather(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataArrayWrap *a0 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataArrayWrap *a1 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[1]->ToObject());
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->AllGather(
				(vtkDataArray *) a0->native.GetPointer(),
				(vtkDataArray *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::AllGatherV(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataArrayWrap *a0 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataArrayWrap *a1 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[1]->ToObject());
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->AllGatherV(
				(vtkDataArray *) a0->native.GetPointer(),
				(vtkDataArray *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::AllReduce(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataArrayWrap *a0 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataArrayWrap *a1 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->AllReduce(
					(vtkDataArray *) a0->native.GetPointer(),
					(vtkDataArray *) a1->native.GetPointer(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::Barrier(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Barrier();
}

void VtkMultiProcessControllerWrap::Broadcast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->Broadcast(
				(vtkDataObject *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::BroadcastProcessRMIs(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->BroadcastProcessRMIs(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::BroadcastTriggerRMIOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BroadcastTriggerRMIOff();
}

void VtkMultiProcessControllerWrap::BroadcastTriggerRMIOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BroadcastTriggerRMIOn();
}

void VtkMultiProcessControllerWrap::CreateOutputWindow(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CreateOutputWindow();
}

void VtkMultiProcessControllerWrap::CreateSubController(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkProcessGroupWrap::ptpl))->HasInstance(info[0]))
	{
		VtkProcessGroupWrap *a0 = ObjectWrap::Unwrap<VtkProcessGroupWrap>(info[0]->ToObject());
		vtkMultiProcessController * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->CreateSubController(
			(vtkProcessGroup *) a0->native.GetPointer()
		);
			VtkMultiProcessControllerWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkMultiProcessControllerWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkMultiProcessControllerWrap *w = new VtkMultiProcessControllerWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::Finalize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Finalize(
			info[0]->Int32Value()
		);
		return;
	}
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Finalize();
}

void VtkMultiProcessControllerWrap::Gather(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataArrayWrap *a0 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataArrayWrap *a1 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->Gather(
					(vtkDataArray *) a0->native.GetPointer(),
					(vtkDataArray *) a1->native.GetPointer(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::GatherV(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataArrayWrap *a0 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataArrayWrap *a1 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject() && (Nan::New(VtkIdTypeArrayWrap::ptpl))->HasInstance(info[2]))
			{
				VtkIdTypeArrayWrap *a2 = ObjectWrap::Unwrap<VtkIdTypeArrayWrap>(info[2]->ToObject());
				if(info.Length() > 3 && info[3]->IsObject() && (Nan::New(VtkIdTypeArrayWrap::ptpl))->HasInstance(info[3]))
				{
					VtkIdTypeArrayWrap *a3 = ObjectWrap::Unwrap<VtkIdTypeArrayWrap>(info[3]->ToObject());
					if(info.Length() > 4 && info[4]->IsInt32())
					{
						int r;
						if(info.Length() != 5)
						{
							Nan::ThrowError("Too many parameters.");
							return;
						}
						r = native->GatherV(
							(vtkDataArray *) a0->native.GetPointer(),
							(vtkDataArray *) a1->native.GetPointer(),
							(vtkIdTypeArray *) a2->native.GetPointer(),
							(vtkIdTypeArray *) a3->native.GetPointer(),
							info[4]->Int32Value()
						);
						info.GetReturnValue().Set(Nan::New(r));
						return;
					}
				}
			}
			else if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->GatherV(
					(vtkDataArray *) a0->native.GetPointer(),
					(vtkDataArray *) a1->native.GetPointer(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::GetBreakFlag(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBreakFlag();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMultiProcessControllerWrap::GetBreakRMITag(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBreakRMITag();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMultiProcessControllerWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMultiProcessControllerWrap::GetCommunicator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	vtkCommunicator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCommunicator();
		VtkCommunicatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCommunicatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCommunicatorWrap *w = new VtkCommunicatorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMultiProcessControllerWrap::GetGlobalController(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	vtkMultiProcessController * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGlobalController();
		VtkMultiProcessControllerWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkMultiProcessControllerWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMultiProcessControllerWrap *w = new VtkMultiProcessControllerWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMultiProcessControllerWrap::GetLocalProcessId(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLocalProcessId();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMultiProcessControllerWrap::GetNumberOfProcesses(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfProcesses();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMultiProcessControllerWrap::GetRMIArgTag(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRMIArgTag();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMultiProcessControllerWrap::GetRMITag(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRMITag();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMultiProcessControllerWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::MultipleMethodExecute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->MultipleMethodExecute();
}

void VtkMultiProcessControllerWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	vtkMultiProcessController * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkMultiProcessControllerWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkMultiProcessControllerWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMultiProcessControllerWrap *w = new VtkMultiProcessControllerWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMultiProcessControllerWrap::PartitionController(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkMultiProcessController * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->PartitionController(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
				VtkMultiProcessControllerWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkMultiProcessControllerWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkMultiProcessControllerWrap *w = new VtkMultiProcessControllerWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::ProcessRMIs(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->ProcessRMIs(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->ProcessRMIs();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMultiProcessControllerWrap::Receive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->Receive(
					(vtkDataObject *) a0->native.GetPointer(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::ReceiveDataObject(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkDataObject * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->ReceiveDataObject(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
				VtkDataObjectWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkDataObjectWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkDataObjectWrap *w = new VtkDataObjectWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::Reduce(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataArrayWrap *a0 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataArrayWrap *a1 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->Reduce(
						(vtkDataArray *) a0->native.GetPointer(),
						(vtkDataArray *) a1->native.GetPointer(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::RemoveAllRMICallbacks(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveAllRMICallbacks(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::RemoveFirstRMI(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RemoveFirstRMI(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkMultiProcessController * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkMultiProcessControllerWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkMultiProcessControllerWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkMultiProcessControllerWrap *w = new VtkMultiProcessControllerWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::Scatter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataArrayWrap *a0 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataArrayWrap *a1 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->Scatter(
					(vtkDataArray *) a0->native.GetPointer(),
					(vtkDataArray *) a1->native.GetPointer(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::Send(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->Send(
					(vtkDataObject *) a0->native.GetPointer(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::SetBreakFlag(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBreakFlag(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::SetGlobalController(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkMultiProcessControllerWrap::ptpl))->HasInstance(info[0]))
	{
		VtkMultiProcessControllerWrap *a0 = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGlobalController(
			(vtkMultiProcessController *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::SetNumberOfProcesses(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfProcesses(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::SetSingleProcessObject(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkProcessWrap::ptpl))->HasInstance(info[0]))
	{
		VtkProcessWrap *a0 = ObjectWrap::Unwrap<VtkProcessWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSingleProcessObject(
			(vtkProcess *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::SingleMethodExecute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SingleMethodExecute();
}

void VtkMultiProcessControllerWrap::TriggerBreakRMIs(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TriggerBreakRMIs();
}

void VtkMultiProcessControllerWrap::TriggerRMI(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->TriggerRMI(
					info[0]->Int32Value(),
					*a1,
					info[2]->Int32Value()
				);
				return;
			}
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->TriggerRMI(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiProcessControllerWrap::TriggerRMIOnAllChildren(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiProcessControllerWrap *wrapper = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info.Holder());
	vtkMultiProcessController *native = (vtkMultiProcessController *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->TriggerRMIOnAllChildren(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->TriggerRMIOnAllChildren(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

