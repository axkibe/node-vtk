/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkMultiBlockDataSetAlgorithmWrap.h"
#include "vtkFLUENTReaderWrap.h"
#include "vtkObjectWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkFLUENTReaderWrap::ptpl;

VtkFLUENTReaderWrap::VtkFLUENTReaderWrap()
{ }

VtkFLUENTReaderWrap::VtkFLUENTReaderWrap(vtkSmartPointer<vtkFLUENTReader> _native)
{ native = _native; }

VtkFLUENTReaderWrap::~VtkFLUENTReaderWrap()
{ }

void VtkFLUENTReaderWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkFLUENTReader").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("FLUENTReader").ToLocalChecked(), ConstructorGetter);
}

void VtkFLUENTReaderWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkFLUENTReaderWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkMultiBlockDataSetAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkMultiBlockDataSetAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkFLUENTReaderWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "DisableAllCellArrays", DisableAllCellArrays);
	Nan::SetPrototypeMethod(tpl, "disableAllCellArrays", DisableAllCellArrays);

	Nan::SetPrototypeMethod(tpl, "EnableAllCellArrays", EnableAllCellArrays);
	Nan::SetPrototypeMethod(tpl, "enableAllCellArrays", EnableAllCellArrays);

	Nan::SetPrototypeMethod(tpl, "GetCellArrayName", GetCellArrayName);
	Nan::SetPrototypeMethod(tpl, "getCellArrayName", GetCellArrayName);

	Nan::SetPrototypeMethod(tpl, "GetCellArrayStatus", GetCellArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getCellArrayStatus", GetCellArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDataByteOrder", GetDataByteOrder);
	Nan::SetPrototypeMethod(tpl, "getDataByteOrder", GetDataByteOrder);

	Nan::SetPrototypeMethod(tpl, "GetDataByteOrderAsString", GetDataByteOrderAsString);
	Nan::SetPrototypeMethod(tpl, "getDataByteOrderAsString", GetDataByteOrderAsString);

	Nan::SetPrototypeMethod(tpl, "GetFileName", GetFileName);
	Nan::SetPrototypeMethod(tpl, "getFileName", GetFileName);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfCellArrays", GetNumberOfCellArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfCellArrays", GetNumberOfCellArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfCells", GetNumberOfCells);
	Nan::SetPrototypeMethod(tpl, "getNumberOfCells", GetNumberOfCells);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCellArrayStatus", SetCellArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setCellArrayStatus", SetCellArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetDataByteOrder", SetDataByteOrder);
	Nan::SetPrototypeMethod(tpl, "setDataByteOrder", SetDataByteOrder);

	Nan::SetPrototypeMethod(tpl, "SetDataByteOrderToBigEndian", SetDataByteOrderToBigEndian);
	Nan::SetPrototypeMethod(tpl, "setDataByteOrderToBigEndian", SetDataByteOrderToBigEndian);

	Nan::SetPrototypeMethod(tpl, "SetDataByteOrderToLittleEndian", SetDataByteOrderToLittleEndian);
	Nan::SetPrototypeMethod(tpl, "setDataByteOrderToLittleEndian", SetDataByteOrderToLittleEndian);

	Nan::SetPrototypeMethod(tpl, "SetFileName", SetFileName);
	Nan::SetPrototypeMethod(tpl, "setFileName", SetFileName);

#ifdef VTK_NODE_PLUS_VTKFLUENTREADERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKFLUENTREADERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkFLUENTReaderWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkFLUENTReader> native = vtkSmartPointer<vtkFLUENTReader>::New();
		VtkFLUENTReaderWrap* obj = new VtkFLUENTReaderWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkFLUENTReaderWrap::DisableAllCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DisableAllCellArrays();
}

void VtkFLUENTReaderWrap::EnableAllCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EnableAllCellArrays();
}

void VtkFLUENTReaderWrap::GetCellArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetCellArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFLUENTReaderWrap::GetCellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetCellArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFLUENTReaderWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkFLUENTReaderWrap::GetDataByteOrder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataByteOrder();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFLUENTReaderWrap::GetDataByteOrderAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataByteOrderAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkFLUENTReaderWrap::GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkFLUENTReaderWrap::GetNumberOfCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfCellArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFLUENTReaderWrap::GetNumberOfCells(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfCells();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkFLUENTReaderWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFLUENTReaderWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	vtkFLUENTReader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkFLUENTReaderWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkFLUENTReaderWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkFLUENTReaderWrap *w = new VtkFLUENTReaderWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkFLUENTReaderWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkFLUENTReader * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkFLUENTReaderWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkFLUENTReaderWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkFLUENTReaderWrap *w = new VtkFLUENTReaderWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFLUENTReaderWrap::SetCellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetCellArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFLUENTReaderWrap::SetDataByteOrder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDataByteOrder(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFLUENTReaderWrap::SetDataByteOrderToBigEndian(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataByteOrderToBigEndian();
}

void VtkFLUENTReaderWrap::SetDataByteOrderToLittleEndian(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataByteOrderToLittleEndian();
}

void VtkFLUENTReaderWrap::SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFLUENTReaderWrap *wrapper = ObjectWrap::Unwrap<VtkFLUENTReaderWrap>(info.Holder());
	vtkFLUENTReader *native = (vtkFLUENTReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

