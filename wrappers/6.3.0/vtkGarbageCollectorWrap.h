/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKGARBAGECOLLECTORWRAP_H
#define NATIVE_EXTENSION_VTK_VTKGARBAGECOLLECTORWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkGarbageCollector.h>

#include "vtkObjectWrap.h"

class VtkGarbageCollectorWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkGarbageCollectorWrap(vtkSmartPointer<vtkGarbageCollector>);
		VtkGarbageCollectorWrap();
		~VtkGarbageCollectorWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void Collect(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DeferredCollectionPop(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DeferredCollectionPush(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGlobalDebugFlag(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGlobalDebugFlag(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
