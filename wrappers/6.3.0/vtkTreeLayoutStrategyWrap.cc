/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkGraphLayoutStrategyWrap.h"
#include "vtkTreeLayoutStrategyWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkTreeLayoutStrategyWrap::ptpl;

VtkTreeLayoutStrategyWrap::VtkTreeLayoutStrategyWrap()
{ }

VtkTreeLayoutStrategyWrap::VtkTreeLayoutStrategyWrap(vtkSmartPointer<vtkTreeLayoutStrategy> _native)
{ native = _native; }

VtkTreeLayoutStrategyWrap::~VtkTreeLayoutStrategyWrap()
{ }

void VtkTreeLayoutStrategyWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkTreeLayoutStrategy").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("TreeLayoutStrategy").ToLocalChecked(), ConstructorGetter);
}

void VtkTreeLayoutStrategyWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkTreeLayoutStrategyWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkGraphLayoutStrategyWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkGraphLayoutStrategyWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkTreeLayoutStrategyWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetAngle", GetAngle);
	Nan::SetPrototypeMethod(tpl, "getAngle", GetAngle);

	Nan::SetPrototypeMethod(tpl, "GetAngleMaxValue", GetAngleMaxValue);
	Nan::SetPrototypeMethod(tpl, "getAngleMaxValue", GetAngleMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetAngleMinValue", GetAngleMinValue);
	Nan::SetPrototypeMethod(tpl, "getAngleMinValue", GetAngleMinValue);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDistanceArrayName", GetDistanceArrayName);
	Nan::SetPrototypeMethod(tpl, "getDistanceArrayName", GetDistanceArrayName);

	Nan::SetPrototypeMethod(tpl, "GetLeafSpacing", GetLeafSpacing);
	Nan::SetPrototypeMethod(tpl, "getLeafSpacing", GetLeafSpacing);

	Nan::SetPrototypeMethod(tpl, "GetLeafSpacingMaxValue", GetLeafSpacingMaxValue);
	Nan::SetPrototypeMethod(tpl, "getLeafSpacingMaxValue", GetLeafSpacingMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetLeafSpacingMinValue", GetLeafSpacingMinValue);
	Nan::SetPrototypeMethod(tpl, "getLeafSpacingMinValue", GetLeafSpacingMinValue);

	Nan::SetPrototypeMethod(tpl, "GetLogSpacingValue", GetLogSpacingValue);
	Nan::SetPrototypeMethod(tpl, "getLogSpacingValue", GetLogSpacingValue);

	Nan::SetPrototypeMethod(tpl, "GetRadial", GetRadial);
	Nan::SetPrototypeMethod(tpl, "getRadial", GetRadial);

	Nan::SetPrototypeMethod(tpl, "GetReverseEdges", GetReverseEdges);
	Nan::SetPrototypeMethod(tpl, "getReverseEdges", GetReverseEdges);

	Nan::SetPrototypeMethod(tpl, "GetRotation", GetRotation);
	Nan::SetPrototypeMethod(tpl, "getRotation", GetRotation);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "Layout", Layout);
	Nan::SetPrototypeMethod(tpl, "layout", Layout);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RadialOff", RadialOff);
	Nan::SetPrototypeMethod(tpl, "radialOff", RadialOff);

	Nan::SetPrototypeMethod(tpl, "RadialOn", RadialOn);
	Nan::SetPrototypeMethod(tpl, "radialOn", RadialOn);

	Nan::SetPrototypeMethod(tpl, "ReverseEdgesOff", ReverseEdgesOff);
	Nan::SetPrototypeMethod(tpl, "reverseEdgesOff", ReverseEdgesOff);

	Nan::SetPrototypeMethod(tpl, "ReverseEdgesOn", ReverseEdgesOn);
	Nan::SetPrototypeMethod(tpl, "reverseEdgesOn", ReverseEdgesOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAngle", SetAngle);
	Nan::SetPrototypeMethod(tpl, "setAngle", SetAngle);

	Nan::SetPrototypeMethod(tpl, "SetDistanceArrayName", SetDistanceArrayName);
	Nan::SetPrototypeMethod(tpl, "setDistanceArrayName", SetDistanceArrayName);

	Nan::SetPrototypeMethod(tpl, "SetLeafSpacing", SetLeafSpacing);
	Nan::SetPrototypeMethod(tpl, "setLeafSpacing", SetLeafSpacing);

	Nan::SetPrototypeMethod(tpl, "SetLogSpacingValue", SetLogSpacingValue);
	Nan::SetPrototypeMethod(tpl, "setLogSpacingValue", SetLogSpacingValue);

	Nan::SetPrototypeMethod(tpl, "SetRadial", SetRadial);
	Nan::SetPrototypeMethod(tpl, "setRadial", SetRadial);

	Nan::SetPrototypeMethod(tpl, "SetReverseEdges", SetReverseEdges);
	Nan::SetPrototypeMethod(tpl, "setReverseEdges", SetReverseEdges);

	Nan::SetPrototypeMethod(tpl, "SetRotation", SetRotation);
	Nan::SetPrototypeMethod(tpl, "setRotation", SetRotation);

	ptpl.Reset( tpl );
}

void VtkTreeLayoutStrategyWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkTreeLayoutStrategy> native = vtkSmartPointer<vtkTreeLayoutStrategy>::New();
		VtkTreeLayoutStrategyWrap* obj = new VtkTreeLayoutStrategyWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkTreeLayoutStrategyWrap::GetAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTreeLayoutStrategyWrap::GetAngleMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAngleMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTreeLayoutStrategyWrap::GetAngleMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAngleMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTreeLayoutStrategyWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkTreeLayoutStrategyWrap::GetDistanceArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDistanceArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkTreeLayoutStrategyWrap::GetLeafSpacing(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLeafSpacing();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTreeLayoutStrategyWrap::GetLeafSpacingMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLeafSpacingMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTreeLayoutStrategyWrap::GetLeafSpacingMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLeafSpacingMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTreeLayoutStrategyWrap::GetLogSpacingValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLogSpacingValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTreeLayoutStrategyWrap::GetRadial(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadial();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTreeLayoutStrategyWrap::GetReverseEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetReverseEdges();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTreeLayoutStrategyWrap::GetRotation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRotation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTreeLayoutStrategyWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTreeLayoutStrategyWrap::Layout(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Layout();
}

void VtkTreeLayoutStrategyWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	vtkTreeLayoutStrategy * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkTreeLayoutStrategyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTreeLayoutStrategyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTreeLayoutStrategyWrap *w = new VtkTreeLayoutStrategyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkTreeLayoutStrategyWrap::RadialOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RadialOff();
}

void VtkTreeLayoutStrategyWrap::RadialOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RadialOn();
}

void VtkTreeLayoutStrategyWrap::ReverseEdgesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReverseEdgesOff();
}

void VtkTreeLayoutStrategyWrap::ReverseEdgesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReverseEdgesOn();
}

void VtkTreeLayoutStrategyWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkTreeLayoutStrategy * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkTreeLayoutStrategyWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkTreeLayoutStrategyWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkTreeLayoutStrategyWrap *w = new VtkTreeLayoutStrategyWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTreeLayoutStrategyWrap::SetAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAngle(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTreeLayoutStrategyWrap::SetDistanceArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDistanceArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTreeLayoutStrategyWrap::SetLeafSpacing(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLeafSpacing(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTreeLayoutStrategyWrap::SetLogSpacingValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLogSpacingValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTreeLayoutStrategyWrap::SetRadial(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRadial(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTreeLayoutStrategyWrap::SetReverseEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetReverseEdges(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTreeLayoutStrategyWrap::SetRotation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkTreeLayoutStrategyWrap>(info.Holder());
	vtkTreeLayoutStrategy *native = (vtkTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRotation(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

