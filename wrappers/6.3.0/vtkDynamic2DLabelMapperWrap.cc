/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkLabeledDataMapperWrap.h"
#include "vtkDynamic2DLabelMapperWrap.h"
#include "vtkObjectWrap.h"
#include "vtkViewportWrap.h"
#include "vtkActor2DWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkDynamic2DLabelMapperWrap::ptpl;

VtkDynamic2DLabelMapperWrap::VtkDynamic2DLabelMapperWrap()
{ }

VtkDynamic2DLabelMapperWrap::VtkDynamic2DLabelMapperWrap(vtkSmartPointer<vtkDynamic2DLabelMapper> _native)
{ native = _native; }

VtkDynamic2DLabelMapperWrap::~VtkDynamic2DLabelMapperWrap()
{ }

void VtkDynamic2DLabelMapperWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkDynamic2DLabelMapper").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("Dynamic2DLabelMapper").ToLocalChecked(), ConstructorGetter);
}

void VtkDynamic2DLabelMapperWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkDynamic2DLabelMapperWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkLabeledDataMapperWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkLabeledDataMapperWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkDynamic2DLabelMapperWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RenderOpaqueGeometry", RenderOpaqueGeometry);
	Nan::SetPrototypeMethod(tpl, "renderOpaqueGeometry", RenderOpaqueGeometry);

	Nan::SetPrototypeMethod(tpl, "RenderOverlay", RenderOverlay);
	Nan::SetPrototypeMethod(tpl, "renderOverlay", RenderOverlay);

	Nan::SetPrototypeMethod(tpl, "ReversePriorityOff", ReversePriorityOff);
	Nan::SetPrototypeMethod(tpl, "reversePriorityOff", ReversePriorityOff);

	Nan::SetPrototypeMethod(tpl, "ReversePriorityOn", ReversePriorityOn);
	Nan::SetPrototypeMethod(tpl, "reversePriorityOn", ReversePriorityOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetPriorityArrayName", SetPriorityArrayName);
	Nan::SetPrototypeMethod(tpl, "setPriorityArrayName", SetPriorityArrayName);

	ptpl.Reset( tpl );
}

void VtkDynamic2DLabelMapperWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkDynamic2DLabelMapper> native = vtkSmartPointer<vtkDynamic2DLabelMapper>::New();
		VtkDynamic2DLabelMapperWrap* obj = new VtkDynamic2DLabelMapperWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkDynamic2DLabelMapperWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDynamic2DLabelMapperWrap *wrapper = ObjectWrap::Unwrap<VtkDynamic2DLabelMapperWrap>(info.Holder());
	vtkDynamic2DLabelMapper *native = (vtkDynamic2DLabelMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDynamic2DLabelMapperWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDynamic2DLabelMapperWrap *wrapper = ObjectWrap::Unwrap<VtkDynamic2DLabelMapperWrap>(info.Holder());
	vtkDynamic2DLabelMapper *native = (vtkDynamic2DLabelMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDynamic2DLabelMapperWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDynamic2DLabelMapperWrap *wrapper = ObjectWrap::Unwrap<VtkDynamic2DLabelMapperWrap>(info.Holder());
	vtkDynamic2DLabelMapper *native = (vtkDynamic2DLabelMapper *)wrapper->native.GetPointer();
	vtkDynamic2DLabelMapper * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkDynamic2DLabelMapperWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDynamic2DLabelMapperWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDynamic2DLabelMapperWrap *w = new VtkDynamic2DLabelMapperWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDynamic2DLabelMapperWrap::RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDynamic2DLabelMapperWrap *wrapper = ObjectWrap::Unwrap<VtkDynamic2DLabelMapperWrap>(info.Holder());
	vtkDynamic2DLabelMapper *native = (vtkDynamic2DLabelMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkActor2DWrap::ptpl))->HasInstance(info[1]))
		{
			VtkActor2DWrap *a1 = ObjectWrap::Unwrap<VtkActor2DWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->RenderOpaqueGeometry(
				(vtkViewport *) a0->native.GetPointer(),
				(vtkActor2D *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDynamic2DLabelMapperWrap::RenderOverlay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDynamic2DLabelMapperWrap *wrapper = ObjectWrap::Unwrap<VtkDynamic2DLabelMapperWrap>(info.Holder());
	vtkDynamic2DLabelMapper *native = (vtkDynamic2DLabelMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkActor2DWrap::ptpl))->HasInstance(info[1]))
		{
			VtkActor2DWrap *a1 = ObjectWrap::Unwrap<VtkActor2DWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->RenderOverlay(
				(vtkViewport *) a0->native.GetPointer(),
				(vtkActor2D *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDynamic2DLabelMapperWrap::ReversePriorityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDynamic2DLabelMapperWrap *wrapper = ObjectWrap::Unwrap<VtkDynamic2DLabelMapperWrap>(info.Holder());
	vtkDynamic2DLabelMapper *native = (vtkDynamic2DLabelMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReversePriorityOff();
}

void VtkDynamic2DLabelMapperWrap::ReversePriorityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDynamic2DLabelMapperWrap *wrapper = ObjectWrap::Unwrap<VtkDynamic2DLabelMapperWrap>(info.Holder());
	vtkDynamic2DLabelMapper *native = (vtkDynamic2DLabelMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReversePriorityOn();
}

void VtkDynamic2DLabelMapperWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDynamic2DLabelMapperWrap *wrapper = ObjectWrap::Unwrap<VtkDynamic2DLabelMapperWrap>(info.Holder());
	vtkDynamic2DLabelMapper *native = (vtkDynamic2DLabelMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkDynamic2DLabelMapper * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkDynamic2DLabelMapperWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkDynamic2DLabelMapperWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDynamic2DLabelMapperWrap *w = new VtkDynamic2DLabelMapperWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDynamic2DLabelMapperWrap::SetPriorityArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDynamic2DLabelMapperWrap *wrapper = ObjectWrap::Unwrap<VtkDynamic2DLabelMapperWrap>(info.Holder());
	vtkDynamic2DLabelMapper *native = (vtkDynamic2DLabelMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPriorityArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

