/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKDISTANCEREPRESENTATION3DWRAP_H
#define NATIVE_EXTENSION_VTK_VTKDISTANCEREPRESENTATION3DWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkDistanceRepresentation3D.h>

#include "vtkDistanceRepresentationWrap.h"

class VtkDistanceRepresentation3DWrap : public VtkDistanceRepresentationWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkDistanceRepresentation3DWrap(vtkSmartPointer<vtkDistanceRepresentation3D>);
		VtkDistanceRepresentation3DWrap();
		~VtkDistanceRepresentation3DWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void BuildRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDistance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGlyphActor(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGlyphScale(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLabelActor(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLabelPosition(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLabelProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLineProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaximumNumberOfRulerTicks(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaximumNumberOfRulerTicksMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaximumNumberOfRulerTicksMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RenderTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGlyphScale(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLabelPosition(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLabelScale(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaximumNumberOfRulerTicks(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
