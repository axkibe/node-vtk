/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkProp3DWrap.h"
#include "vtkAxesActorWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPropCollectionWrap.h"
#include "vtkViewportWrap.h"
#include "vtkPropWrap.h"
#include "vtkWindowWrap.h"
#include "vtkPolyDataWrap.h"
#include "vtkPropertyWrap.h"
#include "vtkCaptionActor2DWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkAxesActorWrap::ptpl;

VtkAxesActorWrap::VtkAxesActorWrap()
{ }

VtkAxesActorWrap::VtkAxesActorWrap(vtkSmartPointer<vtkAxesActor> _native)
{ native = _native; }

VtkAxesActorWrap::~VtkAxesActorWrap()
{ }

void VtkAxesActorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkAxesActor").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("AxesActor").ToLocalChecked(), ConstructorGetter);
}

void VtkAxesActorWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkAxesActorWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkProp3DWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkProp3DWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkAxesActorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AxisLabelsOff", AxisLabelsOff);
	Nan::SetPrototypeMethod(tpl, "axisLabelsOff", AxisLabelsOff);

	Nan::SetPrototypeMethod(tpl, "AxisLabelsOn", AxisLabelsOn);
	Nan::SetPrototypeMethod(tpl, "axisLabelsOn", AxisLabelsOn);

	Nan::SetPrototypeMethod(tpl, "GetActors", GetActors);
	Nan::SetPrototypeMethod(tpl, "getActors", GetActors);

	Nan::SetPrototypeMethod(tpl, "GetAxisLabels", GetAxisLabels);
	Nan::SetPrototypeMethod(tpl, "getAxisLabels", GetAxisLabels);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetConeRadius", GetConeRadius);
	Nan::SetPrototypeMethod(tpl, "getConeRadius", GetConeRadius);

	Nan::SetPrototypeMethod(tpl, "GetConeRadiusMaxValue", GetConeRadiusMaxValue);
	Nan::SetPrototypeMethod(tpl, "getConeRadiusMaxValue", GetConeRadiusMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetConeRadiusMinValue", GetConeRadiusMinValue);
	Nan::SetPrototypeMethod(tpl, "getConeRadiusMinValue", GetConeRadiusMinValue);

	Nan::SetPrototypeMethod(tpl, "GetConeResolution", GetConeResolution);
	Nan::SetPrototypeMethod(tpl, "getConeResolution", GetConeResolution);

	Nan::SetPrototypeMethod(tpl, "GetConeResolutionMaxValue", GetConeResolutionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getConeResolutionMaxValue", GetConeResolutionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetConeResolutionMinValue", GetConeResolutionMinValue);
	Nan::SetPrototypeMethod(tpl, "getConeResolutionMinValue", GetConeResolutionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetCylinderRadius", GetCylinderRadius);
	Nan::SetPrototypeMethod(tpl, "getCylinderRadius", GetCylinderRadius);

	Nan::SetPrototypeMethod(tpl, "GetCylinderRadiusMaxValue", GetCylinderRadiusMaxValue);
	Nan::SetPrototypeMethod(tpl, "getCylinderRadiusMaxValue", GetCylinderRadiusMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetCylinderRadiusMinValue", GetCylinderRadiusMinValue);
	Nan::SetPrototypeMethod(tpl, "getCylinderRadiusMinValue", GetCylinderRadiusMinValue);

	Nan::SetPrototypeMethod(tpl, "GetCylinderResolution", GetCylinderResolution);
	Nan::SetPrototypeMethod(tpl, "getCylinderResolution", GetCylinderResolution);

	Nan::SetPrototypeMethod(tpl, "GetCylinderResolutionMaxValue", GetCylinderResolutionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getCylinderResolutionMaxValue", GetCylinderResolutionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetCylinderResolutionMinValue", GetCylinderResolutionMinValue);
	Nan::SetPrototypeMethod(tpl, "getCylinderResolutionMinValue", GetCylinderResolutionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetShaftType", GetShaftType);
	Nan::SetPrototypeMethod(tpl, "getShaftType", GetShaftType);

	Nan::SetPrototypeMethod(tpl, "GetSphereRadius", GetSphereRadius);
	Nan::SetPrototypeMethod(tpl, "getSphereRadius", GetSphereRadius);

	Nan::SetPrototypeMethod(tpl, "GetSphereRadiusMaxValue", GetSphereRadiusMaxValue);
	Nan::SetPrototypeMethod(tpl, "getSphereRadiusMaxValue", GetSphereRadiusMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetSphereRadiusMinValue", GetSphereRadiusMinValue);
	Nan::SetPrototypeMethod(tpl, "getSphereRadiusMinValue", GetSphereRadiusMinValue);

	Nan::SetPrototypeMethod(tpl, "GetSphereResolution", GetSphereResolution);
	Nan::SetPrototypeMethod(tpl, "getSphereResolution", GetSphereResolution);

	Nan::SetPrototypeMethod(tpl, "GetSphereResolutionMaxValue", GetSphereResolutionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getSphereResolutionMaxValue", GetSphereResolutionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetSphereResolutionMinValue", GetSphereResolutionMinValue);
	Nan::SetPrototypeMethod(tpl, "getSphereResolutionMinValue", GetSphereResolutionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetTipType", GetTipType);
	Nan::SetPrototypeMethod(tpl, "getTipType", GetTipType);

	Nan::SetPrototypeMethod(tpl, "GetUserDefinedShaft", GetUserDefinedShaft);
	Nan::SetPrototypeMethod(tpl, "getUserDefinedShaft", GetUserDefinedShaft);

	Nan::SetPrototypeMethod(tpl, "GetUserDefinedTip", GetUserDefinedTip);
	Nan::SetPrototypeMethod(tpl, "getUserDefinedTip", GetUserDefinedTip);

	Nan::SetPrototypeMethod(tpl, "GetXAxisCaptionActor2D", GetXAxisCaptionActor2D);
	Nan::SetPrototypeMethod(tpl, "getXAxisCaptionActor2D", GetXAxisCaptionActor2D);

	Nan::SetPrototypeMethod(tpl, "GetXAxisLabelText", GetXAxisLabelText);
	Nan::SetPrototypeMethod(tpl, "getXAxisLabelText", GetXAxisLabelText);

	Nan::SetPrototypeMethod(tpl, "GetXAxisShaftProperty", GetXAxisShaftProperty);
	Nan::SetPrototypeMethod(tpl, "getXAxisShaftProperty", GetXAxisShaftProperty);

	Nan::SetPrototypeMethod(tpl, "GetXAxisTipProperty", GetXAxisTipProperty);
	Nan::SetPrototypeMethod(tpl, "getXAxisTipProperty", GetXAxisTipProperty);

	Nan::SetPrototypeMethod(tpl, "GetYAxisCaptionActor2D", GetYAxisCaptionActor2D);
	Nan::SetPrototypeMethod(tpl, "getYAxisCaptionActor2D", GetYAxisCaptionActor2D);

	Nan::SetPrototypeMethod(tpl, "GetYAxisLabelText", GetYAxisLabelText);
	Nan::SetPrototypeMethod(tpl, "getYAxisLabelText", GetYAxisLabelText);

	Nan::SetPrototypeMethod(tpl, "GetYAxisShaftProperty", GetYAxisShaftProperty);
	Nan::SetPrototypeMethod(tpl, "getYAxisShaftProperty", GetYAxisShaftProperty);

	Nan::SetPrototypeMethod(tpl, "GetYAxisTipProperty", GetYAxisTipProperty);
	Nan::SetPrototypeMethod(tpl, "getYAxisTipProperty", GetYAxisTipProperty);

	Nan::SetPrototypeMethod(tpl, "GetZAxisCaptionActor2D", GetZAxisCaptionActor2D);
	Nan::SetPrototypeMethod(tpl, "getZAxisCaptionActor2D", GetZAxisCaptionActor2D);

	Nan::SetPrototypeMethod(tpl, "GetZAxisLabelText", GetZAxisLabelText);
	Nan::SetPrototypeMethod(tpl, "getZAxisLabelText", GetZAxisLabelText);

	Nan::SetPrototypeMethod(tpl, "GetZAxisShaftProperty", GetZAxisShaftProperty);
	Nan::SetPrototypeMethod(tpl, "getZAxisShaftProperty", GetZAxisShaftProperty);

	Nan::SetPrototypeMethod(tpl, "GetZAxisTipProperty", GetZAxisTipProperty);
	Nan::SetPrototypeMethod(tpl, "getZAxisTipProperty", GetZAxisTipProperty);

	Nan::SetPrototypeMethod(tpl, "HasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "hasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "RenderOpaqueGeometry", RenderOpaqueGeometry);
	Nan::SetPrototypeMethod(tpl, "renderOpaqueGeometry", RenderOpaqueGeometry);

	Nan::SetPrototypeMethod(tpl, "RenderOverlay", RenderOverlay);
	Nan::SetPrototypeMethod(tpl, "renderOverlay", RenderOverlay);

	Nan::SetPrototypeMethod(tpl, "RenderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "renderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAxisLabels", SetAxisLabels);
	Nan::SetPrototypeMethod(tpl, "setAxisLabels", SetAxisLabels);

	Nan::SetPrototypeMethod(tpl, "SetConeRadius", SetConeRadius);
	Nan::SetPrototypeMethod(tpl, "setConeRadius", SetConeRadius);

	Nan::SetPrototypeMethod(tpl, "SetConeResolution", SetConeResolution);
	Nan::SetPrototypeMethod(tpl, "setConeResolution", SetConeResolution);

	Nan::SetPrototypeMethod(tpl, "SetCylinderRadius", SetCylinderRadius);
	Nan::SetPrototypeMethod(tpl, "setCylinderRadius", SetCylinderRadius);

	Nan::SetPrototypeMethod(tpl, "SetCylinderResolution", SetCylinderResolution);
	Nan::SetPrototypeMethod(tpl, "setCylinderResolution", SetCylinderResolution);

	Nan::SetPrototypeMethod(tpl, "SetNormalizedLabelPosition", SetNormalizedLabelPosition);
	Nan::SetPrototypeMethod(tpl, "setNormalizedLabelPosition", SetNormalizedLabelPosition);

	Nan::SetPrototypeMethod(tpl, "SetNormalizedShaftLength", SetNormalizedShaftLength);
	Nan::SetPrototypeMethod(tpl, "setNormalizedShaftLength", SetNormalizedShaftLength);

	Nan::SetPrototypeMethod(tpl, "SetNormalizedTipLength", SetNormalizedTipLength);
	Nan::SetPrototypeMethod(tpl, "setNormalizedTipLength", SetNormalizedTipLength);

	Nan::SetPrototypeMethod(tpl, "SetShaftType", SetShaftType);
	Nan::SetPrototypeMethod(tpl, "setShaftType", SetShaftType);

	Nan::SetPrototypeMethod(tpl, "SetShaftTypeToCylinder", SetShaftTypeToCylinder);
	Nan::SetPrototypeMethod(tpl, "setShaftTypeToCylinder", SetShaftTypeToCylinder);

	Nan::SetPrototypeMethod(tpl, "SetShaftTypeToLine", SetShaftTypeToLine);
	Nan::SetPrototypeMethod(tpl, "setShaftTypeToLine", SetShaftTypeToLine);

	Nan::SetPrototypeMethod(tpl, "SetShaftTypeToUserDefined", SetShaftTypeToUserDefined);
	Nan::SetPrototypeMethod(tpl, "setShaftTypeToUserDefined", SetShaftTypeToUserDefined);

	Nan::SetPrototypeMethod(tpl, "SetSphereRadius", SetSphereRadius);
	Nan::SetPrototypeMethod(tpl, "setSphereRadius", SetSphereRadius);

	Nan::SetPrototypeMethod(tpl, "SetSphereResolution", SetSphereResolution);
	Nan::SetPrototypeMethod(tpl, "setSphereResolution", SetSphereResolution);

	Nan::SetPrototypeMethod(tpl, "SetTipType", SetTipType);
	Nan::SetPrototypeMethod(tpl, "setTipType", SetTipType);

	Nan::SetPrototypeMethod(tpl, "SetTipTypeToCone", SetTipTypeToCone);
	Nan::SetPrototypeMethod(tpl, "setTipTypeToCone", SetTipTypeToCone);

	Nan::SetPrototypeMethod(tpl, "SetTipTypeToSphere", SetTipTypeToSphere);
	Nan::SetPrototypeMethod(tpl, "setTipTypeToSphere", SetTipTypeToSphere);

	Nan::SetPrototypeMethod(tpl, "SetTipTypeToUserDefined", SetTipTypeToUserDefined);
	Nan::SetPrototypeMethod(tpl, "setTipTypeToUserDefined", SetTipTypeToUserDefined);

	Nan::SetPrototypeMethod(tpl, "SetTotalLength", SetTotalLength);
	Nan::SetPrototypeMethod(tpl, "setTotalLength", SetTotalLength);

	Nan::SetPrototypeMethod(tpl, "SetUserDefinedShaft", SetUserDefinedShaft);
	Nan::SetPrototypeMethod(tpl, "setUserDefinedShaft", SetUserDefinedShaft);

	Nan::SetPrototypeMethod(tpl, "SetUserDefinedTip", SetUserDefinedTip);
	Nan::SetPrototypeMethod(tpl, "setUserDefinedTip", SetUserDefinedTip);

	Nan::SetPrototypeMethod(tpl, "SetXAxisLabelText", SetXAxisLabelText);
	Nan::SetPrototypeMethod(tpl, "setXAxisLabelText", SetXAxisLabelText);

	Nan::SetPrototypeMethod(tpl, "SetYAxisLabelText", SetYAxisLabelText);
	Nan::SetPrototypeMethod(tpl, "setYAxisLabelText", SetYAxisLabelText);

	Nan::SetPrototypeMethod(tpl, "SetZAxisLabelText", SetZAxisLabelText);
	Nan::SetPrototypeMethod(tpl, "setZAxisLabelText", SetZAxisLabelText);

	Nan::SetPrototypeMethod(tpl, "ShallowCopy", ShallowCopy);
	Nan::SetPrototypeMethod(tpl, "shallowCopy", ShallowCopy);

	ptpl.Reset( tpl );
}

void VtkAxesActorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkAxesActor> native = vtkSmartPointer<vtkAxesActor>::New();
		VtkAxesActorWrap* obj = new VtkAxesActorWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkAxesActorWrap::AxisLabelsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AxisLabelsOff();
}

void VtkAxesActorWrap::AxisLabelsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AxisLabelsOn();
}

void VtkAxesActorWrap::GetActors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropCollectionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropCollectionWrap *a0 = ObjectWrap::Unwrap<VtkPropCollectionWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetActors(
			(vtkPropCollection *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::GetAxisLabels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAxisLabels();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAxesActorWrap::GetConeRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConeRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetConeRadiusMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConeRadiusMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetConeRadiusMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConeRadiusMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetConeResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConeResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetConeResolutionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConeResolutionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetConeResolutionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConeResolutionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetCylinderRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCylinderRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetCylinderRadiusMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCylinderRadiusMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetCylinderRadiusMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCylinderRadiusMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetCylinderResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCylinderResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetCylinderResolutionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCylinderResolutionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetCylinderResolutionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCylinderResolutionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetShaftType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetShaftType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetSphereRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSphereRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetSphereRadiusMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSphereRadiusMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetSphereRadiusMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSphereRadiusMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetSphereResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSphereResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetSphereResolutionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSphereResolutionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetSphereResolutionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSphereResolutionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetTipType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTipType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::GetUserDefinedShaft(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	vtkPolyData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUserDefinedShaft();
		VtkPolyDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPolyDataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataWrap *w = new VtkPolyDataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAxesActorWrap::GetUserDefinedTip(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	vtkPolyData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUserDefinedTip();
		VtkPolyDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPolyDataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataWrap *w = new VtkPolyDataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAxesActorWrap::GetXAxisCaptionActor2D(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	vtkCaptionActor2D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXAxisCaptionActor2D();
		VtkCaptionActor2DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCaptionActor2DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCaptionActor2DWrap *w = new VtkCaptionActor2DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAxesActorWrap::GetXAxisLabelText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXAxisLabelText();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAxesActorWrap::GetXAxisShaftProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXAxisShaftProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAxesActorWrap::GetXAxisTipProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXAxisTipProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAxesActorWrap::GetYAxisCaptionActor2D(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	vtkCaptionActor2D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYAxisCaptionActor2D();
		VtkCaptionActor2DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCaptionActor2DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCaptionActor2DWrap *w = new VtkCaptionActor2DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAxesActorWrap::GetYAxisLabelText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYAxisLabelText();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAxesActorWrap::GetYAxisShaftProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYAxisShaftProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAxesActorWrap::GetYAxisTipProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYAxisTipProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAxesActorWrap::GetZAxisCaptionActor2D(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	vtkCaptionActor2D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZAxisCaptionActor2D();
		VtkCaptionActor2DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCaptionActor2DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCaptionActor2DWrap *w = new VtkCaptionActor2DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAxesActorWrap::GetZAxisLabelText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZAxisLabelText();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAxesActorWrap::GetZAxisShaftProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZAxisShaftProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAxesActorWrap::GetZAxisTipProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZAxisTipProperty();
		VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAxesActorWrap::HasTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasTranslucentPolygonalGeometry();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAxesActorWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	vtkAxesActor * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkAxesActorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAxesActorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAxesActorWrap *w = new VtkAxesActorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAxesActorWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOpaqueGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::RenderOverlay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOverlay(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::RenderTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderTranslucentPolygonalGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkAxesActor * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkAxesActorWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkAxesActorWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAxesActorWrap *w = new VtkAxesActorWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetAxisLabels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAxisLabels(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetConeRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConeRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetConeResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConeResolution(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetCylinderRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCylinderRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetCylinderResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCylinderResolution(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetNormalizedLabelPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetNormalizedLabelPosition(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetNormalizedShaftLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetNormalizedShaftLength(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetNormalizedTipLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetNormalizedTipLength(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetShaftType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetShaftType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetShaftTypeToCylinder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetShaftTypeToCylinder();
}

void VtkAxesActorWrap::SetShaftTypeToLine(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetShaftTypeToLine();
}

void VtkAxesActorWrap::SetShaftTypeToUserDefined(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetShaftTypeToUserDefined();
}

void VtkAxesActorWrap::SetSphereRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSphereRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetSphereResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSphereResolution(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetTipType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTipType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetTipTypeToCone(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetTipTypeToCone();
}

void VtkAxesActorWrap::SetTipTypeToSphere(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetTipTypeToSphere();
}

void VtkAxesActorWrap::SetTipTypeToUserDefined(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetTipTypeToUserDefined();
}

void VtkAxesActorWrap::SetTotalLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetTotalLength(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetUserDefinedShaft(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUserDefinedShaft(
			(vtkPolyData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetUserDefinedTip(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUserDefinedTip(
			(vtkPolyData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetXAxisLabelText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetXAxisLabelText(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetYAxisLabelText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetYAxisLabelText(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::SetZAxisLabelText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetZAxisLabelText(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAxesActorWrap::ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAxesActorWrap *wrapper = ObjectWrap::Unwrap<VtkAxesActorWrap>(info.Holder());
	vtkAxesActor *native = (vtkAxesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropWrap *a0 = ObjectWrap::Unwrap<VtkPropWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ShallowCopy(
			(vtkProp *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

