/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKANGULARPERIODICFILTERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKANGULARPERIODICFILTERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkAngularPeriodicFilter.h>

#include "vtkPeriodicFilterWrap.h"

class VtkAngularPeriodicFilterWrap : public VtkPeriodicFilterWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkAngularPeriodicFilterWrap(vtkSmartPointer<vtkAngularPeriodicFilter>);
		VtkAngularPeriodicFilterWrap();
		~VtkAngularPeriodicFilterWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetCenter(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRotationAngle(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRotationArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRotationAxis(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRotationAxisMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRotationAxisMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRotationMode(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRotationModeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRotationModeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCenter(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRotationAngle(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRotationArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRotationAxis(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRotationAxisToX(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRotationAxisToY(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRotationAxisToZ(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRotationMode(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRotationModeToArrayValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRotationModeToDirectAngle(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
