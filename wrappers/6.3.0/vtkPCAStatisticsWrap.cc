/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkMultiCorrelativeStatisticsWrap.h"
#include "vtkPCAStatisticsWrap.h"
#include "vtkObjectWrap.h"
#include "vtkTableWrap.h"
#include "vtkDoubleArrayWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkPCAStatisticsWrap::ptpl;

VtkPCAStatisticsWrap::VtkPCAStatisticsWrap()
{ }

VtkPCAStatisticsWrap::VtkPCAStatisticsWrap(vtkSmartPointer<vtkPCAStatistics> _native)
{ native = _native; }

VtkPCAStatisticsWrap::~VtkPCAStatisticsWrap()
{ }

void VtkPCAStatisticsWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkPCAStatistics").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("PCAStatistics").ToLocalChecked(), ConstructorGetter);
}

void VtkPCAStatisticsWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkPCAStatisticsWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkMultiCorrelativeStatisticsWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkMultiCorrelativeStatisticsWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkPCAStatisticsWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetBasisScheme", GetBasisScheme);
	Nan::SetPrototypeMethod(tpl, "getBasisScheme", GetBasisScheme);

	Nan::SetPrototypeMethod(tpl, "GetBasisSchemeName", GetBasisSchemeName);
	Nan::SetPrototypeMethod(tpl, "getBasisSchemeName", GetBasisSchemeName);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetEigenvalue", GetEigenvalue);
	Nan::SetPrototypeMethod(tpl, "getEigenvalue", GetEigenvalue);

	Nan::SetPrototypeMethod(tpl, "GetEigenvalues", GetEigenvalues);
	Nan::SetPrototypeMethod(tpl, "getEigenvalues", GetEigenvalues);

	Nan::SetPrototypeMethod(tpl, "GetEigenvector", GetEigenvector);
	Nan::SetPrototypeMethod(tpl, "getEigenvector", GetEigenvector);

	Nan::SetPrototypeMethod(tpl, "GetEigenvectors", GetEigenvectors);
	Nan::SetPrototypeMethod(tpl, "getEigenvectors", GetEigenvectors);

	Nan::SetPrototypeMethod(tpl, "GetFixedBasisEnergy", GetFixedBasisEnergy);
	Nan::SetPrototypeMethod(tpl, "getFixedBasisEnergy", GetFixedBasisEnergy);

	Nan::SetPrototypeMethod(tpl, "GetFixedBasisEnergyMaxValue", GetFixedBasisEnergyMaxValue);
	Nan::SetPrototypeMethod(tpl, "getFixedBasisEnergyMaxValue", GetFixedBasisEnergyMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetFixedBasisEnergyMinValue", GetFixedBasisEnergyMinValue);
	Nan::SetPrototypeMethod(tpl, "getFixedBasisEnergyMinValue", GetFixedBasisEnergyMinValue);

	Nan::SetPrototypeMethod(tpl, "GetFixedBasisSize", GetFixedBasisSize);
	Nan::SetPrototypeMethod(tpl, "getFixedBasisSize", GetFixedBasisSize);

	Nan::SetPrototypeMethod(tpl, "GetNormalizationScheme", GetNormalizationScheme);
	Nan::SetPrototypeMethod(tpl, "getNormalizationScheme", GetNormalizationScheme);

	Nan::SetPrototypeMethod(tpl, "GetNormalizationSchemeName", GetNormalizationSchemeName);
	Nan::SetPrototypeMethod(tpl, "getNormalizationSchemeName", GetNormalizationSchemeName);

	Nan::SetPrototypeMethod(tpl, "GetSpecifiedNormalization", GetSpecifiedNormalization);
	Nan::SetPrototypeMethod(tpl, "getSpecifiedNormalization", GetSpecifiedNormalization);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBasisScheme", SetBasisScheme);
	Nan::SetPrototypeMethod(tpl, "setBasisScheme", SetBasisScheme);

	Nan::SetPrototypeMethod(tpl, "SetBasisSchemeByName", SetBasisSchemeByName);
	Nan::SetPrototypeMethod(tpl, "setBasisSchemeByName", SetBasisSchemeByName);

	Nan::SetPrototypeMethod(tpl, "SetFixedBasisEnergy", SetFixedBasisEnergy);
	Nan::SetPrototypeMethod(tpl, "setFixedBasisEnergy", SetFixedBasisEnergy);

	Nan::SetPrototypeMethod(tpl, "SetFixedBasisSize", SetFixedBasisSize);
	Nan::SetPrototypeMethod(tpl, "setFixedBasisSize", SetFixedBasisSize);

	Nan::SetPrototypeMethod(tpl, "SetNormalizationScheme", SetNormalizationScheme);
	Nan::SetPrototypeMethod(tpl, "setNormalizationScheme", SetNormalizationScheme);

	Nan::SetPrototypeMethod(tpl, "SetNormalizationSchemeByName", SetNormalizationSchemeByName);
	Nan::SetPrototypeMethod(tpl, "setNormalizationSchemeByName", SetNormalizationSchemeByName);

	Nan::SetPrototypeMethod(tpl, "SetSpecifiedNormalization", SetSpecifiedNormalization);
	Nan::SetPrototypeMethod(tpl, "setSpecifiedNormalization", SetSpecifiedNormalization);

	ptpl.Reset( tpl );
}

void VtkPCAStatisticsWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkPCAStatistics> native = vtkSmartPointer<vtkPCAStatistics>::New();
		VtkPCAStatisticsWrap* obj = new VtkPCAStatisticsWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkPCAStatisticsWrap::GetBasisScheme(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBasisScheme();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPCAStatisticsWrap::GetBasisSchemeName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetBasisSchemeName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPCAStatisticsWrap::GetEigenvalue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			double r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetEigenvalue(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		double r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetEigenvalue(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::GetEigenvalues(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDoubleArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDoubleArrayWrap *a0 = ObjectWrap::Unwrap<VtkDoubleArrayWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetEigenvalues(
			(vtkDoubleArray *) a0->native.GetPointer()
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDoubleArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDoubleArrayWrap *a1 = ObjectWrap::Unwrap<VtkDoubleArrayWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetEigenvalues(
				info[0]->Int32Value(),
				(vtkDoubleArray *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::GetEigenvector(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDoubleArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDoubleArrayWrap *a1 = ObjectWrap::Unwrap<VtkDoubleArrayWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetEigenvector(
				info[0]->Int32Value(),
				(vtkDoubleArray *) a1->native.GetPointer()
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsObject() && (Nan::New(VtkDoubleArrayWrap::ptpl))->HasInstance(info[2]))
			{
				VtkDoubleArrayWrap *a2 = ObjectWrap::Unwrap<VtkDoubleArrayWrap>(info[2]->ToObject());
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->GetEigenvector(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					(vtkDoubleArray *) a2->native.GetPointer()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::GetEigenvectors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDoubleArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDoubleArrayWrap *a0 = ObjectWrap::Unwrap<VtkDoubleArrayWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetEigenvectors(
			(vtkDoubleArray *) a0->native.GetPointer()
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDoubleArrayWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDoubleArrayWrap *a1 = ObjectWrap::Unwrap<VtkDoubleArrayWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetEigenvectors(
				info[0]->Int32Value(),
				(vtkDoubleArray *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::GetFixedBasisEnergy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFixedBasisEnergy();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPCAStatisticsWrap::GetFixedBasisEnergyMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFixedBasisEnergyMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPCAStatisticsWrap::GetFixedBasisEnergyMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFixedBasisEnergyMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPCAStatisticsWrap::GetFixedBasisSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFixedBasisSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPCAStatisticsWrap::GetNormalizationScheme(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormalizationScheme();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPCAStatisticsWrap::GetNormalizationSchemeName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNormalizationSchemeName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::GetSpecifiedNormalization(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	vtkTable * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpecifiedNormalization();
		VtkTableWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTableWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTableWrap *w = new VtkTableWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPCAStatisticsWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	vtkPCAStatistics * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkPCAStatisticsWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPCAStatisticsWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPCAStatisticsWrap *w = new VtkPCAStatisticsWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPCAStatisticsWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkPCAStatistics * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkPCAStatisticsWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkPCAStatisticsWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPCAStatisticsWrap *w = new VtkPCAStatisticsWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::SetBasisScheme(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBasisScheme(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::SetBasisSchemeByName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBasisSchemeByName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::SetFixedBasisEnergy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFixedBasisEnergy(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::SetFixedBasisSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFixedBasisSize(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::SetNormalizationScheme(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalizationScheme(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::SetNormalizationSchemeByName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalizationSchemeByName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPCAStatisticsWrap::SetSpecifiedNormalization(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPCAStatisticsWrap *wrapper = ObjectWrap::Unwrap<VtkPCAStatisticsWrap>(info.Holder());
	vtkPCAStatistics *native = (vtkPCAStatistics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTableWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTableWrap *a0 = ObjectWrap::Unwrap<VtkTableWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSpecifiedNormalization(
			(vtkTable *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

