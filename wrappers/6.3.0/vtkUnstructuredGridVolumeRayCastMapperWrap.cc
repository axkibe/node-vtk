/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkUnstructuredGridVolumeMapperWrap.h"
#include "vtkUnstructuredGridVolumeRayCastMapperWrap.h"
#include "vtkObjectWrap.h"
#include "vtkUnstructuredGridVolumeRayCastFunctionWrap.h"
#include "vtkUnstructuredGridVolumeRayIntegratorWrap.h"
#include "vtkRendererWrap.h"
#include "vtkVolumeWrap.h"
#include "vtkWindowWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkUnstructuredGridVolumeRayCastMapperWrap::ptpl;

VtkUnstructuredGridVolumeRayCastMapperWrap::VtkUnstructuredGridVolumeRayCastMapperWrap()
{ }

VtkUnstructuredGridVolumeRayCastMapperWrap::VtkUnstructuredGridVolumeRayCastMapperWrap(vtkSmartPointer<vtkUnstructuredGridVolumeRayCastMapper> _native)
{ native = _native; }

VtkUnstructuredGridVolumeRayCastMapperWrap::~VtkUnstructuredGridVolumeRayCastMapperWrap()
{ }

void VtkUnstructuredGridVolumeRayCastMapperWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkUnstructuredGridVolumeRayCastMapper").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("UnstructuredGridVolumeRayCastMapper").ToLocalChecked(), ConstructorGetter);
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkUnstructuredGridVolumeMapperWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkUnstructuredGridVolumeMapperWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkUnstructuredGridVolumeRayCastMapperWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AutoAdjustSampleDistancesOff", AutoAdjustSampleDistancesOff);
	Nan::SetPrototypeMethod(tpl, "autoAdjustSampleDistancesOff", AutoAdjustSampleDistancesOff);

	Nan::SetPrototypeMethod(tpl, "AutoAdjustSampleDistancesOn", AutoAdjustSampleDistancesOn);
	Nan::SetPrototypeMethod(tpl, "autoAdjustSampleDistancesOn", AutoAdjustSampleDistancesOn);

	Nan::SetPrototypeMethod(tpl, "CastRays", CastRays);
	Nan::SetPrototypeMethod(tpl, "castRays", CastRays);

	Nan::SetPrototypeMethod(tpl, "GetAutoAdjustSampleDistances", GetAutoAdjustSampleDistances);
	Nan::SetPrototypeMethod(tpl, "getAutoAdjustSampleDistances", GetAutoAdjustSampleDistances);

	Nan::SetPrototypeMethod(tpl, "GetAutoAdjustSampleDistancesMaxValue", GetAutoAdjustSampleDistancesMaxValue);
	Nan::SetPrototypeMethod(tpl, "getAutoAdjustSampleDistancesMaxValue", GetAutoAdjustSampleDistancesMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetAutoAdjustSampleDistancesMinValue", GetAutoAdjustSampleDistancesMinValue);
	Nan::SetPrototypeMethod(tpl, "getAutoAdjustSampleDistancesMinValue", GetAutoAdjustSampleDistancesMinValue);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetIntermixIntersectingGeometry", GetIntermixIntersectingGeometry);
	Nan::SetPrototypeMethod(tpl, "getIntermixIntersectingGeometry", GetIntermixIntersectingGeometry);

	Nan::SetPrototypeMethod(tpl, "GetIntermixIntersectingGeometryMaxValue", GetIntermixIntersectingGeometryMaxValue);
	Nan::SetPrototypeMethod(tpl, "getIntermixIntersectingGeometryMaxValue", GetIntermixIntersectingGeometryMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetIntermixIntersectingGeometryMinValue", GetIntermixIntersectingGeometryMinValue);
	Nan::SetPrototypeMethod(tpl, "getIntermixIntersectingGeometryMinValue", GetIntermixIntersectingGeometryMinValue);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfThreads", GetNumberOfThreads);
	Nan::SetPrototypeMethod(tpl, "getNumberOfThreads", GetNumberOfThreads);

	Nan::SetPrototypeMethod(tpl, "GetRayCastFunction", GetRayCastFunction);
	Nan::SetPrototypeMethod(tpl, "getRayCastFunction", GetRayCastFunction);

	Nan::SetPrototypeMethod(tpl, "GetRayIntegrator", GetRayIntegrator);
	Nan::SetPrototypeMethod(tpl, "getRayIntegrator", GetRayIntegrator);

	Nan::SetPrototypeMethod(tpl, "IntermixIntersectingGeometryOff", IntermixIntersectingGeometryOff);
	Nan::SetPrototypeMethod(tpl, "intermixIntersectingGeometryOff", IntermixIntersectingGeometryOff);

	Nan::SetPrototypeMethod(tpl, "IntermixIntersectingGeometryOn", IntermixIntersectingGeometryOn);
	Nan::SetPrototypeMethod(tpl, "intermixIntersectingGeometryOn", IntermixIntersectingGeometryOn);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "Render", Render);
	Nan::SetPrototypeMethod(tpl, "render", Render);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAutoAdjustSampleDistances", SetAutoAdjustSampleDistances);
	Nan::SetPrototypeMethod(tpl, "setAutoAdjustSampleDistances", SetAutoAdjustSampleDistances);

	Nan::SetPrototypeMethod(tpl, "SetIntermixIntersectingGeometry", SetIntermixIntersectingGeometry);
	Nan::SetPrototypeMethod(tpl, "setIntermixIntersectingGeometry", SetIntermixIntersectingGeometry);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfThreads", SetNumberOfThreads);
	Nan::SetPrototypeMethod(tpl, "setNumberOfThreads", SetNumberOfThreads);

	Nan::SetPrototypeMethod(tpl, "SetRayCastFunction", SetRayCastFunction);
	Nan::SetPrototypeMethod(tpl, "setRayCastFunction", SetRayCastFunction);

	Nan::SetPrototypeMethod(tpl, "SetRayIntegrator", SetRayIntegrator);
	Nan::SetPrototypeMethod(tpl, "setRayIntegrator", SetRayIntegrator);

	ptpl.Reset( tpl );
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkUnstructuredGridVolumeRayCastMapper> native = vtkSmartPointer<vtkUnstructuredGridVolumeRayCastMapper>::New();
		VtkUnstructuredGridVolumeRayCastMapperWrap* obj = new VtkUnstructuredGridVolumeRayCastMapperWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::AutoAdjustSampleDistancesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AutoAdjustSampleDistancesOff();
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::AutoAdjustSampleDistancesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AutoAdjustSampleDistancesOn();
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::CastRays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->CastRays(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::GetAutoAdjustSampleDistances(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAutoAdjustSampleDistances();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::GetAutoAdjustSampleDistancesMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAutoAdjustSampleDistancesMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::GetAutoAdjustSampleDistancesMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAutoAdjustSampleDistancesMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::GetIntermixIntersectingGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntermixIntersectingGeometry();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::GetIntermixIntersectingGeometryMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntermixIntersectingGeometryMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::GetIntermixIntersectingGeometryMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntermixIntersectingGeometryMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::GetNumberOfThreads(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfThreads();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::GetRayCastFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	vtkUnstructuredGridVolumeRayCastFunction * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRayCastFunction();
		VtkUnstructuredGridVolumeRayCastFunctionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkUnstructuredGridVolumeRayCastFunctionWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkUnstructuredGridVolumeRayCastFunctionWrap *w = new VtkUnstructuredGridVolumeRayCastFunctionWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::GetRayIntegrator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	vtkUnstructuredGridVolumeRayIntegrator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRayIntegrator();
		VtkUnstructuredGridVolumeRayIntegratorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkUnstructuredGridVolumeRayIntegratorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkUnstructuredGridVolumeRayIntegratorWrap *w = new VtkUnstructuredGridVolumeRayIntegratorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::IntermixIntersectingGeometryOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->IntermixIntersectingGeometryOff();
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::IntermixIntersectingGeometryOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->IntermixIntersectingGeometryOn();
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	vtkUnstructuredGridVolumeRayCastMapper * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkUnstructuredGridVolumeRayCastMapperWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkUnstructuredGridVolumeRayCastMapperWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkUnstructuredGridVolumeRayCastMapperWrap *w = new VtkUnstructuredGridVolumeRayCastMapperWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::Render(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkVolumeWrap::ptpl))->HasInstance(info[1]))
		{
			VtkVolumeWrap *a1 = ObjectWrap::Unwrap<VtkVolumeWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->Render(
				(vtkRenderer *) a0->native.GetPointer(),
				(vtkVolume *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkUnstructuredGridVolumeRayCastMapper * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkUnstructuredGridVolumeRayCastMapperWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkUnstructuredGridVolumeRayCastMapperWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkUnstructuredGridVolumeRayCastMapperWrap *w = new VtkUnstructuredGridVolumeRayCastMapperWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::SetAutoAdjustSampleDistances(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAutoAdjustSampleDistances(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::SetIntermixIntersectingGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntermixIntersectingGeometry(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::SetNumberOfThreads(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfThreads(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::SetRayCastFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkUnstructuredGridVolumeRayCastFunctionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkUnstructuredGridVolumeRayCastFunctionWrap *a0 = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastFunctionWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRayCastFunction(
			(vtkUnstructuredGridVolumeRayCastFunction *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeRayCastMapperWrap::SetRayIntegrator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeRayCastMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayCastMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeRayCastMapper *native = (vtkUnstructuredGridVolumeRayCastMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkUnstructuredGridVolumeRayIntegratorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkUnstructuredGridVolumeRayIntegratorWrap *a0 = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeRayIntegratorWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRayIntegrator(
			(vtkUnstructuredGridVolumeRayIntegrator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

