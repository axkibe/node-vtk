/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKWARPSCALARWRAP_H
#define NATIVE_EXTENSION_VTK_VTKWARPSCALARWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkWarpScalar.h>

#include "vtkPointSetAlgorithmWrap.h"

class VtkWarpScalarWrap : public VtkPointSetAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkWarpScalarWrap(vtkSmartPointer<vtkWarpScalar>);
		VtkWarpScalarWrap();
		~VtkWarpScalarWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void FillInputPortInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetScaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetUseNormal(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetXYPlane(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetNormal(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetScaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetUseNormal(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetXYPlane(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UseNormalOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UseNormalOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void XYPlaneOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void XYPlaneOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
