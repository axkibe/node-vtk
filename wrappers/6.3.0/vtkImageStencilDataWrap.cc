/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkDataObjectWrap.h"
#include "vtkImageStencilDataWrap.h"
#include "vtkObjectWrap.h"
#include "vtkInformationWrap.h"
#include "vtkInformationVectorWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkImageStencilDataWrap::ptpl;

VtkImageStencilDataWrap::VtkImageStencilDataWrap()
{ }

VtkImageStencilDataWrap::VtkImageStencilDataWrap(vtkSmartPointer<vtkImageStencilData> _native)
{ native = _native; }

VtkImageStencilDataWrap::~VtkImageStencilDataWrap()
{ }

void VtkImageStencilDataWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkImageStencilData").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ImageStencilData").ToLocalChecked(), ConstructorGetter);
}

void VtkImageStencilDataWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkImageStencilDataWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkDataObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkDataObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkImageStencilDataWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "Add", Add);
	Nan::SetPrototypeMethod(tpl, "add", Add);

	Nan::SetPrototypeMethod(tpl, "AllocateExtents", AllocateExtents);
	Nan::SetPrototypeMethod(tpl, "allocateExtents", AllocateExtents);

	Nan::SetPrototypeMethod(tpl, "CopyInformationFromPipeline", CopyInformationFromPipeline);
	Nan::SetPrototypeMethod(tpl, "copyInformationFromPipeline", CopyInformationFromPipeline);

	Nan::SetPrototypeMethod(tpl, "CopyInformationToPipeline", CopyInformationToPipeline);
	Nan::SetPrototypeMethod(tpl, "copyInformationToPipeline", CopyInformationToPipeline);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "Fill", Fill);
	Nan::SetPrototypeMethod(tpl, "fill", Fill);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetData", GetData);
	Nan::SetPrototypeMethod(tpl, "getData", GetData);

	Nan::SetPrototypeMethod(tpl, "GetDataObjectType", GetDataObjectType);
	Nan::SetPrototypeMethod(tpl, "getDataObjectType", GetDataObjectType);

	Nan::SetPrototypeMethod(tpl, "GetExtentType", GetExtentType);
	Nan::SetPrototypeMethod(tpl, "getExtentType", GetExtentType);

	Nan::SetPrototypeMethod(tpl, "Initialize", Initialize);
	Nan::SetPrototypeMethod(tpl, "initialize", Initialize);

	Nan::SetPrototypeMethod(tpl, "InsertAndMergeExtent", InsertAndMergeExtent);
	Nan::SetPrototypeMethod(tpl, "insertAndMergeExtent", InsertAndMergeExtent);

	Nan::SetPrototypeMethod(tpl, "InsertNextExtent", InsertNextExtent);
	Nan::SetPrototypeMethod(tpl, "insertNextExtent", InsertNextExtent);

	Nan::SetPrototypeMethod(tpl, "InternalImageStencilDataCopy", InternalImageStencilDataCopy);
	Nan::SetPrototypeMethod(tpl, "internalImageStencilDataCopy", InternalImageStencilDataCopy);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "IsInside", IsInside);
	Nan::SetPrototypeMethod(tpl, "isInside", IsInside);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RemoveExtent", RemoveExtent);
	Nan::SetPrototypeMethod(tpl, "removeExtent", RemoveExtent);

	Nan::SetPrototypeMethod(tpl, "Replace", Replace);
	Nan::SetPrototypeMethod(tpl, "replace", Replace);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetExtent", SetExtent);
	Nan::SetPrototypeMethod(tpl, "setExtent", SetExtent);

	Nan::SetPrototypeMethod(tpl, "SetOrigin", SetOrigin);
	Nan::SetPrototypeMethod(tpl, "setOrigin", SetOrigin);

	Nan::SetPrototypeMethod(tpl, "SetSpacing", SetSpacing);
	Nan::SetPrototypeMethod(tpl, "setSpacing", SetSpacing);

	Nan::SetPrototypeMethod(tpl, "ShallowCopy", ShallowCopy);
	Nan::SetPrototypeMethod(tpl, "shallowCopy", ShallowCopy);

	Nan::SetPrototypeMethod(tpl, "Subtract", Subtract);
	Nan::SetPrototypeMethod(tpl, "subtract", Subtract);

	ptpl.Reset( tpl );
}

void VtkImageStencilDataWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageStencilData> native = vtkSmartPointer<vtkImageStencilData>::New();
		VtkImageStencilDataWrap* obj = new VtkImageStencilDataWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageStencilDataWrap::Add(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImageStencilDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImageStencilDataWrap *a0 = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Add(
			(vtkImageStencilData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::AllocateExtents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AllocateExtents();
}

void VtkImageStencilDataWrap::CopyInformationFromPipeline(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->CopyInformationFromPipeline(
			(vtkInformation *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::CopyInformationToPipeline(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->CopyInformationToPipeline(
			(vtkInformation *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DeepCopy(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::Fill(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Fill();
}

void VtkImageStencilDataWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageStencilDataWrap::GetData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationVectorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationVectorWrap *a0 = ObjectWrap::Unwrap<VtkInformationVectorWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkImageStencilData * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetData(
				(vtkInformationVector *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
				VtkImageStencilDataWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkImageStencilDataWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkImageStencilDataWrap *w = new VtkImageStencilDataWrap();
			w->native = r;
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
		vtkImageStencilData * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetData(
			(vtkInformation *) a0->native.GetPointer()
		);
			VtkImageStencilDataWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkImageStencilDataWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageStencilDataWrap *w = new VtkImageStencilDataWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::GetDataObjectType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataObjectType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageStencilDataWrap::GetExtentType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetExtentType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageStencilDataWrap::Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Initialize();
}

void VtkImageStencilDataWrap::InsertAndMergeExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->InsertAndMergeExtent(
						info[0]->Int32Value(),
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::InsertNextExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->InsertNextExtent(
						info[0]->Int32Value(),
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::InternalImageStencilDataCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImageStencilDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImageStencilDataWrap *a0 = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->InternalImageStencilDataCopy(
			(vtkImageStencilData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::IsInside(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->IsInside(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	vtkImageStencilData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkImageStencilDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImageStencilDataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageStencilDataWrap *w = new VtkImageStencilDataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageStencilDataWrap::RemoveExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->RemoveExtent(
						info[0]->Int32Value(),
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::Replace(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImageStencilDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImageStencilDataWrap *a0 = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Replace(
			(vtkImageStencilData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageStencilData * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkImageStencilDataWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkImageStencilDataWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageStencilDataWrap *w = new VtkImageStencilDataWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::SetExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() > 4 && info[4]->IsInt32())
					{
						if(info.Length() > 5 && info[5]->IsInt32())
						{
							if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->SetExtent(
								info[0]->Int32Value(),
								info[1]->Int32Value(),
								info[2]->Int32Value(),
								info[3]->Int32Value(),
								info[4]->Int32Value(),
								info[5]->Int32Value()
							);
							return;
						}
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::SetOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetOrigin(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::SetSpacing(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetSpacing(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ShallowCopy(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageStencilDataWrap::Subtract(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageStencilDataWrap *wrapper = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info.Holder());
	vtkImageStencilData *native = (vtkImageStencilData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImageStencilDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImageStencilDataWrap *a0 = ObjectWrap::Unwrap<VtkImageStencilDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Subtract(
			(vtkImageStencilData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

