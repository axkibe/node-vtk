/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkStandardPolyDataPainterWrap.h"
#include "vtkHardwareSelectionPolyDataPainterWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkHardwareSelectionPolyDataPainterWrap::ptpl;

VtkHardwareSelectionPolyDataPainterWrap::VtkHardwareSelectionPolyDataPainterWrap()
{ }

VtkHardwareSelectionPolyDataPainterWrap::VtkHardwareSelectionPolyDataPainterWrap(vtkSmartPointer<vtkHardwareSelectionPolyDataPainter> _native)
{ native = _native; }

VtkHardwareSelectionPolyDataPainterWrap::~VtkHardwareSelectionPolyDataPainterWrap()
{ }

void VtkHardwareSelectionPolyDataPainterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkHardwareSelectionPolyDataPainter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("HardwareSelectionPolyDataPainter").ToLocalChecked(), ConstructorGetter);
}

void VtkHardwareSelectionPolyDataPainterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkHardwareSelectionPolyDataPainterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkStandardPolyDataPainterWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkStandardPolyDataPainterWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkHardwareSelectionPolyDataPainterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "EnableSelectionOff", EnableSelectionOff);
	Nan::SetPrototypeMethod(tpl, "enableSelectionOff", EnableSelectionOff);

	Nan::SetPrototypeMethod(tpl, "EnableSelectionOn", EnableSelectionOn);
	Nan::SetPrototypeMethod(tpl, "enableSelectionOn", EnableSelectionOn);

	Nan::SetPrototypeMethod(tpl, "GetCellIdArrayName", GetCellIdArrayName);
	Nan::SetPrototypeMethod(tpl, "getCellIdArrayName", GetCellIdArrayName);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetCompositeIdArrayName", GetCompositeIdArrayName);
	Nan::SetPrototypeMethod(tpl, "getCompositeIdArrayName", GetCompositeIdArrayName);

	Nan::SetPrototypeMethod(tpl, "GetEnableSelection", GetEnableSelection);
	Nan::SetPrototypeMethod(tpl, "getEnableSelection", GetEnableSelection);

	Nan::SetPrototypeMethod(tpl, "GetPointIdArrayName", GetPointIdArrayName);
	Nan::SetPrototypeMethod(tpl, "getPointIdArrayName", GetPointIdArrayName);

	Nan::SetPrototypeMethod(tpl, "GetProcessIdArrayName", GetProcessIdArrayName);
	Nan::SetPrototypeMethod(tpl, "getProcessIdArrayName", GetProcessIdArrayName);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCellIdArrayName", SetCellIdArrayName);
	Nan::SetPrototypeMethod(tpl, "setCellIdArrayName", SetCellIdArrayName);

	Nan::SetPrototypeMethod(tpl, "SetCompositeIdArrayName", SetCompositeIdArrayName);
	Nan::SetPrototypeMethod(tpl, "setCompositeIdArrayName", SetCompositeIdArrayName);

	Nan::SetPrototypeMethod(tpl, "SetEnableSelection", SetEnableSelection);
	Nan::SetPrototypeMethod(tpl, "setEnableSelection", SetEnableSelection);

	Nan::SetPrototypeMethod(tpl, "SetPointIdArrayName", SetPointIdArrayName);
	Nan::SetPrototypeMethod(tpl, "setPointIdArrayName", SetPointIdArrayName);

	Nan::SetPrototypeMethod(tpl, "SetProcessIdArrayName", SetProcessIdArrayName);
	Nan::SetPrototypeMethod(tpl, "setProcessIdArrayName", SetProcessIdArrayName);

	ptpl.Reset( tpl );
}

void VtkHardwareSelectionPolyDataPainterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkHardwareSelectionPolyDataPainter> native = vtkSmartPointer<vtkHardwareSelectionPolyDataPainter>::New();
		VtkHardwareSelectionPolyDataPainterWrap* obj = new VtkHardwareSelectionPolyDataPainterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkHardwareSelectionPolyDataPainterWrap::EnableSelectionOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EnableSelectionOff();
}

void VtkHardwareSelectionPolyDataPainterWrap::EnableSelectionOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EnableSelectionOn();
}

void VtkHardwareSelectionPolyDataPainterWrap::GetCellIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCellIdArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkHardwareSelectionPolyDataPainterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkHardwareSelectionPolyDataPainterWrap::GetCompositeIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCompositeIdArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkHardwareSelectionPolyDataPainterWrap::GetEnableSelection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEnableSelection();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHardwareSelectionPolyDataPainterWrap::GetPointIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointIdArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkHardwareSelectionPolyDataPainterWrap::GetProcessIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProcessIdArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkHardwareSelectionPolyDataPainterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHardwareSelectionPolyDataPainterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	vtkHardwareSelectionPolyDataPainter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkHardwareSelectionPolyDataPainterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkHardwareSelectionPolyDataPainterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkHardwareSelectionPolyDataPainterWrap *w = new VtkHardwareSelectionPolyDataPainterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkHardwareSelectionPolyDataPainterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkHardwareSelectionPolyDataPainter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkHardwareSelectionPolyDataPainterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkHardwareSelectionPolyDataPainterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkHardwareSelectionPolyDataPainterWrap *w = new VtkHardwareSelectionPolyDataPainterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHardwareSelectionPolyDataPainterWrap::SetCellIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCellIdArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHardwareSelectionPolyDataPainterWrap::SetCompositeIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCompositeIdArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHardwareSelectionPolyDataPainterWrap::SetEnableSelection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEnableSelection(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHardwareSelectionPolyDataPainterWrap::SetPointIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPointIdArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHardwareSelectionPolyDataPainterWrap::SetProcessIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHardwareSelectionPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkHardwareSelectionPolyDataPainterWrap>(info.Holder());
	vtkHardwareSelectionPolyDataPainter *native = (vtkHardwareSelectionPolyDataPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProcessIdArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

