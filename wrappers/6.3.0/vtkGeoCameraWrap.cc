/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkGeoCameraWrap.h"
#include "vtkCameraWrap.h"
#include "vtkGeoTerrainNodeWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkGeoCameraWrap::ptpl;

VtkGeoCameraWrap::VtkGeoCameraWrap()
{ }

VtkGeoCameraWrap::VtkGeoCameraWrap(vtkSmartPointer<vtkGeoCamera> _native)
{ native = _native; }

VtkGeoCameraWrap::~VtkGeoCameraWrap()
{ }

void VtkGeoCameraWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkGeoCamera").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("GeoCamera").ToLocalChecked(), ConstructorGetter);
}

void VtkGeoCameraWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkGeoCameraWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkGeoCameraWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDistance", GetDistance);
	Nan::SetPrototypeMethod(tpl, "getDistance", GetDistance);

	Nan::SetPrototypeMethod(tpl, "GetHeading", GetHeading);
	Nan::SetPrototypeMethod(tpl, "getHeading", GetHeading);

	Nan::SetPrototypeMethod(tpl, "GetLatitude", GetLatitude);
	Nan::SetPrototypeMethod(tpl, "getLatitude", GetLatitude);

	Nan::SetPrototypeMethod(tpl, "GetLongitude", GetLongitude);
	Nan::SetPrototypeMethod(tpl, "getLongitude", GetLongitude);

	Nan::SetPrototypeMethod(tpl, "GetNodeCoverage", GetNodeCoverage);
	Nan::SetPrototypeMethod(tpl, "getNodeCoverage", GetNodeCoverage);

	Nan::SetPrototypeMethod(tpl, "GetOriginLatitude", GetOriginLatitude);
	Nan::SetPrototypeMethod(tpl, "getOriginLatitude", GetOriginLatitude);

	Nan::SetPrototypeMethod(tpl, "GetOriginLongitude", GetOriginLongitude);
	Nan::SetPrototypeMethod(tpl, "getOriginLongitude", GetOriginLongitude);

	Nan::SetPrototypeMethod(tpl, "GetTilt", GetTilt);
	Nan::SetPrototypeMethod(tpl, "getTilt", GetTilt);

	Nan::SetPrototypeMethod(tpl, "GetVTKCamera", GetVTKCamera);
	Nan::SetPrototypeMethod(tpl, "getVTKCamera", GetVTKCamera);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "LockHeadingOff", LockHeadingOff);
	Nan::SetPrototypeMethod(tpl, "lockHeadingOff", LockHeadingOff);

	Nan::SetPrototypeMethod(tpl, "LockHeadingOn", LockHeadingOn);
	Nan::SetPrototypeMethod(tpl, "lockHeadingOn", LockHeadingOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetDistance", SetDistance);
	Nan::SetPrototypeMethod(tpl, "setDistance", SetDistance);

	Nan::SetPrototypeMethod(tpl, "SetHeading", SetHeading);
	Nan::SetPrototypeMethod(tpl, "setHeading", SetHeading);

	Nan::SetPrototypeMethod(tpl, "SetLatitude", SetLatitude);
	Nan::SetPrototypeMethod(tpl, "setLatitude", SetLatitude);

	Nan::SetPrototypeMethod(tpl, "SetLongitude", SetLongitude);
	Nan::SetPrototypeMethod(tpl, "setLongitude", SetLongitude);

	Nan::SetPrototypeMethod(tpl, "SetOrigin", SetOrigin);
	Nan::SetPrototypeMethod(tpl, "setOrigin", SetOrigin);

	Nan::SetPrototypeMethod(tpl, "SetOriginLatitude", SetOriginLatitude);
	Nan::SetPrototypeMethod(tpl, "setOriginLatitude", SetOriginLatitude);

	Nan::SetPrototypeMethod(tpl, "SetOriginLongitude", SetOriginLongitude);
	Nan::SetPrototypeMethod(tpl, "setOriginLongitude", SetOriginLongitude);

	Nan::SetPrototypeMethod(tpl, "SetTilt", SetTilt);
	Nan::SetPrototypeMethod(tpl, "setTilt", SetTilt);

	ptpl.Reset( tpl );
}

void VtkGeoCameraWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkGeoCamera> native = vtkSmartPointer<vtkGeoCamera>::New();
		VtkGeoCameraWrap* obj = new VtkGeoCameraWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkGeoCameraWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGeoCameraWrap::GetDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDistance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoCameraWrap::GetHeading(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHeading();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoCameraWrap::GetLatitude(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLatitude();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoCameraWrap::GetLongitude(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLongitude();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoCameraWrap::GetNodeCoverage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkGeoTerrainNodeWrap::ptpl))->HasInstance(info[0]))
	{
		VtkGeoTerrainNodeWrap *a0 = ObjectWrap::Unwrap<VtkGeoTerrainNodeWrap>(info[0]->ToObject());
		double r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNodeCoverage(
			(vtkGeoTerrainNode *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoCameraWrap::GetOriginLatitude(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOriginLatitude();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoCameraWrap::GetOriginLongitude(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOriginLongitude();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoCameraWrap::GetTilt(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTilt();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeoCameraWrap::GetVTKCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	vtkCamera * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVTKCamera();
		VtkCameraWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCameraWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCameraWrap *w = new VtkCameraWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGeoCameraWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoCameraWrap::LockHeadingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LockHeadingOff();
}

void VtkGeoCameraWrap::LockHeadingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LockHeadingOn();
}

void VtkGeoCameraWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	vtkGeoCamera * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkGeoCameraWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkGeoCameraWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGeoCameraWrap *w = new VtkGeoCameraWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGeoCameraWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkGeoCamera * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkGeoCameraWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkGeoCameraWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkGeoCameraWrap *w = new VtkGeoCameraWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoCameraWrap::SetDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDistance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoCameraWrap::SetHeading(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHeading(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoCameraWrap::SetLatitude(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLatitude(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoCameraWrap::SetLongitude(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLongitude(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoCameraWrap::SetOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetOrigin(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoCameraWrap::SetOriginLatitude(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOriginLatitude(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoCameraWrap::SetOriginLongitude(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOriginLongitude(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeoCameraWrap::SetTilt(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeoCameraWrap *wrapper = ObjectWrap::Unwrap<VtkGeoCameraWrap>(info.Holder());
	vtkGeoCamera *native = (vtkGeoCamera *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTilt(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

