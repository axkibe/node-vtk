/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkClipClosedSurfaceWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPlaneCollectionWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkClipClosedSurfaceWrap::ptpl;

VtkClipClosedSurfaceWrap::VtkClipClosedSurfaceWrap()
{ }

VtkClipClosedSurfaceWrap::VtkClipClosedSurfaceWrap(vtkSmartPointer<vtkClipClosedSurface> _native)
{ native = _native; }

VtkClipClosedSurfaceWrap::~VtkClipClosedSurfaceWrap()
{ }

void VtkClipClosedSurfaceWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkClipClosedSurface").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ClipClosedSurface").ToLocalChecked(), ConstructorGetter);
}

void VtkClipClosedSurfaceWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkClipClosedSurfaceWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkClipClosedSurfaceWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GenerateFacesOff", GenerateFacesOff);
	Nan::SetPrototypeMethod(tpl, "generateFacesOff", GenerateFacesOff);

	Nan::SetPrototypeMethod(tpl, "GenerateFacesOn", GenerateFacesOn);
	Nan::SetPrototypeMethod(tpl, "generateFacesOn", GenerateFacesOn);

	Nan::SetPrototypeMethod(tpl, "GenerateOutlineOff", GenerateOutlineOff);
	Nan::SetPrototypeMethod(tpl, "generateOutlineOff", GenerateOutlineOff);

	Nan::SetPrototypeMethod(tpl, "GenerateOutlineOn", GenerateOutlineOn);
	Nan::SetPrototypeMethod(tpl, "generateOutlineOn", GenerateOutlineOn);

	Nan::SetPrototypeMethod(tpl, "GetActivePlaneId", GetActivePlaneId);
	Nan::SetPrototypeMethod(tpl, "getActivePlaneId", GetActivePlaneId);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetClippingPlanes", GetClippingPlanes);
	Nan::SetPrototypeMethod(tpl, "getClippingPlanes", GetClippingPlanes);

	Nan::SetPrototypeMethod(tpl, "GetGenerateFaces", GetGenerateFaces);
	Nan::SetPrototypeMethod(tpl, "getGenerateFaces", GetGenerateFaces);

	Nan::SetPrototypeMethod(tpl, "GetGenerateOutline", GetGenerateOutline);
	Nan::SetPrototypeMethod(tpl, "getGenerateOutline", GetGenerateOutline);

	Nan::SetPrototypeMethod(tpl, "GetPassPointData", GetPassPointData);
	Nan::SetPrototypeMethod(tpl, "getPassPointData", GetPassPointData);

	Nan::SetPrototypeMethod(tpl, "GetScalarMode", GetScalarMode);
	Nan::SetPrototypeMethod(tpl, "getScalarMode", GetScalarMode);

	Nan::SetPrototypeMethod(tpl, "GetScalarModeAsString", GetScalarModeAsString);
	Nan::SetPrototypeMethod(tpl, "getScalarModeAsString", GetScalarModeAsString);

	Nan::SetPrototypeMethod(tpl, "GetScalarModeMaxValue", GetScalarModeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getScalarModeMaxValue", GetScalarModeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetScalarModeMinValue", GetScalarModeMinValue);
	Nan::SetPrototypeMethod(tpl, "getScalarModeMinValue", GetScalarModeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetTolerance", GetTolerance);
	Nan::SetPrototypeMethod(tpl, "getTolerance", GetTolerance);

	Nan::SetPrototypeMethod(tpl, "GetTriangulationErrorDisplay", GetTriangulationErrorDisplay);
	Nan::SetPrototypeMethod(tpl, "getTriangulationErrorDisplay", GetTriangulationErrorDisplay);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PassPointDataOff", PassPointDataOff);
	Nan::SetPrototypeMethod(tpl, "passPointDataOff", PassPointDataOff);

	Nan::SetPrototypeMethod(tpl, "PassPointDataOn", PassPointDataOn);
	Nan::SetPrototypeMethod(tpl, "passPointDataOn", PassPointDataOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetActivePlaneColor", SetActivePlaneColor);
	Nan::SetPrototypeMethod(tpl, "setActivePlaneColor", SetActivePlaneColor);

	Nan::SetPrototypeMethod(tpl, "SetActivePlaneId", SetActivePlaneId);
	Nan::SetPrototypeMethod(tpl, "setActivePlaneId", SetActivePlaneId);

	Nan::SetPrototypeMethod(tpl, "SetBaseColor", SetBaseColor);
	Nan::SetPrototypeMethod(tpl, "setBaseColor", SetBaseColor);

	Nan::SetPrototypeMethod(tpl, "SetClipColor", SetClipColor);
	Nan::SetPrototypeMethod(tpl, "setClipColor", SetClipColor);

	Nan::SetPrototypeMethod(tpl, "SetClippingPlanes", SetClippingPlanes);
	Nan::SetPrototypeMethod(tpl, "setClippingPlanes", SetClippingPlanes);

	Nan::SetPrototypeMethod(tpl, "SetGenerateFaces", SetGenerateFaces);
	Nan::SetPrototypeMethod(tpl, "setGenerateFaces", SetGenerateFaces);

	Nan::SetPrototypeMethod(tpl, "SetGenerateOutline", SetGenerateOutline);
	Nan::SetPrototypeMethod(tpl, "setGenerateOutline", SetGenerateOutline);

	Nan::SetPrototypeMethod(tpl, "SetPassPointData", SetPassPointData);
	Nan::SetPrototypeMethod(tpl, "setPassPointData", SetPassPointData);

	Nan::SetPrototypeMethod(tpl, "SetScalarMode", SetScalarMode);
	Nan::SetPrototypeMethod(tpl, "setScalarMode", SetScalarMode);

	Nan::SetPrototypeMethod(tpl, "SetScalarModeToColors", SetScalarModeToColors);
	Nan::SetPrototypeMethod(tpl, "setScalarModeToColors", SetScalarModeToColors);

	Nan::SetPrototypeMethod(tpl, "SetScalarModeToLabels", SetScalarModeToLabels);
	Nan::SetPrototypeMethod(tpl, "setScalarModeToLabels", SetScalarModeToLabels);

	Nan::SetPrototypeMethod(tpl, "SetScalarModeToNone", SetScalarModeToNone);
	Nan::SetPrototypeMethod(tpl, "setScalarModeToNone", SetScalarModeToNone);

	Nan::SetPrototypeMethod(tpl, "SetTolerance", SetTolerance);
	Nan::SetPrototypeMethod(tpl, "setTolerance", SetTolerance);

	Nan::SetPrototypeMethod(tpl, "SetTriangulationErrorDisplay", SetTriangulationErrorDisplay);
	Nan::SetPrototypeMethod(tpl, "setTriangulationErrorDisplay", SetTriangulationErrorDisplay);

	Nan::SetPrototypeMethod(tpl, "TriangulationErrorDisplayOff", TriangulationErrorDisplayOff);
	Nan::SetPrototypeMethod(tpl, "triangulationErrorDisplayOff", TriangulationErrorDisplayOff);

	Nan::SetPrototypeMethod(tpl, "TriangulationErrorDisplayOn", TriangulationErrorDisplayOn);
	Nan::SetPrototypeMethod(tpl, "triangulationErrorDisplayOn", TriangulationErrorDisplayOn);

	ptpl.Reset( tpl );
}

void VtkClipClosedSurfaceWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkClipClosedSurface> native = vtkSmartPointer<vtkClipClosedSurface>::New();
		VtkClipClosedSurfaceWrap* obj = new VtkClipClosedSurfaceWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkClipClosedSurfaceWrap::GenerateFacesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GenerateFacesOff();
}

void VtkClipClosedSurfaceWrap::GenerateFacesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GenerateFacesOn();
}

void VtkClipClosedSurfaceWrap::GenerateOutlineOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GenerateOutlineOff();
}

void VtkClipClosedSurfaceWrap::GenerateOutlineOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GenerateOutlineOn();
}

void VtkClipClosedSurfaceWrap::GetActivePlaneId(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetActivePlaneId();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkClipClosedSurfaceWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkClipClosedSurfaceWrap::GetClippingPlanes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	vtkPlaneCollection * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClippingPlanes();
		VtkPlaneCollectionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPlaneCollectionWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPlaneCollectionWrap *w = new VtkPlaneCollectionWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkClipClosedSurfaceWrap::GetGenerateFaces(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGenerateFaces();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkClipClosedSurfaceWrap::GetGenerateOutline(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGenerateOutline();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkClipClosedSurfaceWrap::GetPassPointData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPassPointData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkClipClosedSurfaceWrap::GetScalarMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScalarMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkClipClosedSurfaceWrap::GetScalarModeAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScalarModeAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkClipClosedSurfaceWrap::GetScalarModeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScalarModeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkClipClosedSurfaceWrap::GetScalarModeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScalarModeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkClipClosedSurfaceWrap::GetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkClipClosedSurfaceWrap::GetTriangulationErrorDisplay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTriangulationErrorDisplay();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkClipClosedSurfaceWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	vtkClipClosedSurface * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkClipClosedSurfaceWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkClipClosedSurfaceWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkClipClosedSurfaceWrap *w = new VtkClipClosedSurfaceWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkClipClosedSurfaceWrap::PassPointDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PassPointDataOff();
}

void VtkClipClosedSurfaceWrap::PassPointDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PassPointDataOn();
}

void VtkClipClosedSurfaceWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkClipClosedSurface * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkClipClosedSurfaceWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkClipClosedSurfaceWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkClipClosedSurfaceWrap *w = new VtkClipClosedSurfaceWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::SetActivePlaneColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetActivePlaneColor(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::SetActivePlaneId(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetActivePlaneId(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::SetBaseColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetBaseColor(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::SetClipColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetClipColor(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::SetClippingPlanes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPlaneCollectionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPlaneCollectionWrap *a0 = ObjectWrap::Unwrap<VtkPlaneCollectionWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetClippingPlanes(
			(vtkPlaneCollection *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::SetGenerateFaces(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGenerateFaces(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::SetGenerateOutline(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGenerateOutline(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::SetPassPointData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPassPointData(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::SetScalarMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScalarMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::SetScalarModeToColors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetScalarModeToColors();
}

void VtkClipClosedSurfaceWrap::SetScalarModeToLabels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetScalarModeToLabels();
}

void VtkClipClosedSurfaceWrap::SetScalarModeToNone(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetScalarModeToNone();
}

void VtkClipClosedSurfaceWrap::SetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTolerance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::SetTriangulationErrorDisplay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTriangulationErrorDisplay(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClipClosedSurfaceWrap::TriangulationErrorDisplayOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TriangulationErrorDisplayOff();
}

void VtkClipClosedSurfaceWrap::TriangulationErrorDisplayOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClipClosedSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkClipClosedSurfaceWrap>(info.Holder());
	vtkClipClosedSurface *native = (vtkClipClosedSurface *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TriangulationErrorDisplayOn();
}

