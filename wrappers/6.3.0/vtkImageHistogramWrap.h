/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKIMAGEHISTOGRAMWRAP_H
#define NATIVE_EXTENSION_VTK_VTKIMAGEHISTOGRAMWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkImageHistogram.h>

#include "vtkThreadedImageAlgorithmWrap.h"
#include "../../plus/plus.h"

class VtkImageHistogramWrap : public VtkThreadedImageAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkImageHistogramWrap(vtkSmartPointer<vtkImageHistogram>);
		VtkImageHistogramWrap();
		~VtkImageHistogramWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AutomaticBinningOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void AutomaticBinningOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GenerateHistogramImageOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GenerateHistogramImageOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetActiveComponent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAutomaticBinning(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetBinOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetBinSpacing(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGenerateHistogramImage(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHistogram(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHistogramImageScale(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHistogramImageScaleAsString(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHistogramImageScaleMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHistogramImageScaleMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHistogramImageSize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaximumNumberOfBins(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfBins(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetStencil(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetActiveComponent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAutomaticBinning(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetBinOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetBinSpacing(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGenerateHistogramImage(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetHistogramImageScale(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetHistogramImageScaleToLinear(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetHistogramImageScaleToLog(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetHistogramImageScaleToSqrt(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetHistogramImageSize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaximumNumberOfBins(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetNumberOfBins(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetStencilConnection(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetStencilData(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKIMAGEHISTOGRAMWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKIMAGEHISTOGRAMWRAP_CLASSDEF
#endif
};

#endif
