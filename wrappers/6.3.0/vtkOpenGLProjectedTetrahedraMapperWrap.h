/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKOPENGLPROJECTEDTETRAHEDRAMAPPERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKOPENGLPROJECTEDTETRAHEDRAMAPPERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkOpenGLProjectedTetrahedraMapper.h>

#include "vtkProjectedTetrahedraMapperWrap.h"
#include "../../plus/plus.h"

class VtkOpenGLProjectedTetrahedraMapperWrap : public VtkProjectedTetrahedraMapperWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkOpenGLProjectedTetrahedraMapperWrap(vtkSmartPointer<vtkOpenGLProjectedTetrahedraMapper>);
		VtkOpenGLProjectedTetrahedraMapperWrap();
		~VtkOpenGLProjectedTetrahedraMapperWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetUseFloatingPointFrameBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsSupported(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Render(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetUseFloatingPointFrameBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UseFloatingPointFrameBufferOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UseFloatingPointFrameBufferOn(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKOPENGLPROJECTEDTETRAHEDRAMAPPERWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKOPENGLPROJECTEDTETRAHEDRAMAPPERWRAP_CLASSDEF
#endif
};

#endif
