/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkExtractSelectionBaseWrap.h"
#include "vtkExtractSelectedFrustumWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPlanesWrap.h"
#include "vtkPointsWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkExtractSelectedFrustumWrap::ptpl;

VtkExtractSelectedFrustumWrap::VtkExtractSelectedFrustumWrap()
{ }

VtkExtractSelectedFrustumWrap::VtkExtractSelectedFrustumWrap(vtkSmartPointer<vtkExtractSelectedFrustum> _native)
{ native = _native; }

VtkExtractSelectedFrustumWrap::~VtkExtractSelectedFrustumWrap()
{ }

void VtkExtractSelectedFrustumWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkExtractSelectedFrustum").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ExtractSelectedFrustum").ToLocalChecked(), ConstructorGetter);
}

void VtkExtractSelectedFrustumWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkExtractSelectedFrustumWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkExtractSelectionBaseWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkExtractSelectionBaseWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkExtractSelectedFrustumWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CreateFrustum", CreateFrustum);
	Nan::SetPrototypeMethod(tpl, "createFrustum", CreateFrustum);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetClipPoints", GetClipPoints);
	Nan::SetPrototypeMethod(tpl, "getClipPoints", GetClipPoints);

	Nan::SetPrototypeMethod(tpl, "GetContainingCells", GetContainingCells);
	Nan::SetPrototypeMethod(tpl, "getContainingCells", GetContainingCells);

	Nan::SetPrototypeMethod(tpl, "GetFieldType", GetFieldType);
	Nan::SetPrototypeMethod(tpl, "getFieldType", GetFieldType);

	Nan::SetPrototypeMethod(tpl, "GetFrustum", GetFrustum);
	Nan::SetPrototypeMethod(tpl, "getFrustum", GetFrustum);

	Nan::SetPrototypeMethod(tpl, "GetInsideOut", GetInsideOut);
	Nan::SetPrototypeMethod(tpl, "getInsideOut", GetInsideOut);

	Nan::SetPrototypeMethod(tpl, "GetShowBounds", GetShowBounds);
	Nan::SetPrototypeMethod(tpl, "getShowBounds", GetShowBounds);

	Nan::SetPrototypeMethod(tpl, "InsideOutOff", InsideOutOff);
	Nan::SetPrototypeMethod(tpl, "insideOutOff", InsideOutOff);

	Nan::SetPrototypeMethod(tpl, "InsideOutOn", InsideOutOn);
	Nan::SetPrototypeMethod(tpl, "insideOutOn", InsideOutOn);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetContainingCells", SetContainingCells);
	Nan::SetPrototypeMethod(tpl, "setContainingCells", SetContainingCells);

	Nan::SetPrototypeMethod(tpl, "SetFieldType", SetFieldType);
	Nan::SetPrototypeMethod(tpl, "setFieldType", SetFieldType);

	Nan::SetPrototypeMethod(tpl, "SetFrustum", SetFrustum);
	Nan::SetPrototypeMethod(tpl, "setFrustum", SetFrustum);

	Nan::SetPrototypeMethod(tpl, "SetInsideOut", SetInsideOut);
	Nan::SetPrototypeMethod(tpl, "setInsideOut", SetInsideOut);

	Nan::SetPrototypeMethod(tpl, "SetShowBounds", SetShowBounds);
	Nan::SetPrototypeMethod(tpl, "setShowBounds", SetShowBounds);

	Nan::SetPrototypeMethod(tpl, "ShowBoundsOff", ShowBoundsOff);
	Nan::SetPrototypeMethod(tpl, "showBoundsOff", ShowBoundsOff);

	Nan::SetPrototypeMethod(tpl, "ShowBoundsOn", ShowBoundsOn);
	Nan::SetPrototypeMethod(tpl, "showBoundsOn", ShowBoundsOn);

	ptpl.Reset( tpl );
}

void VtkExtractSelectedFrustumWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkExtractSelectedFrustum> native = vtkSmartPointer<vtkExtractSelectedFrustum>::New();
		VtkExtractSelectedFrustumWrap* obj = new VtkExtractSelectedFrustumWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkExtractSelectedFrustumWrap::CreateFrustum(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0( v8::Local<v8::Array>::Cast( info[0]->ToObject() ) );
		double b0[32];
		if( a0->Length() < 32 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 32; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->CreateFrustum(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractSelectedFrustumWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkExtractSelectedFrustumWrap::GetClipPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	vtkPoints * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClipPoints();
		VtkPointsWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPointsWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPointsWrap *w = new VtkPointsWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExtractSelectedFrustumWrap::GetContainingCells(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetContainingCells();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractSelectedFrustumWrap::GetFieldType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFieldType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractSelectedFrustumWrap::GetFrustum(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	vtkPlanes * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFrustum();
		VtkPlanesWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPlanesWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPlanesWrap *w = new VtkPlanesWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExtractSelectedFrustumWrap::GetInsideOut(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInsideOut();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractSelectedFrustumWrap::GetShowBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetShowBounds();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractSelectedFrustumWrap::InsideOutOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InsideOutOff();
}

void VtkExtractSelectedFrustumWrap::InsideOutOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InsideOutOn();
}

void VtkExtractSelectedFrustumWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractSelectedFrustumWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	vtkExtractSelectedFrustum * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkExtractSelectedFrustumWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkExtractSelectedFrustumWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkExtractSelectedFrustumWrap *w = new VtkExtractSelectedFrustumWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExtractSelectedFrustumWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkExtractSelectedFrustum * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkExtractSelectedFrustumWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkExtractSelectedFrustumWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkExtractSelectedFrustumWrap *w = new VtkExtractSelectedFrustumWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractSelectedFrustumWrap::SetContainingCells(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetContainingCells(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractSelectedFrustumWrap::SetFieldType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFieldType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractSelectedFrustumWrap::SetFrustum(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPlanesWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPlanesWrap *a0 = ObjectWrap::Unwrap<VtkPlanesWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFrustum(
			(vtkPlanes *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractSelectedFrustumWrap::SetInsideOut(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInsideOut(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractSelectedFrustumWrap::SetShowBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetShowBounds(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractSelectedFrustumWrap::ShowBoundsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ShowBoundsOff();
}

void VtkExtractSelectedFrustumWrap::ShowBoundsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSelectedFrustumWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSelectedFrustumWrap>(info.Holder());
	vtkExtractSelectedFrustum *native = (vtkExtractSelectedFrustum *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ShowBoundsOn();
}

