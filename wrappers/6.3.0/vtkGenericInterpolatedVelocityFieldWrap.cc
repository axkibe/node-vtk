/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkFunctionSetWrap.h"
#include "vtkGenericInterpolatedVelocityFieldWrap.h"
#include "vtkObjectWrap.h"
#include "vtkGenericDataSetWrap.h"
#include "vtkGenericAdaptorCellWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkGenericInterpolatedVelocityFieldWrap::ptpl;

VtkGenericInterpolatedVelocityFieldWrap::VtkGenericInterpolatedVelocityFieldWrap()
{ }

VtkGenericInterpolatedVelocityFieldWrap::VtkGenericInterpolatedVelocityFieldWrap(vtkSmartPointer<vtkGenericInterpolatedVelocityField> _native)
{ native = _native; }

VtkGenericInterpolatedVelocityFieldWrap::~VtkGenericInterpolatedVelocityFieldWrap()
{ }

void VtkGenericInterpolatedVelocityFieldWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkGenericInterpolatedVelocityField").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("GenericInterpolatedVelocityField").ToLocalChecked(), ConstructorGetter);
}

void VtkGenericInterpolatedVelocityFieldWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkGenericInterpolatedVelocityFieldWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkFunctionSetWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkFunctionSetWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkGenericInterpolatedVelocityFieldWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddDataSet", AddDataSet);
	Nan::SetPrototypeMethod(tpl, "addDataSet", AddDataSet);

	Nan::SetPrototypeMethod(tpl, "CachingOff", CachingOff);
	Nan::SetPrototypeMethod(tpl, "cachingOff", CachingOff);

	Nan::SetPrototypeMethod(tpl, "CachingOn", CachingOn);
	Nan::SetPrototypeMethod(tpl, "cachingOn", CachingOn);

	Nan::SetPrototypeMethod(tpl, "ClearLastCell", ClearLastCell);
	Nan::SetPrototypeMethod(tpl, "clearLastCell", ClearLastCell);

	Nan::SetPrototypeMethod(tpl, "CopyParameters", CopyParameters);
	Nan::SetPrototypeMethod(tpl, "copyParameters", CopyParameters);

	Nan::SetPrototypeMethod(tpl, "GetCacheHit", GetCacheHit);
	Nan::SetPrototypeMethod(tpl, "getCacheHit", GetCacheHit);

	Nan::SetPrototypeMethod(tpl, "GetCacheMiss", GetCacheMiss);
	Nan::SetPrototypeMethod(tpl, "getCacheMiss", GetCacheMiss);

	Nan::SetPrototypeMethod(tpl, "GetCaching", GetCaching);
	Nan::SetPrototypeMethod(tpl, "getCaching", GetCaching);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetLastCell", GetLastCell);
	Nan::SetPrototypeMethod(tpl, "getLastCell", GetLastCell);

	Nan::SetPrototypeMethod(tpl, "GetLastDataSet", GetLastDataSet);
	Nan::SetPrototypeMethod(tpl, "getLastDataSet", GetLastDataSet);

	Nan::SetPrototypeMethod(tpl, "GetLastLocalCoordinates", GetLastLocalCoordinates);
	Nan::SetPrototypeMethod(tpl, "getLastLocalCoordinates", GetLastLocalCoordinates);

	Nan::SetPrototypeMethod(tpl, "GetVectorsSelection", GetVectorsSelection);
	Nan::SetPrototypeMethod(tpl, "getVectorsSelection", GetVectorsSelection);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SelectVectors", SelectVectors);
	Nan::SetPrototypeMethod(tpl, "selectVectors", SelectVectors);

	Nan::SetPrototypeMethod(tpl, "SetCaching", SetCaching);
	Nan::SetPrototypeMethod(tpl, "setCaching", SetCaching);

#ifdef VTK_NODE_PLUS_VTKGENERICINTERPOLATEDVELOCITYFIELDWRAP_INITPTPL
	VTK_NODE_PLUS_VTKGENERICINTERPOLATEDVELOCITYFIELDWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkGenericInterpolatedVelocityFieldWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkGenericInterpolatedVelocityField> native = vtkSmartPointer<vtkGenericInterpolatedVelocityField>::New();
		VtkGenericInterpolatedVelocityFieldWrap* obj = new VtkGenericInterpolatedVelocityFieldWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkGenericInterpolatedVelocityFieldWrap::AddDataSet(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkGenericDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkGenericDataSetWrap *a0 = ObjectWrap::Unwrap<VtkGenericDataSetWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddDataSet(
			(vtkGenericDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericInterpolatedVelocityFieldWrap::CachingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CachingOff();
}

void VtkGenericInterpolatedVelocityFieldWrap::CachingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CachingOn();
}

void VtkGenericInterpolatedVelocityFieldWrap::ClearLastCell(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ClearLastCell();
}

void VtkGenericInterpolatedVelocityFieldWrap::CopyParameters(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkGenericInterpolatedVelocityFieldWrap::ptpl))->HasInstance(info[0]))
	{
		VtkGenericInterpolatedVelocityFieldWrap *a0 = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->CopyParameters(
			(vtkGenericInterpolatedVelocityField *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericInterpolatedVelocityFieldWrap::GetCacheHit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCacheHit();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericInterpolatedVelocityFieldWrap::GetCacheMiss(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCacheMiss();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericInterpolatedVelocityFieldWrap::GetCaching(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCaching();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericInterpolatedVelocityFieldWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGenericInterpolatedVelocityFieldWrap::GetLastCell(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	vtkGenericAdaptorCell * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLastCell();
	VtkGenericAdaptorCellWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkGenericAdaptorCellWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGenericAdaptorCellWrap *w = new VtkGenericAdaptorCellWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericInterpolatedVelocityFieldWrap::GetLastDataSet(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	vtkGenericDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLastDataSet();
	VtkGenericDataSetWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkGenericDataSetWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGenericDataSetWrap *w = new VtkGenericDataSetWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericInterpolatedVelocityFieldWrap::GetLastLocalCoordinates(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetLastLocalCoordinates(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetLastLocalCoordinates(
			b0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericInterpolatedVelocityFieldWrap::GetVectorsSelection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVectorsSelection();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGenericInterpolatedVelocityFieldWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericInterpolatedVelocityFieldWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	vtkGenericInterpolatedVelocityField * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkGenericInterpolatedVelocityFieldWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkGenericInterpolatedVelocityFieldWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGenericInterpolatedVelocityFieldWrap *w = new VtkGenericInterpolatedVelocityFieldWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericInterpolatedVelocityFieldWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkGenericInterpolatedVelocityField * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkGenericInterpolatedVelocityFieldWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkGenericInterpolatedVelocityFieldWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkGenericInterpolatedVelocityFieldWrap *w = new VtkGenericInterpolatedVelocityFieldWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericInterpolatedVelocityFieldWrap::SelectVectors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SelectVectors(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericInterpolatedVelocityFieldWrap::SetCaching(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericInterpolatedVelocityFieldWrap *wrapper = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info.Holder());
	vtkGenericInterpolatedVelocityField *native = (vtkGenericInterpolatedVelocityField *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCaching(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

