/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkAbstractWidgetWrap.h"
#include "vtkImplicitPlaneWidget2Wrap.h"
#include "vtkObjectWrap.h"
#include "vtkImplicitPlaneRepresentationWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkImplicitPlaneWidget2Wrap::ptpl;

VtkImplicitPlaneWidget2Wrap::VtkImplicitPlaneWidget2Wrap()
{ }

VtkImplicitPlaneWidget2Wrap::VtkImplicitPlaneWidget2Wrap(vtkSmartPointer<vtkImplicitPlaneWidget2> _native)
{ native = _native; }

VtkImplicitPlaneWidget2Wrap::~VtkImplicitPlaneWidget2Wrap()
{ }

void VtkImplicitPlaneWidget2Wrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkImplicitPlaneWidget2").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ImplicitPlaneWidget2").ToLocalChecked(), ConstructorGetter);
}

void VtkImplicitPlaneWidget2Wrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkImplicitPlaneWidget2Wrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkAbstractWidgetWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkAbstractWidgetWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkImplicitPlaneWidget2Wrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CreateDefaultRepresentation", CreateDefaultRepresentation);
	Nan::SetPrototypeMethod(tpl, "createDefaultRepresentation", CreateDefaultRepresentation);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetImplicitPlaneRepresentation", GetImplicitPlaneRepresentation);
	Nan::SetPrototypeMethod(tpl, "getImplicitPlaneRepresentation", GetImplicitPlaneRepresentation);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetEnabled", SetEnabled);
	Nan::SetPrototypeMethod(tpl, "setEnabled", SetEnabled);

	Nan::SetPrototypeMethod(tpl, "SetLockNormalToCamera", SetLockNormalToCamera);
	Nan::SetPrototypeMethod(tpl, "setLockNormalToCamera", SetLockNormalToCamera);

	Nan::SetPrototypeMethod(tpl, "SetRepresentation", SetRepresentation);
	Nan::SetPrototypeMethod(tpl, "setRepresentation", SetRepresentation);

	ptpl.Reset( tpl );
}

void VtkImplicitPlaneWidget2Wrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImplicitPlaneWidget2> native = vtkSmartPointer<vtkImplicitPlaneWidget2>::New();
		VtkImplicitPlaneWidget2Wrap* obj = new VtkImplicitPlaneWidget2Wrap(native);		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImplicitPlaneWidget2Wrap::CreateDefaultRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidget2Wrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidget2Wrap>(info.Holder());
	vtkImplicitPlaneWidget2 *native = (vtkImplicitPlaneWidget2 *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CreateDefaultRepresentation();
}

void VtkImplicitPlaneWidget2Wrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidget2Wrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidget2Wrap>(info.Holder());
	vtkImplicitPlaneWidget2 *native = (vtkImplicitPlaneWidget2 *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImplicitPlaneWidget2Wrap::GetImplicitPlaneRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidget2Wrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidget2Wrap>(info.Holder());
	vtkImplicitPlaneWidget2 *native = (vtkImplicitPlaneWidget2 *)wrapper->native.GetPointer();
	vtkImplicitPlaneRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImplicitPlaneRepresentation();
		VtkImplicitPlaneRepresentationWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImplicitPlaneRepresentationWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImplicitPlaneRepresentationWrap *w = new VtkImplicitPlaneRepresentationWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneWidget2Wrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidget2Wrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidget2Wrap>(info.Holder());
	vtkImplicitPlaneWidget2 *native = (vtkImplicitPlaneWidget2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidget2Wrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidget2Wrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidget2Wrap>(info.Holder());
	vtkImplicitPlaneWidget2 *native = (vtkImplicitPlaneWidget2 *)wrapper->native.GetPointer();
	vtkImplicitPlaneWidget2 * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkImplicitPlaneWidget2Wrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImplicitPlaneWidget2Wrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImplicitPlaneWidget2Wrap *w = new VtkImplicitPlaneWidget2Wrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneWidget2Wrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidget2Wrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidget2Wrap>(info.Holder());
	vtkImplicitPlaneWidget2 *native = (vtkImplicitPlaneWidget2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImplicitPlaneWidget2 * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkImplicitPlaneWidget2Wrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkImplicitPlaneWidget2Wrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImplicitPlaneWidget2Wrap *w = new VtkImplicitPlaneWidget2Wrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidget2Wrap::SetEnabled(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidget2Wrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidget2Wrap>(info.Holder());
	vtkImplicitPlaneWidget2 *native = (vtkImplicitPlaneWidget2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEnabled(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidget2Wrap::SetLockNormalToCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidget2Wrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidget2Wrap>(info.Holder());
	vtkImplicitPlaneWidget2 *native = (vtkImplicitPlaneWidget2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLockNormalToCamera(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneWidget2Wrap::SetRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneWidget2Wrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneWidget2Wrap>(info.Holder());
	vtkImplicitPlaneWidget2 *native = (vtkImplicitPlaneWidget2 *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImplicitPlaneRepresentationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImplicitPlaneRepresentationWrap *a0 = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRepresentation(
			(vtkImplicitPlaneRepresentation *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

