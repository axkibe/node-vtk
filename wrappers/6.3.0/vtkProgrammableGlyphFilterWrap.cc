/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkProgrammableGlyphFilterWrap.h"
#include "vtkObjectWrap.h"
#include "vtkAlgorithmOutputWrap.h"
#include "vtkPolyDataWrap.h"
#include "vtkPointDataWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkProgrammableGlyphFilterWrap::ptpl;

VtkProgrammableGlyphFilterWrap::VtkProgrammableGlyphFilterWrap()
{ }

VtkProgrammableGlyphFilterWrap::VtkProgrammableGlyphFilterWrap(vtkSmartPointer<vtkProgrammableGlyphFilter> _native)
{ native = _native; }

VtkProgrammableGlyphFilterWrap::~VtkProgrammableGlyphFilterWrap()
{ }

void VtkProgrammableGlyphFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkProgrammableGlyphFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ProgrammableGlyphFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkProgrammableGlyphFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkProgrammableGlyphFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkProgrammableGlyphFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetColorMode", GetColorMode);
	Nan::SetPrototypeMethod(tpl, "getColorMode", GetColorMode);

	Nan::SetPrototypeMethod(tpl, "GetColorModeAsString", GetColorModeAsString);
	Nan::SetPrototypeMethod(tpl, "getColorModeAsString", GetColorModeAsString);

	Nan::SetPrototypeMethod(tpl, "GetPoint", GetPoint);
	Nan::SetPrototypeMethod(tpl, "getPoint", GetPoint);

	Nan::SetPrototypeMethod(tpl, "GetPointData", GetPointData);
	Nan::SetPrototypeMethod(tpl, "getPointData", GetPointData);

	Nan::SetPrototypeMethod(tpl, "GetSource", GetSource);
	Nan::SetPrototypeMethod(tpl, "getSource", GetSource);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetColorMode", SetColorMode);
	Nan::SetPrototypeMethod(tpl, "setColorMode", SetColorMode);

	Nan::SetPrototypeMethod(tpl, "SetColorModeToColorByInput", SetColorModeToColorByInput);
	Nan::SetPrototypeMethod(tpl, "setColorModeToColorByInput", SetColorModeToColorByInput);

	Nan::SetPrototypeMethod(tpl, "SetColorModeToColorBySource", SetColorModeToColorBySource);
	Nan::SetPrototypeMethod(tpl, "setColorModeToColorBySource", SetColorModeToColorBySource);

	Nan::SetPrototypeMethod(tpl, "SetSourceConnection", SetSourceConnection);
	Nan::SetPrototypeMethod(tpl, "setSourceConnection", SetSourceConnection);

	Nan::SetPrototypeMethod(tpl, "SetSourceData", SetSourceData);
	Nan::SetPrototypeMethod(tpl, "setSourceData", SetSourceData);

#ifdef VTK_NODE_PLUS_VTKPROGRAMMABLEGLYPHFILTERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKPROGRAMMABLEGLYPHFILTERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkProgrammableGlyphFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkProgrammableGlyphFilter> native = vtkSmartPointer<vtkProgrammableGlyphFilter>::New();
		VtkProgrammableGlyphFilterWrap* obj = new VtkProgrammableGlyphFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkProgrammableGlyphFilterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkProgrammableGlyphFilterWrap::GetColorMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetColorMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkProgrammableGlyphFilterWrap::GetColorModeAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetColorModeAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkProgrammableGlyphFilterWrap::GetPoint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPoint();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkProgrammableGlyphFilterWrap::GetPointData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
	vtkPointData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointData();
	VtkPointDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPointDataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPointDataWrap *w = new VtkPointDataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProgrammableGlyphFilterWrap::GetSource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
	vtkPolyData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSource();
	VtkPolyDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPolyDataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataWrap *w = new VtkPolyDataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProgrammableGlyphFilterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProgrammableGlyphFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
	vtkProgrammableGlyphFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkProgrammableGlyphFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkProgrammableGlyphFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkProgrammableGlyphFilterWrap *w = new VtkProgrammableGlyphFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProgrammableGlyphFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkProgrammableGlyphFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkProgrammableGlyphFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkProgrammableGlyphFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkProgrammableGlyphFilterWrap *w = new VtkProgrammableGlyphFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProgrammableGlyphFilterWrap::SetColorMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColorMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProgrammableGlyphFilterWrap::SetColorModeToColorByInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetColorModeToColorByInput();
}

void VtkProgrammableGlyphFilterWrap::SetColorModeToColorBySource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetColorModeToColorBySource();
}

void VtkProgrammableGlyphFilterWrap::SetSourceConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAlgorithmOutputWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSourceConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProgrammableGlyphFilterWrap::SetSourceData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableGlyphFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableGlyphFilterWrap>(info.Holder());
	vtkProgrammableGlyphFilter *native = (vtkProgrammableGlyphFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSourceData(
			(vtkPolyData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

