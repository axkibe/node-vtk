/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPeriodicFilterWrap.h"
#include "vtkAngularPeriodicFilterWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkAngularPeriodicFilterWrap::ptpl;

VtkAngularPeriodicFilterWrap::VtkAngularPeriodicFilterWrap()
{ }

VtkAngularPeriodicFilterWrap::VtkAngularPeriodicFilterWrap(vtkSmartPointer<vtkAngularPeriodicFilter> _native)
{ native = _native; }

VtkAngularPeriodicFilterWrap::~VtkAngularPeriodicFilterWrap()
{ }

void VtkAngularPeriodicFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkAngularPeriodicFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("AngularPeriodicFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkAngularPeriodicFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkAngularPeriodicFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPeriodicFilterWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPeriodicFilterWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkAngularPeriodicFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetRotationAngle", GetRotationAngle);
	Nan::SetPrototypeMethod(tpl, "getRotationAngle", GetRotationAngle);

	Nan::SetPrototypeMethod(tpl, "GetRotationArrayName", GetRotationArrayName);
	Nan::SetPrototypeMethod(tpl, "getRotationArrayName", GetRotationArrayName);

	Nan::SetPrototypeMethod(tpl, "GetRotationAxis", GetRotationAxis);
	Nan::SetPrototypeMethod(tpl, "getRotationAxis", GetRotationAxis);

	Nan::SetPrototypeMethod(tpl, "GetRotationAxisMaxValue", GetRotationAxisMaxValue);
	Nan::SetPrototypeMethod(tpl, "getRotationAxisMaxValue", GetRotationAxisMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetRotationAxisMinValue", GetRotationAxisMinValue);
	Nan::SetPrototypeMethod(tpl, "getRotationAxisMinValue", GetRotationAxisMinValue);

	Nan::SetPrototypeMethod(tpl, "GetRotationMode", GetRotationMode);
	Nan::SetPrototypeMethod(tpl, "getRotationMode", GetRotationMode);

	Nan::SetPrototypeMethod(tpl, "GetRotationModeMaxValue", GetRotationModeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getRotationModeMaxValue", GetRotationModeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetRotationModeMinValue", GetRotationModeMinValue);
	Nan::SetPrototypeMethod(tpl, "getRotationModeMinValue", GetRotationModeMinValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCenter", SetCenter);
	Nan::SetPrototypeMethod(tpl, "setCenter", SetCenter);

	Nan::SetPrototypeMethod(tpl, "SetRotationAngle", SetRotationAngle);
	Nan::SetPrototypeMethod(tpl, "setRotationAngle", SetRotationAngle);

	Nan::SetPrototypeMethod(tpl, "SetRotationArrayName", SetRotationArrayName);
	Nan::SetPrototypeMethod(tpl, "setRotationArrayName", SetRotationArrayName);

	Nan::SetPrototypeMethod(tpl, "SetRotationAxis", SetRotationAxis);
	Nan::SetPrototypeMethod(tpl, "setRotationAxis", SetRotationAxis);

	Nan::SetPrototypeMethod(tpl, "SetRotationAxisToX", SetRotationAxisToX);
	Nan::SetPrototypeMethod(tpl, "setRotationAxisToX", SetRotationAxisToX);

	Nan::SetPrototypeMethod(tpl, "SetRotationAxisToY", SetRotationAxisToY);
	Nan::SetPrototypeMethod(tpl, "setRotationAxisToY", SetRotationAxisToY);

	Nan::SetPrototypeMethod(tpl, "SetRotationAxisToZ", SetRotationAxisToZ);
	Nan::SetPrototypeMethod(tpl, "setRotationAxisToZ", SetRotationAxisToZ);

	Nan::SetPrototypeMethod(tpl, "SetRotationMode", SetRotationMode);
	Nan::SetPrototypeMethod(tpl, "setRotationMode", SetRotationMode);

	Nan::SetPrototypeMethod(tpl, "SetRotationModeToArrayValue", SetRotationModeToArrayValue);
	Nan::SetPrototypeMethod(tpl, "setRotationModeToArrayValue", SetRotationModeToArrayValue);

	Nan::SetPrototypeMethod(tpl, "SetRotationModeToDirectAngle", SetRotationModeToDirectAngle);
	Nan::SetPrototypeMethod(tpl, "setRotationModeToDirectAngle", SetRotationModeToDirectAngle);

	ptpl.Reset( tpl );
}

void VtkAngularPeriodicFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkAngularPeriodicFilter> native = vtkSmartPointer<vtkAngularPeriodicFilter>::New();
		VtkAngularPeriodicFilterWrap* obj = new VtkAngularPeriodicFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkAngularPeriodicFilterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAngularPeriodicFilterWrap::GetRotationAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRotationAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngularPeriodicFilterWrap::GetRotationArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRotationArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAngularPeriodicFilterWrap::GetRotationAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRotationAxis();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngularPeriodicFilterWrap::GetRotationAxisMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRotationAxisMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngularPeriodicFilterWrap::GetRotationAxisMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRotationAxisMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngularPeriodicFilterWrap::GetRotationMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRotationMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngularPeriodicFilterWrap::GetRotationModeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRotationModeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngularPeriodicFilterWrap::GetRotationModeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRotationModeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngularPeriodicFilterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngularPeriodicFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	vtkAngularPeriodicFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkAngularPeriodicFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAngularPeriodicFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAngularPeriodicFilterWrap *w = new VtkAngularPeriodicFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAngularPeriodicFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkAngularPeriodicFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkAngularPeriodicFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkAngularPeriodicFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAngularPeriodicFilterWrap *w = new VtkAngularPeriodicFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngularPeriodicFilterWrap::SetCenter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetCenter(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngularPeriodicFilterWrap::SetRotationAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRotationAngle(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngularPeriodicFilterWrap::SetRotationArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRotationArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngularPeriodicFilterWrap::SetRotationAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRotationAxis(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngularPeriodicFilterWrap::SetRotationAxisToX(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetRotationAxisToX();
}

void VtkAngularPeriodicFilterWrap::SetRotationAxisToY(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetRotationAxisToY();
}

void VtkAngularPeriodicFilterWrap::SetRotationAxisToZ(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetRotationAxisToZ();
}

void VtkAngularPeriodicFilterWrap::SetRotationMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRotationMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngularPeriodicFilterWrap::SetRotationModeToArrayValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetRotationModeToArrayValue();
}

void VtkAngularPeriodicFilterWrap::SetRotationModeToDirectAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngularPeriodicFilterWrap *wrapper = ObjectWrap::Unwrap<VtkAngularPeriodicFilterWrap>(info.Holder());
	vtkAngularPeriodicFilter *native = (vtkAngularPeriodicFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetRotationModeToDirectAngle();
}

