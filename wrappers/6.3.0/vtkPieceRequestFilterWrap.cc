/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkAlgorithmWrap.h"
#include "vtkPieceRequestFilterWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDataObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkPieceRequestFilterWrap::ptpl;

VtkPieceRequestFilterWrap::VtkPieceRequestFilterWrap()
{ }

VtkPieceRequestFilterWrap::VtkPieceRequestFilterWrap(vtkSmartPointer<vtkPieceRequestFilter> _native)
{ native = _native; }

VtkPieceRequestFilterWrap::~VtkPieceRequestFilterWrap()
{ }

void VtkPieceRequestFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkPieceRequestFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("PieceRequestFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkPieceRequestFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkPieceRequestFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkPieceRequestFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPieces", GetNumberOfPieces);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPieces", GetNumberOfPieces);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPiecesMaxValue", GetNumberOfPiecesMaxValue);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPiecesMaxValue", GetNumberOfPiecesMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPiecesMinValue", GetNumberOfPiecesMinValue);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPiecesMinValue", GetNumberOfPiecesMinValue);

	Nan::SetPrototypeMethod(tpl, "GetOutput", GetOutput);
	Nan::SetPrototypeMethod(tpl, "getOutput", GetOutput);

	Nan::SetPrototypeMethod(tpl, "GetPiece", GetPiece);
	Nan::SetPrototypeMethod(tpl, "getPiece", GetPiece);

	Nan::SetPrototypeMethod(tpl, "GetPieceMaxValue", GetPieceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getPieceMaxValue", GetPieceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetPieceMinValue", GetPieceMinValue);
	Nan::SetPrototypeMethod(tpl, "getPieceMinValue", GetPieceMinValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetInputData", SetInputData);
	Nan::SetPrototypeMethod(tpl, "setInputData", SetInputData);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfPieces", SetNumberOfPieces);
	Nan::SetPrototypeMethod(tpl, "setNumberOfPieces", SetNumberOfPieces);

	Nan::SetPrototypeMethod(tpl, "SetPiece", SetPiece);
	Nan::SetPrototypeMethod(tpl, "setPiece", SetPiece);

	ptpl.Reset( tpl );
}

void VtkPieceRequestFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkPieceRequestFilter> native = vtkSmartPointer<vtkPieceRequestFilter>::New();
		VtkPieceRequestFilterWrap* obj = new VtkPieceRequestFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkPieceRequestFilterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPieceRequestFilterWrap::GetNumberOfPieces(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPieces();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPieceRequestFilterWrap::GetNumberOfPiecesMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPiecesMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPieceRequestFilterWrap::GetNumberOfPiecesMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPiecesMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPieceRequestFilterWrap::GetOutput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkDataObject * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetOutput(
			info[0]->Int32Value()
		);
		VtkDataObjectWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkDataObjectWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDataObjectWrap *w = new VtkDataObjectWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	vtkDataObject * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutput();
	VtkDataObjectWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataObjectWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataObjectWrap *w = new VtkDataObjectWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPieceRequestFilterWrap::GetPiece(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPiece();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPieceRequestFilterWrap::GetPieceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPieceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPieceRequestFilterWrap::GetPieceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPieceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPieceRequestFilterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPieceRequestFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	vtkPieceRequestFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkPieceRequestFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPieceRequestFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPieceRequestFilterWrap *w = new VtkPieceRequestFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPieceRequestFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkPieceRequestFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkPieceRequestFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkPieceRequestFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPieceRequestFilterWrap *w = new VtkPieceRequestFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPieceRequestFilterWrap::SetInputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputData(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataObjectWrap *a1 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetInputData(
				info[0]->Int32Value(),
				(vtkDataObject *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPieceRequestFilterWrap::SetNumberOfPieces(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfPieces(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPieceRequestFilterWrap::SetPiece(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPieceRequestFilterWrap *wrapper = ObjectWrap::Unwrap<VtkPieceRequestFilterWrap>(info.Holder());
	vtkPieceRequestFilter *native = (vtkPieceRequestFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPiece(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

