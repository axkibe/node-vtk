/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkVolumeMapperWrap.h"
#include "vtkVolumeTextureMapper3DWrap.h"
#include "vtkObjectWrap.h"
#include "vtkVolumePropertyWrap.h"
#include "vtkRendererWrap.h"
#include "vtkVolumeWrap.h"
#include "vtkImageDataWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkVolumeTextureMapper3DWrap::ptpl;

VtkVolumeTextureMapper3DWrap::VtkVolumeTextureMapper3DWrap()
{ }

VtkVolumeTextureMapper3DWrap::VtkVolumeTextureMapper3DWrap(vtkSmartPointer<vtkVolumeTextureMapper3D> _native)
{ native = _native; }

VtkVolumeTextureMapper3DWrap::~VtkVolumeTextureMapper3DWrap()
{ }

void VtkVolumeTextureMapper3DWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkVolumeTextureMapper3D").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("VolumeTextureMapper3D").ToLocalChecked(), ConstructorGetter);
}

void VtkVolumeTextureMapper3DWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkVolumeTextureMapper3DWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkVolumeMapperWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkVolumeMapperWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkVolumeTextureMapper3DWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPolygons", GetNumberOfPolygons);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPolygons", GetNumberOfPolygons);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfScalarComponents", GetNumberOfScalarComponents);
	Nan::SetPrototypeMethod(tpl, "getNumberOfScalarComponents", GetNumberOfScalarComponents);

	Nan::SetPrototypeMethod(tpl, "GetPreferredRenderMethod", GetPreferredRenderMethod);
	Nan::SetPrototypeMethod(tpl, "getPreferredRenderMethod", GetPreferredRenderMethod);

	Nan::SetPrototypeMethod(tpl, "GetPreferredRenderMethodMaxValue", GetPreferredRenderMethodMaxValue);
	Nan::SetPrototypeMethod(tpl, "getPreferredRenderMethodMaxValue", GetPreferredRenderMethodMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetPreferredRenderMethodMinValue", GetPreferredRenderMethodMinValue);
	Nan::SetPrototypeMethod(tpl, "getPreferredRenderMethodMinValue", GetPreferredRenderMethodMinValue);

	Nan::SetPrototypeMethod(tpl, "GetUseCompressedTexture", GetUseCompressedTexture);
	Nan::SetPrototypeMethod(tpl, "getUseCompressedTexture", GetUseCompressedTexture);

	Nan::SetPrototypeMethod(tpl, "GetVolumeDimensions", GetVolumeDimensions);
	Nan::SetPrototypeMethod(tpl, "getVolumeDimensions", GetVolumeDimensions);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "IsRenderSupported", IsRenderSupported);
	Nan::SetPrototypeMethod(tpl, "isRenderSupported", IsRenderSupported);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "Render", Render);
	Nan::SetPrototypeMethod(tpl, "render", Render);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetPreferredMethodToFragmentProgram", SetPreferredMethodToFragmentProgram);
	Nan::SetPrototypeMethod(tpl, "setPreferredMethodToFragmentProgram", SetPreferredMethodToFragmentProgram);

	Nan::SetPrototypeMethod(tpl, "SetPreferredMethodToNVidia", SetPreferredMethodToNVidia);
	Nan::SetPrototypeMethod(tpl, "setPreferredMethodToNVidia", SetPreferredMethodToNVidia);

	Nan::SetPrototypeMethod(tpl, "SetPreferredRenderMethod", SetPreferredRenderMethod);
	Nan::SetPrototypeMethod(tpl, "setPreferredRenderMethod", SetPreferredRenderMethod);

	Nan::SetPrototypeMethod(tpl, "SetUseCompressedTexture", SetUseCompressedTexture);
	Nan::SetPrototypeMethod(tpl, "setUseCompressedTexture", SetUseCompressedTexture);

#ifdef VTK_NODE_PLUS_VTKVOLUMETEXTUREMAPPER3DWRAP_INITPTPL
	VTK_NODE_PLUS_VTKVOLUMETEXTUREMAPPER3DWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkVolumeTextureMapper3DWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkVolumeTextureMapper3D> native = vtkSmartPointer<vtkVolumeTextureMapper3D>::New();
		VtkVolumeTextureMapper3DWrap* obj = new VtkVolumeTextureMapper3DWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkVolumeTextureMapper3DWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkVolumeTextureMapper3DWrap::GetNumberOfPolygons(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPolygons();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeTextureMapper3DWrap::GetNumberOfScalarComponents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImageDataWrap *a0 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfScalarComponents(
			(vtkImageData *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeTextureMapper3DWrap::GetPreferredRenderMethod(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPreferredRenderMethod();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeTextureMapper3DWrap::GetPreferredRenderMethodMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPreferredRenderMethodMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeTextureMapper3DWrap::GetPreferredRenderMethodMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPreferredRenderMethodMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeTextureMapper3DWrap::GetUseCompressedTexture(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseCompressedTexture();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeTextureMapper3DWrap::GetVolumeDimensions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	int const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVolumeDimensions();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(int));
	Local<v8::Int32Array> at = v8::Int32Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(int));
	info.GetReturnValue().Set(at);
}

void VtkVolumeTextureMapper3DWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeTextureMapper3DWrap::IsRenderSupported(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkVolumePropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkVolumePropertyWrap *a0 = ObjectWrap::Unwrap<VtkVolumePropertyWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[1]))
		{
			VtkRendererWrap *a1 = ObjectWrap::Unwrap<VtkRendererWrap>(info[1]->ToObject());
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->IsRenderSupported(
				(vtkVolumeProperty *) a0->native.GetPointer(),
				(vtkRenderer *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeTextureMapper3DWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	vtkVolumeTextureMapper3D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkVolumeTextureMapper3DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkVolumeTextureMapper3DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkVolumeTextureMapper3DWrap *w = new VtkVolumeTextureMapper3DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkVolumeTextureMapper3DWrap::Render(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkVolumeWrap::ptpl))->HasInstance(info[1]))
		{
			VtkVolumeWrap *a1 = ObjectWrap::Unwrap<VtkVolumeWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->Render(
				(vtkRenderer *) a0->native.GetPointer(),
				(vtkVolume *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeTextureMapper3DWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkVolumeTextureMapper3D * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkVolumeTextureMapper3DWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkVolumeTextureMapper3DWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkVolumeTextureMapper3DWrap *w = new VtkVolumeTextureMapper3DWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeTextureMapper3DWrap::SetPreferredMethodToFragmentProgram(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetPreferredMethodToFragmentProgram();
}

void VtkVolumeTextureMapper3DWrap::SetPreferredMethodToNVidia(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetPreferredMethodToNVidia();
}

void VtkVolumeTextureMapper3DWrap::SetPreferredRenderMethod(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPreferredRenderMethod(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeTextureMapper3DWrap::SetUseCompressedTexture(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeTextureMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeTextureMapper3DWrap>(info.Holder());
	vtkVolumeTextureMapper3D *native = (vtkVolumeTextureMapper3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseCompressedTexture(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

