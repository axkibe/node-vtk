/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPointSetWrap.h"
#include "vtkPolyDataWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkIdListWrap.h"
#include "vtkPointLocatorWrap.h"
#include "vtkCellArrayWrap.h"
#include "vtkDataObjectWrap.h"
#include "vtkInformationWrap.h"
#include "vtkInformationVectorWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkPolyDataWrap::ptpl;

VtkPolyDataWrap::VtkPolyDataWrap()
{ }

VtkPolyDataWrap::VtkPolyDataWrap(vtkSmartPointer<vtkPolyData> _native)
{ native = _native; }

VtkPolyDataWrap::~VtkPolyDataWrap()
{ }

void VtkPolyDataWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkPolyData").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("PolyData").ToLocalChecked(), ConstructorGetter);
}

void VtkPolyDataWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkPolyDataWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPointSetWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPointSetWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkPolyDataWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "BuildCells", BuildCells);
	Nan::SetPrototypeMethod(tpl, "buildCells", BuildCells);

	Nan::SetPrototypeMethod(tpl, "BuildLinks", BuildLinks);
	Nan::SetPrototypeMethod(tpl, "buildLinks", BuildLinks);

	Nan::SetPrototypeMethod(tpl, "ComputeBounds", ComputeBounds);
	Nan::SetPrototypeMethod(tpl, "computeBounds", ComputeBounds);

	Nan::SetPrototypeMethod(tpl, "CopyCells", CopyCells);
	Nan::SetPrototypeMethod(tpl, "copyCells", CopyCells);

	Nan::SetPrototypeMethod(tpl, "CopyStructure", CopyStructure);
	Nan::SetPrototypeMethod(tpl, "copyStructure", CopyStructure);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "DeleteCells", DeleteCells);
	Nan::SetPrototypeMethod(tpl, "deleteCells", DeleteCells);

	Nan::SetPrototypeMethod(tpl, "DeleteLinks", DeleteLinks);
	Nan::SetPrototypeMethod(tpl, "deleteLinks", DeleteLinks);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetData", GetData);
	Nan::SetPrototypeMethod(tpl, "getData", GetData);

	Nan::SetPrototypeMethod(tpl, "GetDataObjectType", GetDataObjectType);
	Nan::SetPrototypeMethod(tpl, "getDataObjectType", GetDataObjectType);

	Nan::SetPrototypeMethod(tpl, "GetGhostLevel", GetGhostLevel);
	Nan::SetPrototypeMethod(tpl, "getGhostLevel", GetGhostLevel);

	Nan::SetPrototypeMethod(tpl, "GetLines", GetLines);
	Nan::SetPrototypeMethod(tpl, "getLines", GetLines);

	Nan::SetPrototypeMethod(tpl, "GetMaxCellSize", GetMaxCellSize);
	Nan::SetPrototypeMethod(tpl, "getMaxCellSize", GetMaxCellSize);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPieces", GetNumberOfPieces);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPieces", GetNumberOfPieces);

	Nan::SetPrototypeMethod(tpl, "GetPiece", GetPiece);
	Nan::SetPrototypeMethod(tpl, "getPiece", GetPiece);

	Nan::SetPrototypeMethod(tpl, "GetPolys", GetPolys);
	Nan::SetPrototypeMethod(tpl, "getPolys", GetPolys);

	Nan::SetPrototypeMethod(tpl, "GetStrips", GetStrips);
	Nan::SetPrototypeMethod(tpl, "getStrips", GetStrips);

	Nan::SetPrototypeMethod(tpl, "GetVerts", GetVerts);
	Nan::SetPrototypeMethod(tpl, "getVerts", GetVerts);

	Nan::SetPrototypeMethod(tpl, "Initialize", Initialize);
	Nan::SetPrototypeMethod(tpl, "initialize", Initialize);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "IsTriangle", IsTriangle);
	Nan::SetPrototypeMethod(tpl, "isTriangle", IsTriangle);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RemoveDeletedCells", RemoveDeletedCells);
	Nan::SetPrototypeMethod(tpl, "removeDeletedCells", RemoveDeletedCells);

	Nan::SetPrototypeMethod(tpl, "RemoveGhostCells", RemoveGhostCells);
	Nan::SetPrototypeMethod(tpl, "removeGhostCells", RemoveGhostCells);

	Nan::SetPrototypeMethod(tpl, "Reset", Reset);
	Nan::SetPrototypeMethod(tpl, "reset", Reset);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetLines", SetLines);
	Nan::SetPrototypeMethod(tpl, "setLines", SetLines);

	Nan::SetPrototypeMethod(tpl, "SetPolys", SetPolys);
	Nan::SetPrototypeMethod(tpl, "setPolys", SetPolys);

	Nan::SetPrototypeMethod(tpl, "SetStrips", SetStrips);
	Nan::SetPrototypeMethod(tpl, "setStrips", SetStrips);

	Nan::SetPrototypeMethod(tpl, "SetVerts", SetVerts);
	Nan::SetPrototypeMethod(tpl, "setVerts", SetVerts);

	Nan::SetPrototypeMethod(tpl, "ShallowCopy", ShallowCopy);
	Nan::SetPrototypeMethod(tpl, "shallowCopy", ShallowCopy);

	Nan::SetPrototypeMethod(tpl, "Squeeze", Squeeze);
	Nan::SetPrototypeMethod(tpl, "squeeze", Squeeze);

	ptpl.Reset( tpl );
}

void VtkPolyDataWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkPolyData> native = vtkSmartPointer<vtkPolyData>::New();
		VtkPolyDataWrap* obj = new VtkPolyDataWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkPolyDataWrap::BuildCells(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BuildCells();
}

void VtkPolyDataWrap::BuildLinks(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->BuildLinks(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::ComputeBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeBounds();
}

void VtkPolyDataWrap::CopyCells(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkIdListWrap::ptpl))->HasInstance(info[1]))
		{
			VtkIdListWrap *a1 = ObjectWrap::Unwrap<VtkIdListWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject() && (Nan::New(VtkPointLocatorWrap::ptpl))->HasInstance(info[2]))
			{
				VtkPointLocatorWrap *a2 = ObjectWrap::Unwrap<VtkPointLocatorWrap>(info[2]->ToObject());
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->CopyCells(
					(vtkPolyData *) a0->native.GetPointer(),
					(vtkIdList *) a1->native.GetPointer(),
					(vtkPointLocator *) a2->native.GetPointer()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::CopyStructure(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->CopyStructure(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DeepCopy(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::DeleteCells(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DeleteCells();
}

void VtkPolyDataWrap::DeleteLinks(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DeleteLinks();
}

void VtkPolyDataWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPolyDataWrap::GetData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationVectorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationVectorWrap *a0 = ObjectWrap::Unwrap<VtkInformationVectorWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkPolyData * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetData(
				(vtkInformationVector *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			VtkPolyDataWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkPolyDataWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkPolyDataWrap *w = new VtkPolyDataWrap();
			w->native = r;
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		vtkPolyData * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetData(
			(vtkInformation *) a0->native.GetPointer()
		);
		VtkPolyDataWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkPolyDataWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPolyDataWrap *w = new VtkPolyDataWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::GetDataObjectType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataObjectType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataWrap::GetGhostLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGhostLevel();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataWrap::GetLines(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	vtkCellArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLines();
	VtkCellArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCellArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCellArrayWrap *w = new VtkCellArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataWrap::GetMaxCellSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaxCellSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataWrap::GetNumberOfPieces(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPieces();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataWrap::GetPiece(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPiece();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataWrap::GetPolys(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	vtkCellArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPolys();
	VtkCellArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCellArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCellArrayWrap *w = new VtkCellArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataWrap::GetStrips(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	vtkCellArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStrips();
	VtkCellArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCellArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCellArrayWrap *w = new VtkCellArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataWrap::GetVerts(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	vtkCellArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVerts();
	VtkCellArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCellArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCellArrayWrap *w = new VtkCellArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataWrap::Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Initialize();
}

void VtkPolyDataWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::IsTriangle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->IsTriangle(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	vtkPolyData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkPolyDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPolyDataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataWrap *w = new VtkPolyDataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataWrap::RemoveDeletedCells(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveDeletedCells();
}

void VtkPolyDataWrap::RemoveGhostCells(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveGhostCells();
}

void VtkPolyDataWrap::Reset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Reset();
}

void VtkPolyDataWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkPolyData * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkPolyDataWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkPolyDataWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPolyDataWrap *w = new VtkPolyDataWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::SetLines(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkCellArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkCellArrayWrap *a0 = ObjectWrap::Unwrap<VtkCellArrayWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLines(
			(vtkCellArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::SetPolys(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkCellArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkCellArrayWrap *a0 = ObjectWrap::Unwrap<VtkCellArrayWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPolys(
			(vtkCellArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::SetStrips(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkCellArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkCellArrayWrap *a0 = ObjectWrap::Unwrap<VtkCellArrayWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetStrips(
			(vtkCellArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::SetVerts(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkCellArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkCellArrayWrap *a0 = ObjectWrap::Unwrap<VtkCellArrayWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVerts(
			(vtkCellArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ShallowCopy(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataWrap::Squeeze(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataWrap>(info.Holder());
	vtkPolyData *native = (vtkPolyData *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Squeeze();
}

