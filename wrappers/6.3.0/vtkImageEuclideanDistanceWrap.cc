/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkImageDecomposeFilterWrap.h"
#include "vtkImageEuclideanDistanceWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkImageEuclideanDistanceWrap::ptpl;

VtkImageEuclideanDistanceWrap::VtkImageEuclideanDistanceWrap()
{ }

VtkImageEuclideanDistanceWrap::VtkImageEuclideanDistanceWrap(vtkSmartPointer<vtkImageEuclideanDistance> _native)
{ native = _native; }

VtkImageEuclideanDistanceWrap::~VtkImageEuclideanDistanceWrap()
{ }

void VtkImageEuclideanDistanceWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkImageEuclideanDistance").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ImageEuclideanDistance").ToLocalChecked(), ConstructorGetter);
}

void VtkImageEuclideanDistanceWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkImageEuclideanDistanceWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkImageDecomposeFilterWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkImageDecomposeFilterWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkImageEuclideanDistanceWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ConsiderAnisotropyOff", ConsiderAnisotropyOff);
	Nan::SetPrototypeMethod(tpl, "considerAnisotropyOff", ConsiderAnisotropyOff);

	Nan::SetPrototypeMethod(tpl, "ConsiderAnisotropyOn", ConsiderAnisotropyOn);
	Nan::SetPrototypeMethod(tpl, "considerAnisotropyOn", ConsiderAnisotropyOn);

	Nan::SetPrototypeMethod(tpl, "GetAlgorithm", GetAlgorithm);
	Nan::SetPrototypeMethod(tpl, "getAlgorithm", GetAlgorithm);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetConsiderAnisotropy", GetConsiderAnisotropy);
	Nan::SetPrototypeMethod(tpl, "getConsiderAnisotropy", GetConsiderAnisotropy);

	Nan::SetPrototypeMethod(tpl, "GetInitialize", GetInitialize);
	Nan::SetPrototypeMethod(tpl, "getInitialize", GetInitialize);

	Nan::SetPrototypeMethod(tpl, "GetMaximumDistance", GetMaximumDistance);
	Nan::SetPrototypeMethod(tpl, "getMaximumDistance", GetMaximumDistance);

	Nan::SetPrototypeMethod(tpl, "InitializeOff", InitializeOff);
	Nan::SetPrototypeMethod(tpl, "initializeOff", InitializeOff);

	Nan::SetPrototypeMethod(tpl, "InitializeOn", InitializeOn);
	Nan::SetPrototypeMethod(tpl, "initializeOn", InitializeOn);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAlgorithm", SetAlgorithm);
	Nan::SetPrototypeMethod(tpl, "setAlgorithm", SetAlgorithm);

	Nan::SetPrototypeMethod(tpl, "SetAlgorithmToSaito", SetAlgorithmToSaito);
	Nan::SetPrototypeMethod(tpl, "setAlgorithmToSaito", SetAlgorithmToSaito);

	Nan::SetPrototypeMethod(tpl, "SetAlgorithmToSaitoCached", SetAlgorithmToSaitoCached);
	Nan::SetPrototypeMethod(tpl, "setAlgorithmToSaitoCached", SetAlgorithmToSaitoCached);

	Nan::SetPrototypeMethod(tpl, "SetConsiderAnisotropy", SetConsiderAnisotropy);
	Nan::SetPrototypeMethod(tpl, "setConsiderAnisotropy", SetConsiderAnisotropy);

	Nan::SetPrototypeMethod(tpl, "SetInitialize", SetInitialize);
	Nan::SetPrototypeMethod(tpl, "setInitialize", SetInitialize);

	Nan::SetPrototypeMethod(tpl, "SetMaximumDistance", SetMaximumDistance);
	Nan::SetPrototypeMethod(tpl, "setMaximumDistance", SetMaximumDistance);

	Nan::SetPrototypeMethod(tpl, "SplitExtent", SplitExtent);
	Nan::SetPrototypeMethod(tpl, "splitExtent", SplitExtent);

	ptpl.Reset( tpl );
}

void VtkImageEuclideanDistanceWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageEuclideanDistance> native = vtkSmartPointer<vtkImageEuclideanDistance>::New();
		VtkImageEuclideanDistanceWrap* obj = new VtkImageEuclideanDistanceWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageEuclideanDistanceWrap::ConsiderAnisotropyOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConsiderAnisotropyOff();
}

void VtkImageEuclideanDistanceWrap::ConsiderAnisotropyOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConsiderAnisotropyOn();
}

void VtkImageEuclideanDistanceWrap::GetAlgorithm(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAlgorithm();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageEuclideanDistanceWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageEuclideanDistanceWrap::GetConsiderAnisotropy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConsiderAnisotropy();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageEuclideanDistanceWrap::GetInitialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInitialize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageEuclideanDistanceWrap::GetMaximumDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumDistance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageEuclideanDistanceWrap::InitializeOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InitializeOff();
}

void VtkImageEuclideanDistanceWrap::InitializeOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InitializeOn();
}

void VtkImageEuclideanDistanceWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageEuclideanDistanceWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	vtkImageEuclideanDistance * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkImageEuclideanDistanceWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImageEuclideanDistanceWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageEuclideanDistanceWrap *w = new VtkImageEuclideanDistanceWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageEuclideanDistanceWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageEuclideanDistance * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		VtkImageEuclideanDistanceWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkImageEuclideanDistanceWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageEuclideanDistanceWrap *w = new VtkImageEuclideanDistanceWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageEuclideanDistanceWrap::SetAlgorithm(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAlgorithm(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageEuclideanDistanceWrap::SetAlgorithmToSaito(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetAlgorithmToSaito();
}

void VtkImageEuclideanDistanceWrap::SetAlgorithmToSaitoCached(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetAlgorithmToSaitoCached();
}

void VtkImageEuclideanDistanceWrap::SetConsiderAnisotropy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConsiderAnisotropy(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageEuclideanDistanceWrap::SetInitialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInitialize(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageEuclideanDistanceWrap::SetMaximumDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumDistance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageEuclideanDistanceWrap::SplitExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageEuclideanDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkImageEuclideanDistanceWrap>(info.Holder());
	vtkImageEuclideanDistance *native = (vtkImageEuclideanDistance *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		if(info.Length() > 1 && info[1]->IsInt32Array())
		{
			v8::Local<v8::Int32Array>a1(v8::Local<v8::Int32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->SplitExtent(
						(int *)(a0->Buffer()->GetContents().Data()),
						(int *)(a1->Buffer()->GetContents().Data()),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			int b1[6];
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 6; i++ )
			{
				if( !a1->Get(i)->IsInt32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Int32Value();
			}
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->SplitExtent(
						(int *)(a0->Buffer()->GetContents().Data()),
						b1,
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[6];
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 6; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
		if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			int b1[6];
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 6; i++ )
			{
				if( !a1->Get(i)->IsInt32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Int32Value();
			}
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->SplitExtent(
						b0,
						b1,
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
		else if(info.Length() > 1 && info[1]->IsInt32Array())
		{
			v8::Local<v8::Int32Array>a1(v8::Local<v8::Int32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->SplitExtent(
						b0,
						(int *)(a1->Buffer()->GetContents().Data()),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

