/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKOCTREEPOINTLOCATORWRAP_H
#define NATIVE_EXTENSION_VTK_VTKOCTREEPOINTLOCATORWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkOctreePointLocator.h>

#include "vtkAbstractPointLocatorWrap.h"

class VtkOctreePointLocatorWrap : public VtkAbstractPointLocatorWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkOctreePointLocatorWrap(vtkSmartPointer<vtkOctreePointLocator>);
		VtkOctreePointLocatorWrap();
		~VtkOctreePointLocatorWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void BuildLocator(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void FreeSearchStructure(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GenerateRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCreateCubicOctants(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFudgeFactor(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaximumPointsPerRegion(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfLeafNodes(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPointsInRegion(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRegionContainingPoint(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCreateCubicOctants(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFudgeFactor(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaximumPointsPerRegion(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
