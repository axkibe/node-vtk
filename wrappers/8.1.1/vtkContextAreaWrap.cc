/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkAbstractContextItemWrap.h"
#include "vtkContextAreaWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkContext2DWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkContextAreaWrap::ptpl;

VtkContextAreaWrap::VtkContextAreaWrap()
{ }

VtkContextAreaWrap::VtkContextAreaWrap(vtkSmartPointer<vtkContextArea> _native)
{ native = _native; }

VtkContextAreaWrap::~VtkContextAreaWrap()
{ }

void VtkContextAreaWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkContextArea").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ContextArea").ToLocalChecked(), ConstructorGetter);
}

void VtkContextAreaWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkContextAreaWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkAbstractContextItemWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkAbstractContextItemWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkContextAreaWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "FillViewportOff", FillViewportOff);
	Nan::SetPrototypeMethod(tpl, "fillViewportOff", FillViewportOff);

	Nan::SetPrototypeMethod(tpl, "FillViewportOn", FillViewportOn);
	Nan::SetPrototypeMethod(tpl, "fillViewportOn", FillViewportOn);

	Nan::SetPrototypeMethod(tpl, "GetDrawAreaItem", GetDrawAreaItem);
	Nan::SetPrototypeMethod(tpl, "getDrawAreaItem", GetDrawAreaItem);

	Nan::SetPrototypeMethod(tpl, "GetFillViewport", GetFillViewport);
	Nan::SetPrototypeMethod(tpl, "getFillViewport", GetFillViewport);

	Nan::SetPrototypeMethod(tpl, "GetFixedAspect", GetFixedAspect);
	Nan::SetPrototypeMethod(tpl, "getFixedAspect", GetFixedAspect);

	Nan::SetPrototypeMethod(tpl, "GetFixedMarginsArray", GetFixedMarginsArray);
	Nan::SetPrototypeMethod(tpl, "getFixedMarginsArray", GetFixedMarginsArray);

	Nan::SetPrototypeMethod(tpl, "GetShowGrid", GetShowGrid);
	Nan::SetPrototypeMethod(tpl, "getShowGrid", GetShowGrid);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "Paint", Paint);
	Nan::SetPrototypeMethod(tpl, "paint", Paint);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetFillViewport", SetFillViewport);
	Nan::SetPrototypeMethod(tpl, "setFillViewport", SetFillViewport);

	Nan::SetPrototypeMethod(tpl, "SetFixedAspect", SetFixedAspect);
	Nan::SetPrototypeMethod(tpl, "setFixedAspect", SetFixedAspect);

	Nan::SetPrototypeMethod(tpl, "SetFixedMargins", SetFixedMargins);
	Nan::SetPrototypeMethod(tpl, "setFixedMargins", SetFixedMargins);

	Nan::SetPrototypeMethod(tpl, "SetFixedRect", SetFixedRect);
	Nan::SetPrototypeMethod(tpl, "setFixedRect", SetFixedRect);

	Nan::SetPrototypeMethod(tpl, "SetShowGrid", SetShowGrid);
	Nan::SetPrototypeMethod(tpl, "setShowGrid", SetShowGrid);

	Nan::SetPrototypeMethod(tpl, "ShowGridOff", ShowGridOff);
	Nan::SetPrototypeMethod(tpl, "showGridOff", ShowGridOff);

	Nan::SetPrototypeMethod(tpl, "ShowGridOn", ShowGridOn);
	Nan::SetPrototypeMethod(tpl, "showGridOn", ShowGridOn);

#ifdef VTK_NODE_PLUS_VTKCONTEXTAREAWRAP_INITPTPL
	VTK_NODE_PLUS_VTKCONTEXTAREAWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkContextAreaWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkContextArea> native = vtkSmartPointer<vtkContextArea>::New();
		VtkContextAreaWrap* obj = new VtkContextAreaWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkContextAreaWrap::FillViewportOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FillViewportOff();
}

void VtkContextAreaWrap::FillViewportOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FillViewportOn();
}

void VtkContextAreaWrap::GetDrawAreaItem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	vtkAbstractContextItem * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDrawAreaItem();
	VtkAbstractContextItemWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAbstractContextItemWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAbstractContextItemWrap *w = new VtkAbstractContextItemWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContextAreaWrap::GetFillViewport(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFillViewport();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContextAreaWrap::GetFixedAspect(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	float r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFixedAspect();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContextAreaWrap::GetFixedMarginsArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 4 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetFixedMarginsArray(
			(int *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[4];
		if( a0->Length() < 4 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 4; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetFixedMarginsArray(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContextAreaWrap::GetShowGrid(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetShowGrid();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContextAreaWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	vtkContextArea * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkContextAreaWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkContextAreaWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkContextAreaWrap *w = new VtkContextAreaWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContextAreaWrap::Paint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkContext2DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkContext2DWrap *a0 = ObjectWrap::Unwrap<VtkContext2DWrap>(info[0]->ToObject());
		bool r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->Paint(
			(vtkContext2D *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContextAreaWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkContextArea * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkContextAreaWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkContextAreaWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkContextAreaWrap *w = new VtkContextAreaWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContextAreaWrap::SetFillViewport(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFillViewport(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContextAreaWrap::SetFixedAspect(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFixedAspect(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContextAreaWrap::SetFixedMargins(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 4 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFixedMargins(
			(int *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[4];
		if( a0->Length() < 4 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 4; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFixedMargins(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
										if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->SetFixedMargins(
						info[0]->Int32Value(),
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContextAreaWrap::SetFixedRect(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
										if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->SetFixedRect(
						info[0]->Int32Value(),
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContextAreaWrap::SetShowGrid(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetShowGrid(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContextAreaWrap::ShowGridOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ShowGridOff();
}

void VtkContextAreaWrap::ShowGridOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContextAreaWrap *wrapper = ObjectWrap::Unwrap<VtkContextAreaWrap>(info.Holder());
	vtkContextArea *native = (vtkContextArea *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ShowGridOn();
}

