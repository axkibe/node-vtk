/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkInterpolationKernelWrap.h"
#include "vtkSPHKernelWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkDataArrayWrap.h"
#include "vtkAbstractPointLocatorWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkPointDataWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkSPHKernelWrap::ptpl;

VtkSPHKernelWrap::VtkSPHKernelWrap()
{ }

VtkSPHKernelWrap::VtkSPHKernelWrap(vtkSmartPointer<vtkSPHKernel> _native)
{ native = _native; }

VtkSPHKernelWrap::~VtkSPHKernelWrap()
{ }

void VtkSPHKernelWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkSPHKernel").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("SPHKernel").ToLocalChecked(), ConstructorGetter);
}

void VtkSPHKernelWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkSPHKernelWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkInterpolationKernelWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkInterpolationKernelWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkSPHKernelWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetCutoffArray", GetCutoffArray);
	Nan::SetPrototypeMethod(tpl, "getCutoffArray", GetCutoffArray);

	Nan::SetPrototypeMethod(tpl, "GetCutoffFactor", GetCutoffFactor);
	Nan::SetPrototypeMethod(tpl, "getCutoffFactor", GetCutoffFactor);

	Nan::SetPrototypeMethod(tpl, "GetDensityArray", GetDensityArray);
	Nan::SetPrototypeMethod(tpl, "getDensityArray", GetDensityArray);

	Nan::SetPrototypeMethod(tpl, "GetDimension", GetDimension);
	Nan::SetPrototypeMethod(tpl, "getDimension", GetDimension);

	Nan::SetPrototypeMethod(tpl, "GetDimensionMaxValue", GetDimensionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getDimensionMaxValue", GetDimensionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetDimensionMinValue", GetDimensionMinValue);
	Nan::SetPrototypeMethod(tpl, "getDimensionMinValue", GetDimensionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetMassArray", GetMassArray);
	Nan::SetPrototypeMethod(tpl, "getMassArray", GetMassArray);

	Nan::SetPrototypeMethod(tpl, "GetNormFactor", GetNormFactor);
	Nan::SetPrototypeMethod(tpl, "getNormFactor", GetNormFactor);

	Nan::SetPrototypeMethod(tpl, "GetSpatialStep", GetSpatialStep);
	Nan::SetPrototypeMethod(tpl, "getSpatialStep", GetSpatialStep);

	Nan::SetPrototypeMethod(tpl, "GetSpatialStepMaxValue", GetSpatialStepMaxValue);
	Nan::SetPrototypeMethod(tpl, "getSpatialStepMaxValue", GetSpatialStepMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetSpatialStepMinValue", GetSpatialStepMinValue);
	Nan::SetPrototypeMethod(tpl, "getSpatialStepMinValue", GetSpatialStepMinValue);

	Nan::SetPrototypeMethod(tpl, "Initialize", Initialize);
	Nan::SetPrototypeMethod(tpl, "initialize", Initialize);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCutoffArray", SetCutoffArray);
	Nan::SetPrototypeMethod(tpl, "setCutoffArray", SetCutoffArray);

	Nan::SetPrototypeMethod(tpl, "SetDensityArray", SetDensityArray);
	Nan::SetPrototypeMethod(tpl, "setDensityArray", SetDensityArray);

	Nan::SetPrototypeMethod(tpl, "SetDimension", SetDimension);
	Nan::SetPrototypeMethod(tpl, "setDimension", SetDimension);

	Nan::SetPrototypeMethod(tpl, "SetMassArray", SetMassArray);
	Nan::SetPrototypeMethod(tpl, "setMassArray", SetMassArray);

	Nan::SetPrototypeMethod(tpl, "SetSpatialStep", SetSpatialStep);
	Nan::SetPrototypeMethod(tpl, "setSpatialStep", SetSpatialStep);

#ifdef VTK_NODE_PLUS_VTKSPHKERNELWRAP_INITPTPL
	VTK_NODE_PLUS_VTKSPHKERNELWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkSPHKernelWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkSPHKernelWrap::GetCutoffArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	vtkDataArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCutoffArray();
	VtkDataArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataArrayWrap *w = new VtkDataArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSPHKernelWrap::GetCutoffFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCutoffFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSPHKernelWrap::GetDensityArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	vtkDataArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDensityArray();
	VtkDataArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataArrayWrap *w = new VtkDataArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSPHKernelWrap::GetDimension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDimension();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSPHKernelWrap::GetDimensionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDimensionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSPHKernelWrap::GetDimensionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDimensionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSPHKernelWrap::GetMassArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	vtkDataArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMassArray();
	VtkDataArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataArrayWrap *w = new VtkDataArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSPHKernelWrap::GetNormFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSPHKernelWrap::GetSpatialStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpatialStep();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSPHKernelWrap::GetSpatialStepMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpatialStepMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSPHKernelWrap::GetSpatialStepMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpatialStepMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSPHKernelWrap::Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractPointLocatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractPointLocatorWrap *a0 = ObjectWrap::Unwrap<VtkAbstractPointLocatorWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataSetWrap *a1 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject() && (Nan::New(VtkPointDataWrap::ptpl))->HasInstance(info[2]))
			{
				VtkPointDataWrap *a2 = ObjectWrap::Unwrap<VtkPointDataWrap>(info[2]->ToObject());
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->Initialize(
					(vtkAbstractPointLocator *) a0->native.GetPointer(),
					(vtkDataSet *) a1->native.GetPointer(),
					(vtkPointData *) a2->native.GetPointer()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSPHKernelWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	vtkSPHKernel * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkSPHKernelWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkSPHKernelWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkSPHKernelWrap *w = new VtkSPHKernelWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSPHKernelWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkSPHKernel * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkSPHKernelWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkSPHKernelWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkSPHKernelWrap *w = new VtkSPHKernelWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSPHKernelWrap::SetCutoffArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataArrayWrap *a0 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCutoffArray(
			(vtkDataArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSPHKernelWrap::SetDensityArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataArrayWrap *a0 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDensityArray(
			(vtkDataArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSPHKernelWrap::SetDimension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDimension(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSPHKernelWrap::SetMassArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataArrayWrap *a0 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMassArray(
			(vtkDataArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSPHKernelWrap::SetSpatialStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSPHKernelWrap *wrapper = ObjectWrap::Unwrap<VtkSPHKernelWrap>(info.Holder());
	vtkSPHKernel *native = (vtkSPHKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSpatialStep(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

