/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkUnstructuredGridAlgorithmWrap.h"
#include "vtkVolumeOfRevolutionFilterWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkVolumeOfRevolutionFilterWrap::ptpl;

VtkVolumeOfRevolutionFilterWrap::VtkVolumeOfRevolutionFilterWrap()
{ }

VtkVolumeOfRevolutionFilterWrap::VtkVolumeOfRevolutionFilterWrap(vtkSmartPointer<vtkVolumeOfRevolutionFilter> _native)
{ native = _native; }

VtkVolumeOfRevolutionFilterWrap::~VtkVolumeOfRevolutionFilterWrap()
{ }

void VtkVolumeOfRevolutionFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkVolumeOfRevolutionFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("VolumeOfRevolutionFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkVolumeOfRevolutionFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkVolumeOfRevolutionFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkUnstructuredGridAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkUnstructuredGridAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkVolumeOfRevolutionFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetAxisDirection", GetAxisDirection);
	Nan::SetPrototypeMethod(tpl, "getAxisDirection", GetAxisDirection);

	Nan::SetPrototypeMethod(tpl, "GetAxisPosition", GetAxisPosition);
	Nan::SetPrototypeMethod(tpl, "getAxisPosition", GetAxisPosition);

	Nan::SetPrototypeMethod(tpl, "GetOutputPointsPrecision", GetOutputPointsPrecision);
	Nan::SetPrototypeMethod(tpl, "getOutputPointsPrecision", GetOutputPointsPrecision);

	Nan::SetPrototypeMethod(tpl, "GetOutputPointsPrecisionMaxValue", GetOutputPointsPrecisionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getOutputPointsPrecisionMaxValue", GetOutputPointsPrecisionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetOutputPointsPrecisionMinValue", GetOutputPointsPrecisionMinValue);
	Nan::SetPrototypeMethod(tpl, "getOutputPointsPrecisionMinValue", GetOutputPointsPrecisionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetResolution", GetResolution);
	Nan::SetPrototypeMethod(tpl, "getResolution", GetResolution);

	Nan::SetPrototypeMethod(tpl, "GetResolutionMaxValue", GetResolutionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getResolutionMaxValue", GetResolutionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetResolutionMinValue", GetResolutionMinValue);
	Nan::SetPrototypeMethod(tpl, "getResolutionMinValue", GetResolutionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetSweepAngle", GetSweepAngle);
	Nan::SetPrototypeMethod(tpl, "getSweepAngle", GetSweepAngle);

	Nan::SetPrototypeMethod(tpl, "GetSweepAngleMaxValue", GetSweepAngleMaxValue);
	Nan::SetPrototypeMethod(tpl, "getSweepAngleMaxValue", GetSweepAngleMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetSweepAngleMinValue", GetSweepAngleMinValue);
	Nan::SetPrototypeMethod(tpl, "getSweepAngleMinValue", GetSweepAngleMinValue);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAxisDirection", SetAxisDirection);
	Nan::SetPrototypeMethod(tpl, "setAxisDirection", SetAxisDirection);

	Nan::SetPrototypeMethod(tpl, "SetAxisPosition", SetAxisPosition);
	Nan::SetPrototypeMethod(tpl, "setAxisPosition", SetAxisPosition);

	Nan::SetPrototypeMethod(tpl, "SetOutputPointsPrecision", SetOutputPointsPrecision);
	Nan::SetPrototypeMethod(tpl, "setOutputPointsPrecision", SetOutputPointsPrecision);

	Nan::SetPrototypeMethod(tpl, "SetResolution", SetResolution);
	Nan::SetPrototypeMethod(tpl, "setResolution", SetResolution);

	Nan::SetPrototypeMethod(tpl, "SetSweepAngle", SetSweepAngle);
	Nan::SetPrototypeMethod(tpl, "setSweepAngle", SetSweepAngle);

#ifdef VTK_NODE_PLUS_VTKVOLUMEOFREVOLUTIONFILTERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKVOLUMEOFREVOLUTIONFILTERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkVolumeOfRevolutionFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkVolumeOfRevolutionFilter> native = vtkSmartPointer<vtkVolumeOfRevolutionFilter>::New();
		VtkVolumeOfRevolutionFilterWrap* obj = new VtkVolumeOfRevolutionFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkVolumeOfRevolutionFilterWrap::GetAxisDirection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAxisDirection();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkVolumeOfRevolutionFilterWrap::GetAxisPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAxisPosition();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkVolumeOfRevolutionFilterWrap::GetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputPointsPrecision();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeOfRevolutionFilterWrap::GetOutputPointsPrecisionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputPointsPrecisionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeOfRevolutionFilterWrap::GetOutputPointsPrecisionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputPointsPrecisionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeOfRevolutionFilterWrap::GetResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeOfRevolutionFilterWrap::GetResolutionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResolutionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeOfRevolutionFilterWrap::GetResolutionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResolutionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeOfRevolutionFilterWrap::GetSweepAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSweepAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeOfRevolutionFilterWrap::GetSweepAngleMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSweepAngleMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeOfRevolutionFilterWrap::GetSweepAngleMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSweepAngleMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVolumeOfRevolutionFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	vtkVolumeOfRevolutionFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkVolumeOfRevolutionFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkVolumeOfRevolutionFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkVolumeOfRevolutionFilterWrap *w = new VtkVolumeOfRevolutionFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkVolumeOfRevolutionFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkVolumeOfRevolutionFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkVolumeOfRevolutionFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkVolumeOfRevolutionFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkVolumeOfRevolutionFilterWrap *w = new VtkVolumeOfRevolutionFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeOfRevolutionFilterWrap::SetAxisDirection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAxisDirection(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAxisDirection(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetAxisDirection(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeOfRevolutionFilterWrap::SetAxisPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAxisPosition(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAxisPosition(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetAxisPosition(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeOfRevolutionFilterWrap::SetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputPointsPrecision(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeOfRevolutionFilterWrap::SetResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetResolution(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVolumeOfRevolutionFilterWrap::SetSweepAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVolumeOfRevolutionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkVolumeOfRevolutionFilterWrap>(info.Holder());
	vtkVolumeOfRevolutionFilter *native = (vtkVolumeOfRevolutionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSweepAngle(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

