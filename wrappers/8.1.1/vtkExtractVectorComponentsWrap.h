/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKEXTRACTVECTORCOMPONENTSWRAP_H
#define NATIVE_EXTENSION_VTK_VTKEXTRACTVECTORCOMPONENTSWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkExtractVectorComponents.h>

#include "vtkDataSetAlgorithmWrap.h"
#include "../../plus/plus.h"

class VtkExtractVectorComponentsWrap : public VtkDataSetAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkExtractVectorComponentsWrap(vtkSmartPointer<vtkExtractVectorComponents>);
		VtkExtractVectorComponentsWrap();
		~VtkExtractVectorComponentsWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void ExtractToFieldDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ExtractToFieldDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetExtractToFieldData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetVxComponent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetVyComponent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetVzComponent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetExtractToFieldData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetInputData(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKEXTRACTVECTORCOMPONENTSWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKEXTRACTVECTORCOMPONENTSWRAP_CLASSDEF
#endif
};

#endif
