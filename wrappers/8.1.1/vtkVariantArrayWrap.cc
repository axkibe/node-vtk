/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkAbstractArrayWrap.h"
#include "vtkVariantArrayWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkIdListWrap.h"
#include "vtkArrayIteratorWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkVariantArrayWrap::ptpl;

VtkVariantArrayWrap::VtkVariantArrayWrap()
{ }

VtkVariantArrayWrap::VtkVariantArrayWrap(vtkSmartPointer<vtkVariantArray> _native)
{ native = _native; }

VtkVariantArrayWrap::~VtkVariantArrayWrap()
{ }

void VtkVariantArrayWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkVariantArray").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("VariantArray").ToLocalChecked(), ConstructorGetter);
}

void VtkVariantArrayWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkVariantArrayWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkAbstractArrayWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkAbstractArrayWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkVariantArrayWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ClearLookup", ClearLookup);
	Nan::SetPrototypeMethod(tpl, "clearLookup", ClearLookup);

	Nan::SetPrototypeMethod(tpl, "DataChanged", DataChanged);
	Nan::SetPrototypeMethod(tpl, "dataChanged", DataChanged);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "GetActualMemorySize", GetActualMemorySize);
	Nan::SetPrototypeMethod(tpl, "getActualMemorySize", GetActualMemorySize);

	Nan::SetPrototypeMethod(tpl, "GetDataType", GetDataType);
	Nan::SetPrototypeMethod(tpl, "getDataType", GetDataType);

	Nan::SetPrototypeMethod(tpl, "GetDataTypeSize", GetDataTypeSize);
	Nan::SetPrototypeMethod(tpl, "getDataTypeSize", GetDataTypeSize);

	Nan::SetPrototypeMethod(tpl, "GetElementComponentSize", GetElementComponentSize);
	Nan::SetPrototypeMethod(tpl, "getElementComponentSize", GetElementComponentSize);

	Nan::SetPrototypeMethod(tpl, "Initialize", Initialize);
	Nan::SetPrototypeMethod(tpl, "initialize", Initialize);

	Nan::SetPrototypeMethod(tpl, "InsertTuples", InsertTuples);
	Nan::SetPrototypeMethod(tpl, "insertTuples", InsertTuples);

	Nan::SetPrototypeMethod(tpl, "IsNumeric", IsNumeric);
	Nan::SetPrototypeMethod(tpl, "isNumeric", IsNumeric);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "NewIterator", NewIterator);
	Nan::SetPrototypeMethod(tpl, "newIterator", NewIterator);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "Squeeze", Squeeze);
	Nan::SetPrototypeMethod(tpl, "squeeze", Squeeze);

#ifdef VTK_NODE_PLUS_VTKVARIANTARRAYWRAP_INITPTPL
	VTK_NODE_PLUS_VTKVARIANTARRAYWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkVariantArrayWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkVariantArray> native = vtkSmartPointer<vtkVariantArray>::New();
		VtkVariantArrayWrap* obj = new VtkVariantArrayWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkVariantArrayWrap::ClearLookup(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ClearLookup();
}

void VtkVariantArrayWrap::DataChanged(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DataChanged();
}

void VtkVariantArrayWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractArrayWrap *a0 = ObjectWrap::Unwrap<VtkAbstractArrayWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DeepCopy(
			(vtkAbstractArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVariantArrayWrap::GetActualMemorySize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
	unsigned int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetActualMemorySize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVariantArrayWrap::GetDataType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVariantArrayWrap::GetDataTypeSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataTypeSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVariantArrayWrap::GetElementComponentSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetElementComponentSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVariantArrayWrap::Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Initialize();
}

void VtkVariantArrayWrap::InsertTuples(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkIdListWrap::ptpl))->HasInstance(info[0]))
	{
		VtkIdListWrap *a0 = ObjectWrap::Unwrap<VtkIdListWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkIdListWrap::ptpl))->HasInstance(info[1]))
		{
			VtkIdListWrap *a1 = ObjectWrap::Unwrap<VtkIdListWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject() && (Nan::New(VtkAbstractArrayWrap::ptpl))->HasInstance(info[2]))
			{
				VtkAbstractArrayWrap *a2 = ObjectWrap::Unwrap<VtkAbstractArrayWrap>(info[2]->ToObject());
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->InsertTuples(
					(vtkIdList *) a0->native.GetPointer(),
					(vtkIdList *) a1->native.GetPointer(),
					(vtkAbstractArray *) a2->native.GetPointer()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVariantArrayWrap::IsNumeric(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->IsNumeric();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkVariantArrayWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
	vtkVariantArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkVariantArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkVariantArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkVariantArrayWrap *w = new VtkVariantArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkVariantArrayWrap::NewIterator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
	vtkArrayIterator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewIterator();
	VtkArrayIteratorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkArrayIteratorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkArrayIteratorWrap *w = new VtkArrayIteratorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkVariantArrayWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkVariantArray * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkVariantArrayWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkVariantArrayWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkVariantArrayWrap *w = new VtkVariantArrayWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkVariantArrayWrap::Squeeze(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkVariantArrayWrap *wrapper = ObjectWrap::Unwrap<VtkVariantArrayWrap>(info.Holder());
	vtkVariantArray *native = (vtkVariantArray *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Squeeze();
}

