/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkXMLPDataObjectReaderWrap.h"
#include "vtkXMLPTableReaderWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkTableWrap.h"
#include "vtkInformationWrap.h"
#include "vtkDataArraySelectionWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkXMLPTableReaderWrap::ptpl;

VtkXMLPTableReaderWrap::VtkXMLPTableReaderWrap()
{ }

VtkXMLPTableReaderWrap::VtkXMLPTableReaderWrap(vtkSmartPointer<vtkXMLPTableReader> _native)
{ native = _native; }

VtkXMLPTableReaderWrap::~VtkXMLPTableReaderWrap()
{ }

void VtkXMLPTableReaderWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkXMLPTableReader").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("XMLPTableReader").ToLocalChecked(), ConstructorGetter);
}

void VtkXMLPTableReaderWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkXMLPTableReaderWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkXMLPDataObjectReaderWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkXMLPDataObjectReaderWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkXMLPTableReaderWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CopyOutputInformation", CopyOutputInformation);
	Nan::SetPrototypeMethod(tpl, "copyOutputInformation", CopyOutputInformation);

	Nan::SetPrototypeMethod(tpl, "GetColumnArrayName", GetColumnArrayName);
	Nan::SetPrototypeMethod(tpl, "getColumnArrayName", GetColumnArrayName);

	Nan::SetPrototypeMethod(tpl, "GetColumnArrayStatus", GetColumnArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getColumnArrayStatus", GetColumnArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetColumnSelection", GetColumnSelection);
	Nan::SetPrototypeMethod(tpl, "getColumnSelection", GetColumnSelection);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfColumnArrays", GetNumberOfColumnArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfColumnArrays", GetNumberOfColumnArrays);

	Nan::SetPrototypeMethod(tpl, "GetOutput", GetOutput);
	Nan::SetPrototypeMethod(tpl, "getOutput", GetOutput);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetColumnArrayStatus", SetColumnArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setColumnArrayStatus", SetColumnArrayStatus);

#ifdef VTK_NODE_PLUS_VTKXMLPTABLEREADERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKXMLPTABLEREADERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkXMLPTableReaderWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkXMLPTableReader> native = vtkSmartPointer<vtkXMLPTableReader>::New();
		VtkXMLPTableReaderWrap* obj = new VtkXMLPTableReaderWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkXMLPTableReaderWrap::CopyOutputInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPTableReaderWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPTableReaderWrap>(info.Holder());
	vtkXMLPTableReader *native = (vtkXMLPTableReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->CopyOutputInformation(
				(vtkInformation *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLPTableReaderWrap::GetColumnArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPTableReaderWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPTableReaderWrap>(info.Holder());
	vtkXMLPTableReader *native = (vtkXMLPTableReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetColumnArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLPTableReaderWrap::GetColumnArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPTableReaderWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPTableReaderWrap>(info.Holder());
	vtkXMLPTableReader *native = (vtkXMLPTableReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetColumnArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLPTableReaderWrap::GetColumnSelection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPTableReaderWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPTableReaderWrap>(info.Holder());
	vtkXMLPTableReader *native = (vtkXMLPTableReader *)wrapper->native.GetPointer();
	vtkDataArraySelection * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetColumnSelection();
	VtkDataArraySelectionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataArraySelectionWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataArraySelectionWrap *w = new VtkDataArraySelectionWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLPTableReaderWrap::GetNumberOfColumnArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPTableReaderWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPTableReaderWrap>(info.Holder());
	vtkXMLPTableReader *native = (vtkXMLPTableReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfColumnArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLPTableReaderWrap::GetOutput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPTableReaderWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPTableReaderWrap>(info.Holder());
	vtkXMLPTableReader *native = (vtkXMLPTableReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkTable * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetOutput(
			info[0]->Int32Value()
		);
		VtkTableWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkTableWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkTableWrap *w = new VtkTableWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	vtkTable * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutput();
	VtkTableWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTableWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTableWrap *w = new VtkTableWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLPTableReaderWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPTableReaderWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPTableReaderWrap>(info.Holder());
	vtkXMLPTableReader *native = (vtkXMLPTableReader *)wrapper->native.GetPointer();
	vtkXMLPTableReader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkXMLPTableReaderWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkXMLPTableReaderWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkXMLPTableReaderWrap *w = new VtkXMLPTableReaderWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLPTableReaderWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPTableReaderWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPTableReaderWrap>(info.Holder());
	vtkXMLPTableReader *native = (vtkXMLPTableReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkXMLPTableReader * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkXMLPTableReaderWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkXMLPTableReaderWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkXMLPTableReaderWrap *w = new VtkXMLPTableReaderWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLPTableReaderWrap::SetColumnArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPTableReaderWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPTableReaderWrap>(info.Holder());
	vtkXMLPTableReader *native = (vtkXMLPTableReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetColumnArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

