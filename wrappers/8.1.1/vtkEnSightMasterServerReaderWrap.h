/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKENSIGHTMASTERSERVERREADERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKENSIGHTMASTERSERVERREADERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkEnSightMasterServerReader.h>

#include "vtkGenericEnSightReaderWrap.h"
#include "../../plus/plus.h"

class VtkEnSightMasterServerReaderWrap : public VtkGenericEnSightReaderWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkEnSightMasterServerReaderWrap(vtkSmartPointer<vtkEnSightMasterServerReader>);
		VtkEnSightMasterServerReaderWrap();
		~VtkEnSightMasterServerReaderWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void CanReadFile(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DetermineFileName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCurrentPiece(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPieceCaseFileName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCurrentPiece(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKENSIGHTMASTERSERVERREADERWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKENSIGHTMASTERSERVERREADERWRAP_CLASSDEF
#endif
};

#endif
