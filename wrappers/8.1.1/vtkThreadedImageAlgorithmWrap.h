/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKTHREADEDIMAGEALGORITHMWRAP_H
#define NATIVE_EXTENSION_VTK_VTKTHREADEDIMAGEALGORITHMWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkThreadedImageAlgorithm.h>

#include "vtkImageAlgorithmWrap.h"
#include "../../plus/plus.h"

class VtkThreadedImageAlgorithmWrap : public VtkImageAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkThreadedImageAlgorithmWrap(vtkSmartPointer<vtkThreadedImageAlgorithm>);
		VtkThreadedImageAlgorithmWrap();
		~VtkThreadedImageAlgorithmWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetEnableSMP(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGlobalDefaultEnableSMP(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMinimumPieceSize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfThreads(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfThreadsMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfThreadsMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSplitMode(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSplitModeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSplitModeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetEnableSMP(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGlobalDefaultEnableSMP(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMinimumPieceSize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetNumberOfThreads(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSplitMode(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSplitModeToBeam(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSplitModeToBlock(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSplitModeToSlab(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SplitExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ThreadedExecute(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKTHREADEDIMAGEALGORITHMWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKTHREADEDIMAGEALGORITHMWRAP_CLASSDEF
#endif
};

#endif
