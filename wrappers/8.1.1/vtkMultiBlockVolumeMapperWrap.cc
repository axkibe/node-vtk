/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkVolumeMapperWrap.h"
#include "vtkMultiBlockVolumeMapperWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkRendererWrap.h"
#include "vtkVolumeWrap.h"
#include "vtkWindowWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkMultiBlockVolumeMapperWrap::ptpl;

VtkMultiBlockVolumeMapperWrap::VtkMultiBlockVolumeMapperWrap()
{ }

VtkMultiBlockVolumeMapperWrap::VtkMultiBlockVolumeMapperWrap(vtkSmartPointer<vtkMultiBlockVolumeMapper> _native)
{ native = _native; }

VtkMultiBlockVolumeMapperWrap::~VtkMultiBlockVolumeMapperWrap()
{ }

void VtkMultiBlockVolumeMapperWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkMultiBlockVolumeMapper").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("MultiBlockVolumeMapper").ToLocalChecked(), ConstructorGetter);
}

void VtkMultiBlockVolumeMapperWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkMultiBlockVolumeMapperWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkVolumeMapperWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkVolumeMapperWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkMultiBlockVolumeMapperWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetVectorComponent", GetVectorComponent);
	Nan::SetPrototypeMethod(tpl, "getVectorComponent", GetVectorComponent);

	Nan::SetPrototypeMethod(tpl, "GetVectorMode", GetVectorMode);
	Nan::SetPrototypeMethod(tpl, "getVectorMode", GetVectorMode);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "Render", Render);
	Nan::SetPrototypeMethod(tpl, "render", Render);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SelectScalarArray", SelectScalarArray);
	Nan::SetPrototypeMethod(tpl, "selectScalarArray", SelectScalarArray);

	Nan::SetPrototypeMethod(tpl, "SetArrayAccessMode", SetArrayAccessMode);
	Nan::SetPrototypeMethod(tpl, "setArrayAccessMode", SetArrayAccessMode);

	Nan::SetPrototypeMethod(tpl, "SetBlendMode", SetBlendMode);
	Nan::SetPrototypeMethod(tpl, "setBlendMode", SetBlendMode);

	Nan::SetPrototypeMethod(tpl, "SetCropping", SetCropping);
	Nan::SetPrototypeMethod(tpl, "setCropping", SetCropping);

	Nan::SetPrototypeMethod(tpl, "SetCroppingRegionFlags", SetCroppingRegionFlags);
	Nan::SetPrototypeMethod(tpl, "setCroppingRegionFlags", SetCroppingRegionFlags);

	Nan::SetPrototypeMethod(tpl, "SetCroppingRegionPlanes", SetCroppingRegionPlanes);
	Nan::SetPrototypeMethod(tpl, "setCroppingRegionPlanes", SetCroppingRegionPlanes);

	Nan::SetPrototypeMethod(tpl, "SetJitteringResolution", SetJitteringResolution);
	Nan::SetPrototypeMethod(tpl, "setJitteringResolution", SetJitteringResolution);

	Nan::SetPrototypeMethod(tpl, "SetScalarMode", SetScalarMode);
	Nan::SetPrototypeMethod(tpl, "setScalarMode", SetScalarMode);

	Nan::SetPrototypeMethod(tpl, "SetVectorComponent", SetVectorComponent);
	Nan::SetPrototypeMethod(tpl, "setVectorComponent", SetVectorComponent);

	Nan::SetPrototypeMethod(tpl, "SetVectorMode", SetVectorMode);
	Nan::SetPrototypeMethod(tpl, "setVectorMode", SetVectorMode);

#ifdef VTK_NODE_PLUS_VTKMULTIBLOCKVOLUMEMAPPERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKMULTIBLOCKVOLUMEMAPPERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkMultiBlockVolumeMapperWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkMultiBlockVolumeMapper> native = vtkSmartPointer<vtkMultiBlockVolumeMapper>::New();
		VtkMultiBlockVolumeMapperWrap* obj = new VtkMultiBlockVolumeMapperWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkMultiBlockVolumeMapperWrap::GetVectorComponent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVectorComponent();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMultiBlockVolumeMapperWrap::GetVectorMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVectorMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMultiBlockVolumeMapperWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	vtkMultiBlockVolumeMapper * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkMultiBlockVolumeMapperWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkMultiBlockVolumeMapperWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMultiBlockVolumeMapperWrap *w = new VtkMultiBlockVolumeMapperWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMultiBlockVolumeMapperWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiBlockVolumeMapperWrap::Render(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkVolumeWrap::ptpl))->HasInstance(info[1]))
		{
			VtkVolumeWrap *a1 = ObjectWrap::Unwrap<VtkVolumeWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->Render(
				(vtkRenderer *) a0->native.GetPointer(),
				(vtkVolume *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiBlockVolumeMapperWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkMultiBlockVolumeMapper * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkMultiBlockVolumeMapperWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkMultiBlockVolumeMapperWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkMultiBlockVolumeMapperWrap *w = new VtkMultiBlockVolumeMapperWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiBlockVolumeMapperWrap::SelectScalarArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SelectScalarArray(
			*a0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SelectScalarArray(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiBlockVolumeMapperWrap::SetArrayAccessMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetArrayAccessMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiBlockVolumeMapperWrap::SetBlendMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBlendMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiBlockVolumeMapperWrap::SetCropping(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCropping(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiBlockVolumeMapperWrap::SetCroppingRegionFlags(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCroppingRegionFlags(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiBlockVolumeMapperWrap::SetCroppingRegionPlanes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() > 4 && info[4]->IsNumber())
					{
						if(info.Length() > 5 && info[5]->IsNumber())
						{
														if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->SetCroppingRegionPlanes(
								info[0]->NumberValue(),
								info[1]->NumberValue(),
								info[2]->NumberValue(),
								info[3]->NumberValue(),
								info[4]->NumberValue(),
								info[5]->NumberValue()
							);
							return;
						}
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiBlockVolumeMapperWrap::SetJitteringResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetJitteringResolution(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiBlockVolumeMapperWrap::SetScalarMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScalarMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiBlockVolumeMapperWrap::SetVectorComponent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVectorComponent(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMultiBlockVolumeMapperWrap::SetVectorMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMultiBlockVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkMultiBlockVolumeMapperWrap>(info.Holder());
	vtkMultiBlockVolumeMapper *native = (vtkMultiBlockVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVectorMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

