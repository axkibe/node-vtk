/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKPARAMETRICSPLINEWRAP_H
#define NATIVE_EXTENSION_VTK_VTKPARAMETRICSPLINEWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkParametricSpline.h>

#include "vtkParametricFunctionWrap.h"
#include "../../plus/plus.h"

class VtkParametricSplineWrap : public VtkParametricFunctionWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkParametricSplineWrap(vtkSmartPointer<vtkParametricSpline>);
		VtkParametricSplineWrap();
		~VtkParametricSplineWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void ClosedOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ClosedOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Evaluate(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EvaluateScalar(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClosed(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDimension(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLeftConstraint(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLeftConstraintMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLeftConstraintMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLeftValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetParameterizeByLength(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPoints(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRightConstraint(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRightConstraintMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRightConstraintMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRightValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetXSpline(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetYSpline(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetZSpline(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ParameterizeByLengthOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ParameterizeByLengthOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetClosed(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLeftConstraint(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLeftValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetParameterizeByLength(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetPoints(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRightConstraint(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRightValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetXSpline(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetYSpline(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetZSpline(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKPARAMETRICSPLINEWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKPARAMETRICSPLINEWRAP_CLASSDEF
#endif
};

#endif
