/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkOpenGLRenderPassWrap.h"
#include "vtkValuePassWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkFloatArrayWrap.h"
#include "vtkRendererWrap.h"
#include "vtkWindowWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkValuePassWrap::ptpl;

VtkValuePassWrap::VtkValuePassWrap()
{ }

VtkValuePassWrap::VtkValuePassWrap(vtkSmartPointer<vtkValuePass> _native)
{ native = _native; }

VtkValuePassWrap::~VtkValuePassWrap()
{ }

void VtkValuePassWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkValuePass").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ValuePass").ToLocalChecked(), ConstructorGetter);
}

void VtkValuePassWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkValuePassWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkOpenGLRenderPassWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkOpenGLRenderPassWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkValuePassWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetFloatImageDataArray", GetFloatImageDataArray);
	Nan::SetPrototypeMethod(tpl, "getFloatImageDataArray", GetFloatImageDataArray);

	Nan::SetPrototypeMethod(tpl, "GetRenderingMode", GetRenderingMode);
	Nan::SetPrototypeMethod(tpl, "getRenderingMode", GetRenderingMode);

	Nan::SetPrototypeMethod(tpl, "IsFloatingPointModeSupported", IsFloatingPointModeSupported);
	Nan::SetPrototypeMethod(tpl, "isFloatingPointModeSupported", IsFloatingPointModeSupported);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetInputArrayToProcess", SetInputArrayToProcess);
	Nan::SetPrototypeMethod(tpl, "setInputArrayToProcess", SetInputArrayToProcess);

	Nan::SetPrototypeMethod(tpl, "SetInputComponentToProcess", SetInputComponentToProcess);
	Nan::SetPrototypeMethod(tpl, "setInputComponentToProcess", SetInputComponentToProcess);

	Nan::SetPrototypeMethod(tpl, "SetRenderingMode", SetRenderingMode);
	Nan::SetPrototypeMethod(tpl, "setRenderingMode", SetRenderingMode);

	Nan::SetPrototypeMethod(tpl, "SetScalarRange", SetScalarRange);
	Nan::SetPrototypeMethod(tpl, "setScalarRange", SetScalarRange);

#ifdef VTK_NODE_PLUS_VTKVALUEPASSWRAP_INITPTPL
	VTK_NODE_PLUS_VTKVALUEPASSWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkValuePassWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkValuePass> native = vtkSmartPointer<vtkValuePass>::New();
		VtkValuePassWrap* obj = new VtkValuePassWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkValuePassWrap::GetFloatImageDataArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkValuePassWrap *wrapper = ObjectWrap::Unwrap<VtkValuePassWrap>(info.Holder());
	vtkValuePass *native = (vtkValuePass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		vtkFloatArray * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetFloatImageDataArray(
			(vtkRenderer *) a0->native.GetPointer()
		);
		VtkFloatArrayWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkFloatArrayWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkFloatArrayWrap *w = new VtkFloatArrayWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkValuePassWrap::GetRenderingMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkValuePassWrap *wrapper = ObjectWrap::Unwrap<VtkValuePassWrap>(info.Holder());
	vtkValuePass *native = (vtkValuePass *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRenderingMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkValuePassWrap::IsFloatingPointModeSupported(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkValuePassWrap *wrapper = ObjectWrap::Unwrap<VtkValuePassWrap>(info.Holder());
	vtkValuePass *native = (vtkValuePass *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->IsFloatingPointModeSupported();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkValuePassWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkValuePassWrap *wrapper = ObjectWrap::Unwrap<VtkValuePassWrap>(info.Holder());
	vtkValuePass *native = (vtkValuePass *)wrapper->native.GetPointer();
	vtkValuePass * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkValuePassWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkValuePassWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkValuePassWrap *w = new VtkValuePassWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkValuePassWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkValuePassWrap *wrapper = ObjectWrap::Unwrap<VtkValuePassWrap>(info.Holder());
	vtkValuePass *native = (vtkValuePass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkValuePassWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkValuePassWrap *wrapper = ObjectWrap::Unwrap<VtkValuePassWrap>(info.Holder());
	vtkValuePass *native = (vtkValuePass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkValuePass * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkValuePassWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkValuePassWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkValuePassWrap *w = new VtkValuePassWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkValuePassWrap::SetInputArrayToProcess(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkValuePassWrap *wrapper = ObjectWrap::Unwrap<VtkValuePassWrap>(info.Holder());
	vtkValuePass *native = (vtkValuePass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetInputArrayToProcess(
				info[0]->Int32Value(),
				*a1
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetInputArrayToProcess(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkValuePassWrap::SetInputComponentToProcess(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkValuePassWrap *wrapper = ObjectWrap::Unwrap<VtkValuePassWrap>(info.Holder());
	vtkValuePass *native = (vtkValuePass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputComponentToProcess(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkValuePassWrap::SetRenderingMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkValuePassWrap *wrapper = ObjectWrap::Unwrap<VtkValuePassWrap>(info.Holder());
	vtkValuePass *native = (vtkValuePass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRenderingMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkValuePassWrap::SetScalarRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkValuePassWrap *wrapper = ObjectWrap::Unwrap<VtkValuePassWrap>(info.Holder());
	vtkValuePass *native = (vtkValuePass *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetScalarRange(
				info[0]->NumberValue(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

