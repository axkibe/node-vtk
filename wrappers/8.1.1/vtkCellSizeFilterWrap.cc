/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPassInputTypeAlgorithmWrap.h"
#include "vtkCellSizeFilterWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkCellSizeFilterWrap::ptpl;

VtkCellSizeFilterWrap::VtkCellSizeFilterWrap()
{ }

VtkCellSizeFilterWrap::VtkCellSizeFilterWrap(vtkSmartPointer<vtkCellSizeFilter> _native)
{ native = _native; }

VtkCellSizeFilterWrap::~VtkCellSizeFilterWrap()
{ }

void VtkCellSizeFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkCellSizeFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("CellSizeFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkCellSizeFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkCellSizeFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPassInputTypeAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPassInputTypeAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkCellSizeFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ComputeAreaOff", ComputeAreaOff);
	Nan::SetPrototypeMethod(tpl, "computeAreaOff", ComputeAreaOff);

	Nan::SetPrototypeMethod(tpl, "ComputeAreaOn", ComputeAreaOn);
	Nan::SetPrototypeMethod(tpl, "computeAreaOn", ComputeAreaOn);

	Nan::SetPrototypeMethod(tpl, "ComputeLengthOff", ComputeLengthOff);
	Nan::SetPrototypeMethod(tpl, "computeLengthOff", ComputeLengthOff);

	Nan::SetPrototypeMethod(tpl, "ComputeLengthOn", ComputeLengthOn);
	Nan::SetPrototypeMethod(tpl, "computeLengthOn", ComputeLengthOn);

	Nan::SetPrototypeMethod(tpl, "ComputeSumOff", ComputeSumOff);
	Nan::SetPrototypeMethod(tpl, "computeSumOff", ComputeSumOff);

	Nan::SetPrototypeMethod(tpl, "ComputeSumOn", ComputeSumOn);
	Nan::SetPrototypeMethod(tpl, "computeSumOn", ComputeSumOn);

	Nan::SetPrototypeMethod(tpl, "ComputeVertexCountOff", ComputeVertexCountOff);
	Nan::SetPrototypeMethod(tpl, "computeVertexCountOff", ComputeVertexCountOff);

	Nan::SetPrototypeMethod(tpl, "ComputeVertexCountOn", ComputeVertexCountOn);
	Nan::SetPrototypeMethod(tpl, "computeVertexCountOn", ComputeVertexCountOn);

	Nan::SetPrototypeMethod(tpl, "ComputeVolumeOff", ComputeVolumeOff);
	Nan::SetPrototypeMethod(tpl, "computeVolumeOff", ComputeVolumeOff);

	Nan::SetPrototypeMethod(tpl, "ComputeVolumeOn", ComputeVolumeOn);
	Nan::SetPrototypeMethod(tpl, "computeVolumeOn", ComputeVolumeOn);

	Nan::SetPrototypeMethod(tpl, "GetAreaArrayName", GetAreaArrayName);
	Nan::SetPrototypeMethod(tpl, "getAreaArrayName", GetAreaArrayName);

	Nan::SetPrototypeMethod(tpl, "GetComputeArea", GetComputeArea);
	Nan::SetPrototypeMethod(tpl, "getComputeArea", GetComputeArea);

	Nan::SetPrototypeMethod(tpl, "GetComputeLength", GetComputeLength);
	Nan::SetPrototypeMethod(tpl, "getComputeLength", GetComputeLength);

	Nan::SetPrototypeMethod(tpl, "GetComputeSum", GetComputeSum);
	Nan::SetPrototypeMethod(tpl, "getComputeSum", GetComputeSum);

	Nan::SetPrototypeMethod(tpl, "GetComputeVertexCount", GetComputeVertexCount);
	Nan::SetPrototypeMethod(tpl, "getComputeVertexCount", GetComputeVertexCount);

	Nan::SetPrototypeMethod(tpl, "GetComputeVolume", GetComputeVolume);
	Nan::SetPrototypeMethod(tpl, "getComputeVolume", GetComputeVolume);

	Nan::SetPrototypeMethod(tpl, "GetLengthArrayName", GetLengthArrayName);
	Nan::SetPrototypeMethod(tpl, "getLengthArrayName", GetLengthArrayName);

	Nan::SetPrototypeMethod(tpl, "GetVertexCountArrayName", GetVertexCountArrayName);
	Nan::SetPrototypeMethod(tpl, "getVertexCountArrayName", GetVertexCountArrayName);

	Nan::SetPrototypeMethod(tpl, "GetVolumeArrayName", GetVolumeArrayName);
	Nan::SetPrototypeMethod(tpl, "getVolumeArrayName", GetVolumeArrayName);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAreaArrayName", SetAreaArrayName);
	Nan::SetPrototypeMethod(tpl, "setAreaArrayName", SetAreaArrayName);

	Nan::SetPrototypeMethod(tpl, "SetComputeArea", SetComputeArea);
	Nan::SetPrototypeMethod(tpl, "setComputeArea", SetComputeArea);

	Nan::SetPrototypeMethod(tpl, "SetComputeLength", SetComputeLength);
	Nan::SetPrototypeMethod(tpl, "setComputeLength", SetComputeLength);

	Nan::SetPrototypeMethod(tpl, "SetComputeSum", SetComputeSum);
	Nan::SetPrototypeMethod(tpl, "setComputeSum", SetComputeSum);

	Nan::SetPrototypeMethod(tpl, "SetComputeVertexCount", SetComputeVertexCount);
	Nan::SetPrototypeMethod(tpl, "setComputeVertexCount", SetComputeVertexCount);

	Nan::SetPrototypeMethod(tpl, "SetComputeVolume", SetComputeVolume);
	Nan::SetPrototypeMethod(tpl, "setComputeVolume", SetComputeVolume);

	Nan::SetPrototypeMethod(tpl, "SetLengthArrayName", SetLengthArrayName);
	Nan::SetPrototypeMethod(tpl, "setLengthArrayName", SetLengthArrayName);

	Nan::SetPrototypeMethod(tpl, "SetVertexCountArrayName", SetVertexCountArrayName);
	Nan::SetPrototypeMethod(tpl, "setVertexCountArrayName", SetVertexCountArrayName);

	Nan::SetPrototypeMethod(tpl, "SetVolumeArrayName", SetVolumeArrayName);
	Nan::SetPrototypeMethod(tpl, "setVolumeArrayName", SetVolumeArrayName);

#ifdef VTK_NODE_PLUS_VTKCELLSIZEFILTERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKCELLSIZEFILTERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkCellSizeFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkCellSizeFilter> native = vtkSmartPointer<vtkCellSizeFilter>::New();
		VtkCellSizeFilterWrap* obj = new VtkCellSizeFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkCellSizeFilterWrap::ComputeAreaOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeAreaOff();
}

void VtkCellSizeFilterWrap::ComputeAreaOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeAreaOn();
}

void VtkCellSizeFilterWrap::ComputeLengthOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeLengthOff();
}

void VtkCellSizeFilterWrap::ComputeLengthOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeLengthOn();
}

void VtkCellSizeFilterWrap::ComputeSumOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeSumOff();
}

void VtkCellSizeFilterWrap::ComputeSumOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeSumOn();
}

void VtkCellSizeFilterWrap::ComputeVertexCountOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeVertexCountOff();
}

void VtkCellSizeFilterWrap::ComputeVertexCountOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeVertexCountOn();
}

void VtkCellSizeFilterWrap::ComputeVolumeOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeVolumeOff();
}

void VtkCellSizeFilterWrap::ComputeVolumeOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeVolumeOn();
}

void VtkCellSizeFilterWrap::GetAreaArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAreaArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCellSizeFilterWrap::GetComputeArea(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeArea();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCellSizeFilterWrap::GetComputeLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeLength();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCellSizeFilterWrap::GetComputeSum(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeSum();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCellSizeFilterWrap::GetComputeVertexCount(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeVertexCount();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCellSizeFilterWrap::GetComputeVolume(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeVolume();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCellSizeFilterWrap::GetLengthArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLengthArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCellSizeFilterWrap::GetVertexCountArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVertexCountArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCellSizeFilterWrap::GetVolumeArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVolumeArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCellSizeFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	vtkCellSizeFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkCellSizeFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCellSizeFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCellSizeFilterWrap *w = new VtkCellSizeFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCellSizeFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkCellSizeFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkCellSizeFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkCellSizeFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkCellSizeFilterWrap *w = new VtkCellSizeFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCellSizeFilterWrap::SetAreaArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAreaArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCellSizeFilterWrap::SetComputeArea(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeArea(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCellSizeFilterWrap::SetComputeLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeLength(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCellSizeFilterWrap::SetComputeSum(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeSum(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCellSizeFilterWrap::SetComputeVertexCount(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeVertexCount(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCellSizeFilterWrap::SetComputeVolume(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeVolume(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCellSizeFilterWrap::SetLengthArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLengthArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCellSizeFilterWrap::SetVertexCountArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVertexCountArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCellSizeFilterWrap::SetVolumeArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCellSizeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkCellSizeFilterWrap>(info.Holder());
	vtkCellSizeFilter *native = (vtkCellSizeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVolumeArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

