/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkEdgeSubdivisionCriterionWrap.h"
#include "vtkDataSetEdgeSubdivisionCriterionWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkCellWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkDataSetEdgeSubdivisionCriterionWrap::ptpl;

VtkDataSetEdgeSubdivisionCriterionWrap::VtkDataSetEdgeSubdivisionCriterionWrap()
{ }

VtkDataSetEdgeSubdivisionCriterionWrap::VtkDataSetEdgeSubdivisionCriterionWrap(vtkSmartPointer<vtkDataSetEdgeSubdivisionCriterion> _native)
{ native = _native; }

VtkDataSetEdgeSubdivisionCriterionWrap::~VtkDataSetEdgeSubdivisionCriterionWrap()
{ }

void VtkDataSetEdgeSubdivisionCriterionWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkDataSetEdgeSubdivisionCriterion").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("DataSetEdgeSubdivisionCriterion").ToLocalChecked(), ConstructorGetter);
}

void VtkDataSetEdgeSubdivisionCriterionWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkDataSetEdgeSubdivisionCriterionWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkEdgeSubdivisionCriterionWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkEdgeSubdivisionCriterionWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkDataSetEdgeSubdivisionCriterionWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetActiveFieldCriteria", GetActiveFieldCriteria);
	Nan::SetPrototypeMethod(tpl, "getActiveFieldCriteria", GetActiveFieldCriteria);

	Nan::SetPrototypeMethod(tpl, "GetCell", GetCell);
	Nan::SetPrototypeMethod(tpl, "getCell", GetCell);

	Nan::SetPrototypeMethod(tpl, "GetChordError2", GetChordError2);
	Nan::SetPrototypeMethod(tpl, "getChordError2", GetChordError2);

	Nan::SetPrototypeMethod(tpl, "GetFieldError2", GetFieldError2);
	Nan::SetPrototypeMethod(tpl, "getFieldError2", GetFieldError2);

	Nan::SetPrototypeMethod(tpl, "GetMesh", GetMesh);
	Nan::SetPrototypeMethod(tpl, "getMesh", GetMesh);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ResetFieldError2", ResetFieldError2);
	Nan::SetPrototypeMethod(tpl, "resetFieldError2", ResetFieldError2);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetChordError2", SetChordError2);
	Nan::SetPrototypeMethod(tpl, "setChordError2", SetChordError2);

	Nan::SetPrototypeMethod(tpl, "SetFieldError2", SetFieldError2);
	Nan::SetPrototypeMethod(tpl, "setFieldError2", SetFieldError2);

	Nan::SetPrototypeMethod(tpl, "SetMesh", SetMesh);
	Nan::SetPrototypeMethod(tpl, "setMesh", SetMesh);

#ifdef VTK_NODE_PLUS_VTKDATASETEDGESUBDIVISIONCRITERIONWRAP_INITPTPL
	VTK_NODE_PLUS_VTKDATASETEDGESUBDIVISIONCRITERIONWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkDataSetEdgeSubdivisionCriterionWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkDataSetEdgeSubdivisionCriterion> native = vtkSmartPointer<vtkDataSetEdgeSubdivisionCriterion>::New();
		VtkDataSetEdgeSubdivisionCriterionWrap* obj = new VtkDataSetEdgeSubdivisionCriterionWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkDataSetEdgeSubdivisionCriterionWrap::GetActiveFieldCriteria(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetActiveFieldCriteria();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataSetEdgeSubdivisionCriterionWrap::GetCell(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	vtkCell * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCell();
	VtkCellWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCellWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCellWrap *w = new VtkCellWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataSetEdgeSubdivisionCriterionWrap::GetChordError2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetChordError2();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataSetEdgeSubdivisionCriterionWrap::GetFieldError2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		double r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetFieldError2(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetEdgeSubdivisionCriterionWrap::GetMesh(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMesh();
	VtkDataSetWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataSetWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataSetEdgeSubdivisionCriterionWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	vtkDataSetEdgeSubdivisionCriterion * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkDataSetEdgeSubdivisionCriterionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataSetEdgeSubdivisionCriterionWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetEdgeSubdivisionCriterionWrap *w = new VtkDataSetEdgeSubdivisionCriterionWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataSetEdgeSubdivisionCriterionWrap::ResetFieldError2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ResetFieldError2();
}

void VtkDataSetEdgeSubdivisionCriterionWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkDataSetEdgeSubdivisionCriterion * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkDataSetEdgeSubdivisionCriterionWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkDataSetEdgeSubdivisionCriterionWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDataSetEdgeSubdivisionCriterionWrap *w = new VtkDataSetEdgeSubdivisionCriterionWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetEdgeSubdivisionCriterionWrap::SetChordError2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetChordError2(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetEdgeSubdivisionCriterionWrap::SetFieldError2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetFieldError2(
				info[0]->Int32Value(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetEdgeSubdivisionCriterionWrap::SetMesh(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMesh(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

