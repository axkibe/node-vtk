/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkCirclePackToPolyDataWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkInformationWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkCirclePackToPolyDataWrap::ptpl;

VtkCirclePackToPolyDataWrap::VtkCirclePackToPolyDataWrap()
{ }

VtkCirclePackToPolyDataWrap::VtkCirclePackToPolyDataWrap(vtkSmartPointer<vtkCirclePackToPolyData> _native)
{ native = _native; }

VtkCirclePackToPolyDataWrap::~VtkCirclePackToPolyDataWrap()
{ }

void VtkCirclePackToPolyDataWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkCirclePackToPolyData").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("CirclePackToPolyData").ToLocalChecked(), ConstructorGetter);
}

void VtkCirclePackToPolyDataWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkCirclePackToPolyDataWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkCirclePackToPolyDataWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "FillInputPortInformation", FillInputPortInformation);
	Nan::SetPrototypeMethod(tpl, "fillInputPortInformation", FillInputPortInformation);

	Nan::SetPrototypeMethod(tpl, "GetResolution", GetResolution);
	Nan::SetPrototypeMethod(tpl, "getResolution", GetResolution);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCirclesArrayName", SetCirclesArrayName);
	Nan::SetPrototypeMethod(tpl, "setCirclesArrayName", SetCirclesArrayName);

	Nan::SetPrototypeMethod(tpl, "SetResolution", SetResolution);
	Nan::SetPrototypeMethod(tpl, "setResolution", SetResolution);

#ifdef VTK_NODE_PLUS_VTKCIRCLEPACKTOPOLYDATAWRAP_INITPTPL
	VTK_NODE_PLUS_VTKCIRCLEPACKTOPOLYDATAWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkCirclePackToPolyDataWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkCirclePackToPolyData> native = vtkSmartPointer<vtkCirclePackToPolyData>::New();
		VtkCirclePackToPolyDataWrap* obj = new VtkCirclePackToPolyDataWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkCirclePackToPolyDataWrap::FillInputPortInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCirclePackToPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkCirclePackToPolyDataWrap>(info.Holder());
	vtkCirclePackToPolyData *native = (vtkCirclePackToPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[1]))
		{
			VtkInformationWrap *a1 = ObjectWrap::Unwrap<VtkInformationWrap>(info[1]->ToObject());
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->FillInputPortInformation(
				info[0]->Int32Value(),
				(vtkInformation *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCirclePackToPolyDataWrap::GetResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCirclePackToPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkCirclePackToPolyDataWrap>(info.Holder());
	vtkCirclePackToPolyData *native = (vtkCirclePackToPolyData *)wrapper->native.GetPointer();
	unsigned int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCirclePackToPolyDataWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCirclePackToPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkCirclePackToPolyDataWrap>(info.Holder());
	vtkCirclePackToPolyData *native = (vtkCirclePackToPolyData *)wrapper->native.GetPointer();
	vtkCirclePackToPolyData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkCirclePackToPolyDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCirclePackToPolyDataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCirclePackToPolyDataWrap *w = new VtkCirclePackToPolyDataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCirclePackToPolyDataWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCirclePackToPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkCirclePackToPolyDataWrap>(info.Holder());
	vtkCirclePackToPolyData *native = (vtkCirclePackToPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkCirclePackToPolyData * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkCirclePackToPolyDataWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkCirclePackToPolyDataWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkCirclePackToPolyDataWrap *w = new VtkCirclePackToPolyDataWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCirclePackToPolyDataWrap::SetCirclesArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCirclePackToPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkCirclePackToPolyDataWrap>(info.Holder());
	vtkCirclePackToPolyData *native = (vtkCirclePackToPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCirclesArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCirclePackToPolyDataWrap::SetResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCirclePackToPolyDataWrap *wrapper = ObjectWrap::Unwrap<VtkCirclePackToPolyDataWrap>(info.Holder());
	vtkCirclePackToPolyData *native = (vtkCirclePackToPolyData *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsUint32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetResolution(
			info[0]->Uint32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

