/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkChartWrap.h"
#include "vtkChartParallelCoordinatesWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkContext2DWrap.h"
#include "vtkStringArrayWrap.h"
#include "vtkAxisWrap.h"
#include "vtkPlotParallelCoordinatesWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkChartParallelCoordinatesWrap::ptpl;

VtkChartParallelCoordinatesWrap::VtkChartParallelCoordinatesWrap()
{ }

VtkChartParallelCoordinatesWrap::VtkChartParallelCoordinatesWrap(vtkSmartPointer<vtkChartParallelCoordinates> _native)
{ native = _native; }

VtkChartParallelCoordinatesWrap::~VtkChartParallelCoordinatesWrap()
{ }

void VtkChartParallelCoordinatesWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkChartParallelCoordinates").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ChartParallelCoordinates").ToLocalChecked(), ConstructorGetter);
}

void VtkChartParallelCoordinatesWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkChartParallelCoordinatesWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkChartWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkChartWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkChartParallelCoordinatesWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetAxis", GetAxis);
	Nan::SetPrototypeMethod(tpl, "getAxis", GetAxis);

	Nan::SetPrototypeMethod(tpl, "GetVisibleColumns", GetVisibleColumns);
	Nan::SetPrototypeMethod(tpl, "getVisibleColumns", GetVisibleColumns);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "Paint", Paint);
	Nan::SetPrototypeMethod(tpl, "paint", Paint);

	Nan::SetPrototypeMethod(tpl, "RecalculateBounds", RecalculateBounds);
	Nan::SetPrototypeMethod(tpl, "recalculateBounds", RecalculateBounds);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetColumnVisibilityAll", SetColumnVisibilityAll);
	Nan::SetPrototypeMethod(tpl, "setColumnVisibilityAll", SetColumnVisibilityAll);

	Nan::SetPrototypeMethod(tpl, "SetPlot", SetPlot);
	Nan::SetPrototypeMethod(tpl, "setPlot", SetPlot);

	Nan::SetPrototypeMethod(tpl, "SetVisibleColumns", SetVisibleColumns);
	Nan::SetPrototypeMethod(tpl, "setVisibleColumns", SetVisibleColumns);

	Nan::SetPrototypeMethod(tpl, "Update", Update);
	Nan::SetPrototypeMethod(tpl, "update", Update);

#ifdef VTK_NODE_PLUS_VTKCHARTPARALLELCOORDINATESWRAP_INITPTPL
	VTK_NODE_PLUS_VTKCHARTPARALLELCOORDINATESWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkChartParallelCoordinatesWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkChartParallelCoordinates> native = vtkSmartPointer<vtkChartParallelCoordinates>::New();
		VtkChartParallelCoordinatesWrap* obj = new VtkChartParallelCoordinatesWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkChartParallelCoordinatesWrap::GetAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkChartParallelCoordinatesWrap *wrapper = ObjectWrap::Unwrap<VtkChartParallelCoordinatesWrap>(info.Holder());
	vtkChartParallelCoordinates *native = (vtkChartParallelCoordinates *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkAxis * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetAxis(
			info[0]->Int32Value()
		);
		VtkAxisWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkAxisWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAxisWrap *w = new VtkAxisWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkChartParallelCoordinatesWrap::GetVisibleColumns(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkChartParallelCoordinatesWrap *wrapper = ObjectWrap::Unwrap<VtkChartParallelCoordinatesWrap>(info.Holder());
	vtkChartParallelCoordinates *native = (vtkChartParallelCoordinates *)wrapper->native.GetPointer();
	vtkStringArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVisibleColumns();
	VtkStringArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkStringArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStringArrayWrap *w = new VtkStringArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkChartParallelCoordinatesWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkChartParallelCoordinatesWrap *wrapper = ObjectWrap::Unwrap<VtkChartParallelCoordinatesWrap>(info.Holder());
	vtkChartParallelCoordinates *native = (vtkChartParallelCoordinates *)wrapper->native.GetPointer();
	vtkChartParallelCoordinates * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkChartParallelCoordinatesWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkChartParallelCoordinatesWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkChartParallelCoordinatesWrap *w = new VtkChartParallelCoordinatesWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkChartParallelCoordinatesWrap::Paint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkChartParallelCoordinatesWrap *wrapper = ObjectWrap::Unwrap<VtkChartParallelCoordinatesWrap>(info.Holder());
	vtkChartParallelCoordinates *native = (vtkChartParallelCoordinates *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkContext2DWrap::ptpl))->HasInstance(info[0]))
	{
		VtkContext2DWrap *a0 = ObjectWrap::Unwrap<VtkContext2DWrap>(info[0]->ToObject());
		bool r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->Paint(
			(vtkContext2D *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkChartParallelCoordinatesWrap::RecalculateBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkChartParallelCoordinatesWrap *wrapper = ObjectWrap::Unwrap<VtkChartParallelCoordinatesWrap>(info.Holder());
	vtkChartParallelCoordinates *native = (vtkChartParallelCoordinates *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RecalculateBounds();
}

void VtkChartParallelCoordinatesWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkChartParallelCoordinatesWrap *wrapper = ObjectWrap::Unwrap<VtkChartParallelCoordinatesWrap>(info.Holder());
	vtkChartParallelCoordinates *native = (vtkChartParallelCoordinates *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkChartParallelCoordinates * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkChartParallelCoordinatesWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkChartParallelCoordinatesWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkChartParallelCoordinatesWrap *w = new VtkChartParallelCoordinatesWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkChartParallelCoordinatesWrap::SetColumnVisibilityAll(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkChartParallelCoordinatesWrap *wrapper = ObjectWrap::Unwrap<VtkChartParallelCoordinatesWrap>(info.Holder());
	vtkChartParallelCoordinates *native = (vtkChartParallelCoordinates *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColumnVisibilityAll(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkChartParallelCoordinatesWrap::SetPlot(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkChartParallelCoordinatesWrap *wrapper = ObjectWrap::Unwrap<VtkChartParallelCoordinatesWrap>(info.Holder());
	vtkChartParallelCoordinates *native = (vtkChartParallelCoordinates *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPlotParallelCoordinatesWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPlotParallelCoordinatesWrap *a0 = ObjectWrap::Unwrap<VtkPlotParallelCoordinatesWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPlot(
			(vtkPlotParallelCoordinates *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkChartParallelCoordinatesWrap::SetVisibleColumns(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkChartParallelCoordinatesWrap *wrapper = ObjectWrap::Unwrap<VtkChartParallelCoordinatesWrap>(info.Holder());
	vtkChartParallelCoordinates *native = (vtkChartParallelCoordinates *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkStringArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkStringArrayWrap *a0 = ObjectWrap::Unwrap<VtkStringArrayWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVisibleColumns(
			(vtkStringArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkChartParallelCoordinatesWrap::Update(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkChartParallelCoordinatesWrap *wrapper = ObjectWrap::Unwrap<VtkChartParallelCoordinatesWrap>(info.Holder());
	vtkChartParallelCoordinates *native = (vtkChartParallelCoordinates *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Update();
}

