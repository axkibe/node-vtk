/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkImageAlgorithmWrap.h"
#include "vtkTextureWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkRendererWrap.h"
#include "vtkWindowWrap.h"
#include "vtkImageDataWrap.h"
#include "vtkScalarsToColorsWrap.h"
#include "vtkUnsignedCharArrayWrap.h"
#include "vtkTransformWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkTextureWrap::ptpl;

VtkTextureWrap::VtkTextureWrap()
{ }

VtkTextureWrap::VtkTextureWrap(vtkSmartPointer<vtkTexture> _native)
{ native = _native; }

VtkTextureWrap::~VtkTextureWrap()
{ }

void VtkTextureWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkTexture").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("Texture").ToLocalChecked(), ConstructorGetter);
}

void VtkTextureWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkTextureWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkImageAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkImageAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkTextureWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CubeMapOff", CubeMapOff);
	Nan::SetPrototypeMethod(tpl, "cubeMapOff", CubeMapOff);

	Nan::SetPrototypeMethod(tpl, "CubeMapOn", CubeMapOn);
	Nan::SetPrototypeMethod(tpl, "cubeMapOn", CubeMapOn);

	Nan::SetPrototypeMethod(tpl, "EdgeClampOff", EdgeClampOff);
	Nan::SetPrototypeMethod(tpl, "edgeClampOff", EdgeClampOff);

	Nan::SetPrototypeMethod(tpl, "EdgeClampOn", EdgeClampOn);
	Nan::SetPrototypeMethod(tpl, "edgeClampOn", EdgeClampOn);

	Nan::SetPrototypeMethod(tpl, "GetBlendingMode", GetBlendingMode);
	Nan::SetPrototypeMethod(tpl, "getBlendingMode", GetBlendingMode);

	Nan::SetPrototypeMethod(tpl, "GetColorMode", GetColorMode);
	Nan::SetPrototypeMethod(tpl, "getColorMode", GetColorMode);

	Nan::SetPrototypeMethod(tpl, "GetCubeMap", GetCubeMap);
	Nan::SetPrototypeMethod(tpl, "getCubeMap", GetCubeMap);

	Nan::SetPrototypeMethod(tpl, "GetEdgeClamp", GetEdgeClamp);
	Nan::SetPrototypeMethod(tpl, "getEdgeClamp", GetEdgeClamp);

	Nan::SetPrototypeMethod(tpl, "GetInput", GetInput);
	Nan::SetPrototypeMethod(tpl, "getInput", GetInput);

	Nan::SetPrototypeMethod(tpl, "GetInterpolate", GetInterpolate);
	Nan::SetPrototypeMethod(tpl, "getInterpolate", GetInterpolate);

	Nan::SetPrototypeMethod(tpl, "GetLookupTable", GetLookupTable);
	Nan::SetPrototypeMethod(tpl, "getLookupTable", GetLookupTable);

	Nan::SetPrototypeMethod(tpl, "GetMapColorScalarsThroughLookupTable", GetMapColorScalarsThroughLookupTable);
	Nan::SetPrototypeMethod(tpl, "getMapColorScalarsThroughLookupTable", GetMapColorScalarsThroughLookupTable);

	Nan::SetPrototypeMethod(tpl, "GetMappedScalars", GetMappedScalars);
	Nan::SetPrototypeMethod(tpl, "getMappedScalars", GetMappedScalars);

	Nan::SetPrototypeMethod(tpl, "GetMipmap", GetMipmap);
	Nan::SetPrototypeMethod(tpl, "getMipmap", GetMipmap);

	Nan::SetPrototypeMethod(tpl, "GetPremultipliedAlpha", GetPremultipliedAlpha);
	Nan::SetPrototypeMethod(tpl, "getPremultipliedAlpha", GetPremultipliedAlpha);

	Nan::SetPrototypeMethod(tpl, "GetQuality", GetQuality);
	Nan::SetPrototypeMethod(tpl, "getQuality", GetQuality);

	Nan::SetPrototypeMethod(tpl, "GetRepeat", GetRepeat);
	Nan::SetPrototypeMethod(tpl, "getRepeat", GetRepeat);

	Nan::SetPrototypeMethod(tpl, "GetRestrictPowerOf2ImageSmaller", GetRestrictPowerOf2ImageSmaller);
	Nan::SetPrototypeMethod(tpl, "getRestrictPowerOf2ImageSmaller", GetRestrictPowerOf2ImageSmaller);

	Nan::SetPrototypeMethod(tpl, "GetTextureUnit", GetTextureUnit);
	Nan::SetPrototypeMethod(tpl, "getTextureUnit", GetTextureUnit);

	Nan::SetPrototypeMethod(tpl, "GetTransform", GetTransform);
	Nan::SetPrototypeMethod(tpl, "getTransform", GetTransform);

	Nan::SetPrototypeMethod(tpl, "GetUseSRGBColorSpace", GetUseSRGBColorSpace);
	Nan::SetPrototypeMethod(tpl, "getUseSRGBColorSpace", GetUseSRGBColorSpace);

	Nan::SetPrototypeMethod(tpl, "InterpolateOff", InterpolateOff);
	Nan::SetPrototypeMethod(tpl, "interpolateOff", InterpolateOff);

	Nan::SetPrototypeMethod(tpl, "InterpolateOn", InterpolateOn);
	Nan::SetPrototypeMethod(tpl, "interpolateOn", InterpolateOn);

	Nan::SetPrototypeMethod(tpl, "IsTranslucent", IsTranslucent);
	Nan::SetPrototypeMethod(tpl, "isTranslucent", IsTranslucent);

	Nan::SetPrototypeMethod(tpl, "Load", Load);
	Nan::SetPrototypeMethod(tpl, "load", Load);

	Nan::SetPrototypeMethod(tpl, "MapColorScalarsThroughLookupTableOff", MapColorScalarsThroughLookupTableOff);
	Nan::SetPrototypeMethod(tpl, "mapColorScalarsThroughLookupTableOff", MapColorScalarsThroughLookupTableOff);

	Nan::SetPrototypeMethod(tpl, "MapColorScalarsThroughLookupTableOn", MapColorScalarsThroughLookupTableOn);
	Nan::SetPrototypeMethod(tpl, "mapColorScalarsThroughLookupTableOn", MapColorScalarsThroughLookupTableOn);

	Nan::SetPrototypeMethod(tpl, "MipmapOff", MipmapOff);
	Nan::SetPrototypeMethod(tpl, "mipmapOff", MipmapOff);

	Nan::SetPrototypeMethod(tpl, "MipmapOn", MipmapOn);
	Nan::SetPrototypeMethod(tpl, "mipmapOn", MipmapOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PostRender", PostRender);
	Nan::SetPrototypeMethod(tpl, "postRender", PostRender);

	Nan::SetPrototypeMethod(tpl, "PremultipliedAlphaOff", PremultipliedAlphaOff);
	Nan::SetPrototypeMethod(tpl, "premultipliedAlphaOff", PremultipliedAlphaOff);

	Nan::SetPrototypeMethod(tpl, "PremultipliedAlphaOn", PremultipliedAlphaOn);
	Nan::SetPrototypeMethod(tpl, "premultipliedAlphaOn", PremultipliedAlphaOn);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "Render", Render);
	Nan::SetPrototypeMethod(tpl, "render", Render);

	Nan::SetPrototypeMethod(tpl, "RepeatOff", RepeatOff);
	Nan::SetPrototypeMethod(tpl, "repeatOff", RepeatOff);

	Nan::SetPrototypeMethod(tpl, "RepeatOn", RepeatOn);
	Nan::SetPrototypeMethod(tpl, "repeatOn", RepeatOn);

	Nan::SetPrototypeMethod(tpl, "RestrictPowerOf2ImageSmallerOff", RestrictPowerOf2ImageSmallerOff);
	Nan::SetPrototypeMethod(tpl, "restrictPowerOf2ImageSmallerOff", RestrictPowerOf2ImageSmallerOff);

	Nan::SetPrototypeMethod(tpl, "RestrictPowerOf2ImageSmallerOn", RestrictPowerOf2ImageSmallerOn);
	Nan::SetPrototypeMethod(tpl, "restrictPowerOf2ImageSmallerOn", RestrictPowerOf2ImageSmallerOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBlendingMode", SetBlendingMode);
	Nan::SetPrototypeMethod(tpl, "setBlendingMode", SetBlendingMode);

	Nan::SetPrototypeMethod(tpl, "SetColorMode", SetColorMode);
	Nan::SetPrototypeMethod(tpl, "setColorMode", SetColorMode);

	Nan::SetPrototypeMethod(tpl, "SetColorModeToDefault", SetColorModeToDefault);
	Nan::SetPrototypeMethod(tpl, "setColorModeToDefault", SetColorModeToDefault);

	Nan::SetPrototypeMethod(tpl, "SetColorModeToDirectScalars", SetColorModeToDirectScalars);
	Nan::SetPrototypeMethod(tpl, "setColorModeToDirectScalars", SetColorModeToDirectScalars);

	Nan::SetPrototypeMethod(tpl, "SetColorModeToMapScalars", SetColorModeToMapScalars);
	Nan::SetPrototypeMethod(tpl, "setColorModeToMapScalars", SetColorModeToMapScalars);

	Nan::SetPrototypeMethod(tpl, "SetCubeMap", SetCubeMap);
	Nan::SetPrototypeMethod(tpl, "setCubeMap", SetCubeMap);

	Nan::SetPrototypeMethod(tpl, "SetEdgeClamp", SetEdgeClamp);
	Nan::SetPrototypeMethod(tpl, "setEdgeClamp", SetEdgeClamp);

	Nan::SetPrototypeMethod(tpl, "SetInterpolate", SetInterpolate);
	Nan::SetPrototypeMethod(tpl, "setInterpolate", SetInterpolate);

	Nan::SetPrototypeMethod(tpl, "SetLookupTable", SetLookupTable);
	Nan::SetPrototypeMethod(tpl, "setLookupTable", SetLookupTable);

	Nan::SetPrototypeMethod(tpl, "SetMapColorScalarsThroughLookupTable", SetMapColorScalarsThroughLookupTable);
	Nan::SetPrototypeMethod(tpl, "setMapColorScalarsThroughLookupTable", SetMapColorScalarsThroughLookupTable);

	Nan::SetPrototypeMethod(tpl, "SetMipmap", SetMipmap);
	Nan::SetPrototypeMethod(tpl, "setMipmap", SetMipmap);

	Nan::SetPrototypeMethod(tpl, "SetPremultipliedAlpha", SetPremultipliedAlpha);
	Nan::SetPrototypeMethod(tpl, "setPremultipliedAlpha", SetPremultipliedAlpha);

	Nan::SetPrototypeMethod(tpl, "SetQuality", SetQuality);
	Nan::SetPrototypeMethod(tpl, "setQuality", SetQuality);

	Nan::SetPrototypeMethod(tpl, "SetQualityTo16Bit", SetQualityTo16Bit);
	Nan::SetPrototypeMethod(tpl, "setQualityTo16Bit", SetQualityTo16Bit);

	Nan::SetPrototypeMethod(tpl, "SetQualityTo32Bit", SetQualityTo32Bit);
	Nan::SetPrototypeMethod(tpl, "setQualityTo32Bit", SetQualityTo32Bit);

	Nan::SetPrototypeMethod(tpl, "SetQualityToDefault", SetQualityToDefault);
	Nan::SetPrototypeMethod(tpl, "setQualityToDefault", SetQualityToDefault);

	Nan::SetPrototypeMethod(tpl, "SetRepeat", SetRepeat);
	Nan::SetPrototypeMethod(tpl, "setRepeat", SetRepeat);

	Nan::SetPrototypeMethod(tpl, "SetRestrictPowerOf2ImageSmaller", SetRestrictPowerOf2ImageSmaller);
	Nan::SetPrototypeMethod(tpl, "setRestrictPowerOf2ImageSmaller", SetRestrictPowerOf2ImageSmaller);

	Nan::SetPrototypeMethod(tpl, "SetTransform", SetTransform);
	Nan::SetPrototypeMethod(tpl, "setTransform", SetTransform);

	Nan::SetPrototypeMethod(tpl, "SetUseSRGBColorSpace", SetUseSRGBColorSpace);
	Nan::SetPrototypeMethod(tpl, "setUseSRGBColorSpace", SetUseSRGBColorSpace);

	Nan::SetPrototypeMethod(tpl, "UseSRGBColorSpaceOff", UseSRGBColorSpaceOff);
	Nan::SetPrototypeMethod(tpl, "useSRGBColorSpaceOff", UseSRGBColorSpaceOff);

	Nan::SetPrototypeMethod(tpl, "UseSRGBColorSpaceOn", UseSRGBColorSpaceOn);
	Nan::SetPrototypeMethod(tpl, "useSRGBColorSpaceOn", UseSRGBColorSpaceOn);

#ifdef VTK_NODE_PLUS_VTKTEXTUREWRAP_INITPTPL
	VTK_NODE_PLUS_VTKTEXTUREWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkTextureWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkTexture> native = vtkSmartPointer<vtkTexture>::New();
		VtkTextureWrap* obj = new VtkTextureWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkTextureWrap::CubeMapOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CubeMapOff();
}

void VtkTextureWrap::CubeMapOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CubeMapOn();
}

void VtkTextureWrap::EdgeClampOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EdgeClampOff();
}

void VtkTextureWrap::EdgeClampOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EdgeClampOn();
}

void VtkTextureWrap::GetBlendingMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBlendingMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::GetColorMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetColorMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::GetCubeMap(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCubeMap();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::GetEdgeClamp(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEdgeClamp();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::GetInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	vtkImageData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInput();
	VtkImageDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImageDataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageDataWrap *w = new VtkImageDataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkTextureWrap::GetInterpolate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInterpolate();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::GetLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	vtkScalarsToColors * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLookupTable();
	VtkScalarsToColorsWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkScalarsToColorsWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkScalarsToColorsWrap *w = new VtkScalarsToColorsWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkTextureWrap::GetMapColorScalarsThroughLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMapColorScalarsThroughLookupTable();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::GetMappedScalars(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	vtkUnsignedCharArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMappedScalars();
	VtkUnsignedCharArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkUnsignedCharArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkUnsignedCharArrayWrap *w = new VtkUnsignedCharArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkTextureWrap::GetMipmap(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMipmap();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::GetPremultipliedAlpha(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPremultipliedAlpha();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::GetQuality(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetQuality();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::GetRepeat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRepeat();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::GetRestrictPowerOf2ImageSmaller(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRestrictPowerOf2ImageSmaller();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::GetTextureUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTextureUnit();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::GetTransform(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	vtkTransform * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTransform();
	VtkTransformWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTransformWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTransformWrap *w = new VtkTransformWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkTextureWrap::GetUseSRGBColorSpace(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseSRGBColorSpace();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::InterpolateOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InterpolateOff();
}

void VtkTextureWrap::InterpolateOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InterpolateOn();
}

void VtkTextureWrap::IsTranslucent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->IsTranslucent();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTextureWrap::Load(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Load(
			(vtkRenderer *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::MapColorScalarsThroughLookupTableOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->MapColorScalarsThroughLookupTableOff();
}

void VtkTextureWrap::MapColorScalarsThroughLookupTableOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->MapColorScalarsThroughLookupTableOn();
}

void VtkTextureWrap::MipmapOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->MipmapOff();
}

void VtkTextureWrap::MipmapOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->MipmapOn();
}

void VtkTextureWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	vtkTexture * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkTextureWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTextureWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTextureWrap *w = new VtkTextureWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkTextureWrap::PostRender(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->PostRender(
			(vtkRenderer *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::PremultipliedAlphaOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PremultipliedAlphaOff();
}

void VtkTextureWrap::PremultipliedAlphaOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PremultipliedAlphaOn();
}

void VtkTextureWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::Render(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Render(
			(vtkRenderer *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::RepeatOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RepeatOff();
}

void VtkTextureWrap::RepeatOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RepeatOn();
}

void VtkTextureWrap::RestrictPowerOf2ImageSmallerOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RestrictPowerOf2ImageSmallerOff();
}

void VtkTextureWrap::RestrictPowerOf2ImageSmallerOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RestrictPowerOf2ImageSmallerOn();
}

void VtkTextureWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkTexture * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkTextureWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkTextureWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkTextureWrap *w = new VtkTextureWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetBlendingMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBlendingMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetColorMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColorMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetColorModeToDefault(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetColorModeToDefault();
}

void VtkTextureWrap::SetColorModeToDirectScalars(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetColorModeToDirectScalars();
}

void VtkTextureWrap::SetColorModeToMapScalars(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetColorModeToMapScalars();
}

void VtkTextureWrap::SetCubeMap(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCubeMap(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetEdgeClamp(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEdgeClamp(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetInterpolate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInterpolate(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkScalarsToColorsWrap::ptpl))->HasInstance(info[0]))
	{
		VtkScalarsToColorsWrap *a0 = ObjectWrap::Unwrap<VtkScalarsToColorsWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLookupTable(
			(vtkScalarsToColors *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetMapColorScalarsThroughLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMapColorScalarsThroughLookupTable(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetMipmap(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMipmap(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetPremultipliedAlpha(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPremultipliedAlpha(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetQuality(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetQuality(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetQualityTo16Bit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetQualityTo16Bit();
}

void VtkTextureWrap::SetQualityTo32Bit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetQualityTo32Bit();
}

void VtkTextureWrap::SetQualityToDefault(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetQualityToDefault();
}

void VtkTextureWrap::SetRepeat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRepeat(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetRestrictPowerOf2ImageSmaller(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRestrictPowerOf2ImageSmaller(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetTransform(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTransformWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTransformWrap *a0 = ObjectWrap::Unwrap<VtkTransformWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTransform(
			(vtkTransform *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::SetUseSRGBColorSpace(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseSRGBColorSpace(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTextureWrap::UseSRGBColorSpaceOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseSRGBColorSpaceOff();
}

void VtkTextureWrap::UseSRGBColorSpaceOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTextureWrap *wrapper = ObjectWrap::Unwrap<VtkTextureWrap>(info.Holder());
	vtkTexture *native = (vtkTexture *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseSRGBColorSpaceOn();
}

