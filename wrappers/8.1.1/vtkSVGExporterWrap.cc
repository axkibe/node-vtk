/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkExporterWrap.h"
#include "vtkSVGExporterWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkSVGExporterWrap::ptpl;

VtkSVGExporterWrap::VtkSVGExporterWrap()
{ }

VtkSVGExporterWrap::VtkSVGExporterWrap(vtkSmartPointer<vtkSVGExporter> _native)
{ native = _native; }

VtkSVGExporterWrap::~VtkSVGExporterWrap()
{ }

void VtkSVGExporterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkSVGExporter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("SVGExporter").ToLocalChecked(), ConstructorGetter);
}

void VtkSVGExporterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkSVGExporterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkExporterWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkExporterWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkSVGExporterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "DrawBackgroundOff", DrawBackgroundOff);
	Nan::SetPrototypeMethod(tpl, "drawBackgroundOff", DrawBackgroundOff);

	Nan::SetPrototypeMethod(tpl, "DrawBackgroundOn", DrawBackgroundOn);
	Nan::SetPrototypeMethod(tpl, "drawBackgroundOn", DrawBackgroundOn);

	Nan::SetPrototypeMethod(tpl, "GetDescription", GetDescription);
	Nan::SetPrototypeMethod(tpl, "getDescription", GetDescription);

	Nan::SetPrototypeMethod(tpl, "GetDrawBackground", GetDrawBackground);
	Nan::SetPrototypeMethod(tpl, "getDrawBackground", GetDrawBackground);

	Nan::SetPrototypeMethod(tpl, "GetFileName", GetFileName);
	Nan::SetPrototypeMethod(tpl, "getFileName", GetFileName);

	Nan::SetPrototypeMethod(tpl, "GetSubdivisionThreshold", GetSubdivisionThreshold);
	Nan::SetPrototypeMethod(tpl, "getSubdivisionThreshold", GetSubdivisionThreshold);

	Nan::SetPrototypeMethod(tpl, "GetTextAsPath", GetTextAsPath);
	Nan::SetPrototypeMethod(tpl, "getTextAsPath", GetTextAsPath);

	Nan::SetPrototypeMethod(tpl, "GetTitle", GetTitle);
	Nan::SetPrototypeMethod(tpl, "getTitle", GetTitle);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetDescription", SetDescription);
	Nan::SetPrototypeMethod(tpl, "setDescription", SetDescription);

	Nan::SetPrototypeMethod(tpl, "SetDrawBackground", SetDrawBackground);
	Nan::SetPrototypeMethod(tpl, "setDrawBackground", SetDrawBackground);

	Nan::SetPrototypeMethod(tpl, "SetFileName", SetFileName);
	Nan::SetPrototypeMethod(tpl, "setFileName", SetFileName);

	Nan::SetPrototypeMethod(tpl, "SetSubdivisionThreshold", SetSubdivisionThreshold);
	Nan::SetPrototypeMethod(tpl, "setSubdivisionThreshold", SetSubdivisionThreshold);

	Nan::SetPrototypeMethod(tpl, "SetTextAsPath", SetTextAsPath);
	Nan::SetPrototypeMethod(tpl, "setTextAsPath", SetTextAsPath);

	Nan::SetPrototypeMethod(tpl, "SetTitle", SetTitle);
	Nan::SetPrototypeMethod(tpl, "setTitle", SetTitle);

	Nan::SetPrototypeMethod(tpl, "TextAsPathOff", TextAsPathOff);
	Nan::SetPrototypeMethod(tpl, "textAsPathOff", TextAsPathOff);

	Nan::SetPrototypeMethod(tpl, "TextAsPathOn", TextAsPathOn);
	Nan::SetPrototypeMethod(tpl, "textAsPathOn", TextAsPathOn);

#ifdef VTK_NODE_PLUS_VTKSVGEXPORTERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKSVGEXPORTERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkSVGExporterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkSVGExporter> native = vtkSmartPointer<vtkSVGExporter>::New();
		VtkSVGExporterWrap* obj = new VtkSVGExporterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkSVGExporterWrap::DrawBackgroundOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DrawBackgroundOff();
}

void VtkSVGExporterWrap::DrawBackgroundOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DrawBackgroundOn();
}

void VtkSVGExporterWrap::GetDescription(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDescription();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkSVGExporterWrap::GetDrawBackground(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDrawBackground();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSVGExporterWrap::GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkSVGExporterWrap::GetSubdivisionThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	float r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSubdivisionThreshold();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSVGExporterWrap::GetTextAsPath(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTextAsPath();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSVGExporterWrap::GetTitle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTitle();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkSVGExporterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	vtkSVGExporter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkSVGExporterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkSVGExporterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkSVGExporterWrap *w = new VtkSVGExporterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSVGExporterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkSVGExporter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkSVGExporterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkSVGExporterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkSVGExporterWrap *w = new VtkSVGExporterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSVGExporterWrap::SetDescription(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDescription(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSVGExporterWrap::SetDrawBackground(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDrawBackground(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSVGExporterWrap::SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSVGExporterWrap::SetSubdivisionThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSubdivisionThreshold(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSVGExporterWrap::SetTextAsPath(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTextAsPath(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSVGExporterWrap::SetTitle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTitle(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSVGExporterWrap::TextAsPathOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TextAsPathOff();
}

void VtkSVGExporterWrap::TextAsPathOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSVGExporterWrap *wrapper = ObjectWrap::Unwrap<VtkSVGExporterWrap>(info.Holder());
	vtkSVGExporter *native = (vtkSVGExporter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TextAsPathOn();
}

