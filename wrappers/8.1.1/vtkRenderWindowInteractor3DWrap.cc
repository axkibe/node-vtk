/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkRenderWindowInteractorWrap.h"
#include "vtkRenderWindowInteractor3DWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkCameraWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkRenderWindowInteractor3DWrap::ptpl;

VtkRenderWindowInteractor3DWrap::VtkRenderWindowInteractor3DWrap()
{ }

VtkRenderWindowInteractor3DWrap::VtkRenderWindowInteractor3DWrap(vtkSmartPointer<vtkRenderWindowInteractor3D> _native)
{ native = _native; }

VtkRenderWindowInteractor3DWrap::~VtkRenderWindowInteractor3DWrap()
{ }

void VtkRenderWindowInteractor3DWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkRenderWindowInteractor3D").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("RenderWindowInteractor3D").ToLocalChecked(), ConstructorGetter);
}

void VtkRenderWindowInteractor3DWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkRenderWindowInteractor3DWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkRenderWindowInteractorWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkRenderWindowInteractorWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkRenderWindowInteractor3DWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "Disable", Disable);
	Nan::SetPrototypeMethod(tpl, "disable", Disable);

	Nan::SetPrototypeMethod(tpl, "Enable", Enable);
	Nan::SetPrototypeMethod(tpl, "enable", Enable);

	Nan::SetPrototypeMethod(tpl, "GetDone", GetDone);
	Nan::SetPrototypeMethod(tpl, "getDone", GetDone);

	Nan::SetPrototypeMethod(tpl, "GetLastTranslation3D", GetLastTranslation3D);
	Nan::SetPrototypeMethod(tpl, "getLastTranslation3D", GetLastTranslation3D);

	Nan::SetPrototypeMethod(tpl, "GetPhysicalScale", GetPhysicalScale);
	Nan::SetPrototypeMethod(tpl, "getPhysicalScale", GetPhysicalScale);

	Nan::SetPrototypeMethod(tpl, "GetTouchPadPosition", GetTouchPadPosition);
	Nan::SetPrototypeMethod(tpl, "getTouchPadPosition", GetTouchPadPosition);

	Nan::SetPrototypeMethod(tpl, "GetTranslation3D", GetTranslation3D);
	Nan::SetPrototypeMethod(tpl, "getTranslation3D", GetTranslation3D);

	Nan::SetPrototypeMethod(tpl, "MiddleButtonPressEvent", MiddleButtonPressEvent);
	Nan::SetPrototypeMethod(tpl, "middleButtonPressEvent", MiddleButtonPressEvent);

	Nan::SetPrototypeMethod(tpl, "MiddleButtonReleaseEvent", MiddleButtonReleaseEvent);
	Nan::SetPrototypeMethod(tpl, "middleButtonReleaseEvent", MiddleButtonReleaseEvent);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RightButtonPressEvent", RightButtonPressEvent);
	Nan::SetPrototypeMethod(tpl, "rightButtonPressEvent", RightButtonPressEvent);

	Nan::SetPrototypeMethod(tpl, "RightButtonReleaseEvent", RightButtonReleaseEvent);
	Nan::SetPrototypeMethod(tpl, "rightButtonReleaseEvent", RightButtonReleaseEvent);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetPhysicalEventPosition", SetPhysicalEventPosition);
	Nan::SetPrototypeMethod(tpl, "setPhysicalEventPosition", SetPhysicalEventPosition);

	Nan::SetPrototypeMethod(tpl, "SetPhysicalScale", SetPhysicalScale);
	Nan::SetPrototypeMethod(tpl, "setPhysicalScale", SetPhysicalScale);

	Nan::SetPrototypeMethod(tpl, "SetPhysicalTranslation", SetPhysicalTranslation);
	Nan::SetPrototypeMethod(tpl, "setPhysicalTranslation", SetPhysicalTranslation);

	Nan::SetPrototypeMethod(tpl, "SetTouchPadPosition", SetTouchPadPosition);
	Nan::SetPrototypeMethod(tpl, "setTouchPadPosition", SetTouchPadPosition);

	Nan::SetPrototypeMethod(tpl, "SetTranslation3D", SetTranslation3D);
	Nan::SetPrototypeMethod(tpl, "setTranslation3D", SetTranslation3D);

	Nan::SetPrototypeMethod(tpl, "SetWorldEventOrientation", SetWorldEventOrientation);
	Nan::SetPrototypeMethod(tpl, "setWorldEventOrientation", SetWorldEventOrientation);

	Nan::SetPrototypeMethod(tpl, "SetWorldEventPosition", SetWorldEventPosition);
	Nan::SetPrototypeMethod(tpl, "setWorldEventPosition", SetWorldEventPosition);

	Nan::SetPrototypeMethod(tpl, "TerminateApp", TerminateApp);
	Nan::SetPrototypeMethod(tpl, "terminateApp", TerminateApp);

#ifdef VTK_NODE_PLUS_VTKRENDERWINDOWINTERACTOR3DWRAP_INITPTPL
	VTK_NODE_PLUS_VTKRENDERWINDOWINTERACTOR3DWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkRenderWindowInteractor3DWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkRenderWindowInteractor3D> native = vtkSmartPointer<vtkRenderWindowInteractor3D>::New();
		VtkRenderWindowInteractor3DWrap* obj = new VtkRenderWindowInteractor3DWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkRenderWindowInteractor3DWrap::Disable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Disable();
}

void VtkRenderWindowInteractor3DWrap::Enable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Enable();
}

void VtkRenderWindowInteractor3DWrap::GetDone(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDone();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRenderWindowInteractor3DWrap::GetLastTranslation3D(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLastTranslation3D();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkRenderWindowInteractor3DWrap::GetPhysicalScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPhysicalScale();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRenderWindowInteractor3DWrap::GetTouchPadPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	float const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTouchPadPosition();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 2 * sizeof(float));
	Local<v8::Float32Array> at = v8::Float32Array::New(ab, 0, 2);
	memcpy(ab->GetContents().Data(), r, 2 * sizeof(float));
	info.GetReturnValue().Set(at);
}

void VtkRenderWindowInteractor3DWrap::GetTranslation3D(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTranslation3D();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkRenderWindowInteractor3DWrap::MiddleButtonPressEvent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->MiddleButtonPressEvent();
}

void VtkRenderWindowInteractor3DWrap::MiddleButtonReleaseEvent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->MiddleButtonReleaseEvent();
}

void VtkRenderWindowInteractor3DWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	vtkRenderWindowInteractor3D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkRenderWindowInteractor3DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderWindowInteractor3DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderWindowInteractor3DWrap *w = new VtkRenderWindowInteractor3DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRenderWindowInteractor3DWrap::RightButtonPressEvent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RightButtonPressEvent();
}

void VtkRenderWindowInteractor3DWrap::RightButtonReleaseEvent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RightButtonReleaseEvent();
}

void VtkRenderWindowInteractor3DWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkRenderWindowInteractor3D * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkRenderWindowInteractor3DWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkRenderWindowInteractor3DWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkRenderWindowInteractor3DWrap *w = new VtkRenderWindowInteractor3DWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderWindowInteractor3DWrap::SetPhysicalEventPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
										if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->SetPhysicalEventPosition(
						info[0]->NumberValue(),
						info[1]->NumberValue(),
						info[2]->NumberValue(),
						info[3]->Int32Value()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderWindowInteractor3DWrap::SetPhysicalScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPhysicalScale(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderWindowInteractor3DWrap::SetPhysicalTranslation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkCameraWrap::ptpl))->HasInstance(info[0]))
	{
		VtkCameraWrap *a0 = ObjectWrap::Unwrap<VtkCameraWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
										if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->SetPhysicalTranslation(
						(vtkCamera *) a0->native.GetPointer(),
						info[1]->NumberValue(),
						info[2]->NumberValue(),
						info[3]->NumberValue()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderWindowInteractor3DWrap::SetTouchPadPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat32Array())
	{
		v8::Local<v8::Float32Array>a0(v8::Local<v8::Float32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTouchPadPosition(
			(float *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		float b0[2];
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 2; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTouchPadPosition(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetTouchPadPosition(
				info[0]->NumberValue(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderWindowInteractor3DWrap::SetTranslation3D(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTranslation3D(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTranslation3D(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderWindowInteractor3DWrap::SetWorldEventOrientation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() > 4 && info[4]->IsInt32())
					{
												if(info.Length() != 5)
						{
							Nan::ThrowError("Too many parameters.");
							return;
						}
						native->SetWorldEventOrientation(
							info[0]->NumberValue(),
							info[1]->NumberValue(),
							info[2]->NumberValue(),
							info[3]->NumberValue(),
							info[4]->Int32Value()
						);
						return;
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderWindowInteractor3DWrap::SetWorldEventPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
										if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->SetWorldEventPosition(
						info[0]->NumberValue(),
						info[1]->NumberValue(),
						info[2]->NumberValue(),
						info[3]->Int32Value()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRenderWindowInteractor3DWrap::TerminateApp(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRenderWindowInteractor3DWrap *wrapper = ObjectWrap::Unwrap<VtkRenderWindowInteractor3DWrap>(info.Holder());
	vtkRenderWindowInteractor3D *native = (vtkRenderWindowInteractor3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TerminateApp();
}

