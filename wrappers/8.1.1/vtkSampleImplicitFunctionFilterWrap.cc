/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkDataSetAlgorithmWrap.h"
#include "vtkSampleImplicitFunctionFilterWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkImplicitFunctionWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkSampleImplicitFunctionFilterWrap::ptpl;

VtkSampleImplicitFunctionFilterWrap::VtkSampleImplicitFunctionFilterWrap()
{ }

VtkSampleImplicitFunctionFilterWrap::VtkSampleImplicitFunctionFilterWrap(vtkSmartPointer<vtkSampleImplicitFunctionFilter> _native)
{ native = _native; }

VtkSampleImplicitFunctionFilterWrap::~VtkSampleImplicitFunctionFilterWrap()
{ }

void VtkSampleImplicitFunctionFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkSampleImplicitFunctionFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("SampleImplicitFunctionFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkSampleImplicitFunctionFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkSampleImplicitFunctionFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkDataSetAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkDataSetAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkSampleImplicitFunctionFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ComputeGradientsOff", ComputeGradientsOff);
	Nan::SetPrototypeMethod(tpl, "computeGradientsOff", ComputeGradientsOff);

	Nan::SetPrototypeMethod(tpl, "ComputeGradientsOn", ComputeGradientsOn);
	Nan::SetPrototypeMethod(tpl, "computeGradientsOn", ComputeGradientsOn);

	Nan::SetPrototypeMethod(tpl, "GetComputeGradients", GetComputeGradients);
	Nan::SetPrototypeMethod(tpl, "getComputeGradients", GetComputeGradients);

	Nan::SetPrototypeMethod(tpl, "GetGradientArrayName", GetGradientArrayName);
	Nan::SetPrototypeMethod(tpl, "getGradientArrayName", GetGradientArrayName);

	Nan::SetPrototypeMethod(tpl, "GetImplicitFunction", GetImplicitFunction);
	Nan::SetPrototypeMethod(tpl, "getImplicitFunction", GetImplicitFunction);

	Nan::SetPrototypeMethod(tpl, "GetScalarArrayName", GetScalarArrayName);
	Nan::SetPrototypeMethod(tpl, "getScalarArrayName", GetScalarArrayName);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetComputeGradients", SetComputeGradients);
	Nan::SetPrototypeMethod(tpl, "setComputeGradients", SetComputeGradients);

	Nan::SetPrototypeMethod(tpl, "SetGradientArrayName", SetGradientArrayName);
	Nan::SetPrototypeMethod(tpl, "setGradientArrayName", SetGradientArrayName);

	Nan::SetPrototypeMethod(tpl, "SetImplicitFunction", SetImplicitFunction);
	Nan::SetPrototypeMethod(tpl, "setImplicitFunction", SetImplicitFunction);

	Nan::SetPrototypeMethod(tpl, "SetScalarArrayName", SetScalarArrayName);
	Nan::SetPrototypeMethod(tpl, "setScalarArrayName", SetScalarArrayName);

#ifdef VTK_NODE_PLUS_VTKSAMPLEIMPLICITFUNCTIONFILTERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKSAMPLEIMPLICITFUNCTIONFILTERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkSampleImplicitFunctionFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkSampleImplicitFunctionFilter> native = vtkSmartPointer<vtkSampleImplicitFunctionFilter>::New();
		VtkSampleImplicitFunctionFilterWrap* obj = new VtkSampleImplicitFunctionFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkSampleImplicitFunctionFilterWrap::ComputeGradientsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSampleImplicitFunctionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSampleImplicitFunctionFilterWrap>(info.Holder());
	vtkSampleImplicitFunctionFilter *native = (vtkSampleImplicitFunctionFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeGradientsOff();
}

void VtkSampleImplicitFunctionFilterWrap::ComputeGradientsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSampleImplicitFunctionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSampleImplicitFunctionFilterWrap>(info.Holder());
	vtkSampleImplicitFunctionFilter *native = (vtkSampleImplicitFunctionFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeGradientsOn();
}

void VtkSampleImplicitFunctionFilterWrap::GetComputeGradients(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSampleImplicitFunctionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSampleImplicitFunctionFilterWrap>(info.Holder());
	vtkSampleImplicitFunctionFilter *native = (vtkSampleImplicitFunctionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeGradients();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSampleImplicitFunctionFilterWrap::GetGradientArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSampleImplicitFunctionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSampleImplicitFunctionFilterWrap>(info.Holder());
	vtkSampleImplicitFunctionFilter *native = (vtkSampleImplicitFunctionFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGradientArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkSampleImplicitFunctionFilterWrap::GetImplicitFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSampleImplicitFunctionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSampleImplicitFunctionFilterWrap>(info.Holder());
	vtkSampleImplicitFunctionFilter *native = (vtkSampleImplicitFunctionFilter *)wrapper->native.GetPointer();
	vtkImplicitFunction * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImplicitFunction();
	VtkImplicitFunctionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImplicitFunctionWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImplicitFunctionWrap *w = new VtkImplicitFunctionWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSampleImplicitFunctionFilterWrap::GetScalarArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSampleImplicitFunctionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSampleImplicitFunctionFilterWrap>(info.Holder());
	vtkSampleImplicitFunctionFilter *native = (vtkSampleImplicitFunctionFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScalarArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkSampleImplicitFunctionFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSampleImplicitFunctionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSampleImplicitFunctionFilterWrap>(info.Holder());
	vtkSampleImplicitFunctionFilter *native = (vtkSampleImplicitFunctionFilter *)wrapper->native.GetPointer();
	vtkSampleImplicitFunctionFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkSampleImplicitFunctionFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkSampleImplicitFunctionFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkSampleImplicitFunctionFilterWrap *w = new VtkSampleImplicitFunctionFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSampleImplicitFunctionFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSampleImplicitFunctionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSampleImplicitFunctionFilterWrap>(info.Holder());
	vtkSampleImplicitFunctionFilter *native = (vtkSampleImplicitFunctionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkSampleImplicitFunctionFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkSampleImplicitFunctionFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkSampleImplicitFunctionFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkSampleImplicitFunctionFilterWrap *w = new VtkSampleImplicitFunctionFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSampleImplicitFunctionFilterWrap::SetComputeGradients(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSampleImplicitFunctionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSampleImplicitFunctionFilterWrap>(info.Holder());
	vtkSampleImplicitFunctionFilter *native = (vtkSampleImplicitFunctionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeGradients(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSampleImplicitFunctionFilterWrap::SetGradientArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSampleImplicitFunctionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSampleImplicitFunctionFilterWrap>(info.Holder());
	vtkSampleImplicitFunctionFilter *native = (vtkSampleImplicitFunctionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGradientArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSampleImplicitFunctionFilterWrap::SetImplicitFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSampleImplicitFunctionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSampleImplicitFunctionFilterWrap>(info.Holder());
	vtkSampleImplicitFunctionFilter *native = (vtkSampleImplicitFunctionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImplicitFunctionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImplicitFunctionWrap *a0 = ObjectWrap::Unwrap<VtkImplicitFunctionWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetImplicitFunction(
			(vtkImplicitFunction *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSampleImplicitFunctionFilterWrap::SetScalarArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSampleImplicitFunctionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSampleImplicitFunctionFilterWrap>(info.Holder());
	vtkSampleImplicitFunctionFilter *native = (vtkSampleImplicitFunctionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScalarArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

