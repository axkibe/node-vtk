/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkImageAlgorithmWrap.h"
#include "vtkShepardMethodWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkShepardMethodWrap::ptpl;

VtkShepardMethodWrap::VtkShepardMethodWrap()
{ }

VtkShepardMethodWrap::VtkShepardMethodWrap(vtkSmartPointer<vtkShepardMethod> _native)
{ native = _native; }

VtkShepardMethodWrap::~VtkShepardMethodWrap()
{ }

void VtkShepardMethodWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkShepardMethod").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ShepardMethod").ToLocalChecked(), ConstructorGetter);
}

void VtkShepardMethodWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkShepardMethodWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkImageAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkImageAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkShepardMethodWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ComputeModelBounds", ComputeModelBounds);
	Nan::SetPrototypeMethod(tpl, "computeModelBounds", ComputeModelBounds);

	Nan::SetPrototypeMethod(tpl, "GetMaximumDistance", GetMaximumDistance);
	Nan::SetPrototypeMethod(tpl, "getMaximumDistance", GetMaximumDistance);

	Nan::SetPrototypeMethod(tpl, "GetMaximumDistanceMaxValue", GetMaximumDistanceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getMaximumDistanceMaxValue", GetMaximumDistanceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetMaximumDistanceMinValue", GetMaximumDistanceMinValue);
	Nan::SetPrototypeMethod(tpl, "getMaximumDistanceMinValue", GetMaximumDistanceMinValue);

	Nan::SetPrototypeMethod(tpl, "GetModelBounds", GetModelBounds);
	Nan::SetPrototypeMethod(tpl, "getModelBounds", GetModelBounds);

	Nan::SetPrototypeMethod(tpl, "GetNullValue", GetNullValue);
	Nan::SetPrototypeMethod(tpl, "getNullValue", GetNullValue);

	Nan::SetPrototypeMethod(tpl, "GetPowerParameter", GetPowerParameter);
	Nan::SetPrototypeMethod(tpl, "getPowerParameter", GetPowerParameter);

	Nan::SetPrototypeMethod(tpl, "GetPowerParameterMaxValue", GetPowerParameterMaxValue);
	Nan::SetPrototypeMethod(tpl, "getPowerParameterMaxValue", GetPowerParameterMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetPowerParameterMinValue", GetPowerParameterMinValue);
	Nan::SetPrototypeMethod(tpl, "getPowerParameterMinValue", GetPowerParameterMinValue);

	Nan::SetPrototypeMethod(tpl, "GetSampleDimensions", GetSampleDimensions);
	Nan::SetPrototypeMethod(tpl, "getSampleDimensions", GetSampleDimensions);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetMaximumDistance", SetMaximumDistance);
	Nan::SetPrototypeMethod(tpl, "setMaximumDistance", SetMaximumDistance);

	Nan::SetPrototypeMethod(tpl, "SetModelBounds", SetModelBounds);
	Nan::SetPrototypeMethod(tpl, "setModelBounds", SetModelBounds);

	Nan::SetPrototypeMethod(tpl, "SetNullValue", SetNullValue);
	Nan::SetPrototypeMethod(tpl, "setNullValue", SetNullValue);

	Nan::SetPrototypeMethod(tpl, "SetPowerParameter", SetPowerParameter);
	Nan::SetPrototypeMethod(tpl, "setPowerParameter", SetPowerParameter);

	Nan::SetPrototypeMethod(tpl, "SetSampleDimensions", SetSampleDimensions);
	Nan::SetPrototypeMethod(tpl, "setSampleDimensions", SetSampleDimensions);

#ifdef VTK_NODE_PLUS_VTKSHEPARDMETHODWRAP_INITPTPL
	VTK_NODE_PLUS_VTKSHEPARDMETHODWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkShepardMethodWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkShepardMethod> native = vtkSmartPointer<vtkShepardMethod>::New();
		VtkShepardMethodWrap* obj = new VtkShepardMethodWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkShepardMethodWrap::ComputeModelBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		if(info.Length() > 1 && info[1]->IsFloat64Array())
		{
			v8::Local<v8::Float64Array>a1(v8::Local<v8::Float64Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			double r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->ComputeModelBounds(
				(double *)(a0->Buffer()->GetContents().Data()),
				(double *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			double b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			double r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->ComputeModelBounds(
				(double *)(a0->Buffer()->GetContents().Data()),
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
		if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			double b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			double r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->ComputeModelBounds(
				b0,
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsFloat64Array())
		{
			v8::Local<v8::Float64Array>a1(v8::Local<v8::Float64Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			double r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->ComputeModelBounds(
				b0,
				(double *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShepardMethodWrap::GetMaximumDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumDistance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkShepardMethodWrap::GetMaximumDistanceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumDistanceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkShepardMethodWrap::GetMaximumDistanceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumDistanceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkShepardMethodWrap::GetModelBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetModelBounds();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 6 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 6);
	memcpy(ab->GetContents().Data(), r, 6 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkShepardMethodWrap::GetNullValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNullValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkShepardMethodWrap::GetPowerParameter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPowerParameter();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkShepardMethodWrap::GetPowerParameterMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPowerParameterMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkShepardMethodWrap::GetPowerParameterMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPowerParameterMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkShepardMethodWrap::GetSampleDimensions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	int const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSampleDimensions();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(int));
	Local<v8::Int32Array> at = v8::Int32Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(int));
	info.GetReturnValue().Set(at);
}

void VtkShepardMethodWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	vtkShepardMethod * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkShepardMethodWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkShepardMethodWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkShepardMethodWrap *w = new VtkShepardMethodWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkShepardMethodWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkShepardMethod * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkShepardMethodWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkShepardMethodWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkShepardMethodWrap *w = new VtkShepardMethodWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShepardMethodWrap::SetMaximumDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumDistance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShepardMethodWrap::SetModelBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetModelBounds(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[6];
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 6; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetModelBounds(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() > 4 && info[4]->IsNumber())
					{
						if(info.Length() > 5 && info[5]->IsNumber())
						{
														if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->SetModelBounds(
								info[0]->NumberValue(),
								info[1]->NumberValue(),
								info[2]->NumberValue(),
								info[3]->NumberValue(),
								info[4]->NumberValue(),
								info[5]->NumberValue()
							);
							return;
						}
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShepardMethodWrap::SetNullValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNullValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShepardMethodWrap::SetPowerParameter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPowerParameter(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShepardMethodWrap::SetSampleDimensions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShepardMethodWrap *wrapper = ObjectWrap::Unwrap<VtkShepardMethodWrap>(info.Holder());
	vtkShepardMethod *native = (vtkShepardMethod *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSampleDimensions(
			(int *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSampleDimensions(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetSampleDimensions(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

