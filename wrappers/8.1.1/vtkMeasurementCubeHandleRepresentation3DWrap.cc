/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkHandleRepresentationWrap.h"
#include "vtkMeasurementCubeHandleRepresentation3DWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkPolyDataWrap.h"
#include "vtkPropertyWrap.h"
#include "vtkAbstractTransformWrap.h"
#include "vtkPropWrap.h"
#include "vtkPropCollectionWrap.h"
#include "vtkWindowWrap.h"
#include "vtkViewportWrap.h"
#include "vtkBillboardTextActor3DWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkMeasurementCubeHandleRepresentation3DWrap::ptpl;

VtkMeasurementCubeHandleRepresentation3DWrap::VtkMeasurementCubeHandleRepresentation3DWrap()
{ }

VtkMeasurementCubeHandleRepresentation3DWrap::VtkMeasurementCubeHandleRepresentation3DWrap(vtkSmartPointer<vtkMeasurementCubeHandleRepresentation3D> _native)
{ native = _native; }

VtkMeasurementCubeHandleRepresentation3DWrap::~VtkMeasurementCubeHandleRepresentation3DWrap()
{ }

void VtkMeasurementCubeHandleRepresentation3DWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkMeasurementCubeHandleRepresentation3D").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("MeasurementCubeHandleRepresentation3D").ToLocalChecked(), ConstructorGetter);
}

void VtkMeasurementCubeHandleRepresentation3DWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkMeasurementCubeHandleRepresentation3DWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkHandleRepresentationWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkHandleRepresentationWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkMeasurementCubeHandleRepresentation3DWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AdaptiveScalingOff", AdaptiveScalingOff);
	Nan::SetPrototypeMethod(tpl, "adaptiveScalingOff", AdaptiveScalingOff);

	Nan::SetPrototypeMethod(tpl, "AdaptiveScalingOn", AdaptiveScalingOn);
	Nan::SetPrototypeMethod(tpl, "adaptiveScalingOn", AdaptiveScalingOn);

	Nan::SetPrototypeMethod(tpl, "BuildRepresentation", BuildRepresentation);
	Nan::SetPrototypeMethod(tpl, "buildRepresentation", BuildRepresentation);

	Nan::SetPrototypeMethod(tpl, "ComputeInteractionState", ComputeInteractionState);
	Nan::SetPrototypeMethod(tpl, "computeInteractionState", ComputeInteractionState);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "GetActors", GetActors);
	Nan::SetPrototypeMethod(tpl, "getActors", GetActors);

	Nan::SetPrototypeMethod(tpl, "GetAdaptiveScaling", GetAdaptiveScaling);
	Nan::SetPrototypeMethod(tpl, "getAdaptiveScaling", GetAdaptiveScaling);

	Nan::SetPrototypeMethod(tpl, "GetHandle", GetHandle);
	Nan::SetPrototypeMethod(tpl, "getHandle", GetHandle);

	Nan::SetPrototypeMethod(tpl, "GetHandleVisibility", GetHandleVisibility);
	Nan::SetPrototypeMethod(tpl, "getHandleVisibility", GetHandleVisibility);

	Nan::SetPrototypeMethod(tpl, "GetLabelText", GetLabelText);
	Nan::SetPrototypeMethod(tpl, "getLabelText", GetLabelText);

	Nan::SetPrototypeMethod(tpl, "GetLabelTextInput", GetLabelTextInput);
	Nan::SetPrototypeMethod(tpl, "getLabelTextInput", GetLabelTextInput);

	Nan::SetPrototypeMethod(tpl, "GetLabelVisibility", GetLabelVisibility);
	Nan::SetPrototypeMethod(tpl, "getLabelVisibility", GetLabelVisibility);

	Nan::SetPrototypeMethod(tpl, "GetLengthUnit", GetLengthUnit);
	Nan::SetPrototypeMethod(tpl, "getLengthUnit", GetLengthUnit);

	Nan::SetPrototypeMethod(tpl, "GetMaxRelativeCubeScreenArea", GetMaxRelativeCubeScreenArea);
	Nan::SetPrototypeMethod(tpl, "getMaxRelativeCubeScreenArea", GetMaxRelativeCubeScreenArea);

	Nan::SetPrototypeMethod(tpl, "GetMinRelativeCubeScreenArea", GetMinRelativeCubeScreenArea);
	Nan::SetPrototypeMethod(tpl, "getMinRelativeCubeScreenArea", GetMinRelativeCubeScreenArea);

	Nan::SetPrototypeMethod(tpl, "GetProperty", GetProperty);
	Nan::SetPrototypeMethod(tpl, "getProperty", GetProperty);

	Nan::SetPrototypeMethod(tpl, "GetRescaleFactor", GetRescaleFactor);
	Nan::SetPrototypeMethod(tpl, "getRescaleFactor", GetRescaleFactor);

	Nan::SetPrototypeMethod(tpl, "GetRescaleFactorMaxValue", GetRescaleFactorMaxValue);
	Nan::SetPrototypeMethod(tpl, "getRescaleFactorMaxValue", GetRescaleFactorMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetRescaleFactorMinValue", GetRescaleFactorMinValue);
	Nan::SetPrototypeMethod(tpl, "getRescaleFactorMinValue", GetRescaleFactorMinValue);

	Nan::SetPrototypeMethod(tpl, "GetSelectedLabelVisibility", GetSelectedLabelVisibility);
	Nan::SetPrototypeMethod(tpl, "getSelectedLabelVisibility", GetSelectedLabelVisibility);

	Nan::SetPrototypeMethod(tpl, "GetSelectedProperty", GetSelectedProperty);
	Nan::SetPrototypeMethod(tpl, "getSelectedProperty", GetSelectedProperty);

	Nan::SetPrototypeMethod(tpl, "GetSideLength", GetSideLength);
	Nan::SetPrototypeMethod(tpl, "getSideLength", GetSideLength);

	Nan::SetPrototypeMethod(tpl, "GetSmoothMotion", GetSmoothMotion);
	Nan::SetPrototypeMethod(tpl, "getSmoothMotion", GetSmoothMotion);

	Nan::SetPrototypeMethod(tpl, "GetTransform", GetTransform);
	Nan::SetPrototypeMethod(tpl, "getTransform", GetTransform);

	Nan::SetPrototypeMethod(tpl, "HandleVisibilityOff", HandleVisibilityOff);
	Nan::SetPrototypeMethod(tpl, "handleVisibilityOff", HandleVisibilityOff);

	Nan::SetPrototypeMethod(tpl, "HandleVisibilityOn", HandleVisibilityOn);
	Nan::SetPrototypeMethod(tpl, "handleVisibilityOn", HandleVisibilityOn);

	Nan::SetPrototypeMethod(tpl, "HasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "hasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "Highlight", Highlight);
	Nan::SetPrototypeMethod(tpl, "highlight", Highlight);

	Nan::SetPrototypeMethod(tpl, "LabelVisibilityOff", LabelVisibilityOff);
	Nan::SetPrototypeMethod(tpl, "labelVisibilityOff", LabelVisibilityOff);

	Nan::SetPrototypeMethod(tpl, "LabelVisibilityOn", LabelVisibilityOn);
	Nan::SetPrototypeMethod(tpl, "labelVisibilityOn", LabelVisibilityOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "RenderOpaqueGeometry", RenderOpaqueGeometry);
	Nan::SetPrototypeMethod(tpl, "renderOpaqueGeometry", RenderOpaqueGeometry);

	Nan::SetPrototypeMethod(tpl, "RenderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "renderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SelectedLabelVisibilityOff", SelectedLabelVisibilityOff);
	Nan::SetPrototypeMethod(tpl, "selectedLabelVisibilityOff", SelectedLabelVisibilityOff);

	Nan::SetPrototypeMethod(tpl, "SelectedLabelVisibilityOn", SelectedLabelVisibilityOn);
	Nan::SetPrototypeMethod(tpl, "selectedLabelVisibilityOn", SelectedLabelVisibilityOn);

	Nan::SetPrototypeMethod(tpl, "SetAdaptiveScaling", SetAdaptiveScaling);
	Nan::SetPrototypeMethod(tpl, "setAdaptiveScaling", SetAdaptiveScaling);

	Nan::SetPrototypeMethod(tpl, "SetDisplayPosition", SetDisplayPosition);
	Nan::SetPrototypeMethod(tpl, "setDisplayPosition", SetDisplayPosition);

	Nan::SetPrototypeMethod(tpl, "SetHandleVisibility", SetHandleVisibility);
	Nan::SetPrototypeMethod(tpl, "setHandleVisibility", SetHandleVisibility);

	Nan::SetPrototypeMethod(tpl, "SetLabelTextInput", SetLabelTextInput);
	Nan::SetPrototypeMethod(tpl, "setLabelTextInput", SetLabelTextInput);

	Nan::SetPrototypeMethod(tpl, "SetLabelVisibility", SetLabelVisibility);
	Nan::SetPrototypeMethod(tpl, "setLabelVisibility", SetLabelVisibility);

	Nan::SetPrototypeMethod(tpl, "SetLengthUnit", SetLengthUnit);
	Nan::SetPrototypeMethod(tpl, "setLengthUnit", SetLengthUnit);

	Nan::SetPrototypeMethod(tpl, "SetMaxRelativeCubeScreenArea", SetMaxRelativeCubeScreenArea);
	Nan::SetPrototypeMethod(tpl, "setMaxRelativeCubeScreenArea", SetMaxRelativeCubeScreenArea);

	Nan::SetPrototypeMethod(tpl, "SetMinRelativeCubeScreenArea", SetMinRelativeCubeScreenArea);
	Nan::SetPrototypeMethod(tpl, "setMinRelativeCubeScreenArea", SetMinRelativeCubeScreenArea);

	Nan::SetPrototypeMethod(tpl, "SetProperty", SetProperty);
	Nan::SetPrototypeMethod(tpl, "setProperty", SetProperty);

	Nan::SetPrototypeMethod(tpl, "SetRescaleFactor", SetRescaleFactor);
	Nan::SetPrototypeMethod(tpl, "setRescaleFactor", SetRescaleFactor);

	Nan::SetPrototypeMethod(tpl, "SetSelectedLabelVisibility", SetSelectedLabelVisibility);
	Nan::SetPrototypeMethod(tpl, "setSelectedLabelVisibility", SetSelectedLabelVisibility);

	Nan::SetPrototypeMethod(tpl, "SetSelectedProperty", SetSelectedProperty);
	Nan::SetPrototypeMethod(tpl, "setSelectedProperty", SetSelectedProperty);

	Nan::SetPrototypeMethod(tpl, "SetSideLength", SetSideLength);
	Nan::SetPrototypeMethod(tpl, "setSideLength", SetSideLength);

	Nan::SetPrototypeMethod(tpl, "SetSmoothMotion", SetSmoothMotion);
	Nan::SetPrototypeMethod(tpl, "setSmoothMotion", SetSmoothMotion);

	Nan::SetPrototypeMethod(tpl, "SetWorldPosition", SetWorldPosition);
	Nan::SetPrototypeMethod(tpl, "setWorldPosition", SetWorldPosition);

	Nan::SetPrototypeMethod(tpl, "ShallowCopy", ShallowCopy);
	Nan::SetPrototypeMethod(tpl, "shallowCopy", ShallowCopy);

	Nan::SetPrototypeMethod(tpl, "SmoothMotionOff", SmoothMotionOff);
	Nan::SetPrototypeMethod(tpl, "smoothMotionOff", SmoothMotionOff);

	Nan::SetPrototypeMethod(tpl, "SmoothMotionOn", SmoothMotionOn);
	Nan::SetPrototypeMethod(tpl, "smoothMotionOn", SmoothMotionOn);

	Nan::SetPrototypeMethod(tpl, "StartWidgetInteraction", StartWidgetInteraction);
	Nan::SetPrototypeMethod(tpl, "startWidgetInteraction", StartWidgetInteraction);

	Nan::SetPrototypeMethod(tpl, "WidgetInteraction", WidgetInteraction);
	Nan::SetPrototypeMethod(tpl, "widgetInteraction", WidgetInteraction);

#ifdef VTK_NODE_PLUS_VTKMEASUREMENTCUBEHANDLEREPRESENTATION3DWRAP_INITPTPL
	VTK_NODE_PLUS_VTKMEASUREMENTCUBEHANDLEREPRESENTATION3DWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkMeasurementCubeHandleRepresentation3DWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkMeasurementCubeHandleRepresentation3D> native = vtkSmartPointer<vtkMeasurementCubeHandleRepresentation3D>::New();
		VtkMeasurementCubeHandleRepresentation3DWrap* obj = new VtkMeasurementCubeHandleRepresentation3DWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkMeasurementCubeHandleRepresentation3DWrap::AdaptiveScalingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AdaptiveScalingOff();
}

void VtkMeasurementCubeHandleRepresentation3DWrap::AdaptiveScalingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AdaptiveScalingOn();
}

void VtkMeasurementCubeHandleRepresentation3DWrap::BuildRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BuildRepresentation();
}

void VtkMeasurementCubeHandleRepresentation3DWrap::ComputeInteractionState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->ComputeInteractionState(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropWrap *a0 = ObjectWrap::Unwrap<VtkPropWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DeepCopy(
			(vtkProp *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetActors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropCollectionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropCollectionWrap *a0 = ObjectWrap::Unwrap<VtkPropCollectionWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetActors(
			(vtkPropCollection *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetAdaptiveScaling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAdaptiveScaling();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	vtkPolyData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHandle();
	VtkPolyDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPolyDataWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataWrap *w = new VtkPolyDataWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetHandleVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHandleVisibility();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetLabelText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	vtkBillboardTextActor3D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLabelText();
	VtkBillboardTextActor3DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkBillboardTextActor3DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkBillboardTextActor3DWrap *w = new VtkBillboardTextActor3DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetLabelTextInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLabelTextInput();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetLabelVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLabelVisibility();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetLengthUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLengthUnit();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetMaxRelativeCubeScreenArea(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaxRelativeCubeScreenArea();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetMinRelativeCubeScreenArea(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMinRelativeCubeScreenArea();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProperty();
	VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetRescaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRescaleFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetRescaleFactorMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRescaleFactorMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetRescaleFactorMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRescaleFactorMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetSelectedLabelVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedLabelVisibility();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetSelectedProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedProperty();
	VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetSideLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSideLength();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetSmoothMotion(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSmoothMotion();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMeasurementCubeHandleRepresentation3DWrap::GetTransform(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	vtkAbstractTransform * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTransform();
	VtkAbstractTransformWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAbstractTransformWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAbstractTransformWrap *w = new VtkAbstractTransformWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMeasurementCubeHandleRepresentation3DWrap::HandleVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->HandleVisibilityOff();
}

void VtkMeasurementCubeHandleRepresentation3DWrap::HandleVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->HandleVisibilityOn();
}

void VtkMeasurementCubeHandleRepresentation3DWrap::HasTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasTranslucentPolygonalGeometry();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMeasurementCubeHandleRepresentation3DWrap::Highlight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Highlight(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::LabelVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LabelVisibilityOff();
}

void VtkMeasurementCubeHandleRepresentation3DWrap::LabelVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LabelVisibilityOn();
}

void VtkMeasurementCubeHandleRepresentation3DWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	vtkMeasurementCubeHandleRepresentation3D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkMeasurementCubeHandleRepresentation3DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkMeasurementCubeHandleRepresentation3DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMeasurementCubeHandleRepresentation3DWrap *w = new VtkMeasurementCubeHandleRepresentation3DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMeasurementCubeHandleRepresentation3DWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOpaqueGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::RenderTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderTranslucentPolygonalGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkMeasurementCubeHandleRepresentation3D * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkMeasurementCubeHandleRepresentation3DWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkMeasurementCubeHandleRepresentation3DWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkMeasurementCubeHandleRepresentation3DWrap *w = new VtkMeasurementCubeHandleRepresentation3DWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SelectedLabelVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SelectedLabelVisibilityOff();
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SelectedLabelVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SelectedLabelVisibilityOn();
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetAdaptiveScaling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAdaptiveScaling(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetDisplayPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDisplayPosition(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDisplayPosition(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetHandleVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHandleVisibility(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetLabelTextInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLabelTextInput(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetLabelVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLabelVisibility(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetLengthUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLengthUnit(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetMaxRelativeCubeScreenArea(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaxRelativeCubeScreenArea(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetMinRelativeCubeScreenArea(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMinRelativeCubeScreenArea(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropertyWrap *a0 = ObjectWrap::Unwrap<VtkPropertyWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProperty(
			(vtkProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetRescaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRescaleFactor(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetSelectedLabelVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSelectedLabelVisibility(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetSelectedProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropertyWrap *a0 = ObjectWrap::Unwrap<VtkPropertyWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSelectedProperty(
			(vtkProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetSideLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSideLength(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetSmoothMotion(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSmoothMotion(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SetWorldPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetWorldPosition(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetWorldPosition(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropWrap *a0 = ObjectWrap::Unwrap<VtkPropWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ShallowCopy(
			(vtkProp *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SmoothMotionOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SmoothMotionOff();
}

void VtkMeasurementCubeHandleRepresentation3DWrap::SmoothMotionOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SmoothMotionOn();
}

void VtkMeasurementCubeHandleRepresentation3DWrap::StartWidgetInteraction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->StartWidgetInteraction(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[2];
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 2; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->StartWidgetInteraction(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMeasurementCubeHandleRepresentation3DWrap::WidgetInteraction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMeasurementCubeHandleRepresentation3DWrap *wrapper = ObjectWrap::Unwrap<VtkMeasurementCubeHandleRepresentation3DWrap>(info.Holder());
	vtkMeasurementCubeHandleRepresentation3D *native = (vtkMeasurementCubeHandleRepresentation3D *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->WidgetInteraction(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[2];
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 2; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->WidgetInteraction(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

