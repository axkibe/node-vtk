/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkXMLWriterWrap.h"
#include "vtkXMLPDataObjectWriterWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkMultiProcessControllerWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkXMLPDataObjectWriterWrap::ptpl;

VtkXMLPDataObjectWriterWrap::VtkXMLPDataObjectWriterWrap()
{ }

VtkXMLPDataObjectWriterWrap::VtkXMLPDataObjectWriterWrap(vtkSmartPointer<vtkXMLPDataObjectWriter> _native)
{ native = _native; }

VtkXMLPDataObjectWriterWrap::~VtkXMLPDataObjectWriterWrap()
{ }

void VtkXMLPDataObjectWriterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkXMLPDataObjectWriter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("XMLPDataObjectWriter").ToLocalChecked(), ConstructorGetter);
}

void VtkXMLPDataObjectWriterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkXMLPDataObjectWriterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkXMLWriterWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkXMLWriterWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkXMLPDataObjectWriterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetController", GetController);
	Nan::SetPrototypeMethod(tpl, "getController", GetController);

	Nan::SetPrototypeMethod(tpl, "GetEndPiece", GetEndPiece);
	Nan::SetPrototypeMethod(tpl, "getEndPiece", GetEndPiece);

	Nan::SetPrototypeMethod(tpl, "GetGhostLevel", GetGhostLevel);
	Nan::SetPrototypeMethod(tpl, "getGhostLevel", GetGhostLevel);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPieces", GetNumberOfPieces);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPieces", GetNumberOfPieces);

	Nan::SetPrototypeMethod(tpl, "GetStartPiece", GetStartPiece);
	Nan::SetPrototypeMethod(tpl, "getStartPiece", GetStartPiece);

	Nan::SetPrototypeMethod(tpl, "GetUseSubdirectory", GetUseSubdirectory);
	Nan::SetPrototypeMethod(tpl, "getUseSubdirectory", GetUseSubdirectory);

	Nan::SetPrototypeMethod(tpl, "GetWriteSummaryFile", GetWriteSummaryFile);
	Nan::SetPrototypeMethod(tpl, "getWriteSummaryFile", GetWriteSummaryFile);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetController", SetController);
	Nan::SetPrototypeMethod(tpl, "setController", SetController);

	Nan::SetPrototypeMethod(tpl, "SetEndPiece", SetEndPiece);
	Nan::SetPrototypeMethod(tpl, "setEndPiece", SetEndPiece);

	Nan::SetPrototypeMethod(tpl, "SetGhostLevel", SetGhostLevel);
	Nan::SetPrototypeMethod(tpl, "setGhostLevel", SetGhostLevel);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfPieces", SetNumberOfPieces);
	Nan::SetPrototypeMethod(tpl, "setNumberOfPieces", SetNumberOfPieces);

	Nan::SetPrototypeMethod(tpl, "SetStartPiece", SetStartPiece);
	Nan::SetPrototypeMethod(tpl, "setStartPiece", SetStartPiece);

	Nan::SetPrototypeMethod(tpl, "SetUseSubdirectory", SetUseSubdirectory);
	Nan::SetPrototypeMethod(tpl, "setUseSubdirectory", SetUseSubdirectory);

	Nan::SetPrototypeMethod(tpl, "SetWriteSummaryFile", SetWriteSummaryFile);
	Nan::SetPrototypeMethod(tpl, "setWriteSummaryFile", SetWriteSummaryFile);

	Nan::SetPrototypeMethod(tpl, "WriteSummaryFileOff", WriteSummaryFileOff);
	Nan::SetPrototypeMethod(tpl, "writeSummaryFileOff", WriteSummaryFileOff);

	Nan::SetPrototypeMethod(tpl, "WriteSummaryFileOn", WriteSummaryFileOn);
	Nan::SetPrototypeMethod(tpl, "writeSummaryFileOn", WriteSummaryFileOn);

#ifdef VTK_NODE_PLUS_VTKXMLPDATAOBJECTWRITERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKXMLPDATAOBJECTWRITERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkXMLPDataObjectWriterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkXMLPDataObjectWriterWrap::GetController(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	vtkMultiProcessController * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetController();
	VtkMultiProcessControllerWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkMultiProcessControllerWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMultiProcessControllerWrap *w = new VtkMultiProcessControllerWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLPDataObjectWriterWrap::GetEndPiece(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEndPiece();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLPDataObjectWriterWrap::GetGhostLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGhostLevel();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLPDataObjectWriterWrap::GetNumberOfPieces(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPieces();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLPDataObjectWriterWrap::GetStartPiece(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStartPiece();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLPDataObjectWriterWrap::GetUseSubdirectory(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseSubdirectory();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLPDataObjectWriterWrap::GetWriteSummaryFile(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetWriteSummaryFile();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLPDataObjectWriterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	vtkXMLPDataObjectWriter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkXMLPDataObjectWriterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkXMLPDataObjectWriterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkXMLPDataObjectWriterWrap *w = new VtkXMLPDataObjectWriterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLPDataObjectWriterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkXMLPDataObjectWriter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkXMLPDataObjectWriterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkXMLPDataObjectWriterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkXMLPDataObjectWriterWrap *w = new VtkXMLPDataObjectWriterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLPDataObjectWriterWrap::SetController(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkMultiProcessControllerWrap::ptpl))->HasInstance(info[0]))
	{
		VtkMultiProcessControllerWrap *a0 = ObjectWrap::Unwrap<VtkMultiProcessControllerWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetController(
			(vtkMultiProcessController *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLPDataObjectWriterWrap::SetEndPiece(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEndPiece(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLPDataObjectWriterWrap::SetGhostLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGhostLevel(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLPDataObjectWriterWrap::SetNumberOfPieces(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfPieces(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLPDataObjectWriterWrap::SetStartPiece(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetStartPiece(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLPDataObjectWriterWrap::SetUseSubdirectory(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseSubdirectory(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLPDataObjectWriterWrap::SetWriteSummaryFile(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetWriteSummaryFile(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLPDataObjectWriterWrap::WriteSummaryFileOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->WriteSummaryFileOff();
}

void VtkXMLPDataObjectWriterWrap::WriteSummaryFileOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLPDataObjectWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLPDataObjectWriterWrap>(info.Holder());
	vtkXMLPDataObjectWriter *native = (vtkXMLPDataObjectWriter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->WriteSummaryFileOn();
}

