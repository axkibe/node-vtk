/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkDataSetAlgorithmWrap.h"
#include "vtkPointInterpolatorWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkDataObjectWrap.h"
#include "vtkAlgorithmOutputWrap.h"
#include "vtkAbstractPointLocatorWrap.h"
#include "vtkInterpolationKernelWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkPointInterpolatorWrap::ptpl;

VtkPointInterpolatorWrap::VtkPointInterpolatorWrap()
{ }

VtkPointInterpolatorWrap::VtkPointInterpolatorWrap(vtkSmartPointer<vtkPointInterpolator> _native)
{ native = _native; }

VtkPointInterpolatorWrap::~VtkPointInterpolatorWrap()
{ }

void VtkPointInterpolatorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkPointInterpolator").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("PointInterpolator").ToLocalChecked(), ConstructorGetter);
}

void VtkPointInterpolatorWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkPointInterpolatorWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkDataSetAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkDataSetAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkPointInterpolatorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ClearExcludedArrays", ClearExcludedArrays);
	Nan::SetPrototypeMethod(tpl, "clearExcludedArrays", ClearExcludedArrays);

	Nan::SetPrototypeMethod(tpl, "GetExcludedArray", GetExcludedArray);
	Nan::SetPrototypeMethod(tpl, "getExcludedArray", GetExcludedArray);

	Nan::SetPrototypeMethod(tpl, "GetKernel", GetKernel);
	Nan::SetPrototypeMethod(tpl, "getKernel", GetKernel);

	Nan::SetPrototypeMethod(tpl, "GetLocator", GetLocator);
	Nan::SetPrototypeMethod(tpl, "getLocator", GetLocator);

	Nan::SetPrototypeMethod(tpl, "GetNullPointsStrategy", GetNullPointsStrategy);
	Nan::SetPrototypeMethod(tpl, "getNullPointsStrategy", GetNullPointsStrategy);

	Nan::SetPrototypeMethod(tpl, "GetNullValue", GetNullValue);
	Nan::SetPrototypeMethod(tpl, "getNullValue", GetNullValue);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfExcludedArrays", GetNumberOfExcludedArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfExcludedArrays", GetNumberOfExcludedArrays);

	Nan::SetPrototypeMethod(tpl, "GetPassCellArrays", GetPassCellArrays);
	Nan::SetPrototypeMethod(tpl, "getPassCellArrays", GetPassCellArrays);

	Nan::SetPrototypeMethod(tpl, "GetPassFieldArrays", GetPassFieldArrays);
	Nan::SetPrototypeMethod(tpl, "getPassFieldArrays", GetPassFieldArrays);

	Nan::SetPrototypeMethod(tpl, "GetPassPointArrays", GetPassPointArrays);
	Nan::SetPrototypeMethod(tpl, "getPassPointArrays", GetPassPointArrays);

	Nan::SetPrototypeMethod(tpl, "GetPromoteOutputArrays", GetPromoteOutputArrays);
	Nan::SetPrototypeMethod(tpl, "getPromoteOutputArrays", GetPromoteOutputArrays);

	Nan::SetPrototypeMethod(tpl, "GetSource", GetSource);
	Nan::SetPrototypeMethod(tpl, "getSource", GetSource);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PassCellArraysOff", PassCellArraysOff);
	Nan::SetPrototypeMethod(tpl, "passCellArraysOff", PassCellArraysOff);

	Nan::SetPrototypeMethod(tpl, "PassCellArraysOn", PassCellArraysOn);
	Nan::SetPrototypeMethod(tpl, "passCellArraysOn", PassCellArraysOn);

	Nan::SetPrototypeMethod(tpl, "PassFieldArraysOff", PassFieldArraysOff);
	Nan::SetPrototypeMethod(tpl, "passFieldArraysOff", PassFieldArraysOff);

	Nan::SetPrototypeMethod(tpl, "PassFieldArraysOn", PassFieldArraysOn);
	Nan::SetPrototypeMethod(tpl, "passFieldArraysOn", PassFieldArraysOn);

	Nan::SetPrototypeMethod(tpl, "PassPointArraysOff", PassPointArraysOff);
	Nan::SetPrototypeMethod(tpl, "passPointArraysOff", PassPointArraysOff);

	Nan::SetPrototypeMethod(tpl, "PassPointArraysOn", PassPointArraysOn);
	Nan::SetPrototypeMethod(tpl, "passPointArraysOn", PassPointArraysOn);

	Nan::SetPrototypeMethod(tpl, "PromoteOutputArraysOff", PromoteOutputArraysOff);
	Nan::SetPrototypeMethod(tpl, "promoteOutputArraysOff", PromoteOutputArraysOff);

	Nan::SetPrototypeMethod(tpl, "PromoteOutputArraysOn", PromoteOutputArraysOn);
	Nan::SetPrototypeMethod(tpl, "promoteOutputArraysOn", PromoteOutputArraysOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetKernel", SetKernel);
	Nan::SetPrototypeMethod(tpl, "setKernel", SetKernel);

	Nan::SetPrototypeMethod(tpl, "SetLocator", SetLocator);
	Nan::SetPrototypeMethod(tpl, "setLocator", SetLocator);

	Nan::SetPrototypeMethod(tpl, "SetNullPointsStrategy", SetNullPointsStrategy);
	Nan::SetPrototypeMethod(tpl, "setNullPointsStrategy", SetNullPointsStrategy);

	Nan::SetPrototypeMethod(tpl, "SetNullPointsStrategyToClosestPoint", SetNullPointsStrategyToClosestPoint);
	Nan::SetPrototypeMethod(tpl, "setNullPointsStrategyToClosestPoint", SetNullPointsStrategyToClosestPoint);

	Nan::SetPrototypeMethod(tpl, "SetNullPointsStrategyToMaskPoints", SetNullPointsStrategyToMaskPoints);
	Nan::SetPrototypeMethod(tpl, "setNullPointsStrategyToMaskPoints", SetNullPointsStrategyToMaskPoints);

	Nan::SetPrototypeMethod(tpl, "SetNullPointsStrategyToNullValue", SetNullPointsStrategyToNullValue);
	Nan::SetPrototypeMethod(tpl, "setNullPointsStrategyToNullValue", SetNullPointsStrategyToNullValue);

	Nan::SetPrototypeMethod(tpl, "SetNullValue", SetNullValue);
	Nan::SetPrototypeMethod(tpl, "setNullValue", SetNullValue);

	Nan::SetPrototypeMethod(tpl, "SetPassCellArrays", SetPassCellArrays);
	Nan::SetPrototypeMethod(tpl, "setPassCellArrays", SetPassCellArrays);

	Nan::SetPrototypeMethod(tpl, "SetPassFieldArrays", SetPassFieldArrays);
	Nan::SetPrototypeMethod(tpl, "setPassFieldArrays", SetPassFieldArrays);

	Nan::SetPrototypeMethod(tpl, "SetPassPointArrays", SetPassPointArrays);
	Nan::SetPrototypeMethod(tpl, "setPassPointArrays", SetPassPointArrays);

	Nan::SetPrototypeMethod(tpl, "SetPromoteOutputArrays", SetPromoteOutputArrays);
	Nan::SetPrototypeMethod(tpl, "setPromoteOutputArrays", SetPromoteOutputArrays);

	Nan::SetPrototypeMethod(tpl, "SetSourceConnection", SetSourceConnection);
	Nan::SetPrototypeMethod(tpl, "setSourceConnection", SetSourceConnection);

	Nan::SetPrototypeMethod(tpl, "SetSourceData", SetSourceData);
	Nan::SetPrototypeMethod(tpl, "setSourceData", SetSourceData);

#ifdef VTK_NODE_PLUS_VTKPOINTINTERPOLATORWRAP_INITPTPL
	VTK_NODE_PLUS_VTKPOINTINTERPOLATORWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkPointInterpolatorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkPointInterpolator> native = vtkSmartPointer<vtkPointInterpolator>::New();
		VtkPointInterpolatorWrap* obj = new VtkPointInterpolatorWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkPointInterpolatorWrap::ClearExcludedArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ClearExcludedArrays();
}

void VtkPointInterpolatorWrap::GetExcludedArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetExcludedArray(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointInterpolatorWrap::GetKernel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	vtkInterpolationKernel * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetKernel();
	VtkInterpolationKernelWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInterpolationKernelWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInterpolationKernelWrap *w = new VtkInterpolationKernelWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPointInterpolatorWrap::GetLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	vtkAbstractPointLocator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLocator();
	VtkAbstractPointLocatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAbstractPointLocatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAbstractPointLocatorWrap *w = new VtkAbstractPointLocatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPointInterpolatorWrap::GetNullPointsStrategy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNullPointsStrategy();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointInterpolatorWrap::GetNullValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNullValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointInterpolatorWrap::GetNumberOfExcludedArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfExcludedArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointInterpolatorWrap::GetPassCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPassCellArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointInterpolatorWrap::GetPassFieldArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPassFieldArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointInterpolatorWrap::GetPassPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPassPointArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointInterpolatorWrap::GetPromoteOutputArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPromoteOutputArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointInterpolatorWrap::GetSource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	vtkDataObject * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSource();
	VtkDataObjectWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataObjectWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataObjectWrap *w = new VtkDataObjectWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPointInterpolatorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	vtkPointInterpolator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkPointInterpolatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPointInterpolatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPointInterpolatorWrap *w = new VtkPointInterpolatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPointInterpolatorWrap::PassCellArraysOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PassCellArraysOff();
}

void VtkPointInterpolatorWrap::PassCellArraysOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PassCellArraysOn();
}

void VtkPointInterpolatorWrap::PassFieldArraysOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PassFieldArraysOff();
}

void VtkPointInterpolatorWrap::PassFieldArraysOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PassFieldArraysOn();
}

void VtkPointInterpolatorWrap::PassPointArraysOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PassPointArraysOff();
}

void VtkPointInterpolatorWrap::PassPointArraysOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PassPointArraysOn();
}

void VtkPointInterpolatorWrap::PromoteOutputArraysOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PromoteOutputArraysOff();
}

void VtkPointInterpolatorWrap::PromoteOutputArraysOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PromoteOutputArraysOn();
}

void VtkPointInterpolatorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkPointInterpolator * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkPointInterpolatorWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkPointInterpolatorWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPointInterpolatorWrap *w = new VtkPointInterpolatorWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointInterpolatorWrap::SetKernel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInterpolationKernelWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInterpolationKernelWrap *a0 = ObjectWrap::Unwrap<VtkInterpolationKernelWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernel(
			(vtkInterpolationKernel *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointInterpolatorWrap::SetLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractPointLocatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractPointLocatorWrap *a0 = ObjectWrap::Unwrap<VtkAbstractPointLocatorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLocator(
			(vtkAbstractPointLocator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointInterpolatorWrap::SetNullPointsStrategy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNullPointsStrategy(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointInterpolatorWrap::SetNullPointsStrategyToClosestPoint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetNullPointsStrategyToClosestPoint();
}

void VtkPointInterpolatorWrap::SetNullPointsStrategyToMaskPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetNullPointsStrategyToMaskPoints();
}

void VtkPointInterpolatorWrap::SetNullPointsStrategyToNullValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetNullPointsStrategyToNullValue();
}

void VtkPointInterpolatorWrap::SetNullValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNullValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointInterpolatorWrap::SetPassCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPassCellArrays(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointInterpolatorWrap::SetPassFieldArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPassFieldArrays(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointInterpolatorWrap::SetPassPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPassPointArrays(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointInterpolatorWrap::SetPromoteOutputArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPromoteOutputArrays(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointInterpolatorWrap::SetSourceConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAlgorithmOutputWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSourceConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointInterpolatorWrap::SetSourceData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkPointInterpolatorWrap>(info.Holder());
	vtkPointInterpolator *native = (vtkPointInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSourceData(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

