/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkDepthImageToPointCloudWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkCameraWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkDepthImageToPointCloudWrap::ptpl;

VtkDepthImageToPointCloudWrap::VtkDepthImageToPointCloudWrap()
{ }

VtkDepthImageToPointCloudWrap::VtkDepthImageToPointCloudWrap(vtkSmartPointer<vtkDepthImageToPointCloud> _native)
{ native = _native; }

VtkDepthImageToPointCloudWrap::~VtkDepthImageToPointCloudWrap()
{ }

void VtkDepthImageToPointCloudWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkDepthImageToPointCloud").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("DepthImageToPointCloud").ToLocalChecked(), ConstructorGetter);
}

void VtkDepthImageToPointCloudWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkDepthImageToPointCloudWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkDepthImageToPointCloudWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CullFarPointsOff", CullFarPointsOff);
	Nan::SetPrototypeMethod(tpl, "cullFarPointsOff", CullFarPointsOff);

	Nan::SetPrototypeMethod(tpl, "CullFarPointsOn", CullFarPointsOn);
	Nan::SetPrototypeMethod(tpl, "cullFarPointsOn", CullFarPointsOn);

	Nan::SetPrototypeMethod(tpl, "CullNearPointsOff", CullNearPointsOff);
	Nan::SetPrototypeMethod(tpl, "cullNearPointsOff", CullNearPointsOff);

	Nan::SetPrototypeMethod(tpl, "CullNearPointsOn", CullNearPointsOn);
	Nan::SetPrototypeMethod(tpl, "cullNearPointsOn", CullNearPointsOn);

	Nan::SetPrototypeMethod(tpl, "GetCamera", GetCamera);
	Nan::SetPrototypeMethod(tpl, "getCamera", GetCamera);

	Nan::SetPrototypeMethod(tpl, "GetCullFarPoints", GetCullFarPoints);
	Nan::SetPrototypeMethod(tpl, "getCullFarPoints", GetCullFarPoints);

	Nan::SetPrototypeMethod(tpl, "GetCullNearPoints", GetCullNearPoints);
	Nan::SetPrototypeMethod(tpl, "getCullNearPoints", GetCullNearPoints);

	Nan::SetPrototypeMethod(tpl, "GetOutputPointsPrecision", GetOutputPointsPrecision);
	Nan::SetPrototypeMethod(tpl, "getOutputPointsPrecision", GetOutputPointsPrecision);

	Nan::SetPrototypeMethod(tpl, "GetProduceColorScalars", GetProduceColorScalars);
	Nan::SetPrototypeMethod(tpl, "getProduceColorScalars", GetProduceColorScalars);

	Nan::SetPrototypeMethod(tpl, "GetProduceVertexCellArray", GetProduceVertexCellArray);
	Nan::SetPrototypeMethod(tpl, "getProduceVertexCellArray", GetProduceVertexCellArray);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ProduceColorScalarsOff", ProduceColorScalarsOff);
	Nan::SetPrototypeMethod(tpl, "produceColorScalarsOff", ProduceColorScalarsOff);

	Nan::SetPrototypeMethod(tpl, "ProduceColorScalarsOn", ProduceColorScalarsOn);
	Nan::SetPrototypeMethod(tpl, "produceColorScalarsOn", ProduceColorScalarsOn);

	Nan::SetPrototypeMethod(tpl, "ProduceVertexCellArrayOff", ProduceVertexCellArrayOff);
	Nan::SetPrototypeMethod(tpl, "produceVertexCellArrayOff", ProduceVertexCellArrayOff);

	Nan::SetPrototypeMethod(tpl, "ProduceVertexCellArrayOn", ProduceVertexCellArrayOn);
	Nan::SetPrototypeMethod(tpl, "produceVertexCellArrayOn", ProduceVertexCellArrayOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCamera", SetCamera);
	Nan::SetPrototypeMethod(tpl, "setCamera", SetCamera);

	Nan::SetPrototypeMethod(tpl, "SetCullFarPoints", SetCullFarPoints);
	Nan::SetPrototypeMethod(tpl, "setCullFarPoints", SetCullFarPoints);

	Nan::SetPrototypeMethod(tpl, "SetCullNearPoints", SetCullNearPoints);
	Nan::SetPrototypeMethod(tpl, "setCullNearPoints", SetCullNearPoints);

	Nan::SetPrototypeMethod(tpl, "SetOutputPointsPrecision", SetOutputPointsPrecision);
	Nan::SetPrototypeMethod(tpl, "setOutputPointsPrecision", SetOutputPointsPrecision);

	Nan::SetPrototypeMethod(tpl, "SetProduceColorScalars", SetProduceColorScalars);
	Nan::SetPrototypeMethod(tpl, "setProduceColorScalars", SetProduceColorScalars);

	Nan::SetPrototypeMethod(tpl, "SetProduceVertexCellArray", SetProduceVertexCellArray);
	Nan::SetPrototypeMethod(tpl, "setProduceVertexCellArray", SetProduceVertexCellArray);

#ifdef VTK_NODE_PLUS_VTKDEPTHIMAGETOPOINTCLOUDWRAP_INITPTPL
	VTK_NODE_PLUS_VTKDEPTHIMAGETOPOINTCLOUDWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkDepthImageToPointCloudWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkDepthImageToPointCloud> native = vtkSmartPointer<vtkDepthImageToPointCloud>::New();
		VtkDepthImageToPointCloudWrap* obj = new VtkDepthImageToPointCloudWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkDepthImageToPointCloudWrap::CullFarPointsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CullFarPointsOff();
}

void VtkDepthImageToPointCloudWrap::CullFarPointsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CullFarPointsOn();
}

void VtkDepthImageToPointCloudWrap::CullNearPointsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CullNearPointsOff();
}

void VtkDepthImageToPointCloudWrap::CullNearPointsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CullNearPointsOn();
}

void VtkDepthImageToPointCloudWrap::GetCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	vtkCamera * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCamera();
	VtkCameraWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCameraWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCameraWrap *w = new VtkCameraWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDepthImageToPointCloudWrap::GetCullFarPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCullFarPoints();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDepthImageToPointCloudWrap::GetCullNearPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCullNearPoints();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDepthImageToPointCloudWrap::GetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputPointsPrecision();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDepthImageToPointCloudWrap::GetProduceColorScalars(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProduceColorScalars();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDepthImageToPointCloudWrap::GetProduceVertexCellArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProduceVertexCellArray();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDepthImageToPointCloudWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	vtkDepthImageToPointCloud * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkDepthImageToPointCloudWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDepthImageToPointCloudWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDepthImageToPointCloudWrap *w = new VtkDepthImageToPointCloudWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDepthImageToPointCloudWrap::ProduceColorScalarsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ProduceColorScalarsOff();
}

void VtkDepthImageToPointCloudWrap::ProduceColorScalarsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ProduceColorScalarsOn();
}

void VtkDepthImageToPointCloudWrap::ProduceVertexCellArrayOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ProduceVertexCellArrayOff();
}

void VtkDepthImageToPointCloudWrap::ProduceVertexCellArrayOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ProduceVertexCellArrayOn();
}

void VtkDepthImageToPointCloudWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkDepthImageToPointCloud * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkDepthImageToPointCloudWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkDepthImageToPointCloudWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDepthImageToPointCloudWrap *w = new VtkDepthImageToPointCloudWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDepthImageToPointCloudWrap::SetCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkCameraWrap::ptpl))->HasInstance(info[0]))
	{
		VtkCameraWrap *a0 = ObjectWrap::Unwrap<VtkCameraWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCamera(
			(vtkCamera *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDepthImageToPointCloudWrap::SetCullFarPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCullFarPoints(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDepthImageToPointCloudWrap::SetCullNearPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCullNearPoints(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDepthImageToPointCloudWrap::SetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputPointsPrecision(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDepthImageToPointCloudWrap::SetProduceColorScalars(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProduceColorScalars(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDepthImageToPointCloudWrap::SetProduceVertexCellArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDepthImageToPointCloudWrap *wrapper = ObjectWrap::Unwrap<VtkDepthImageToPointCloudWrap>(info.Holder());
	vtkDepthImageToPointCloud *native = (vtkDepthImageToPointCloud *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProduceVertexCellArray(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

