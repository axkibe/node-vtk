/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkInterpolationKernelWrap.h"
#include "vtkGeneralizedKernelWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkGeneralizedKernelWrap::ptpl;

VtkGeneralizedKernelWrap::VtkGeneralizedKernelWrap()
{ }

VtkGeneralizedKernelWrap::VtkGeneralizedKernelWrap(vtkSmartPointer<vtkGeneralizedKernel> _native)
{ native = _native; }

VtkGeneralizedKernelWrap::~VtkGeneralizedKernelWrap()
{ }

void VtkGeneralizedKernelWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkGeneralizedKernel").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("GeneralizedKernel").ToLocalChecked(), ConstructorGetter);
}

void VtkGeneralizedKernelWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkGeneralizedKernelWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkInterpolationKernelWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkInterpolationKernelWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkGeneralizedKernelWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetKernelFootprint", GetKernelFootprint);
	Nan::SetPrototypeMethod(tpl, "getKernelFootprint", GetKernelFootprint);

	Nan::SetPrototypeMethod(tpl, "GetNormalizeWeights", GetNormalizeWeights);
	Nan::SetPrototypeMethod(tpl, "getNormalizeWeights", GetNormalizeWeights);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPoints", GetNumberOfPoints);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPoints", GetNumberOfPoints);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPointsMaxValue", GetNumberOfPointsMaxValue);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPointsMaxValue", GetNumberOfPointsMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPointsMinValue", GetNumberOfPointsMinValue);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPointsMinValue", GetNumberOfPointsMinValue);

	Nan::SetPrototypeMethod(tpl, "GetRadius", GetRadius);
	Nan::SetPrototypeMethod(tpl, "getRadius", GetRadius);

	Nan::SetPrototypeMethod(tpl, "GetRadiusMaxValue", GetRadiusMaxValue);
	Nan::SetPrototypeMethod(tpl, "getRadiusMaxValue", GetRadiusMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetRadiusMinValue", GetRadiusMinValue);
	Nan::SetPrototypeMethod(tpl, "getRadiusMinValue", GetRadiusMinValue);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "NormalizeWeightsOff", NormalizeWeightsOff);
	Nan::SetPrototypeMethod(tpl, "normalizeWeightsOff", NormalizeWeightsOff);

	Nan::SetPrototypeMethod(tpl, "NormalizeWeightsOn", NormalizeWeightsOn);
	Nan::SetPrototypeMethod(tpl, "normalizeWeightsOn", NormalizeWeightsOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetKernelFootprint", SetKernelFootprint);
	Nan::SetPrototypeMethod(tpl, "setKernelFootprint", SetKernelFootprint);

	Nan::SetPrototypeMethod(tpl, "SetKernelFootprintToNClosest", SetKernelFootprintToNClosest);
	Nan::SetPrototypeMethod(tpl, "setKernelFootprintToNClosest", SetKernelFootprintToNClosest);

	Nan::SetPrototypeMethod(tpl, "SetKernelFootprintToRadius", SetKernelFootprintToRadius);
	Nan::SetPrototypeMethod(tpl, "setKernelFootprintToRadius", SetKernelFootprintToRadius);

	Nan::SetPrototypeMethod(tpl, "SetNormalizeWeights", SetNormalizeWeights);
	Nan::SetPrototypeMethod(tpl, "setNormalizeWeights", SetNormalizeWeights);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfPoints", SetNumberOfPoints);
	Nan::SetPrototypeMethod(tpl, "setNumberOfPoints", SetNumberOfPoints);

	Nan::SetPrototypeMethod(tpl, "SetRadius", SetRadius);
	Nan::SetPrototypeMethod(tpl, "setRadius", SetRadius);

#ifdef VTK_NODE_PLUS_VTKGENERALIZEDKERNELWRAP_INITPTPL
	VTK_NODE_PLUS_VTKGENERALIZEDKERNELWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkGeneralizedKernelWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkGeneralizedKernelWrap::GetKernelFootprint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetKernelFootprint();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeneralizedKernelWrap::GetNormalizeWeights(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormalizeWeights();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeneralizedKernelWrap::GetNumberOfPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPoints();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeneralizedKernelWrap::GetNumberOfPointsMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPointsMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeneralizedKernelWrap::GetNumberOfPointsMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPointsMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeneralizedKernelWrap::GetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeneralizedKernelWrap::GetRadiusMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadiusMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeneralizedKernelWrap::GetRadiusMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadiusMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGeneralizedKernelWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	vtkGeneralizedKernel * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkGeneralizedKernelWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkGeneralizedKernelWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGeneralizedKernelWrap *w = new VtkGeneralizedKernelWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGeneralizedKernelWrap::NormalizeWeightsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalizeWeightsOff();
}

void VtkGeneralizedKernelWrap::NormalizeWeightsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalizeWeightsOn();
}

void VtkGeneralizedKernelWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkGeneralizedKernel * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkGeneralizedKernelWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkGeneralizedKernelWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkGeneralizedKernelWrap *w = new VtkGeneralizedKernelWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeneralizedKernelWrap::SetKernelFootprint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKernelFootprint(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeneralizedKernelWrap::SetKernelFootprintToNClosest(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetKernelFootprintToNClosest();
}

void VtkGeneralizedKernelWrap::SetKernelFootprintToRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetKernelFootprintToRadius();
}

void VtkGeneralizedKernelWrap::SetNormalizeWeights(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalizeWeights(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeneralizedKernelWrap::SetNumberOfPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfPoints(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGeneralizedKernelWrap::SetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGeneralizedKernelWrap *wrapper = ObjectWrap::Unwrap<VtkGeneralizedKernelWrap>(info.Holder());
	vtkGeneralizedKernel *native = (vtkGeneralizedKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

