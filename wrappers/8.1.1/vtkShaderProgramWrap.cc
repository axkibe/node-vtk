/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkObjectWrap.h"
#include "vtkShaderProgramWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkShaderWrap.h"
#include "vtkWindowWrap.h"
#include "vtkMatrix3x3Wrap.h"
#include "vtkMatrix4x4Wrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkShaderProgramWrap::ptpl;

VtkShaderProgramWrap::VtkShaderProgramWrap()
{ }

VtkShaderProgramWrap::VtkShaderProgramWrap(vtkSmartPointer<vtkShaderProgram> _native)
{ native = _native; }

VtkShaderProgramWrap::~VtkShaderProgramWrap()
{ }

void VtkShaderProgramWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkShaderProgram").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ShaderProgram").ToLocalChecked(), ConstructorGetter);
}

void VtkShaderProgramWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkShaderProgramWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkShaderProgramWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CompiledOff", CompiledOff);
	Nan::SetPrototypeMethod(tpl, "compiledOff", CompiledOff);

	Nan::SetPrototypeMethod(tpl, "CompiledOn", CompiledOn);
	Nan::SetPrototypeMethod(tpl, "compiledOn", CompiledOn);

	Nan::SetPrototypeMethod(tpl, "DisableAttributeArray", DisableAttributeArray);
	Nan::SetPrototypeMethod(tpl, "disableAttributeArray", DisableAttributeArray);

	Nan::SetPrototypeMethod(tpl, "EnableAttributeArray", EnableAttributeArray);
	Nan::SetPrototypeMethod(tpl, "enableAttributeArray", EnableAttributeArray);

	Nan::SetPrototypeMethod(tpl, "GetCompiled", GetCompiled);
	Nan::SetPrototypeMethod(tpl, "getCompiled", GetCompiled);

	Nan::SetPrototypeMethod(tpl, "GetFileNamePrefixForDebugging", GetFileNamePrefixForDebugging);
	Nan::SetPrototypeMethod(tpl, "getFileNamePrefixForDebugging", GetFileNamePrefixForDebugging);

	Nan::SetPrototypeMethod(tpl, "GetFragmentShader", GetFragmentShader);
	Nan::SetPrototypeMethod(tpl, "getFragmentShader", GetFragmentShader);

	Nan::SetPrototypeMethod(tpl, "GetGeometryShader", GetGeometryShader);
	Nan::SetPrototypeMethod(tpl, "getGeometryShader", GetGeometryShader);

	Nan::SetPrototypeMethod(tpl, "GetHandle", GetHandle);
	Nan::SetPrototypeMethod(tpl, "getHandle", GetHandle);

	Nan::SetPrototypeMethod(tpl, "GetVertexShader", GetVertexShader);
	Nan::SetPrototypeMethod(tpl, "getVertexShader", GetVertexShader);

	Nan::SetPrototypeMethod(tpl, "IsAttributeUsed", IsAttributeUsed);
	Nan::SetPrototypeMethod(tpl, "isAttributeUsed", IsAttributeUsed);

	Nan::SetPrototypeMethod(tpl, "IsUniformUsed", IsUniformUsed);
	Nan::SetPrototypeMethod(tpl, "isUniformUsed", IsUniformUsed);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCompiled", SetCompiled);
	Nan::SetPrototypeMethod(tpl, "setCompiled", SetCompiled);

	Nan::SetPrototypeMethod(tpl, "SetFileNamePrefixForDebugging", SetFileNamePrefixForDebugging);
	Nan::SetPrototypeMethod(tpl, "setFileNamePrefixForDebugging", SetFileNamePrefixForDebugging);

	Nan::SetPrototypeMethod(tpl, "SetFragmentShader", SetFragmentShader);
	Nan::SetPrototypeMethod(tpl, "setFragmentShader", SetFragmentShader);

	Nan::SetPrototypeMethod(tpl, "SetGeometryShader", SetGeometryShader);
	Nan::SetPrototypeMethod(tpl, "setGeometryShader", SetGeometryShader);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfOutputs", SetNumberOfOutputs);
	Nan::SetPrototypeMethod(tpl, "setNumberOfOutputs", SetNumberOfOutputs);

	Nan::SetPrototypeMethod(tpl, "SetUniform2f", SetUniform2f);
	Nan::SetPrototypeMethod(tpl, "setUniform2f", SetUniform2f);

	Nan::SetPrototypeMethod(tpl, "SetUniform2i", SetUniform2i);
	Nan::SetPrototypeMethod(tpl, "setUniform2i", SetUniform2i);

	Nan::SetPrototypeMethod(tpl, "SetUniform3f", SetUniform3f);
	Nan::SetPrototypeMethod(tpl, "setUniform3f", SetUniform3f);

	Nan::SetPrototypeMethod(tpl, "SetUniform3uc", SetUniform3uc);
	Nan::SetPrototypeMethod(tpl, "setUniform3uc", SetUniform3uc);

	Nan::SetPrototypeMethod(tpl, "SetUniform4f", SetUniform4f);
	Nan::SetPrototypeMethod(tpl, "setUniform4f", SetUniform4f);

	Nan::SetPrototypeMethod(tpl, "SetUniform4uc", SetUniform4uc);
	Nan::SetPrototypeMethod(tpl, "setUniform4uc", SetUniform4uc);

	Nan::SetPrototypeMethod(tpl, "SetUniformMatrix", SetUniformMatrix);
	Nan::SetPrototypeMethod(tpl, "setUniformMatrix", SetUniformMatrix);

	Nan::SetPrototypeMethod(tpl, "SetUniformf", SetUniformf);
	Nan::SetPrototypeMethod(tpl, "setUniformf", SetUniformf);

	Nan::SetPrototypeMethod(tpl, "SetUniformi", SetUniformi);
	Nan::SetPrototypeMethod(tpl, "setUniformi", SetUniformi);

	Nan::SetPrototypeMethod(tpl, "SetVertexShader", SetVertexShader);
	Nan::SetPrototypeMethod(tpl, "setVertexShader", SetVertexShader);

	Nan::SetPrototypeMethod(tpl, "isBound", isBound);
	Nan::SetPrototypeMethod(tpl, "isBound", isBound);

#ifdef VTK_NODE_PLUS_VTKSHADERPROGRAMWRAP_INITPTPL
	VTK_NODE_PLUS_VTKSHADERPROGRAMWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkShaderProgramWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkShaderProgram> native = vtkSmartPointer<vtkShaderProgram>::New();
		VtkShaderProgramWrap* obj = new VtkShaderProgramWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkShaderProgramWrap::CompiledOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CompiledOff();
}

void VtkShaderProgramWrap::CompiledOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CompiledOn();
}

void VtkShaderProgramWrap::DisableAttributeArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		bool r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->DisableAttributeArray(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::EnableAttributeArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		bool r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->EnableAttributeArray(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::GetCompiled(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCompiled();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkShaderProgramWrap::GetFileNamePrefixForDebugging(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileNamePrefixForDebugging();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkShaderProgramWrap::GetFragmentShader(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	vtkShader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFragmentShader();
	VtkShaderWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkShaderWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkShaderWrap *w = new VtkShaderWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkShaderProgramWrap::GetGeometryShader(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	vtkShader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGeometryShader();
	VtkShaderWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkShaderWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkShaderWrap *w = new VtkShaderWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkShaderProgramWrap::GetHandle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHandle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkShaderProgramWrap::GetVertexShader(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	vtkShader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVertexShader();
	VtkShaderWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkShaderWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkShaderWrap *w = new VtkShaderWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkShaderProgramWrap::IsAttributeUsed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		bool r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsAttributeUsed(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::IsUniformUsed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		bool r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsUniformUsed(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	vtkShaderProgram * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkShaderProgramWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkShaderProgramWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkShaderProgramWrap *w = new VtkShaderProgramWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkShaderProgramWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkShaderProgram * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkShaderProgramWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkShaderProgramWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkShaderProgramWrap *w = new VtkShaderProgramWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetCompiled(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCompiled(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetFileNamePrefixForDebugging(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileNamePrefixForDebugging(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetFragmentShader(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkShaderWrap::ptpl))->HasInstance(info[0]))
	{
		VtkShaderWrap *a0 = ObjectWrap::Unwrap<VtkShaderWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFragmentShader(
			(vtkShader *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetGeometryShader(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkShaderWrap::ptpl))->HasInstance(info[0]))
	{
		VtkShaderWrap *a0 = ObjectWrap::Unwrap<VtkShaderWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGeometryShader(
			(vtkShader *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetNumberOfOutputs(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsUint32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfOutputs(
			info[0]->Uint32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetUniform2f(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsFloat32Array())
		{
			v8::Local<v8::Float32Array>a1(v8::Local<v8::Float32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 2 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform2f(
				*a0,
				(float *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			float b1[2];
			if( a1->Length() < 2 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 2; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform2f(
				*a0,
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetUniform2i(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32Array())
		{
			v8::Local<v8::Int32Array>a1(v8::Local<v8::Int32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 2 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform2i(
				*a0,
				(int *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			int b1[2];
			if( a1->Length() < 2 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 2; i++ )
			{
				if( !a1->Get(i)->IsInt32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Int32Value();
			}
			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform2i(
				*a0,
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetUniform3f(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsFloat64Array())
		{
			v8::Local<v8::Float64Array>a1(v8::Local<v8::Float64Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform3f(
				*a0,
				(double *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			double b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform3f(
				*a0,
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsFloat32Array())
		{
			v8::Local<v8::Float32Array>a1(v8::Local<v8::Float32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform3f(
				*a0,
				(float *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			float b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform3f(
				*a0,
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetUniform3uc(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsUint8Array())
		{
			v8::Local<v8::Uint8Array>a1(v8::Local<v8::Uint8Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform3uc(
				*a0,
				(unsigned char *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			unsigned char b1[3];
			if( a1->Length() < 3 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 3; i++ )
			{
				if( !a1->Get(i)->IsUint32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Uint32Value();
			}
			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform3uc(
				*a0,
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetUniform4f(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsFloat32Array())
		{
			v8::Local<v8::Float32Array>a1(v8::Local<v8::Float32Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 4 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform4f(
				*a0,
				(float *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			float b1[4];
			if( a1->Length() < 4 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 4; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform4f(
				*a0,
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetUniform4uc(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsUint8Array())
		{
			v8::Local<v8::Uint8Array>a1(v8::Local<v8::Uint8Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 4 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform4uc(
				*a0,
				(unsigned char *)(a1->Buffer()->GetContents().Data())
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			unsigned char b1[4];
			if( a1->Length() < 4 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 4; i++ )
			{
				if( !a1->Get(i)->IsUint32() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->Uint32Value();
			}
			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniform4uc(
				*a0,
				b1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetUniformMatrix(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkMatrix4x4Wrap::ptpl))->HasInstance(info[1]))
		{
			VtkMatrix4x4Wrap *a1 = ObjectWrap::Unwrap<VtkMatrix4x4Wrap>(info[1]->ToObject());
			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniformMatrix(
				*a0,
				(vtkMatrix4x4 *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkMatrix3x3Wrap::ptpl))->HasInstance(info[1]))
		{
			VtkMatrix3x3Wrap *a1 = ObjectWrap::Unwrap<VtkMatrix3x3Wrap>(info[1]->ToObject());
			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniformMatrix(
				*a0,
				(vtkMatrix3x3 *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetUniformf(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniformf(
				*a0,
				info[1]->NumberValue()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetUniformi(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetUniformi(
				*a0,
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::SetVertexShader(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkShaderWrap::ptpl))->HasInstance(info[0]))
	{
		VtkShaderWrap *a0 = ObjectWrap::Unwrap<VtkShaderWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVertexShader(
			(vtkShader *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkShaderProgramWrap::isBound(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkShaderProgramWrap *wrapper = ObjectWrap::Unwrap<VtkShaderProgramWrap>(info.Holder());
	vtkShaderProgram *native = (vtkShaderProgram *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->isBound();
	info.GetReturnValue().Set(Nan::New(r));
}

