/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkTreeAreaViewWrap.h"
#include "vtkTreeMapViewWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkAreaLayoutStrategyWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkTreeMapViewWrap::ptpl;

VtkTreeMapViewWrap::VtkTreeMapViewWrap()
{ }

VtkTreeMapViewWrap::VtkTreeMapViewWrap(vtkSmartPointer<vtkTreeMapView> _native)
{ native = _native; }

VtkTreeMapViewWrap::~VtkTreeMapViewWrap()
{ }

void VtkTreeMapViewWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkTreeMapView").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("TreeMapView").ToLocalChecked(), ConstructorGetter);
}

void VtkTreeMapViewWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkTreeMapViewWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkTreeAreaViewWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkTreeAreaViewWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkTreeMapViewWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetFontSizeRange", GetFontSizeRange);
	Nan::SetPrototypeMethod(tpl, "getFontSizeRange", GetFontSizeRange);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetFontSizeRange", SetFontSizeRange);
	Nan::SetPrototypeMethod(tpl, "setFontSizeRange", SetFontSizeRange);

	Nan::SetPrototypeMethod(tpl, "SetLayoutStrategy", SetLayoutStrategy);
	Nan::SetPrototypeMethod(tpl, "setLayoutStrategy", SetLayoutStrategy);

	Nan::SetPrototypeMethod(tpl, "SetLayoutStrategyToBox", SetLayoutStrategyToBox);
	Nan::SetPrototypeMethod(tpl, "setLayoutStrategyToBox", SetLayoutStrategyToBox);

	Nan::SetPrototypeMethod(tpl, "SetLayoutStrategyToSliceAndDice", SetLayoutStrategyToSliceAndDice);
	Nan::SetPrototypeMethod(tpl, "setLayoutStrategyToSliceAndDice", SetLayoutStrategyToSliceAndDice);

	Nan::SetPrototypeMethod(tpl, "SetLayoutStrategyToSquarify", SetLayoutStrategyToSquarify);
	Nan::SetPrototypeMethod(tpl, "setLayoutStrategyToSquarify", SetLayoutStrategyToSquarify);

#ifdef VTK_NODE_PLUS_VTKTREEMAPVIEWWRAP_INITPTPL
	VTK_NODE_PLUS_VTKTREEMAPVIEWWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkTreeMapViewWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkTreeMapView> native = vtkSmartPointer<vtkTreeMapView>::New();
		VtkTreeMapViewWrap* obj = new VtkTreeMapViewWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkTreeMapViewWrap::GetFontSizeRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeMapViewWrap *wrapper = ObjectWrap::Unwrap<VtkTreeMapViewWrap>(info.Holder());
	vtkTreeMapView *native = (vtkTreeMapView *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetFontSizeRange(
			(int *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetFontSizeRange(
			b0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTreeMapViewWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeMapViewWrap *wrapper = ObjectWrap::Unwrap<VtkTreeMapViewWrap>(info.Holder());
	vtkTreeMapView *native = (vtkTreeMapView *)wrapper->native.GetPointer();
	vtkTreeMapView * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkTreeMapViewWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTreeMapViewWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTreeMapViewWrap *w = new VtkTreeMapViewWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkTreeMapViewWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeMapViewWrap *wrapper = ObjectWrap::Unwrap<VtkTreeMapViewWrap>(info.Holder());
	vtkTreeMapView *native = (vtkTreeMapView *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkTreeMapView * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkTreeMapViewWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkTreeMapViewWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkTreeMapViewWrap *w = new VtkTreeMapViewWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTreeMapViewWrap::SetFontSizeRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeMapViewWrap *wrapper = ObjectWrap::Unwrap<VtkTreeMapViewWrap>(info.Holder());
	vtkTreeMapView *native = (vtkTreeMapView *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetFontSizeRange(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTreeMapViewWrap::SetLayoutStrategy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeMapViewWrap *wrapper = ObjectWrap::Unwrap<VtkTreeMapViewWrap>(info.Holder());
	vtkTreeMapView *native = (vtkTreeMapView *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLayoutStrategy(
			*a0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAreaLayoutStrategyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAreaLayoutStrategyWrap *a0 = ObjectWrap::Unwrap<VtkAreaLayoutStrategyWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLayoutStrategy(
			(vtkAreaLayoutStrategy *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTreeMapViewWrap::SetLayoutStrategyToBox(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeMapViewWrap *wrapper = ObjectWrap::Unwrap<VtkTreeMapViewWrap>(info.Holder());
	vtkTreeMapView *native = (vtkTreeMapView *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetLayoutStrategyToBox();
}

void VtkTreeMapViewWrap::SetLayoutStrategyToSliceAndDice(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeMapViewWrap *wrapper = ObjectWrap::Unwrap<VtkTreeMapViewWrap>(info.Holder());
	vtkTreeMapView *native = (vtkTreeMapView *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetLayoutStrategyToSliceAndDice();
}

void VtkTreeMapViewWrap::SetLayoutStrategyToSquarify(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTreeMapViewWrap *wrapper = ObjectWrap::Unwrap<VtkTreeMapViewWrap>(info.Holder());
	vtkTreeMapView *native = (vtkTreeMapView *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetLayoutStrategyToSquarify();
}

