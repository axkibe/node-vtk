/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKPOINTCLOUDFILTERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKPOINTCLOUDFILTERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkPointCloudFilter.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "../../plus/plus.h"

class VtkPointCloudFilterWrap : public VtkPolyDataAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkPointCloudFilterWrap(vtkSmartPointer<vtkPointCloudFilter>);
		VtkPointCloudFilterWrap();
		~VtkPointCloudFilterWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GenerateOutliersOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GenerateOutliersOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GenerateVerticesOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GenerateVerticesOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGenerateOutliers(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGenerateVertices(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGenerateOutliers(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGenerateVertices(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKPOINTCLOUDFILTERWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKPOINTCLOUDFILTERWRAP_CLASSDEF
#endif
};

#endif
