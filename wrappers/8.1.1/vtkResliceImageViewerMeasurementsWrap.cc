/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkObjectWrap.h"
#include "vtkResliceImageViewerMeasurementsWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkAbstractWidgetWrap.h"
#include "vtkResliceImageViewerWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkResliceImageViewerMeasurementsWrap::ptpl;

VtkResliceImageViewerMeasurementsWrap::VtkResliceImageViewerMeasurementsWrap()
{ }

VtkResliceImageViewerMeasurementsWrap::VtkResliceImageViewerMeasurementsWrap(vtkSmartPointer<vtkResliceImageViewerMeasurements> _native)
{ native = _native; }

VtkResliceImageViewerMeasurementsWrap::~VtkResliceImageViewerMeasurementsWrap()
{ }

void VtkResliceImageViewerMeasurementsWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkResliceImageViewerMeasurements").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ResliceImageViewerMeasurements").ToLocalChecked(), ConstructorGetter);
}

void VtkResliceImageViewerMeasurementsWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkResliceImageViewerMeasurementsWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkResliceImageViewerMeasurementsWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddItem", AddItem);
	Nan::SetPrototypeMethod(tpl, "addItem", AddItem);

	Nan::SetPrototypeMethod(tpl, "GetProcessEvents", GetProcessEvents);
	Nan::SetPrototypeMethod(tpl, "getProcessEvents", GetProcessEvents);

	Nan::SetPrototypeMethod(tpl, "GetProcessEventsMaxValue", GetProcessEventsMaxValue);
	Nan::SetPrototypeMethod(tpl, "getProcessEventsMaxValue", GetProcessEventsMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetProcessEventsMinValue", GetProcessEventsMinValue);
	Nan::SetPrototypeMethod(tpl, "getProcessEventsMinValue", GetProcessEventsMinValue);

	Nan::SetPrototypeMethod(tpl, "GetResliceImageViewer", GetResliceImageViewer);
	Nan::SetPrototypeMethod(tpl, "getResliceImageViewer", GetResliceImageViewer);

	Nan::SetPrototypeMethod(tpl, "GetTolerance", GetTolerance);
	Nan::SetPrototypeMethod(tpl, "getTolerance", GetTolerance);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ProcessEventsOff", ProcessEventsOff);
	Nan::SetPrototypeMethod(tpl, "processEventsOff", ProcessEventsOff);

	Nan::SetPrototypeMethod(tpl, "ProcessEventsOn", ProcessEventsOn);
	Nan::SetPrototypeMethod(tpl, "processEventsOn", ProcessEventsOn);

	Nan::SetPrototypeMethod(tpl, "RemoveAllItems", RemoveAllItems);
	Nan::SetPrototypeMethod(tpl, "removeAllItems", RemoveAllItems);

	Nan::SetPrototypeMethod(tpl, "RemoveItem", RemoveItem);
	Nan::SetPrototypeMethod(tpl, "removeItem", RemoveItem);

	Nan::SetPrototypeMethod(tpl, "Render", Render);
	Nan::SetPrototypeMethod(tpl, "render", Render);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetProcessEvents", SetProcessEvents);
	Nan::SetPrototypeMethod(tpl, "setProcessEvents", SetProcessEvents);

	Nan::SetPrototypeMethod(tpl, "SetResliceImageViewer", SetResliceImageViewer);
	Nan::SetPrototypeMethod(tpl, "setResliceImageViewer", SetResliceImageViewer);

	Nan::SetPrototypeMethod(tpl, "SetTolerance", SetTolerance);
	Nan::SetPrototypeMethod(tpl, "setTolerance", SetTolerance);

	Nan::SetPrototypeMethod(tpl, "Update", Update);
	Nan::SetPrototypeMethod(tpl, "update", Update);

#ifdef VTK_NODE_PLUS_VTKRESLICEIMAGEVIEWERMEASUREMENTSWRAP_INITPTPL
	VTK_NODE_PLUS_VTKRESLICEIMAGEVIEWERMEASUREMENTSWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkResliceImageViewerMeasurementsWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkResliceImageViewerMeasurements> native = vtkSmartPointer<vtkResliceImageViewerMeasurements>::New();
		VtkResliceImageViewerMeasurementsWrap* obj = new VtkResliceImageViewerMeasurementsWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkResliceImageViewerMeasurementsWrap::AddItem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractWidgetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractWidgetWrap *a0 = ObjectWrap::Unwrap<VtkAbstractWidgetWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddItem(
			(vtkAbstractWidget *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerMeasurementsWrap::GetProcessEvents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProcessEvents();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkResliceImageViewerMeasurementsWrap::GetProcessEventsMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProcessEventsMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkResliceImageViewerMeasurementsWrap::GetProcessEventsMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProcessEventsMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkResliceImageViewerMeasurementsWrap::GetResliceImageViewer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
	vtkResliceImageViewer * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResliceImageViewer();
	VtkResliceImageViewerWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkResliceImageViewerWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkResliceImageViewerWrap *w = new VtkResliceImageViewerWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkResliceImageViewerMeasurementsWrap::GetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkResliceImageViewerMeasurementsWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
	vtkResliceImageViewerMeasurements * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkResliceImageViewerMeasurementsWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkResliceImageViewerMeasurementsWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkResliceImageViewerMeasurementsWrap *w = new VtkResliceImageViewerMeasurementsWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkResliceImageViewerMeasurementsWrap::ProcessEventsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ProcessEventsOff();
}

void VtkResliceImageViewerMeasurementsWrap::ProcessEventsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ProcessEventsOn();
}

void VtkResliceImageViewerMeasurementsWrap::RemoveAllItems(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllItems();
}

void VtkResliceImageViewerMeasurementsWrap::RemoveItem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractWidgetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractWidgetWrap *a0 = ObjectWrap::Unwrap<VtkAbstractWidgetWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveItem(
			(vtkAbstractWidget *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerMeasurementsWrap::Render(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Render();
}

void VtkResliceImageViewerMeasurementsWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkResliceImageViewerMeasurements * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkResliceImageViewerMeasurementsWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkResliceImageViewerMeasurementsWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkResliceImageViewerMeasurementsWrap *w = new VtkResliceImageViewerMeasurementsWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerMeasurementsWrap::SetProcessEvents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProcessEvents(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerMeasurementsWrap::SetResliceImageViewer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkResliceImageViewerWrap::ptpl))->HasInstance(info[0]))
	{
		VtkResliceImageViewerWrap *a0 = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetResliceImageViewer(
			(vtkResliceImageViewer *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerMeasurementsWrap::SetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTolerance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerMeasurementsWrap::Update(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerMeasurementsWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerMeasurementsWrap>(info.Holder());
	vtkResliceImageViewerMeasurements *native = (vtkResliceImageViewerMeasurements *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Update();
}

