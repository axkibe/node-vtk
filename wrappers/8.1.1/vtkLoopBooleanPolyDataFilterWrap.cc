/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkLoopBooleanPolyDataFilterWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkLoopBooleanPolyDataFilterWrap::ptpl;

VtkLoopBooleanPolyDataFilterWrap::VtkLoopBooleanPolyDataFilterWrap()
{ }

VtkLoopBooleanPolyDataFilterWrap::VtkLoopBooleanPolyDataFilterWrap(vtkSmartPointer<vtkLoopBooleanPolyDataFilter> _native)
{ native = _native; }

VtkLoopBooleanPolyDataFilterWrap::~VtkLoopBooleanPolyDataFilterWrap()
{ }

void VtkLoopBooleanPolyDataFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkLoopBooleanPolyDataFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("LoopBooleanPolyDataFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkLoopBooleanPolyDataFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkLoopBooleanPolyDataFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkLoopBooleanPolyDataFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetNoIntersectionOutput", GetNoIntersectionOutput);
	Nan::SetPrototypeMethod(tpl, "getNoIntersectionOutput", GetNoIntersectionOutput);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfIntersectionLines", GetNumberOfIntersectionLines);
	Nan::SetPrototypeMethod(tpl, "getNumberOfIntersectionLines", GetNumberOfIntersectionLines);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfIntersectionPoints", GetNumberOfIntersectionPoints);
	Nan::SetPrototypeMethod(tpl, "getNumberOfIntersectionPoints", GetNumberOfIntersectionPoints);

	Nan::SetPrototypeMethod(tpl, "GetOperation", GetOperation);
	Nan::SetPrototypeMethod(tpl, "getOperation", GetOperation);

	Nan::SetPrototypeMethod(tpl, "GetOperationMaxValue", GetOperationMaxValue);
	Nan::SetPrototypeMethod(tpl, "getOperationMaxValue", GetOperationMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetOperationMinValue", GetOperationMinValue);
	Nan::SetPrototypeMethod(tpl, "getOperationMinValue", GetOperationMinValue);

	Nan::SetPrototypeMethod(tpl, "GetStatus", GetStatus);
	Nan::SetPrototypeMethod(tpl, "getStatus", GetStatus);

	Nan::SetPrototypeMethod(tpl, "GetTolerance", GetTolerance);
	Nan::SetPrototypeMethod(tpl, "getTolerance", GetTolerance);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "NoIntersectionOutputOff", NoIntersectionOutputOff);
	Nan::SetPrototypeMethod(tpl, "noIntersectionOutputOff", NoIntersectionOutputOff);

	Nan::SetPrototypeMethod(tpl, "NoIntersectionOutputOn", NoIntersectionOutputOn);
	Nan::SetPrototypeMethod(tpl, "noIntersectionOutputOn", NoIntersectionOutputOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetNoIntersectionOutput", SetNoIntersectionOutput);
	Nan::SetPrototypeMethod(tpl, "setNoIntersectionOutput", SetNoIntersectionOutput);

	Nan::SetPrototypeMethod(tpl, "SetOperation", SetOperation);
	Nan::SetPrototypeMethod(tpl, "setOperation", SetOperation);

	Nan::SetPrototypeMethod(tpl, "SetOperationToDifference", SetOperationToDifference);
	Nan::SetPrototypeMethod(tpl, "setOperationToDifference", SetOperationToDifference);

	Nan::SetPrototypeMethod(tpl, "SetOperationToIntersection", SetOperationToIntersection);
	Nan::SetPrototypeMethod(tpl, "setOperationToIntersection", SetOperationToIntersection);

	Nan::SetPrototypeMethod(tpl, "SetOperationToUnion", SetOperationToUnion);
	Nan::SetPrototypeMethod(tpl, "setOperationToUnion", SetOperationToUnion);

	Nan::SetPrototypeMethod(tpl, "SetTolerance", SetTolerance);
	Nan::SetPrototypeMethod(tpl, "setTolerance", SetTolerance);

#ifdef VTK_NODE_PLUS_VTKLOOPBOOLEANPOLYDATAFILTERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKLOOPBOOLEANPOLYDATAFILTERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkLoopBooleanPolyDataFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkLoopBooleanPolyDataFilter> native = vtkSmartPointer<vtkLoopBooleanPolyDataFilter>::New();
		VtkLoopBooleanPolyDataFilterWrap* obj = new VtkLoopBooleanPolyDataFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkLoopBooleanPolyDataFilterWrap::GetNoIntersectionOutput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNoIntersectionOutput();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLoopBooleanPolyDataFilterWrap::GetNumberOfIntersectionLines(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfIntersectionLines();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLoopBooleanPolyDataFilterWrap::GetNumberOfIntersectionPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfIntersectionPoints();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLoopBooleanPolyDataFilterWrap::GetOperation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOperation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLoopBooleanPolyDataFilterWrap::GetOperationMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOperationMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLoopBooleanPolyDataFilterWrap::GetOperationMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOperationMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLoopBooleanPolyDataFilterWrap::GetStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStatus();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLoopBooleanPolyDataFilterWrap::GetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLoopBooleanPolyDataFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	vtkLoopBooleanPolyDataFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkLoopBooleanPolyDataFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkLoopBooleanPolyDataFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkLoopBooleanPolyDataFilterWrap *w = new VtkLoopBooleanPolyDataFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLoopBooleanPolyDataFilterWrap::NoIntersectionOutputOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NoIntersectionOutputOff();
}

void VtkLoopBooleanPolyDataFilterWrap::NoIntersectionOutputOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NoIntersectionOutputOn();
}

void VtkLoopBooleanPolyDataFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkLoopBooleanPolyDataFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkLoopBooleanPolyDataFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkLoopBooleanPolyDataFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkLoopBooleanPolyDataFilterWrap *w = new VtkLoopBooleanPolyDataFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLoopBooleanPolyDataFilterWrap::SetNoIntersectionOutput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNoIntersectionOutput(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLoopBooleanPolyDataFilterWrap::SetOperation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOperation(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLoopBooleanPolyDataFilterWrap::SetOperationToDifference(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToDifference();
}

void VtkLoopBooleanPolyDataFilterWrap::SetOperationToIntersection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToIntersection();
}

void VtkLoopBooleanPolyDataFilterWrap::SetOperationToUnion(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToUnion();
}

void VtkLoopBooleanPolyDataFilterWrap::SetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLoopBooleanPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkLoopBooleanPolyDataFilterWrap>(info.Holder());
	vtkLoopBooleanPolyDataFilter *native = (vtkLoopBooleanPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTolerance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

