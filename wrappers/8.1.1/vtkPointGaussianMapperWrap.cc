/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataMapperWrap.h"
#include "vtkPointGaussianMapperWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkPiecewiseFunctionWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkPointGaussianMapperWrap::ptpl;

VtkPointGaussianMapperWrap::VtkPointGaussianMapperWrap()
{ }

VtkPointGaussianMapperWrap::VtkPointGaussianMapperWrap(vtkSmartPointer<vtkPointGaussianMapper> _native)
{ native = _native; }

VtkPointGaussianMapperWrap::~VtkPointGaussianMapperWrap()
{ }

void VtkPointGaussianMapperWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkPointGaussianMapper").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("PointGaussianMapper").ToLocalChecked(), ConstructorGetter);
}

void VtkPointGaussianMapperWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkPointGaussianMapperWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataMapperWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataMapperWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkPointGaussianMapperWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "EmissiveOff", EmissiveOff);
	Nan::SetPrototypeMethod(tpl, "emissiveOff", EmissiveOff);

	Nan::SetPrototypeMethod(tpl, "EmissiveOn", EmissiveOn);
	Nan::SetPrototypeMethod(tpl, "emissiveOn", EmissiveOn);

	Nan::SetPrototypeMethod(tpl, "GetEmissive", GetEmissive);
	Nan::SetPrototypeMethod(tpl, "getEmissive", GetEmissive);

	Nan::SetPrototypeMethod(tpl, "GetOpacityArray", GetOpacityArray);
	Nan::SetPrototypeMethod(tpl, "getOpacityArray", GetOpacityArray);

	Nan::SetPrototypeMethod(tpl, "GetOpacityArrayComponent", GetOpacityArrayComponent);
	Nan::SetPrototypeMethod(tpl, "getOpacityArrayComponent", GetOpacityArrayComponent);

	Nan::SetPrototypeMethod(tpl, "GetOpacityTableSize", GetOpacityTableSize);
	Nan::SetPrototypeMethod(tpl, "getOpacityTableSize", GetOpacityTableSize);

	Nan::SetPrototypeMethod(tpl, "GetScalarOpacityFunction", GetScalarOpacityFunction);
	Nan::SetPrototypeMethod(tpl, "getScalarOpacityFunction", GetScalarOpacityFunction);

	Nan::SetPrototypeMethod(tpl, "GetScaleArray", GetScaleArray);
	Nan::SetPrototypeMethod(tpl, "getScaleArray", GetScaleArray);

	Nan::SetPrototypeMethod(tpl, "GetScaleArrayComponent", GetScaleArrayComponent);
	Nan::SetPrototypeMethod(tpl, "getScaleArrayComponent", GetScaleArrayComponent);

	Nan::SetPrototypeMethod(tpl, "GetScaleFactor", GetScaleFactor);
	Nan::SetPrototypeMethod(tpl, "getScaleFactor", GetScaleFactor);

	Nan::SetPrototypeMethod(tpl, "GetScaleFunction", GetScaleFunction);
	Nan::SetPrototypeMethod(tpl, "getScaleFunction", GetScaleFunction);

	Nan::SetPrototypeMethod(tpl, "GetScaleTableSize", GetScaleTableSize);
	Nan::SetPrototypeMethod(tpl, "getScaleTableSize", GetScaleTableSize);

	Nan::SetPrototypeMethod(tpl, "GetSplatShaderCode", GetSplatShaderCode);
	Nan::SetPrototypeMethod(tpl, "getSplatShaderCode", GetSplatShaderCode);

	Nan::SetPrototypeMethod(tpl, "GetTriangleScale", GetTriangleScale);
	Nan::SetPrototypeMethod(tpl, "getTriangleScale", GetTriangleScale);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetEmissive", SetEmissive);
	Nan::SetPrototypeMethod(tpl, "setEmissive", SetEmissive);

	Nan::SetPrototypeMethod(tpl, "SetOpacityArray", SetOpacityArray);
	Nan::SetPrototypeMethod(tpl, "setOpacityArray", SetOpacityArray);

	Nan::SetPrototypeMethod(tpl, "SetOpacityArrayComponent", SetOpacityArrayComponent);
	Nan::SetPrototypeMethod(tpl, "setOpacityArrayComponent", SetOpacityArrayComponent);

	Nan::SetPrototypeMethod(tpl, "SetOpacityTableSize", SetOpacityTableSize);
	Nan::SetPrototypeMethod(tpl, "setOpacityTableSize", SetOpacityTableSize);

	Nan::SetPrototypeMethod(tpl, "SetScalarOpacityFunction", SetScalarOpacityFunction);
	Nan::SetPrototypeMethod(tpl, "setScalarOpacityFunction", SetScalarOpacityFunction);

	Nan::SetPrototypeMethod(tpl, "SetScaleArray", SetScaleArray);
	Nan::SetPrototypeMethod(tpl, "setScaleArray", SetScaleArray);

	Nan::SetPrototypeMethod(tpl, "SetScaleArrayComponent", SetScaleArrayComponent);
	Nan::SetPrototypeMethod(tpl, "setScaleArrayComponent", SetScaleArrayComponent);

	Nan::SetPrototypeMethod(tpl, "SetScaleFactor", SetScaleFactor);
	Nan::SetPrototypeMethod(tpl, "setScaleFactor", SetScaleFactor);

	Nan::SetPrototypeMethod(tpl, "SetScaleFunction", SetScaleFunction);
	Nan::SetPrototypeMethod(tpl, "setScaleFunction", SetScaleFunction);

	Nan::SetPrototypeMethod(tpl, "SetScaleTableSize", SetScaleTableSize);
	Nan::SetPrototypeMethod(tpl, "setScaleTableSize", SetScaleTableSize);

	Nan::SetPrototypeMethod(tpl, "SetSplatShaderCode", SetSplatShaderCode);
	Nan::SetPrototypeMethod(tpl, "setSplatShaderCode", SetSplatShaderCode);

	Nan::SetPrototypeMethod(tpl, "SetTriangleScale", SetTriangleScale);
	Nan::SetPrototypeMethod(tpl, "setTriangleScale", SetTriangleScale);

#ifdef VTK_NODE_PLUS_VTKPOINTGAUSSIANMAPPERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKPOINTGAUSSIANMAPPERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkPointGaussianMapperWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkPointGaussianMapper> native = vtkSmartPointer<vtkPointGaussianMapper>::New();
		VtkPointGaussianMapperWrap* obj = new VtkPointGaussianMapperWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkPointGaussianMapperWrap::EmissiveOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EmissiveOff();
}

void VtkPointGaussianMapperWrap::EmissiveOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EmissiveOn();
}

void VtkPointGaussianMapperWrap::GetEmissive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEmissive();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointGaussianMapperWrap::GetOpacityArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOpacityArray();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPointGaussianMapperWrap::GetOpacityArrayComponent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOpacityArrayComponent();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointGaussianMapperWrap::GetOpacityTableSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOpacityTableSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointGaussianMapperWrap::GetScalarOpacityFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	vtkPiecewiseFunction * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScalarOpacityFunction();
	VtkPiecewiseFunctionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPiecewiseFunctionWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPiecewiseFunctionWrap *w = new VtkPiecewiseFunctionWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPointGaussianMapperWrap::GetScaleArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScaleArray();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPointGaussianMapperWrap::GetScaleArrayComponent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScaleArrayComponent();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointGaussianMapperWrap::GetScaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScaleFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointGaussianMapperWrap::GetScaleFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	vtkPiecewiseFunction * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScaleFunction();
	VtkPiecewiseFunctionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPiecewiseFunctionWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPiecewiseFunctionWrap *w = new VtkPiecewiseFunctionWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPointGaussianMapperWrap::GetScaleTableSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScaleTableSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointGaussianMapperWrap::GetSplatShaderCode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSplatShaderCode();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPointGaussianMapperWrap::GetTriangleScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	float r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTriangleScale();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointGaussianMapperWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	vtkPointGaussianMapper * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkPointGaussianMapperWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPointGaussianMapperWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPointGaussianMapperWrap *w = new VtkPointGaussianMapperWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPointGaussianMapperWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkPointGaussianMapper * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkPointGaussianMapperWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkPointGaussianMapperWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPointGaussianMapperWrap *w = new VtkPointGaussianMapperWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointGaussianMapperWrap::SetEmissive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEmissive(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointGaussianMapperWrap::SetOpacityArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOpacityArray(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointGaussianMapperWrap::SetOpacityArrayComponent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOpacityArrayComponent(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointGaussianMapperWrap::SetOpacityTableSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOpacityTableSize(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointGaussianMapperWrap::SetScalarOpacityFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPiecewiseFunctionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPiecewiseFunctionWrap *a0 = ObjectWrap::Unwrap<VtkPiecewiseFunctionWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScalarOpacityFunction(
			(vtkPiecewiseFunction *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointGaussianMapperWrap::SetScaleArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScaleArray(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointGaussianMapperWrap::SetScaleArrayComponent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScaleArrayComponent(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointGaussianMapperWrap::SetScaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScaleFactor(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointGaussianMapperWrap::SetScaleFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPiecewiseFunctionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPiecewiseFunctionWrap *a0 = ObjectWrap::Unwrap<VtkPiecewiseFunctionWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScaleFunction(
			(vtkPiecewiseFunction *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointGaussianMapperWrap::SetScaleTableSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScaleTableSize(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointGaussianMapperWrap::SetSplatShaderCode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSplatShaderCode(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointGaussianMapperWrap::SetTriangleScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointGaussianMapperWrap *wrapper = ObjectWrap::Unwrap<VtkPointGaussianMapperWrap>(info.Holder());
	vtkPointGaussianMapper *native = (vtkPointGaussianMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTriangleScale(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

