/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkParticleReaderWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkParticleReaderWrap::ptpl;

VtkParticleReaderWrap::VtkParticleReaderWrap()
{ }

VtkParticleReaderWrap::VtkParticleReaderWrap(vtkSmartPointer<vtkParticleReader> _native)
{ native = _native; }

VtkParticleReaderWrap::~VtkParticleReaderWrap()
{ }

void VtkParticleReaderWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkParticleReader").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ParticleReader").ToLocalChecked(), ConstructorGetter);
}

void VtkParticleReaderWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkParticleReaderWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkParticleReaderWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetDataByteOrder", GetDataByteOrder);
	Nan::SetPrototypeMethod(tpl, "getDataByteOrder", GetDataByteOrder);

	Nan::SetPrototypeMethod(tpl, "GetDataByteOrderAsString", GetDataByteOrderAsString);
	Nan::SetPrototypeMethod(tpl, "getDataByteOrderAsString", GetDataByteOrderAsString);

	Nan::SetPrototypeMethod(tpl, "GetDataType", GetDataType);
	Nan::SetPrototypeMethod(tpl, "getDataType", GetDataType);

	Nan::SetPrototypeMethod(tpl, "GetDataTypeMaxValue", GetDataTypeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getDataTypeMaxValue", GetDataTypeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetDataTypeMinValue", GetDataTypeMinValue);
	Nan::SetPrototypeMethod(tpl, "getDataTypeMinValue", GetDataTypeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetFileName", GetFileName);
	Nan::SetPrototypeMethod(tpl, "getFileName", GetFileName);

	Nan::SetPrototypeMethod(tpl, "GetFileType", GetFileType);
	Nan::SetPrototypeMethod(tpl, "getFileType", GetFileType);

	Nan::SetPrototypeMethod(tpl, "GetFileTypeMaxValue", GetFileTypeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getFileTypeMaxValue", GetFileTypeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetFileTypeMinValue", GetFileTypeMinValue);
	Nan::SetPrototypeMethod(tpl, "getFileTypeMinValue", GetFileTypeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetHasScalar", GetHasScalar);
	Nan::SetPrototypeMethod(tpl, "getHasScalar", GetHasScalar);

	Nan::SetPrototypeMethod(tpl, "GetSwapBytes", GetSwapBytes);
	Nan::SetPrototypeMethod(tpl, "getSwapBytes", GetSwapBytes);

	Nan::SetPrototypeMethod(tpl, "HasScalarOff", HasScalarOff);
	Nan::SetPrototypeMethod(tpl, "hasScalarOff", HasScalarOff);

	Nan::SetPrototypeMethod(tpl, "HasScalarOn", HasScalarOn);
	Nan::SetPrototypeMethod(tpl, "hasScalarOn", HasScalarOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetDataByteOrder", SetDataByteOrder);
	Nan::SetPrototypeMethod(tpl, "setDataByteOrder", SetDataByteOrder);

	Nan::SetPrototypeMethod(tpl, "SetDataByteOrderToBigEndian", SetDataByteOrderToBigEndian);
	Nan::SetPrototypeMethod(tpl, "setDataByteOrderToBigEndian", SetDataByteOrderToBigEndian);

	Nan::SetPrototypeMethod(tpl, "SetDataByteOrderToLittleEndian", SetDataByteOrderToLittleEndian);
	Nan::SetPrototypeMethod(tpl, "setDataByteOrderToLittleEndian", SetDataByteOrderToLittleEndian);

	Nan::SetPrototypeMethod(tpl, "SetDataType", SetDataType);
	Nan::SetPrototypeMethod(tpl, "setDataType", SetDataType);

	Nan::SetPrototypeMethod(tpl, "SetDataTypeToDouble", SetDataTypeToDouble);
	Nan::SetPrototypeMethod(tpl, "setDataTypeToDouble", SetDataTypeToDouble);

	Nan::SetPrototypeMethod(tpl, "SetDataTypeToFloat", SetDataTypeToFloat);
	Nan::SetPrototypeMethod(tpl, "setDataTypeToFloat", SetDataTypeToFloat);

	Nan::SetPrototypeMethod(tpl, "SetFileName", SetFileName);
	Nan::SetPrototypeMethod(tpl, "setFileName", SetFileName);

	Nan::SetPrototypeMethod(tpl, "SetFileType", SetFileType);
	Nan::SetPrototypeMethod(tpl, "setFileType", SetFileType);

	Nan::SetPrototypeMethod(tpl, "SetFileTypeToBinary", SetFileTypeToBinary);
	Nan::SetPrototypeMethod(tpl, "setFileTypeToBinary", SetFileTypeToBinary);

	Nan::SetPrototypeMethod(tpl, "SetFileTypeToText", SetFileTypeToText);
	Nan::SetPrototypeMethod(tpl, "setFileTypeToText", SetFileTypeToText);

	Nan::SetPrototypeMethod(tpl, "SetFileTypeToUnknown", SetFileTypeToUnknown);
	Nan::SetPrototypeMethod(tpl, "setFileTypeToUnknown", SetFileTypeToUnknown);

	Nan::SetPrototypeMethod(tpl, "SetHasScalar", SetHasScalar);
	Nan::SetPrototypeMethod(tpl, "setHasScalar", SetHasScalar);

	Nan::SetPrototypeMethod(tpl, "SetSwapBytes", SetSwapBytes);
	Nan::SetPrototypeMethod(tpl, "setSwapBytes", SetSwapBytes);

	Nan::SetPrototypeMethod(tpl, "SwapBytesOff", SwapBytesOff);
	Nan::SetPrototypeMethod(tpl, "swapBytesOff", SwapBytesOff);

	Nan::SetPrototypeMethod(tpl, "SwapBytesOn", SwapBytesOn);
	Nan::SetPrototypeMethod(tpl, "swapBytesOn", SwapBytesOn);

#ifdef VTK_NODE_PLUS_VTKPARTICLEREADERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKPARTICLEREADERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkParticleReaderWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkParticleReader> native = vtkSmartPointer<vtkParticleReader>::New();
		VtkParticleReaderWrap* obj = new VtkParticleReaderWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkParticleReaderWrap::GetDataByteOrder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataByteOrder();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParticleReaderWrap::GetDataByteOrderAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataByteOrderAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkParticleReaderWrap::GetDataType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParticleReaderWrap::GetDataTypeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataTypeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParticleReaderWrap::GetDataTypeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataTypeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParticleReaderWrap::GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkParticleReaderWrap::GetFileType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParticleReaderWrap::GetFileTypeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileTypeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParticleReaderWrap::GetFileTypeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileTypeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParticleReaderWrap::GetHasScalar(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHasScalar();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParticleReaderWrap::GetSwapBytes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSwapBytes();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParticleReaderWrap::HasScalarOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->HasScalarOff();
}

void VtkParticleReaderWrap::HasScalarOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->HasScalarOn();
}

void VtkParticleReaderWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	vtkParticleReader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkParticleReaderWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkParticleReaderWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkParticleReaderWrap *w = new VtkParticleReaderWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkParticleReaderWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkParticleReader * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkParticleReaderWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkParticleReaderWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkParticleReaderWrap *w = new VtkParticleReaderWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParticleReaderWrap::SetDataByteOrder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDataByteOrder(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParticleReaderWrap::SetDataByteOrderToBigEndian(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataByteOrderToBigEndian();
}

void VtkParticleReaderWrap::SetDataByteOrderToLittleEndian(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataByteOrderToLittleEndian();
}

void VtkParticleReaderWrap::SetDataType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDataType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParticleReaderWrap::SetDataTypeToDouble(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataTypeToDouble();
}

void VtkParticleReaderWrap::SetDataTypeToFloat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDataTypeToFloat();
}

void VtkParticleReaderWrap::SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParticleReaderWrap::SetFileType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParticleReaderWrap::SetFileTypeToBinary(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetFileTypeToBinary();
}

void VtkParticleReaderWrap::SetFileTypeToText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetFileTypeToText();
}

void VtkParticleReaderWrap::SetFileTypeToUnknown(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetFileTypeToUnknown();
}

void VtkParticleReaderWrap::SetHasScalar(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHasScalar(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParticleReaderWrap::SetSwapBytes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSwapBytes(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParticleReaderWrap::SwapBytesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SwapBytesOff();
}

void VtkParticleReaderWrap::SwapBytesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParticleReaderWrap *wrapper = ObjectWrap::Unwrap<VtkParticleReaderWrap>(info.Holder());
	vtkParticleReader *native = (vtkParticleReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SwapBytesOn();
}

