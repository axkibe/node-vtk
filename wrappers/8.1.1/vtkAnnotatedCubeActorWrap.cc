/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkProp3DWrap.h"
#include "vtkAnnotatedCubeActorWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkPropCollectionWrap.h"
#include "vtkViewportWrap.h"
#include "vtkPropWrap.h"
#include "vtkWindowWrap.h"
#include "vtkPropertyWrap.h"
#include "vtkAssemblyWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkAnnotatedCubeActorWrap::ptpl;

VtkAnnotatedCubeActorWrap::VtkAnnotatedCubeActorWrap()
{ }

VtkAnnotatedCubeActorWrap::VtkAnnotatedCubeActorWrap(vtkSmartPointer<vtkAnnotatedCubeActor> _native)
{ native = _native; }

VtkAnnotatedCubeActorWrap::~VtkAnnotatedCubeActorWrap()
{ }

void VtkAnnotatedCubeActorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkAnnotatedCubeActor").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("AnnotatedCubeActor").ToLocalChecked(), ConstructorGetter);
}

void VtkAnnotatedCubeActorWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkAnnotatedCubeActorWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkProp3DWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkProp3DWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkAnnotatedCubeActorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetActors", GetActors);
	Nan::SetPrototypeMethod(tpl, "getActors", GetActors);

	Nan::SetPrototypeMethod(tpl, "GetAssembly", GetAssembly);
	Nan::SetPrototypeMethod(tpl, "getAssembly", GetAssembly);

	Nan::SetPrototypeMethod(tpl, "GetBounds", GetBounds);
	Nan::SetPrototypeMethod(tpl, "getBounds", GetBounds);

	Nan::SetPrototypeMethod(tpl, "GetCubeProperty", GetCubeProperty);
	Nan::SetPrototypeMethod(tpl, "getCubeProperty", GetCubeProperty);

	Nan::SetPrototypeMethod(tpl, "GetCubeVisibility", GetCubeVisibility);
	Nan::SetPrototypeMethod(tpl, "getCubeVisibility", GetCubeVisibility);

	Nan::SetPrototypeMethod(tpl, "GetFaceTextScale", GetFaceTextScale);
	Nan::SetPrototypeMethod(tpl, "getFaceTextScale", GetFaceTextScale);

	Nan::SetPrototypeMethod(tpl, "GetFaceTextVisibility", GetFaceTextVisibility);
	Nan::SetPrototypeMethod(tpl, "getFaceTextVisibility", GetFaceTextVisibility);

	Nan::SetPrototypeMethod(tpl, "GetTextEdgesProperty", GetTextEdgesProperty);
	Nan::SetPrototypeMethod(tpl, "getTextEdgesProperty", GetTextEdgesProperty);

	Nan::SetPrototypeMethod(tpl, "GetTextEdgesVisibility", GetTextEdgesVisibility);
	Nan::SetPrototypeMethod(tpl, "getTextEdgesVisibility", GetTextEdgesVisibility);

	Nan::SetPrototypeMethod(tpl, "GetXFaceTextRotation", GetXFaceTextRotation);
	Nan::SetPrototypeMethod(tpl, "getXFaceTextRotation", GetXFaceTextRotation);

	Nan::SetPrototypeMethod(tpl, "GetXMinusFaceProperty", GetXMinusFaceProperty);
	Nan::SetPrototypeMethod(tpl, "getXMinusFaceProperty", GetXMinusFaceProperty);

	Nan::SetPrototypeMethod(tpl, "GetXMinusFaceText", GetXMinusFaceText);
	Nan::SetPrototypeMethod(tpl, "getXMinusFaceText", GetXMinusFaceText);

	Nan::SetPrototypeMethod(tpl, "GetXPlusFaceProperty", GetXPlusFaceProperty);
	Nan::SetPrototypeMethod(tpl, "getXPlusFaceProperty", GetXPlusFaceProperty);

	Nan::SetPrototypeMethod(tpl, "GetXPlusFaceText", GetXPlusFaceText);
	Nan::SetPrototypeMethod(tpl, "getXPlusFaceText", GetXPlusFaceText);

	Nan::SetPrototypeMethod(tpl, "GetYFaceTextRotation", GetYFaceTextRotation);
	Nan::SetPrototypeMethod(tpl, "getYFaceTextRotation", GetYFaceTextRotation);

	Nan::SetPrototypeMethod(tpl, "GetYMinusFaceProperty", GetYMinusFaceProperty);
	Nan::SetPrototypeMethod(tpl, "getYMinusFaceProperty", GetYMinusFaceProperty);

	Nan::SetPrototypeMethod(tpl, "GetYMinusFaceText", GetYMinusFaceText);
	Nan::SetPrototypeMethod(tpl, "getYMinusFaceText", GetYMinusFaceText);

	Nan::SetPrototypeMethod(tpl, "GetYPlusFaceProperty", GetYPlusFaceProperty);
	Nan::SetPrototypeMethod(tpl, "getYPlusFaceProperty", GetYPlusFaceProperty);

	Nan::SetPrototypeMethod(tpl, "GetYPlusFaceText", GetYPlusFaceText);
	Nan::SetPrototypeMethod(tpl, "getYPlusFaceText", GetYPlusFaceText);

	Nan::SetPrototypeMethod(tpl, "GetZFaceTextRotation", GetZFaceTextRotation);
	Nan::SetPrototypeMethod(tpl, "getZFaceTextRotation", GetZFaceTextRotation);

	Nan::SetPrototypeMethod(tpl, "GetZMinusFaceProperty", GetZMinusFaceProperty);
	Nan::SetPrototypeMethod(tpl, "getZMinusFaceProperty", GetZMinusFaceProperty);

	Nan::SetPrototypeMethod(tpl, "GetZMinusFaceText", GetZMinusFaceText);
	Nan::SetPrototypeMethod(tpl, "getZMinusFaceText", GetZMinusFaceText);

	Nan::SetPrototypeMethod(tpl, "GetZPlusFaceProperty", GetZPlusFaceProperty);
	Nan::SetPrototypeMethod(tpl, "getZPlusFaceProperty", GetZPlusFaceProperty);

	Nan::SetPrototypeMethod(tpl, "GetZPlusFaceText", GetZPlusFaceText);
	Nan::SetPrototypeMethod(tpl, "getZPlusFaceText", GetZPlusFaceText);

	Nan::SetPrototypeMethod(tpl, "HasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "hasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "RenderOpaqueGeometry", RenderOpaqueGeometry);
	Nan::SetPrototypeMethod(tpl, "renderOpaqueGeometry", RenderOpaqueGeometry);

	Nan::SetPrototypeMethod(tpl, "RenderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "renderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCubeVisibility", SetCubeVisibility);
	Nan::SetPrototypeMethod(tpl, "setCubeVisibility", SetCubeVisibility);

	Nan::SetPrototypeMethod(tpl, "SetFaceTextScale", SetFaceTextScale);
	Nan::SetPrototypeMethod(tpl, "setFaceTextScale", SetFaceTextScale);

	Nan::SetPrototypeMethod(tpl, "SetFaceTextVisibility", SetFaceTextVisibility);
	Nan::SetPrototypeMethod(tpl, "setFaceTextVisibility", SetFaceTextVisibility);

	Nan::SetPrototypeMethod(tpl, "SetTextEdgesVisibility", SetTextEdgesVisibility);
	Nan::SetPrototypeMethod(tpl, "setTextEdgesVisibility", SetTextEdgesVisibility);

	Nan::SetPrototypeMethod(tpl, "SetXFaceTextRotation", SetXFaceTextRotation);
	Nan::SetPrototypeMethod(tpl, "setXFaceTextRotation", SetXFaceTextRotation);

	Nan::SetPrototypeMethod(tpl, "SetXMinusFaceText", SetXMinusFaceText);
	Nan::SetPrototypeMethod(tpl, "setXMinusFaceText", SetXMinusFaceText);

	Nan::SetPrototypeMethod(tpl, "SetXPlusFaceText", SetXPlusFaceText);
	Nan::SetPrototypeMethod(tpl, "setXPlusFaceText", SetXPlusFaceText);

	Nan::SetPrototypeMethod(tpl, "SetYFaceTextRotation", SetYFaceTextRotation);
	Nan::SetPrototypeMethod(tpl, "setYFaceTextRotation", SetYFaceTextRotation);

	Nan::SetPrototypeMethod(tpl, "SetYMinusFaceText", SetYMinusFaceText);
	Nan::SetPrototypeMethod(tpl, "setYMinusFaceText", SetYMinusFaceText);

	Nan::SetPrototypeMethod(tpl, "SetYPlusFaceText", SetYPlusFaceText);
	Nan::SetPrototypeMethod(tpl, "setYPlusFaceText", SetYPlusFaceText);

	Nan::SetPrototypeMethod(tpl, "SetZFaceTextRotation", SetZFaceTextRotation);
	Nan::SetPrototypeMethod(tpl, "setZFaceTextRotation", SetZFaceTextRotation);

	Nan::SetPrototypeMethod(tpl, "SetZMinusFaceText", SetZMinusFaceText);
	Nan::SetPrototypeMethod(tpl, "setZMinusFaceText", SetZMinusFaceText);

	Nan::SetPrototypeMethod(tpl, "SetZPlusFaceText", SetZPlusFaceText);
	Nan::SetPrototypeMethod(tpl, "setZPlusFaceText", SetZPlusFaceText);

	Nan::SetPrototypeMethod(tpl, "ShallowCopy", ShallowCopy);
	Nan::SetPrototypeMethod(tpl, "shallowCopy", ShallowCopy);

#ifdef VTK_NODE_PLUS_VTKANNOTATEDCUBEACTORWRAP_INITPTPL
	VTK_NODE_PLUS_VTKANNOTATEDCUBEACTORWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkAnnotatedCubeActorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkAnnotatedCubeActor> native = vtkSmartPointer<vtkAnnotatedCubeActor>::New();
		VtkAnnotatedCubeActorWrap* obj = new VtkAnnotatedCubeActorWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkAnnotatedCubeActorWrap::GetActors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropCollectionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropCollectionWrap *a0 = ObjectWrap::Unwrap<VtkPropCollectionWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetActors(
			(vtkPropCollection *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::GetAssembly(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	vtkAssembly * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAssembly();
	VtkAssemblyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAssemblyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAssemblyWrap *w = new VtkAssemblyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAnnotatedCubeActorWrap::GetBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetBounds(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[6];
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 6; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetBounds(
			b0
		);
		return;
	}
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBounds();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 6 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 6);
	memcpy(ab->GetContents().Data(), r, 6 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkAnnotatedCubeActorWrap::GetCubeProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCubeProperty();
	VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAnnotatedCubeActorWrap::GetCubeVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCubeVisibility();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAnnotatedCubeActorWrap::GetFaceTextScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFaceTextScale();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAnnotatedCubeActorWrap::GetFaceTextVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFaceTextVisibility();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAnnotatedCubeActorWrap::GetTextEdgesProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTextEdgesProperty();
	VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAnnotatedCubeActorWrap::GetTextEdgesVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTextEdgesVisibility();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAnnotatedCubeActorWrap::GetXFaceTextRotation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXFaceTextRotation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAnnotatedCubeActorWrap::GetXMinusFaceProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXMinusFaceProperty();
	VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAnnotatedCubeActorWrap::GetXMinusFaceText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXMinusFaceText();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAnnotatedCubeActorWrap::GetXPlusFaceProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXPlusFaceProperty();
	VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAnnotatedCubeActorWrap::GetXPlusFaceText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXPlusFaceText();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAnnotatedCubeActorWrap::GetYFaceTextRotation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYFaceTextRotation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAnnotatedCubeActorWrap::GetYMinusFaceProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYMinusFaceProperty();
	VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAnnotatedCubeActorWrap::GetYMinusFaceText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYMinusFaceText();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAnnotatedCubeActorWrap::GetYPlusFaceProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYPlusFaceProperty();
	VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAnnotatedCubeActorWrap::GetYPlusFaceText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYPlusFaceText();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAnnotatedCubeActorWrap::GetZFaceTextRotation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZFaceTextRotation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAnnotatedCubeActorWrap::GetZMinusFaceProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZMinusFaceProperty();
	VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAnnotatedCubeActorWrap::GetZMinusFaceText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZMinusFaceText();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAnnotatedCubeActorWrap::GetZPlusFaceProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZPlusFaceProperty();
	VtkPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAnnotatedCubeActorWrap::GetZPlusFaceText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZPlusFaceText();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAnnotatedCubeActorWrap::HasTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasTranslucentPolygonalGeometry();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAnnotatedCubeActorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	vtkAnnotatedCubeActor * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkAnnotatedCubeActorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAnnotatedCubeActorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAnnotatedCubeActorWrap *w = new VtkAnnotatedCubeActorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAnnotatedCubeActorWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOpaqueGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::RenderTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderTranslucentPolygonalGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkAnnotatedCubeActor * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkAnnotatedCubeActorWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkAnnotatedCubeActorWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAnnotatedCubeActorWrap *w = new VtkAnnotatedCubeActorWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetCubeVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCubeVisibility(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetFaceTextScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFaceTextScale(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetFaceTextVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFaceTextVisibility(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetTextEdgesVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTextEdgesVisibility(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetXFaceTextRotation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetXFaceTextRotation(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetXMinusFaceText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetXMinusFaceText(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetXPlusFaceText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetXPlusFaceText(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetYFaceTextRotation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetYFaceTextRotation(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetYMinusFaceText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetYMinusFaceText(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetYPlusFaceText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetYPlusFaceText(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetZFaceTextRotation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetZFaceTextRotation(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetZMinusFaceText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetZMinusFaceText(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::SetZPlusFaceText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetZPlusFaceText(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAnnotatedCubeActorWrap::ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAnnotatedCubeActorWrap *wrapper = ObjectWrap::Unwrap<VtkAnnotatedCubeActorWrap>(info.Holder());
	vtkAnnotatedCubeActor *native = (vtkAnnotatedCubeActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropWrap *a0 = ObjectWrap::Unwrap<VtkPropWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ShallowCopy(
			(vtkProp *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

