/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkContourLoopExtractionWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkContourLoopExtractionWrap::ptpl;

VtkContourLoopExtractionWrap::VtkContourLoopExtractionWrap()
{ }

VtkContourLoopExtractionWrap::VtkContourLoopExtractionWrap(vtkSmartPointer<vtkContourLoopExtraction> _native)
{ native = _native; }

VtkContourLoopExtractionWrap::~VtkContourLoopExtractionWrap()
{ }

void VtkContourLoopExtractionWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkContourLoopExtraction").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ContourLoopExtraction").ToLocalChecked(), ConstructorGetter);
}

void VtkContourLoopExtractionWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkContourLoopExtractionWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkContourLoopExtractionWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetLoopClosure", GetLoopClosure);
	Nan::SetPrototypeMethod(tpl, "getLoopClosure", GetLoopClosure);

	Nan::SetPrototypeMethod(tpl, "GetLoopClosureAsString", GetLoopClosureAsString);
	Nan::SetPrototypeMethod(tpl, "getLoopClosureAsString", GetLoopClosureAsString);

	Nan::SetPrototypeMethod(tpl, "GetLoopClosureMaxValue", GetLoopClosureMaxValue);
	Nan::SetPrototypeMethod(tpl, "getLoopClosureMaxValue", GetLoopClosureMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetLoopClosureMinValue", GetLoopClosureMinValue);
	Nan::SetPrototypeMethod(tpl, "getLoopClosureMinValue", GetLoopClosureMinValue);

	Nan::SetPrototypeMethod(tpl, "GetNormal", GetNormal);
	Nan::SetPrototypeMethod(tpl, "getNormal", GetNormal);

	Nan::SetPrototypeMethod(tpl, "GetScalarRange", GetScalarRange);
	Nan::SetPrototypeMethod(tpl, "getScalarRange", GetScalarRange);

	Nan::SetPrototypeMethod(tpl, "GetScalarThresholding", GetScalarThresholding);
	Nan::SetPrototypeMethod(tpl, "getScalarThresholding", GetScalarThresholding);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "ScalarThresholdingOff", ScalarThresholdingOff);
	Nan::SetPrototypeMethod(tpl, "scalarThresholdingOff", ScalarThresholdingOff);

	Nan::SetPrototypeMethod(tpl, "ScalarThresholdingOn", ScalarThresholdingOn);
	Nan::SetPrototypeMethod(tpl, "scalarThresholdingOn", ScalarThresholdingOn);

	Nan::SetPrototypeMethod(tpl, "SetLoopClosure", SetLoopClosure);
	Nan::SetPrototypeMethod(tpl, "setLoopClosure", SetLoopClosure);

	Nan::SetPrototypeMethod(tpl, "SetLoopClosureToAll", SetLoopClosureToAll);
	Nan::SetPrototypeMethod(tpl, "setLoopClosureToAll", SetLoopClosureToAll);

	Nan::SetPrototypeMethod(tpl, "SetLoopClosureToBoundary", SetLoopClosureToBoundary);
	Nan::SetPrototypeMethod(tpl, "setLoopClosureToBoundary", SetLoopClosureToBoundary);

	Nan::SetPrototypeMethod(tpl, "SetLoopClosureToOff", SetLoopClosureToOff);
	Nan::SetPrototypeMethod(tpl, "setLoopClosureToOff", SetLoopClosureToOff);

	Nan::SetPrototypeMethod(tpl, "SetNormal", SetNormal);
	Nan::SetPrototypeMethod(tpl, "setNormal", SetNormal);

	Nan::SetPrototypeMethod(tpl, "SetScalarRange", SetScalarRange);
	Nan::SetPrototypeMethod(tpl, "setScalarRange", SetScalarRange);

	Nan::SetPrototypeMethod(tpl, "SetScalarThresholding", SetScalarThresholding);
	Nan::SetPrototypeMethod(tpl, "setScalarThresholding", SetScalarThresholding);

#ifdef VTK_NODE_PLUS_VTKCONTOURLOOPEXTRACTIONWRAP_INITPTPL
	VTK_NODE_PLUS_VTKCONTOURLOOPEXTRACTIONWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkContourLoopExtractionWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkContourLoopExtraction> native = vtkSmartPointer<vtkContourLoopExtraction>::New();
		VtkContourLoopExtractionWrap* obj = new VtkContourLoopExtractionWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkContourLoopExtractionWrap::GetLoopClosure(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLoopClosure();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourLoopExtractionWrap::GetLoopClosureAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLoopClosureAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkContourLoopExtractionWrap::GetLoopClosureMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLoopClosureMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourLoopExtractionWrap::GetLoopClosureMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLoopClosureMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourLoopExtractionWrap::GetNormal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormal();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkContourLoopExtractionWrap::GetScalarRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScalarRange();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 2 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 2);
	memcpy(ab->GetContents().Data(), r, 2 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkContourLoopExtractionWrap::GetScalarThresholding(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScalarThresholding();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourLoopExtractionWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	vtkContourLoopExtraction * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkContourLoopExtractionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkContourLoopExtractionWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkContourLoopExtractionWrap *w = new VtkContourLoopExtractionWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContourLoopExtractionWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkContourLoopExtraction * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkContourLoopExtractionWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkContourLoopExtractionWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkContourLoopExtractionWrap *w = new VtkContourLoopExtractionWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourLoopExtractionWrap::ScalarThresholdingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ScalarThresholdingOff();
}

void VtkContourLoopExtractionWrap::ScalarThresholdingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ScalarThresholdingOn();
}

void VtkContourLoopExtractionWrap::SetLoopClosure(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLoopClosure(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourLoopExtractionWrap::SetLoopClosureToAll(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetLoopClosureToAll();
}

void VtkContourLoopExtractionWrap::SetLoopClosureToBoundary(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetLoopClosureToBoundary();
}

void VtkContourLoopExtractionWrap::SetLoopClosureToOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetLoopClosureToOff();
}

void VtkContourLoopExtractionWrap::SetNormal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormal(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormal(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetNormal(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourLoopExtractionWrap::SetScalarRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScalarRange(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[2];
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 2; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScalarRange(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetScalarRange(
				info[0]->NumberValue(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourLoopExtractionWrap::SetScalarThresholding(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourLoopExtractionWrap *wrapper = ObjectWrap::Unwrap<VtkContourLoopExtractionWrap>(info.Holder());
	vtkContourLoopExtraction *native = (vtkContourLoopExtraction *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScalarThresholding(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

