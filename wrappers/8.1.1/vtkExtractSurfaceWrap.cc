/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkExtractSurfaceWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkExtractSurfaceWrap::ptpl;

VtkExtractSurfaceWrap::VtkExtractSurfaceWrap()
{ }

VtkExtractSurfaceWrap::VtkExtractSurfaceWrap(vtkSmartPointer<vtkExtractSurface> _native)
{ native = _native; }

VtkExtractSurfaceWrap::~VtkExtractSurfaceWrap()
{ }

void VtkExtractSurfaceWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkExtractSurface").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ExtractSurface").ToLocalChecked(), ConstructorGetter);
}

void VtkExtractSurfaceWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkExtractSurfaceWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkExtractSurfaceWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ComputeGradientsOff", ComputeGradientsOff);
	Nan::SetPrototypeMethod(tpl, "computeGradientsOff", ComputeGradientsOff);

	Nan::SetPrototypeMethod(tpl, "ComputeGradientsOn", ComputeGradientsOn);
	Nan::SetPrototypeMethod(tpl, "computeGradientsOn", ComputeGradientsOn);

	Nan::SetPrototypeMethod(tpl, "ComputeNormalsOff", ComputeNormalsOff);
	Nan::SetPrototypeMethod(tpl, "computeNormalsOff", ComputeNormalsOff);

	Nan::SetPrototypeMethod(tpl, "ComputeNormalsOn", ComputeNormalsOn);
	Nan::SetPrototypeMethod(tpl, "computeNormalsOn", ComputeNormalsOn);

	Nan::SetPrototypeMethod(tpl, "GetComputeGradients", GetComputeGradients);
	Nan::SetPrototypeMethod(tpl, "getComputeGradients", GetComputeGradients);

	Nan::SetPrototypeMethod(tpl, "GetComputeNormals", GetComputeNormals);
	Nan::SetPrototypeMethod(tpl, "getComputeNormals", GetComputeNormals);

	Nan::SetPrototypeMethod(tpl, "GetHoleFilling", GetHoleFilling);
	Nan::SetPrototypeMethod(tpl, "getHoleFilling", GetHoleFilling);

	Nan::SetPrototypeMethod(tpl, "GetRadius", GetRadius);
	Nan::SetPrototypeMethod(tpl, "getRadius", GetRadius);

	Nan::SetPrototypeMethod(tpl, "GetRadiusMaxValue", GetRadiusMaxValue);
	Nan::SetPrototypeMethod(tpl, "getRadiusMaxValue", GetRadiusMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetRadiusMinValue", GetRadiusMinValue);
	Nan::SetPrototypeMethod(tpl, "getRadiusMinValue", GetRadiusMinValue);

	Nan::SetPrototypeMethod(tpl, "HoleFillingOff", HoleFillingOff);
	Nan::SetPrototypeMethod(tpl, "holeFillingOff", HoleFillingOff);

	Nan::SetPrototypeMethod(tpl, "HoleFillingOn", HoleFillingOn);
	Nan::SetPrototypeMethod(tpl, "holeFillingOn", HoleFillingOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetComputeGradients", SetComputeGradients);
	Nan::SetPrototypeMethod(tpl, "setComputeGradients", SetComputeGradients);

	Nan::SetPrototypeMethod(tpl, "SetComputeNormals", SetComputeNormals);
	Nan::SetPrototypeMethod(tpl, "setComputeNormals", SetComputeNormals);

	Nan::SetPrototypeMethod(tpl, "SetHoleFilling", SetHoleFilling);
	Nan::SetPrototypeMethod(tpl, "setHoleFilling", SetHoleFilling);

	Nan::SetPrototypeMethod(tpl, "SetRadius", SetRadius);
	Nan::SetPrototypeMethod(tpl, "setRadius", SetRadius);

#ifdef VTK_NODE_PLUS_VTKEXTRACTSURFACEWRAP_INITPTPL
	VTK_NODE_PLUS_VTKEXTRACTSURFACEWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkExtractSurfaceWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkExtractSurface> native = vtkSmartPointer<vtkExtractSurface>::New();
		VtkExtractSurfaceWrap* obj = new VtkExtractSurfaceWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkExtractSurfaceWrap::ComputeGradientsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeGradientsOff();
}

void VtkExtractSurfaceWrap::ComputeGradientsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeGradientsOn();
}

void VtkExtractSurfaceWrap::ComputeNormalsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeNormalsOff();
}

void VtkExtractSurfaceWrap::ComputeNormalsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeNormalsOn();
}

void VtkExtractSurfaceWrap::GetComputeGradients(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeGradients();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractSurfaceWrap::GetComputeNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeNormals();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractSurfaceWrap::GetHoleFilling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHoleFilling();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractSurfaceWrap::GetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractSurfaceWrap::GetRadiusMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadiusMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractSurfaceWrap::GetRadiusMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadiusMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractSurfaceWrap::HoleFillingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->HoleFillingOff();
}

void VtkExtractSurfaceWrap::HoleFillingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->HoleFillingOn();
}

void VtkExtractSurfaceWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
	vtkExtractSurface * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkExtractSurfaceWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkExtractSurfaceWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkExtractSurfaceWrap *w = new VtkExtractSurfaceWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExtractSurfaceWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkExtractSurface * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkExtractSurfaceWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkExtractSurfaceWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkExtractSurfaceWrap *w = new VtkExtractSurfaceWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractSurfaceWrap::SetComputeGradients(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeGradients(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractSurfaceWrap::SetComputeNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeNormals(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractSurfaceWrap::SetHoleFilling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHoleFilling(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractSurfaceWrap::SetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractSurfaceWrap *wrapper = ObjectWrap::Unwrap<VtkExtractSurfaceWrap>(info.Holder());
	vtkExtractSurface *native = (vtkExtractSurface *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

