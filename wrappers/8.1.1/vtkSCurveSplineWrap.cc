/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkSplineWrap.h"
#include "vtkSCurveSplineWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkSCurveSplineWrap::ptpl;

VtkSCurveSplineWrap::VtkSCurveSplineWrap()
{ }

VtkSCurveSplineWrap::VtkSCurveSplineWrap(vtkSmartPointer<vtkSCurveSpline> _native)
{ native = _native; }

VtkSCurveSplineWrap::~VtkSCurveSplineWrap()
{ }

void VtkSCurveSplineWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkSCurveSpline").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("SCurveSpline").ToLocalChecked(), ConstructorGetter);
}

void VtkSCurveSplineWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkSCurveSplineWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkSplineWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkSplineWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkSCurveSplineWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "Compute", Compute);
	Nan::SetPrototypeMethod(tpl, "compute", Compute);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "Evaluate", Evaluate);
	Nan::SetPrototypeMethod(tpl, "evaluate", Evaluate);

	Nan::SetPrototypeMethod(tpl, "GetNodeWeight", GetNodeWeight);
	Nan::SetPrototypeMethod(tpl, "getNodeWeight", GetNodeWeight);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetNodeWeight", SetNodeWeight);
	Nan::SetPrototypeMethod(tpl, "setNodeWeight", SetNodeWeight);

#ifdef VTK_NODE_PLUS_VTKSCURVESPLINEWRAP_INITPTPL
	VTK_NODE_PLUS_VTKSCURVESPLINEWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkSCurveSplineWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkSCurveSpline> native = vtkSmartPointer<vtkSCurveSpline>::New();
		VtkSCurveSplineWrap* obj = new VtkSCurveSplineWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkSCurveSplineWrap::Compute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSCurveSplineWrap *wrapper = ObjectWrap::Unwrap<VtkSCurveSplineWrap>(info.Holder());
	vtkSCurveSpline *native = (vtkSCurveSpline *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Compute();
}

void VtkSCurveSplineWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSCurveSplineWrap *wrapper = ObjectWrap::Unwrap<VtkSCurveSplineWrap>(info.Holder());
	vtkSCurveSpline *native = (vtkSCurveSpline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkSplineWrap::ptpl))->HasInstance(info[0]))
	{
		VtkSplineWrap *a0 = ObjectWrap::Unwrap<VtkSplineWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DeepCopy(
			(vtkSpline *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSCurveSplineWrap::Evaluate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSCurveSplineWrap *wrapper = ObjectWrap::Unwrap<VtkSCurveSplineWrap>(info.Holder());
	vtkSCurveSpline *native = (vtkSCurveSpline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		double r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->Evaluate(
			info[0]->NumberValue()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSCurveSplineWrap::GetNodeWeight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSCurveSplineWrap *wrapper = ObjectWrap::Unwrap<VtkSCurveSplineWrap>(info.Holder());
	vtkSCurveSpline *native = (vtkSCurveSpline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNodeWeight();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSCurveSplineWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSCurveSplineWrap *wrapper = ObjectWrap::Unwrap<VtkSCurveSplineWrap>(info.Holder());
	vtkSCurveSpline *native = (vtkSCurveSpline *)wrapper->native.GetPointer();
	vtkSCurveSpline * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkSCurveSplineWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkSCurveSplineWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkSCurveSplineWrap *w = new VtkSCurveSplineWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSCurveSplineWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSCurveSplineWrap *wrapper = ObjectWrap::Unwrap<VtkSCurveSplineWrap>(info.Holder());
	vtkSCurveSpline *native = (vtkSCurveSpline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkSCurveSpline * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkSCurveSplineWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkSCurveSplineWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkSCurveSplineWrap *w = new VtkSCurveSplineWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSCurveSplineWrap::SetNodeWeight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSCurveSplineWrap *wrapper = ObjectWrap::Unwrap<VtkSCurveSplineWrap>(info.Holder());
	vtkSCurveSpline *native = (vtkSCurveSpline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNodeWeight(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

