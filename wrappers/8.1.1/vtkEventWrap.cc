/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkObjectWrap.h"
#include "vtkEventWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkRenderWindowInteractorWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkEventWrap::ptpl;

VtkEventWrap::VtkEventWrap()
{ }

VtkEventWrap::VtkEventWrap(vtkSmartPointer<vtkEvent> _native)
{ native = _native; }

VtkEventWrap::~VtkEventWrap()
{ }

void VtkEventWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkEvent").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("Event").ToLocalChecked(), ConstructorGetter);
}

void VtkEventWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkEventWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkEventWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetEventId", GetEventId);
	Nan::SetPrototypeMethod(tpl, "getEventId", GetEventId);

	Nan::SetPrototypeMethod(tpl, "GetKeyCode", GetKeyCode);
	Nan::SetPrototypeMethod(tpl, "getKeyCode", GetKeyCode);

	Nan::SetPrototypeMethod(tpl, "GetKeySym", GetKeySym);
	Nan::SetPrototypeMethod(tpl, "getKeySym", GetKeySym);

	Nan::SetPrototypeMethod(tpl, "GetModifier", GetModifier);
	Nan::SetPrototypeMethod(tpl, "getModifier", GetModifier);

	Nan::SetPrototypeMethod(tpl, "GetRepeatCount", GetRepeatCount);
	Nan::SetPrototypeMethod(tpl, "getRepeatCount", GetRepeatCount);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetEventId", SetEventId);
	Nan::SetPrototypeMethod(tpl, "setEventId", SetEventId);

	Nan::SetPrototypeMethod(tpl, "SetKeyCode", SetKeyCode);
	Nan::SetPrototypeMethod(tpl, "setKeyCode", SetKeyCode);

	Nan::SetPrototypeMethod(tpl, "SetKeySym", SetKeySym);
	Nan::SetPrototypeMethod(tpl, "setKeySym", SetKeySym);

	Nan::SetPrototypeMethod(tpl, "SetModifier", SetModifier);
	Nan::SetPrototypeMethod(tpl, "setModifier", SetModifier);

	Nan::SetPrototypeMethod(tpl, "SetRepeatCount", SetRepeatCount);
	Nan::SetPrototypeMethod(tpl, "setRepeatCount", SetRepeatCount);

#ifdef VTK_NODE_PLUS_VTKEVENTWRAP_INITPTPL
	VTK_NODE_PLUS_VTKEVENTWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkEventWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkEvent> native = vtkSmartPointer<vtkEvent>::New();
		VtkEventWrap* obj = new VtkEventWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkEventWrap::GetEventId(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEventWrap *wrapper = ObjectWrap::Unwrap<VtkEventWrap>(info.Holder());
	vtkEvent *native = (vtkEvent *)wrapper->native.GetPointer();
	unsigned int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEventId();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEventWrap::GetKeyCode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEventWrap *wrapper = ObjectWrap::Unwrap<VtkEventWrap>(info.Holder());
	vtkEvent *native = (vtkEvent *)wrapper->native.GetPointer();
	char r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetKeyCode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEventWrap::GetKeySym(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEventWrap *wrapper = ObjectWrap::Unwrap<VtkEventWrap>(info.Holder());
	vtkEvent *native = (vtkEvent *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetKeySym();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkEventWrap::GetModifier(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEventWrap *wrapper = ObjectWrap::Unwrap<VtkEventWrap>(info.Holder());
	vtkEvent *native = (vtkEvent *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRenderWindowInteractorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRenderWindowInteractorWrap *a0 = ObjectWrap::Unwrap<VtkRenderWindowInteractorWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetModifier(
			(vtkRenderWindowInteractor *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetModifier();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEventWrap::GetRepeatCount(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEventWrap *wrapper = ObjectWrap::Unwrap<VtkEventWrap>(info.Holder());
	vtkEvent *native = (vtkEvent *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRepeatCount();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEventWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEventWrap *wrapper = ObjectWrap::Unwrap<VtkEventWrap>(info.Holder());
	vtkEvent *native = (vtkEvent *)wrapper->native.GetPointer();
	vtkEvent * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkEventWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkEventWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkEventWrap *w = new VtkEventWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkEventWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEventWrap *wrapper = ObjectWrap::Unwrap<VtkEventWrap>(info.Holder());
	vtkEvent *native = (vtkEvent *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkEvent * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkEventWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkEventWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkEventWrap *w = new VtkEventWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkEventWrap::SetEventId(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEventWrap *wrapper = ObjectWrap::Unwrap<VtkEventWrap>(info.Holder());
	vtkEvent *native = (vtkEvent *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsUint32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEventId(
			info[0]->Uint32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkEventWrap::SetKeyCode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEventWrap *wrapper = ObjectWrap::Unwrap<VtkEventWrap>(info.Holder());
	vtkEvent *native = (vtkEvent *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char a0 = info[0]->Int32Value();
		if( a0 < -127 || a0 > 128 )
		{
			Nan::ThrowError("char value out of bounds.");
			return;
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKeyCode(
			a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkEventWrap::SetKeySym(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEventWrap *wrapper = ObjectWrap::Unwrap<VtkEventWrap>(info.Holder());
	vtkEvent *native = (vtkEvent *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetKeySym(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkEventWrap::SetModifier(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEventWrap *wrapper = ObjectWrap::Unwrap<VtkEventWrap>(info.Holder());
	vtkEvent *native = (vtkEvent *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetModifier(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkEventWrap::SetRepeatCount(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEventWrap *wrapper = ObjectWrap::Unwrap<VtkEventWrap>(info.Holder());
	vtkEvent *native = (vtkEvent *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRepeatCount(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

