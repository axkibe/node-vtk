/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkUnstructuredGridAlgorithmWrap.h"
#include "vtkNetCDFCAMReaderWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkNetCDFCAMReaderWrap::ptpl;

VtkNetCDFCAMReaderWrap::VtkNetCDFCAMReaderWrap()
{ }

VtkNetCDFCAMReaderWrap::VtkNetCDFCAMReaderWrap(vtkSmartPointer<vtkNetCDFCAMReader> _native)
{ native = _native; }

VtkNetCDFCAMReaderWrap::~VtkNetCDFCAMReaderWrap()
{ }

void VtkNetCDFCAMReaderWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkNetCDFCAMReader").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("NetCDFCAMReader").ToLocalChecked(), ConstructorGetter);
}

void VtkNetCDFCAMReaderWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkNetCDFCAMReaderWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkUnstructuredGridAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkUnstructuredGridAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkNetCDFCAMReaderWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CanReadFile", CanReadFile);
	Nan::SetPrototypeMethod(tpl, "canReadFile", CanReadFile);

	Nan::SetPrototypeMethod(tpl, "DisableAllPointArrays", DisableAllPointArrays);
	Nan::SetPrototypeMethod(tpl, "disableAllPointArrays", DisableAllPointArrays);

	Nan::SetPrototypeMethod(tpl, "EnableAllPointArrays", EnableAllPointArrays);
	Nan::SetPrototypeMethod(tpl, "enableAllPointArrays", EnableAllPointArrays);

	Nan::SetPrototypeMethod(tpl, "GetConnectivityFileName", GetConnectivityFileName);
	Nan::SetPrototypeMethod(tpl, "getConnectivityFileName", GetConnectivityFileName);

	Nan::SetPrototypeMethod(tpl, "GetFileName", GetFileName);
	Nan::SetPrototypeMethod(tpl, "getFileName", GetFileName);

	Nan::SetPrototypeMethod(tpl, "GetInterfaceLayerIndex", GetInterfaceLayerIndex);
	Nan::SetPrototypeMethod(tpl, "getInterfaceLayerIndex", GetInterfaceLayerIndex);

	Nan::SetPrototypeMethod(tpl, "GetInterfaceLayersRange", GetInterfaceLayersRange);
	Nan::SetPrototypeMethod(tpl, "getInterfaceLayersRange", GetInterfaceLayersRange);

	Nan::SetPrototypeMethod(tpl, "GetMidpointLayerIndex", GetMidpointLayerIndex);
	Nan::SetPrototypeMethod(tpl, "getMidpointLayerIndex", GetMidpointLayerIndex);

	Nan::SetPrototypeMethod(tpl, "GetMidpointLayersRange", GetMidpointLayersRange);
	Nan::SetPrototypeMethod(tpl, "getMidpointLayersRange", GetMidpointLayersRange);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPointArrays", GetNumberOfPointArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPointArrays", GetNumberOfPointArrays);

	Nan::SetPrototypeMethod(tpl, "GetPointArrayName", GetPointArrayName);
	Nan::SetPrototypeMethod(tpl, "getPointArrayName", GetPointArrayName);

	Nan::SetPrototypeMethod(tpl, "GetPointArrayStatus", GetPointArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getPointArrayStatus", GetPointArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetSingleInterfaceLayer", GetSingleInterfaceLayer);
	Nan::SetPrototypeMethod(tpl, "getSingleInterfaceLayer", GetSingleInterfaceLayer);

	Nan::SetPrototypeMethod(tpl, "GetSingleMidpointLayer", GetSingleMidpointLayer);
	Nan::SetPrototypeMethod(tpl, "getSingleMidpointLayer", GetSingleMidpointLayer);

	Nan::SetPrototypeMethod(tpl, "GetVerticalDimension", GetVerticalDimension);
	Nan::SetPrototypeMethod(tpl, "getVerticalDimension", GetVerticalDimension);

	Nan::SetPrototypeMethod(tpl, "GetVerticalDimensionMaxValue", GetVerticalDimensionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getVerticalDimensionMaxValue", GetVerticalDimensionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetVerticalDimensionMinValue", GetVerticalDimensionMinValue);
	Nan::SetPrototypeMethod(tpl, "getVerticalDimensionMinValue", GetVerticalDimensionMinValue);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetConnectivityFileName", SetConnectivityFileName);
	Nan::SetPrototypeMethod(tpl, "setConnectivityFileName", SetConnectivityFileName);

	Nan::SetPrototypeMethod(tpl, "SetFileName", SetFileName);
	Nan::SetPrototypeMethod(tpl, "setFileName", SetFileName);

	Nan::SetPrototypeMethod(tpl, "SetInterfaceLayerIndex", SetInterfaceLayerIndex);
	Nan::SetPrototypeMethod(tpl, "setInterfaceLayerIndex", SetInterfaceLayerIndex);

	Nan::SetPrototypeMethod(tpl, "SetMidpointLayerIndex", SetMidpointLayerIndex);
	Nan::SetPrototypeMethod(tpl, "setMidpointLayerIndex", SetMidpointLayerIndex);

	Nan::SetPrototypeMethod(tpl, "SetPointArrayStatus", SetPointArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setPointArrayStatus", SetPointArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetSingleInterfaceLayer", SetSingleInterfaceLayer);
	Nan::SetPrototypeMethod(tpl, "setSingleInterfaceLayer", SetSingleInterfaceLayer);

	Nan::SetPrototypeMethod(tpl, "SetSingleMidpointLayer", SetSingleMidpointLayer);
	Nan::SetPrototypeMethod(tpl, "setSingleMidpointLayer", SetSingleMidpointLayer);

	Nan::SetPrototypeMethod(tpl, "SetVerticalDimension", SetVerticalDimension);
	Nan::SetPrototypeMethod(tpl, "setVerticalDimension", SetVerticalDimension);

	Nan::SetPrototypeMethod(tpl, "SingleInterfaceLayerOff", SingleInterfaceLayerOff);
	Nan::SetPrototypeMethod(tpl, "singleInterfaceLayerOff", SingleInterfaceLayerOff);

	Nan::SetPrototypeMethod(tpl, "SingleInterfaceLayerOn", SingleInterfaceLayerOn);
	Nan::SetPrototypeMethod(tpl, "singleInterfaceLayerOn", SingleInterfaceLayerOn);

	Nan::SetPrototypeMethod(tpl, "SingleMidpointLayerOff", SingleMidpointLayerOff);
	Nan::SetPrototypeMethod(tpl, "singleMidpointLayerOff", SingleMidpointLayerOff);

	Nan::SetPrototypeMethod(tpl, "SingleMidpointLayerOn", SingleMidpointLayerOn);
	Nan::SetPrototypeMethod(tpl, "singleMidpointLayerOn", SingleMidpointLayerOn);

#ifdef VTK_NODE_PLUS_VTKNETCDFCAMREADERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKNETCDFCAMREADERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkNetCDFCAMReaderWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkNetCDFCAMReader> native = vtkSmartPointer<vtkNetCDFCAMReader>::New();
		VtkNetCDFCAMReaderWrap* obj = new VtkNetCDFCAMReaderWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkNetCDFCAMReaderWrap::CanReadFile(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->CanReadFile(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkNetCDFCAMReaderWrap::DisableAllPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DisableAllPointArrays();
}

void VtkNetCDFCAMReaderWrap::EnableAllPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EnableAllPointArrays();
}

void VtkNetCDFCAMReaderWrap::GetConnectivityFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConnectivityFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkNetCDFCAMReaderWrap::GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkNetCDFCAMReaderWrap::GetInterfaceLayerIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInterfaceLayerIndex();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkNetCDFCAMReaderWrap::GetInterfaceLayersRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	int const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInterfaceLayersRange();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 2 * sizeof(int));
	Local<v8::Int32Array> at = v8::Int32Array::New(ab, 0, 2);
	memcpy(ab->GetContents().Data(), r, 2 * sizeof(int));
	info.GetReturnValue().Set(at);
}

void VtkNetCDFCAMReaderWrap::GetMidpointLayerIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMidpointLayerIndex();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkNetCDFCAMReaderWrap::GetMidpointLayersRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	int const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMidpointLayersRange();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 2 * sizeof(int));
	Local<v8::Int32Array> at = v8::Int32Array::New(ab, 0, 2);
	memcpy(ab->GetContents().Data(), r, 2 * sizeof(int));
	info.GetReturnValue().Set(at);
}

void VtkNetCDFCAMReaderWrap::GetNumberOfPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPointArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkNetCDFCAMReaderWrap::GetPointArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPointArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkNetCDFCAMReaderWrap::GetPointArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPointArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkNetCDFCAMReaderWrap::GetSingleInterfaceLayer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSingleInterfaceLayer();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkNetCDFCAMReaderWrap::GetSingleMidpointLayer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSingleMidpointLayer();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkNetCDFCAMReaderWrap::GetVerticalDimension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVerticalDimension();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkNetCDFCAMReaderWrap::GetVerticalDimensionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVerticalDimensionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkNetCDFCAMReaderWrap::GetVerticalDimensionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVerticalDimensionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkNetCDFCAMReaderWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	vtkNetCDFCAMReader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkNetCDFCAMReaderWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkNetCDFCAMReaderWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkNetCDFCAMReaderWrap *w = new VtkNetCDFCAMReaderWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkNetCDFCAMReaderWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkNetCDFCAMReader * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkNetCDFCAMReaderWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkNetCDFCAMReaderWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkNetCDFCAMReaderWrap *w = new VtkNetCDFCAMReaderWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkNetCDFCAMReaderWrap::SetConnectivityFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConnectivityFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkNetCDFCAMReaderWrap::SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkNetCDFCAMReaderWrap::SetInterfaceLayerIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInterfaceLayerIndex(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkNetCDFCAMReaderWrap::SetMidpointLayerIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMidpointLayerIndex(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkNetCDFCAMReaderWrap::SetPointArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetPointArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkNetCDFCAMReaderWrap::SetSingleInterfaceLayer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSingleInterfaceLayer(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkNetCDFCAMReaderWrap::SetSingleMidpointLayer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSingleMidpointLayer(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkNetCDFCAMReaderWrap::SetVerticalDimension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVerticalDimension(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkNetCDFCAMReaderWrap::SingleInterfaceLayerOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SingleInterfaceLayerOff();
}

void VtkNetCDFCAMReaderWrap::SingleInterfaceLayerOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SingleInterfaceLayerOn();
}

void VtkNetCDFCAMReaderWrap::SingleMidpointLayerOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SingleMidpointLayerOff();
}

void VtkNetCDFCAMReaderWrap::SingleMidpointLayerOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkNetCDFCAMReaderWrap *wrapper = ObjectWrap::Unwrap<VtkNetCDFCAMReaderWrap>(info.Holder());
	vtkNetCDFCAMReader *native = (vtkNetCDFCAMReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SingleMidpointLayerOn();
}

