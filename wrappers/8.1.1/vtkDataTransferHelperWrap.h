/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKDATATRANSFERHELPERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKDATATRANSFERHELPERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkDataTransferHelper.h>

#include "vtkObjectWrap.h"
#include "../../plus/plus.h"

class VtkDataTransferHelperWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkDataTransferHelperWrap(vtkSmartPointer<vtkDataTransferHelper>);
		VtkDataTransferHelperWrap();
		~VtkDataTransferHelperWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void Download(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DownloadAsync1(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DownloadAsync2(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCPUExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCPUExtentIsValid(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetContext(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGPUExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGPUExtentIsValid(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMinTextureDimension(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetShaderSupportsTextureInt(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTextureExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTextureExtentIsValid(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsSupported(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCPUExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetContext(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGPUExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMinTextureDimension(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetShaderSupportsTextureInt(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetTextureExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKDATATRANSFERHELPERWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKDATATRANSFERHELPERWRAP_CLASSDEF
#endif
};

#endif
