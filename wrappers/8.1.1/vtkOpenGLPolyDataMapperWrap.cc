/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataMapperWrap.h"
#include "vtkOpenGLPolyDataMapperWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkRendererWrap.h"
#include "vtkActorWrap.h"
#include "vtkWindowWrap.h"
#include "vtkAbstractMapperWrap.h"
#include "vtkOpenGLVertexBufferObjectGroupWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkOpenGLPolyDataMapperWrap::ptpl;

VtkOpenGLPolyDataMapperWrap::VtkOpenGLPolyDataMapperWrap()
{ }

VtkOpenGLPolyDataMapperWrap::VtkOpenGLPolyDataMapperWrap(vtkSmartPointer<vtkOpenGLPolyDataMapper> _native)
{ native = _native; }

VtkOpenGLPolyDataMapperWrap::~VtkOpenGLPolyDataMapperWrap()
{ }

void VtkOpenGLPolyDataMapperWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkOpenGLPolyDataMapper").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("OpenGLPolyDataMapper").ToLocalChecked(), ConstructorGetter);
}

void VtkOpenGLPolyDataMapperWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkOpenGLPolyDataMapperWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataMapperWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataMapperWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkOpenGLPolyDataMapperWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ForceHaveAppleBugOff", ForceHaveAppleBugOff);
	Nan::SetPrototypeMethod(tpl, "forceHaveAppleBugOff", ForceHaveAppleBugOff);

	Nan::SetPrototypeMethod(tpl, "ForceHaveAppleBugOn", ForceHaveAppleBugOn);
	Nan::SetPrototypeMethod(tpl, "forceHaveAppleBugOn", ForceHaveAppleBugOn);

	Nan::SetPrototypeMethod(tpl, "GetCellIdArrayName", GetCellIdArrayName);
	Nan::SetPrototypeMethod(tpl, "getCellIdArrayName", GetCellIdArrayName);

	Nan::SetPrototypeMethod(tpl, "GetCompositeIdArrayName", GetCompositeIdArrayName);
	Nan::SetPrototypeMethod(tpl, "getCompositeIdArrayName", GetCompositeIdArrayName);

	Nan::SetPrototypeMethod(tpl, "GetFragmentShaderCode", GetFragmentShaderCode);
	Nan::SetPrototypeMethod(tpl, "getFragmentShaderCode", GetFragmentShaderCode);

	Nan::SetPrototypeMethod(tpl, "GetGeometryShaderCode", GetGeometryShaderCode);
	Nan::SetPrototypeMethod(tpl, "getGeometryShaderCode", GetGeometryShaderCode);

	Nan::SetPrototypeMethod(tpl, "GetHaveAppleBug", GetHaveAppleBug);
	Nan::SetPrototypeMethod(tpl, "getHaveAppleBug", GetHaveAppleBug);

	Nan::SetPrototypeMethod(tpl, "GetIsOpaque", GetIsOpaque);
	Nan::SetPrototypeMethod(tpl, "getIsOpaque", GetIsOpaque);

	Nan::SetPrototypeMethod(tpl, "GetPointIdArrayName", GetPointIdArrayName);
	Nan::SetPrototypeMethod(tpl, "getPointIdArrayName", GetPointIdArrayName);

	Nan::SetPrototypeMethod(tpl, "GetPopulateSelectionSettings", GetPopulateSelectionSettings);
	Nan::SetPrototypeMethod(tpl, "getPopulateSelectionSettings", GetPopulateSelectionSettings);

	Nan::SetPrototypeMethod(tpl, "GetProcessIdArrayName", GetProcessIdArrayName);
	Nan::SetPrototypeMethod(tpl, "getProcessIdArrayName", GetProcessIdArrayName);

	Nan::SetPrototypeMethod(tpl, "GetSupportsSelection", GetSupportsSelection);
	Nan::SetPrototypeMethod(tpl, "getSupportsSelection", GetSupportsSelection);

	Nan::SetPrototypeMethod(tpl, "GetVBOs", GetVBOs);
	Nan::SetPrototypeMethod(tpl, "getVBOs", GetVBOs);

	Nan::SetPrototypeMethod(tpl, "GetVertexShaderCode", GetVertexShaderCode);
	Nan::SetPrototypeMethod(tpl, "getVertexShaderCode", GetVertexShaderCode);

	Nan::SetPrototypeMethod(tpl, "MapDataArrayToVertexAttribute", MapDataArrayToVertexAttribute);
	Nan::SetPrototypeMethod(tpl, "mapDataArrayToVertexAttribute", MapDataArrayToVertexAttribute);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "RemoveAllVertexAttributeMappings", RemoveAllVertexAttributeMappings);
	Nan::SetPrototypeMethod(tpl, "removeAllVertexAttributeMappings", RemoveAllVertexAttributeMappings);

	Nan::SetPrototypeMethod(tpl, "RemoveVertexAttributeMapping", RemoveVertexAttributeMapping);
	Nan::SetPrototypeMethod(tpl, "removeVertexAttributeMapping", RemoveVertexAttributeMapping);

	Nan::SetPrototypeMethod(tpl, "RenderPiece", RenderPiece);
	Nan::SetPrototypeMethod(tpl, "renderPiece", RenderPiece);

	Nan::SetPrototypeMethod(tpl, "RenderPieceDraw", RenderPieceDraw);
	Nan::SetPrototypeMethod(tpl, "renderPieceDraw", RenderPieceDraw);

	Nan::SetPrototypeMethod(tpl, "RenderPieceFinish", RenderPieceFinish);
	Nan::SetPrototypeMethod(tpl, "renderPieceFinish", RenderPieceFinish);

	Nan::SetPrototypeMethod(tpl, "RenderPieceStart", RenderPieceStart);
	Nan::SetPrototypeMethod(tpl, "renderPieceStart", RenderPieceStart);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCellIdArrayName", SetCellIdArrayName);
	Nan::SetPrototypeMethod(tpl, "setCellIdArrayName", SetCellIdArrayName);

	Nan::SetPrototypeMethod(tpl, "SetCompositeIdArrayName", SetCompositeIdArrayName);
	Nan::SetPrototypeMethod(tpl, "setCompositeIdArrayName", SetCompositeIdArrayName);

	Nan::SetPrototypeMethod(tpl, "SetFragmentShaderCode", SetFragmentShaderCode);
	Nan::SetPrototypeMethod(tpl, "setFragmentShaderCode", SetFragmentShaderCode);

	Nan::SetPrototypeMethod(tpl, "SetGeometryShaderCode", SetGeometryShaderCode);
	Nan::SetPrototypeMethod(tpl, "setGeometryShaderCode", SetGeometryShaderCode);

	Nan::SetPrototypeMethod(tpl, "SetPointIdArrayName", SetPointIdArrayName);
	Nan::SetPrototypeMethod(tpl, "setPointIdArrayName", SetPointIdArrayName);

	Nan::SetPrototypeMethod(tpl, "SetPopulateSelectionSettings", SetPopulateSelectionSettings);
	Nan::SetPrototypeMethod(tpl, "setPopulateSelectionSettings", SetPopulateSelectionSettings);

	Nan::SetPrototypeMethod(tpl, "SetProcessIdArrayName", SetProcessIdArrayName);
	Nan::SetPrototypeMethod(tpl, "setProcessIdArrayName", SetProcessIdArrayName);

	Nan::SetPrototypeMethod(tpl, "SetVBOShiftScaleMethod", SetVBOShiftScaleMethod);
	Nan::SetPrototypeMethod(tpl, "setVBOShiftScaleMethod", SetVBOShiftScaleMethod);

	Nan::SetPrototypeMethod(tpl, "SetVertexShaderCode", SetVertexShaderCode);
	Nan::SetPrototypeMethod(tpl, "setVertexShaderCode", SetVertexShaderCode);

	Nan::SetPrototypeMethod(tpl, "ShallowCopy", ShallowCopy);
	Nan::SetPrototypeMethod(tpl, "shallowCopy", ShallowCopy);

#ifdef VTK_NODE_PLUS_VTKOPENGLPOLYDATAMAPPERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKOPENGLPOLYDATAMAPPERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkOpenGLPolyDataMapperWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkOpenGLPolyDataMapper> native = vtkSmartPointer<vtkOpenGLPolyDataMapper>::New();
		VtkOpenGLPolyDataMapperWrap* obj = new VtkOpenGLPolyDataMapperWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkOpenGLPolyDataMapperWrap::ForceHaveAppleBugOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ForceHaveAppleBugOff();
}

void VtkOpenGLPolyDataMapperWrap::ForceHaveAppleBugOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ForceHaveAppleBugOn();
}

void VtkOpenGLPolyDataMapperWrap::GetCellIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCellIdArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenGLPolyDataMapperWrap::GetCompositeIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCompositeIdArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenGLPolyDataMapperWrap::GetFragmentShaderCode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFragmentShaderCode();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenGLPolyDataMapperWrap::GetGeometryShaderCode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGeometryShaderCode();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenGLPolyDataMapperWrap::GetHaveAppleBug(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHaveAppleBug();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenGLPolyDataMapperWrap::GetIsOpaque(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIsOpaque();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenGLPolyDataMapperWrap::GetPointIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointIdArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenGLPolyDataMapperWrap::GetPopulateSelectionSettings(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPopulateSelectionSettings();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenGLPolyDataMapperWrap::GetProcessIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProcessIdArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenGLPolyDataMapperWrap::GetSupportsSelection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSupportsSelection();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkOpenGLPolyDataMapperWrap::GetVBOs(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	vtkOpenGLVertexBufferObjectGroup * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVBOs();
	VtkOpenGLVertexBufferObjectGroupWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkOpenGLVertexBufferObjectGroupWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkOpenGLVertexBufferObjectGroupWrap *w = new VtkOpenGLVertexBufferObjectGroupWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkOpenGLPolyDataMapperWrap::GetVertexShaderCode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVertexShaderCode();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkOpenGLPolyDataMapperWrap::MapDataArrayToVertexAttribute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
										if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->MapDataArrayToVertexAttribute(
						*a0,
						*a1,
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	vtkOpenGLPolyDataMapper * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkOpenGLPolyDataMapperWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkOpenGLPolyDataMapperWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkOpenGLPolyDataMapperWrap *w = new VtkOpenGLPolyDataMapperWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkOpenGLPolyDataMapperWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::RemoveAllVertexAttributeMappings(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllVertexAttributeMappings();
}

void VtkOpenGLPolyDataMapperWrap::RemoveVertexAttributeMapping(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveVertexAttributeMapping(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::RenderPiece(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkActorWrap::ptpl))->HasInstance(info[1]))
		{
			VtkActorWrap *a1 = ObjectWrap::Unwrap<VtkActorWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->RenderPiece(
				(vtkRenderer *) a0->native.GetPointer(),
				(vtkActor *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::RenderPieceDraw(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkActorWrap::ptpl))->HasInstance(info[1]))
		{
			VtkActorWrap *a1 = ObjectWrap::Unwrap<VtkActorWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->RenderPieceDraw(
				(vtkRenderer *) a0->native.GetPointer(),
				(vtkActor *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::RenderPieceFinish(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkActorWrap::ptpl))->HasInstance(info[1]))
		{
			VtkActorWrap *a1 = ObjectWrap::Unwrap<VtkActorWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->RenderPieceFinish(
				(vtkRenderer *) a0->native.GetPointer(),
				(vtkActor *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::RenderPieceStart(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkActorWrap::ptpl))->HasInstance(info[1]))
		{
			VtkActorWrap *a1 = ObjectWrap::Unwrap<VtkActorWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->RenderPieceStart(
				(vtkRenderer *) a0->native.GetPointer(),
				(vtkActor *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkOpenGLPolyDataMapper * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkOpenGLPolyDataMapperWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkOpenGLPolyDataMapperWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkOpenGLPolyDataMapperWrap *w = new VtkOpenGLPolyDataMapperWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::SetCellIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCellIdArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::SetCompositeIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCompositeIdArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::SetFragmentShaderCode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFragmentShaderCode(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::SetGeometryShaderCode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGeometryShaderCode(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::SetPointIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPointIdArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::SetPopulateSelectionSettings(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPopulateSelectionSettings(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::SetProcessIdArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProcessIdArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::SetVBOShiftScaleMethod(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVBOShiftScaleMethod(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::SetVertexShaderCode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVertexShaderCode(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkOpenGLPolyDataMapperWrap::ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkOpenGLPolyDataMapperWrap *wrapper = ObjectWrap::Unwrap<VtkOpenGLPolyDataMapperWrap>(info.Holder());
	vtkOpenGLPolyDataMapper *native = (vtkOpenGLPolyDataMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractMapperWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractMapperWrap *a0 = ObjectWrap::Unwrap<VtkAbstractMapperWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ShallowCopy(
			(vtkAbstractMapper *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

