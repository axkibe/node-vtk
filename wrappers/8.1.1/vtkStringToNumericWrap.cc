/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkDataObjectAlgorithmWrap.h"
#include "vtkStringToNumericWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkStringToNumericWrap::ptpl;

VtkStringToNumericWrap::VtkStringToNumericWrap()
{ }

VtkStringToNumericWrap::VtkStringToNumericWrap(vtkSmartPointer<vtkStringToNumeric> _native)
{ native = _native; }

VtkStringToNumericWrap::~VtkStringToNumericWrap()
{ }

void VtkStringToNumericWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkStringToNumeric").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("StringToNumeric").ToLocalChecked(), ConstructorGetter);
}

void VtkStringToNumericWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkStringToNumericWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkDataObjectAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkDataObjectAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkStringToNumericWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ConvertCellDataOff", ConvertCellDataOff);
	Nan::SetPrototypeMethod(tpl, "convertCellDataOff", ConvertCellDataOff);

	Nan::SetPrototypeMethod(tpl, "ConvertCellDataOn", ConvertCellDataOn);
	Nan::SetPrototypeMethod(tpl, "convertCellDataOn", ConvertCellDataOn);

	Nan::SetPrototypeMethod(tpl, "ConvertEdgeDataOff", ConvertEdgeDataOff);
	Nan::SetPrototypeMethod(tpl, "convertEdgeDataOff", ConvertEdgeDataOff);

	Nan::SetPrototypeMethod(tpl, "ConvertEdgeDataOn", ConvertEdgeDataOn);
	Nan::SetPrototypeMethod(tpl, "convertEdgeDataOn", ConvertEdgeDataOn);

	Nan::SetPrototypeMethod(tpl, "ConvertFieldDataOff", ConvertFieldDataOff);
	Nan::SetPrototypeMethod(tpl, "convertFieldDataOff", ConvertFieldDataOff);

	Nan::SetPrototypeMethod(tpl, "ConvertFieldDataOn", ConvertFieldDataOn);
	Nan::SetPrototypeMethod(tpl, "convertFieldDataOn", ConvertFieldDataOn);

	Nan::SetPrototypeMethod(tpl, "ConvertPointDataOff", ConvertPointDataOff);
	Nan::SetPrototypeMethod(tpl, "convertPointDataOff", ConvertPointDataOff);

	Nan::SetPrototypeMethod(tpl, "ConvertPointDataOn", ConvertPointDataOn);
	Nan::SetPrototypeMethod(tpl, "convertPointDataOn", ConvertPointDataOn);

	Nan::SetPrototypeMethod(tpl, "ConvertRowDataOff", ConvertRowDataOff);
	Nan::SetPrototypeMethod(tpl, "convertRowDataOff", ConvertRowDataOff);

	Nan::SetPrototypeMethod(tpl, "ConvertRowDataOn", ConvertRowDataOn);
	Nan::SetPrototypeMethod(tpl, "convertRowDataOn", ConvertRowDataOn);

	Nan::SetPrototypeMethod(tpl, "ConvertVertexDataOff", ConvertVertexDataOff);
	Nan::SetPrototypeMethod(tpl, "convertVertexDataOff", ConvertVertexDataOff);

	Nan::SetPrototypeMethod(tpl, "ConvertVertexDataOn", ConvertVertexDataOn);
	Nan::SetPrototypeMethod(tpl, "convertVertexDataOn", ConvertVertexDataOn);

	Nan::SetPrototypeMethod(tpl, "ForceDoubleOff", ForceDoubleOff);
	Nan::SetPrototypeMethod(tpl, "forceDoubleOff", ForceDoubleOff);

	Nan::SetPrototypeMethod(tpl, "ForceDoubleOn", ForceDoubleOn);
	Nan::SetPrototypeMethod(tpl, "forceDoubleOn", ForceDoubleOn);

	Nan::SetPrototypeMethod(tpl, "GetConvertCellData", GetConvertCellData);
	Nan::SetPrototypeMethod(tpl, "getConvertCellData", GetConvertCellData);

	Nan::SetPrototypeMethod(tpl, "GetConvertEdgeData", GetConvertEdgeData);
	Nan::SetPrototypeMethod(tpl, "getConvertEdgeData", GetConvertEdgeData);

	Nan::SetPrototypeMethod(tpl, "GetConvertFieldData", GetConvertFieldData);
	Nan::SetPrototypeMethod(tpl, "getConvertFieldData", GetConvertFieldData);

	Nan::SetPrototypeMethod(tpl, "GetConvertPointData", GetConvertPointData);
	Nan::SetPrototypeMethod(tpl, "getConvertPointData", GetConvertPointData);

	Nan::SetPrototypeMethod(tpl, "GetConvertRowData", GetConvertRowData);
	Nan::SetPrototypeMethod(tpl, "getConvertRowData", GetConvertRowData);

	Nan::SetPrototypeMethod(tpl, "GetConvertVertexData", GetConvertVertexData);
	Nan::SetPrototypeMethod(tpl, "getConvertVertexData", GetConvertVertexData);

	Nan::SetPrototypeMethod(tpl, "GetDefaultDoubleValue", GetDefaultDoubleValue);
	Nan::SetPrototypeMethod(tpl, "getDefaultDoubleValue", GetDefaultDoubleValue);

	Nan::SetPrototypeMethod(tpl, "GetDefaultIntegerValue", GetDefaultIntegerValue);
	Nan::SetPrototypeMethod(tpl, "getDefaultIntegerValue", GetDefaultIntegerValue);

	Nan::SetPrototypeMethod(tpl, "GetForceDouble", GetForceDouble);
	Nan::SetPrototypeMethod(tpl, "getForceDouble", GetForceDouble);

	Nan::SetPrototypeMethod(tpl, "GetTrimWhitespacePriorToNumericConversion", GetTrimWhitespacePriorToNumericConversion);
	Nan::SetPrototypeMethod(tpl, "getTrimWhitespacePriorToNumericConversion", GetTrimWhitespacePriorToNumericConversion);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetConvertCellData", SetConvertCellData);
	Nan::SetPrototypeMethod(tpl, "setConvertCellData", SetConvertCellData);

	Nan::SetPrototypeMethod(tpl, "SetConvertEdgeData", SetConvertEdgeData);
	Nan::SetPrototypeMethod(tpl, "setConvertEdgeData", SetConvertEdgeData);

	Nan::SetPrototypeMethod(tpl, "SetConvertFieldData", SetConvertFieldData);
	Nan::SetPrototypeMethod(tpl, "setConvertFieldData", SetConvertFieldData);

	Nan::SetPrototypeMethod(tpl, "SetConvertPointData", SetConvertPointData);
	Nan::SetPrototypeMethod(tpl, "setConvertPointData", SetConvertPointData);

	Nan::SetPrototypeMethod(tpl, "SetConvertRowData", SetConvertRowData);
	Nan::SetPrototypeMethod(tpl, "setConvertRowData", SetConvertRowData);

	Nan::SetPrototypeMethod(tpl, "SetConvertVertexData", SetConvertVertexData);
	Nan::SetPrototypeMethod(tpl, "setConvertVertexData", SetConvertVertexData);

	Nan::SetPrototypeMethod(tpl, "SetDefaultDoubleValue", SetDefaultDoubleValue);
	Nan::SetPrototypeMethod(tpl, "setDefaultDoubleValue", SetDefaultDoubleValue);

	Nan::SetPrototypeMethod(tpl, "SetDefaultIntegerValue", SetDefaultIntegerValue);
	Nan::SetPrototypeMethod(tpl, "setDefaultIntegerValue", SetDefaultIntegerValue);

	Nan::SetPrototypeMethod(tpl, "SetForceDouble", SetForceDouble);
	Nan::SetPrototypeMethod(tpl, "setForceDouble", SetForceDouble);

	Nan::SetPrototypeMethod(tpl, "SetTrimWhitespacePriorToNumericConversion", SetTrimWhitespacePriorToNumericConversion);
	Nan::SetPrototypeMethod(tpl, "setTrimWhitespacePriorToNumericConversion", SetTrimWhitespacePriorToNumericConversion);

	Nan::SetPrototypeMethod(tpl, "TrimWhitespacePriorToNumericConversionOff", TrimWhitespacePriorToNumericConversionOff);
	Nan::SetPrototypeMethod(tpl, "trimWhitespacePriorToNumericConversionOff", TrimWhitespacePriorToNumericConversionOff);

	Nan::SetPrototypeMethod(tpl, "TrimWhitespacePriorToNumericConversionOn", TrimWhitespacePriorToNumericConversionOn);
	Nan::SetPrototypeMethod(tpl, "trimWhitespacePriorToNumericConversionOn", TrimWhitespacePriorToNumericConversionOn);

#ifdef VTK_NODE_PLUS_VTKSTRINGTONUMERICWRAP_INITPTPL
	VTK_NODE_PLUS_VTKSTRINGTONUMERICWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkStringToNumericWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkStringToNumeric> native = vtkSmartPointer<vtkStringToNumeric>::New();
		VtkStringToNumericWrap* obj = new VtkStringToNumericWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkStringToNumericWrap::ConvertCellDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertCellDataOff();
}

void VtkStringToNumericWrap::ConvertCellDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertCellDataOn();
}

void VtkStringToNumericWrap::ConvertEdgeDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertEdgeDataOff();
}

void VtkStringToNumericWrap::ConvertEdgeDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertEdgeDataOn();
}

void VtkStringToNumericWrap::ConvertFieldDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertFieldDataOff();
}

void VtkStringToNumericWrap::ConvertFieldDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertFieldDataOn();
}

void VtkStringToNumericWrap::ConvertPointDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertPointDataOff();
}

void VtkStringToNumericWrap::ConvertPointDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertPointDataOn();
}

void VtkStringToNumericWrap::ConvertRowDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertRowDataOff();
}

void VtkStringToNumericWrap::ConvertRowDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertRowDataOn();
}

void VtkStringToNumericWrap::ConvertVertexDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertVertexDataOff();
}

void VtkStringToNumericWrap::ConvertVertexDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertVertexDataOn();
}

void VtkStringToNumericWrap::ForceDoubleOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ForceDoubleOff();
}

void VtkStringToNumericWrap::ForceDoubleOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ForceDoubleOn();
}

void VtkStringToNumericWrap::GetConvertCellData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConvertCellData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStringToNumericWrap::GetConvertEdgeData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConvertEdgeData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStringToNumericWrap::GetConvertFieldData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConvertFieldData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStringToNumericWrap::GetConvertPointData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConvertPointData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStringToNumericWrap::GetConvertRowData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConvertRowData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStringToNumericWrap::GetConvertVertexData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConvertVertexData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStringToNumericWrap::GetDefaultDoubleValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDefaultDoubleValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStringToNumericWrap::GetDefaultIntegerValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDefaultIntegerValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStringToNumericWrap::GetForceDouble(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetForceDouble();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStringToNumericWrap::GetTrimWhitespacePriorToNumericConversion(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTrimWhitespacePriorToNumericConversion();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStringToNumericWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	vtkStringToNumeric * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkStringToNumericWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkStringToNumericWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStringToNumericWrap *w = new VtkStringToNumericWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStringToNumericWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkStringToNumeric * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkStringToNumericWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkStringToNumericWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkStringToNumericWrap *w = new VtkStringToNumericWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::SetConvertCellData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConvertCellData(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::SetConvertEdgeData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConvertEdgeData(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::SetConvertFieldData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConvertFieldData(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::SetConvertPointData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConvertPointData(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::SetConvertRowData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConvertRowData(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::SetConvertVertexData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConvertVertexData(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::SetDefaultDoubleValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDefaultDoubleValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::SetDefaultIntegerValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDefaultIntegerValue(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::SetForceDouble(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetForceDouble(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::SetTrimWhitespacePriorToNumericConversion(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTrimWhitespacePriorToNumericConversion(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::TrimWhitespacePriorToNumericConversionOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TrimWhitespacePriorToNumericConversionOff();
}

void VtkStringToNumericWrap::TrimWhitespacePriorToNumericConversionOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TrimWhitespacePriorToNumericConversionOn();
}

