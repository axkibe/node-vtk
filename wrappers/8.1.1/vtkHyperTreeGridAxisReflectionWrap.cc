/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkHyperTreeGridAlgorithmWrap.h"
#include "vtkHyperTreeGridAxisReflectionWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkHyperTreeGridAxisReflectionWrap::ptpl;

VtkHyperTreeGridAxisReflectionWrap::VtkHyperTreeGridAxisReflectionWrap()
{ }

VtkHyperTreeGridAxisReflectionWrap::VtkHyperTreeGridAxisReflectionWrap(vtkSmartPointer<vtkHyperTreeGridAxisReflection> _native)
{ native = _native; }

VtkHyperTreeGridAxisReflectionWrap::~VtkHyperTreeGridAxisReflectionWrap()
{ }

void VtkHyperTreeGridAxisReflectionWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkHyperTreeGridAxisReflection").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("HyperTreeGridAxisReflection").ToLocalChecked(), ConstructorGetter);
}

void VtkHyperTreeGridAxisReflectionWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkHyperTreeGridAxisReflectionWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkHyperTreeGridAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkHyperTreeGridAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkHyperTreeGridAxisReflectionWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetCenter", GetCenter);
	Nan::SetPrototypeMethod(tpl, "getCenter", GetCenter);

	Nan::SetPrototypeMethod(tpl, "GetPlane", GetPlane);
	Nan::SetPrototypeMethod(tpl, "getPlane", GetPlane);

	Nan::SetPrototypeMethod(tpl, "GetPlaneMaxValue", GetPlaneMaxValue);
	Nan::SetPrototypeMethod(tpl, "getPlaneMaxValue", GetPlaneMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetPlaneMinValue", GetPlaneMinValue);
	Nan::SetPrototypeMethod(tpl, "getPlaneMinValue", GetPlaneMinValue);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCenter", SetCenter);
	Nan::SetPrototypeMethod(tpl, "setCenter", SetCenter);

	Nan::SetPrototypeMethod(tpl, "SetPlane", SetPlane);
	Nan::SetPrototypeMethod(tpl, "setPlane", SetPlane);

	Nan::SetPrototypeMethod(tpl, "SetPlaneToX", SetPlaneToX);
	Nan::SetPrototypeMethod(tpl, "setPlaneToX", SetPlaneToX);

	Nan::SetPrototypeMethod(tpl, "SetPlaneToXMax", SetPlaneToXMax);
	Nan::SetPrototypeMethod(tpl, "setPlaneToXMax", SetPlaneToXMax);

	Nan::SetPrototypeMethod(tpl, "SetPlaneToXMin", SetPlaneToXMin);
	Nan::SetPrototypeMethod(tpl, "setPlaneToXMin", SetPlaneToXMin);

	Nan::SetPrototypeMethod(tpl, "SetPlaneToY", SetPlaneToY);
	Nan::SetPrototypeMethod(tpl, "setPlaneToY", SetPlaneToY);

	Nan::SetPrototypeMethod(tpl, "SetPlaneToYMax", SetPlaneToYMax);
	Nan::SetPrototypeMethod(tpl, "setPlaneToYMax", SetPlaneToYMax);

	Nan::SetPrototypeMethod(tpl, "SetPlaneToYMin", SetPlaneToYMin);
	Nan::SetPrototypeMethod(tpl, "setPlaneToYMin", SetPlaneToYMin);

	Nan::SetPrototypeMethod(tpl, "SetPlaneToZ", SetPlaneToZ);
	Nan::SetPrototypeMethod(tpl, "setPlaneToZ", SetPlaneToZ);

	Nan::SetPrototypeMethod(tpl, "SetPlaneToZMax", SetPlaneToZMax);
	Nan::SetPrototypeMethod(tpl, "setPlaneToZMax", SetPlaneToZMax);

	Nan::SetPrototypeMethod(tpl, "SetPlaneToZMin", SetPlaneToZMin);
	Nan::SetPrototypeMethod(tpl, "setPlaneToZMin", SetPlaneToZMin);

#ifdef VTK_NODE_PLUS_VTKHYPERTREEGRIDAXISREFLECTIONWRAP_INITPTPL
	VTK_NODE_PLUS_VTKHYPERTREEGRIDAXISREFLECTIONWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkHyperTreeGridAxisReflectionWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkHyperTreeGridAxisReflection> native = vtkSmartPointer<vtkHyperTreeGridAxisReflection>::New();
		VtkHyperTreeGridAxisReflectionWrap* obj = new VtkHyperTreeGridAxisReflectionWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkHyperTreeGridAxisReflectionWrap::GetCenter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCenter();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperTreeGridAxisReflectionWrap::GetPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPlane();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperTreeGridAxisReflectionWrap::GetPlaneMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPlaneMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperTreeGridAxisReflectionWrap::GetPlaneMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPlaneMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperTreeGridAxisReflectionWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
	vtkHyperTreeGridAxisReflection * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkHyperTreeGridAxisReflectionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkHyperTreeGridAxisReflectionWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkHyperTreeGridAxisReflectionWrap *w = new VtkHyperTreeGridAxisReflectionWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkHyperTreeGridAxisReflectionWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkHyperTreeGridAxisReflection * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkHyperTreeGridAxisReflectionWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkHyperTreeGridAxisReflectionWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkHyperTreeGridAxisReflectionWrap *w = new VtkHyperTreeGridAxisReflectionWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperTreeGridAxisReflectionWrap::SetCenter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCenter(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperTreeGridAxisReflectionWrap::SetPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPlane(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperTreeGridAxisReflectionWrap::SetPlaneToX(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetPlaneToX();
}

void VtkHyperTreeGridAxisReflectionWrap::SetPlaneToXMax(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetPlaneToXMax();
}

void VtkHyperTreeGridAxisReflectionWrap::SetPlaneToXMin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetPlaneToXMin();
}

void VtkHyperTreeGridAxisReflectionWrap::SetPlaneToY(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetPlaneToY();
}

void VtkHyperTreeGridAxisReflectionWrap::SetPlaneToYMax(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetPlaneToYMax();
}

void VtkHyperTreeGridAxisReflectionWrap::SetPlaneToYMin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetPlaneToYMin();
}

void VtkHyperTreeGridAxisReflectionWrap::SetPlaneToZ(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetPlaneToZ();
}

void VtkHyperTreeGridAxisReflectionWrap::SetPlaneToZMax(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetPlaneToZMax();
}

void VtkHyperTreeGridAxisReflectionWrap::SetPlaneToZMin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeGridAxisReflectionWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeGridAxisReflectionWrap>(info.Holder());
	vtkHyperTreeGridAxisReflection *native = (vtkHyperTreeGridAxisReflection *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetPlaneToZMin();
}

