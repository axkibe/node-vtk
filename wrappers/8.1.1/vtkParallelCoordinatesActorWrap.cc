/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkActor2DWrap.h"
#include "vtkParallelCoordinatesActorWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkTextPropertyWrap.h"
#include "vtkViewportWrap.h"
#include "vtkAlgorithmOutputWrap.h"
#include "vtkDataObjectWrap.h"
#include "vtkWindowWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkParallelCoordinatesActorWrap::ptpl;

VtkParallelCoordinatesActorWrap::VtkParallelCoordinatesActorWrap()
{ }

VtkParallelCoordinatesActorWrap::VtkParallelCoordinatesActorWrap(vtkSmartPointer<vtkParallelCoordinatesActor> _native)
{ native = _native; }

VtkParallelCoordinatesActorWrap::~VtkParallelCoordinatesActorWrap()
{ }

void VtkParallelCoordinatesActorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkParallelCoordinatesActor").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ParallelCoordinatesActor").ToLocalChecked(), ConstructorGetter);
}

void VtkParallelCoordinatesActorWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkParallelCoordinatesActorWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkActor2DWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkActor2DWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkParallelCoordinatesActorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetIndependentVariables", GetIndependentVariables);
	Nan::SetPrototypeMethod(tpl, "getIndependentVariables", GetIndependentVariables);

	Nan::SetPrototypeMethod(tpl, "GetIndependentVariablesMaxValue", GetIndependentVariablesMaxValue);
	Nan::SetPrototypeMethod(tpl, "getIndependentVariablesMaxValue", GetIndependentVariablesMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetIndependentVariablesMinValue", GetIndependentVariablesMinValue);
	Nan::SetPrototypeMethod(tpl, "getIndependentVariablesMinValue", GetIndependentVariablesMinValue);

	Nan::SetPrototypeMethod(tpl, "GetInput", GetInput);
	Nan::SetPrototypeMethod(tpl, "getInput", GetInput);

	Nan::SetPrototypeMethod(tpl, "GetLabelFormat", GetLabelFormat);
	Nan::SetPrototypeMethod(tpl, "getLabelFormat", GetLabelFormat);

	Nan::SetPrototypeMethod(tpl, "GetLabelTextProperty", GetLabelTextProperty);
	Nan::SetPrototypeMethod(tpl, "getLabelTextProperty", GetLabelTextProperty);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfLabels", GetNumberOfLabels);
	Nan::SetPrototypeMethod(tpl, "getNumberOfLabels", GetNumberOfLabels);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfLabelsMaxValue", GetNumberOfLabelsMaxValue);
	Nan::SetPrototypeMethod(tpl, "getNumberOfLabelsMaxValue", GetNumberOfLabelsMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfLabelsMinValue", GetNumberOfLabelsMinValue);
	Nan::SetPrototypeMethod(tpl, "getNumberOfLabelsMinValue", GetNumberOfLabelsMinValue);

	Nan::SetPrototypeMethod(tpl, "GetTitle", GetTitle);
	Nan::SetPrototypeMethod(tpl, "getTitle", GetTitle);

	Nan::SetPrototypeMethod(tpl, "GetTitleTextProperty", GetTitleTextProperty);
	Nan::SetPrototypeMethod(tpl, "getTitleTextProperty", GetTitleTextProperty);

	Nan::SetPrototypeMethod(tpl, "HasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "hasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "RenderOpaqueGeometry", RenderOpaqueGeometry);
	Nan::SetPrototypeMethod(tpl, "renderOpaqueGeometry", RenderOpaqueGeometry);

	Nan::SetPrototypeMethod(tpl, "RenderOverlay", RenderOverlay);
	Nan::SetPrototypeMethod(tpl, "renderOverlay", RenderOverlay);

	Nan::SetPrototypeMethod(tpl, "RenderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "renderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetIndependentVariables", SetIndependentVariables);
	Nan::SetPrototypeMethod(tpl, "setIndependentVariables", SetIndependentVariables);

	Nan::SetPrototypeMethod(tpl, "SetIndependentVariablesToColumns", SetIndependentVariablesToColumns);
	Nan::SetPrototypeMethod(tpl, "setIndependentVariablesToColumns", SetIndependentVariablesToColumns);

	Nan::SetPrototypeMethod(tpl, "SetIndependentVariablesToRows", SetIndependentVariablesToRows);
	Nan::SetPrototypeMethod(tpl, "setIndependentVariablesToRows", SetIndependentVariablesToRows);

	Nan::SetPrototypeMethod(tpl, "SetInputConnection", SetInputConnection);
	Nan::SetPrototypeMethod(tpl, "setInputConnection", SetInputConnection);

	Nan::SetPrototypeMethod(tpl, "SetInputData", SetInputData);
	Nan::SetPrototypeMethod(tpl, "setInputData", SetInputData);

	Nan::SetPrototypeMethod(tpl, "SetLabelFormat", SetLabelFormat);
	Nan::SetPrototypeMethod(tpl, "setLabelFormat", SetLabelFormat);

	Nan::SetPrototypeMethod(tpl, "SetLabelTextProperty", SetLabelTextProperty);
	Nan::SetPrototypeMethod(tpl, "setLabelTextProperty", SetLabelTextProperty);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfLabels", SetNumberOfLabels);
	Nan::SetPrototypeMethod(tpl, "setNumberOfLabels", SetNumberOfLabels);

	Nan::SetPrototypeMethod(tpl, "SetTitle", SetTitle);
	Nan::SetPrototypeMethod(tpl, "setTitle", SetTitle);

	Nan::SetPrototypeMethod(tpl, "SetTitleTextProperty", SetTitleTextProperty);
	Nan::SetPrototypeMethod(tpl, "setTitleTextProperty", SetTitleTextProperty);

#ifdef VTK_NODE_PLUS_VTKPARALLELCOORDINATESACTORWRAP_INITPTPL
	VTK_NODE_PLUS_VTKPARALLELCOORDINATESACTORWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkParallelCoordinatesActorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkParallelCoordinatesActor> native = vtkSmartPointer<vtkParallelCoordinatesActor>::New();
		VtkParallelCoordinatesActorWrap* obj = new VtkParallelCoordinatesActorWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkParallelCoordinatesActorWrap::GetIndependentVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIndependentVariables();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParallelCoordinatesActorWrap::GetIndependentVariablesMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIndependentVariablesMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParallelCoordinatesActorWrap::GetIndependentVariablesMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIndependentVariablesMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParallelCoordinatesActorWrap::GetInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	vtkDataObject * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInput();
	VtkDataObjectWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataObjectWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataObjectWrap *w = new VtkDataObjectWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkParallelCoordinatesActorWrap::GetLabelFormat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLabelFormat();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkParallelCoordinatesActorWrap::GetLabelTextProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	vtkTextProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLabelTextProperty();
	VtkTextPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTextPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTextPropertyWrap *w = new VtkTextPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkParallelCoordinatesActorWrap::GetNumberOfLabels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfLabels();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParallelCoordinatesActorWrap::GetNumberOfLabelsMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfLabelsMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParallelCoordinatesActorWrap::GetNumberOfLabelsMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfLabelsMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParallelCoordinatesActorWrap::GetTitle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTitle();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkParallelCoordinatesActorWrap::GetTitleTextProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	vtkTextProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTitleTextProperty();
	VtkTextPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTextPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTextPropertyWrap *w = new VtkTextPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkParallelCoordinatesActorWrap::HasTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasTranslucentPolygonalGeometry();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkParallelCoordinatesActorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	vtkParallelCoordinatesActor * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkParallelCoordinatesActorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkParallelCoordinatesActorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkParallelCoordinatesActorWrap *w = new VtkParallelCoordinatesActorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkParallelCoordinatesActorWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesActorWrap::RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOpaqueGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesActorWrap::RenderOverlay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOverlay(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesActorWrap::RenderTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderTranslucentPolygonalGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesActorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkParallelCoordinatesActor * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkParallelCoordinatesActorWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkParallelCoordinatesActorWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkParallelCoordinatesActorWrap *w = new VtkParallelCoordinatesActorWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesActorWrap::SetIndependentVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIndependentVariables(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesActorWrap::SetIndependentVariablesToColumns(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIndependentVariablesToColumns();
}

void VtkParallelCoordinatesActorWrap::SetIndependentVariablesToRows(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIndependentVariablesToRows();
}

void VtkParallelCoordinatesActorWrap::SetInputConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAlgorithmOutputWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesActorWrap::SetInputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputData(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesActorWrap::SetLabelFormat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLabelFormat(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesActorWrap::SetLabelTextProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTextPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTextPropertyWrap *a0 = ObjectWrap::Unwrap<VtkTextPropertyWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLabelTextProperty(
			(vtkTextProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesActorWrap::SetNumberOfLabels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfLabels(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesActorWrap::SetTitle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTitle(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkParallelCoordinatesActorWrap::SetTitleTextProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkParallelCoordinatesActorWrap *wrapper = ObjectWrap::Unwrap<VtkParallelCoordinatesActorWrap>(info.Holder());
	vtkParallelCoordinatesActor *native = (vtkParallelCoordinatesActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTextPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTextPropertyWrap *a0 = ObjectWrap::Unwrap<VtkTextPropertyWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTitleTextProperty(
			(vtkTextProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

