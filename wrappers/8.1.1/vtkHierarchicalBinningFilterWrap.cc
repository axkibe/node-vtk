/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkHierarchicalBinningFilterWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkHierarchicalBinningFilterWrap::ptpl;

VtkHierarchicalBinningFilterWrap::VtkHierarchicalBinningFilterWrap()
{ }

VtkHierarchicalBinningFilterWrap::VtkHierarchicalBinningFilterWrap(vtkSmartPointer<vtkHierarchicalBinningFilter> _native)
{ native = _native; }

VtkHierarchicalBinningFilterWrap::~VtkHierarchicalBinningFilterWrap()
{ }

void VtkHierarchicalBinningFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkHierarchicalBinningFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("HierarchicalBinningFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkHierarchicalBinningFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkHierarchicalBinningFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkHierarchicalBinningFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AutomaticOff", AutomaticOff);
	Nan::SetPrototypeMethod(tpl, "automaticOff", AutomaticOff);

	Nan::SetPrototypeMethod(tpl, "AutomaticOn", AutomaticOn);
	Nan::SetPrototypeMethod(tpl, "automaticOn", AutomaticOn);

	Nan::SetPrototypeMethod(tpl, "GetAutomatic", GetAutomatic);
	Nan::SetPrototypeMethod(tpl, "getAutomatic", GetAutomatic);

	Nan::SetPrototypeMethod(tpl, "GetBinBounds", GetBinBounds);
	Nan::SetPrototypeMethod(tpl, "getBinBounds", GetBinBounds);

	Nan::SetPrototypeMethod(tpl, "GetBounds", GetBounds);
	Nan::SetPrototypeMethod(tpl, "getBounds", GetBounds);

	Nan::SetPrototypeMethod(tpl, "GetDivisions", GetDivisions);
	Nan::SetPrototypeMethod(tpl, "getDivisions", GetDivisions);

	Nan::SetPrototypeMethod(tpl, "GetLocalBinBounds", GetLocalBinBounds);
	Nan::SetPrototypeMethod(tpl, "getLocalBinBounds", GetLocalBinBounds);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfBins", GetNumberOfBins);
	Nan::SetPrototypeMethod(tpl, "getNumberOfBins", GetNumberOfBins);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfGlobalBins", GetNumberOfGlobalBins);
	Nan::SetPrototypeMethod(tpl, "getNumberOfGlobalBins", GetNumberOfGlobalBins);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfLevels", GetNumberOfLevels);
	Nan::SetPrototypeMethod(tpl, "getNumberOfLevels", GetNumberOfLevels);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfLevelsMaxValue", GetNumberOfLevelsMaxValue);
	Nan::SetPrototypeMethod(tpl, "getNumberOfLevelsMaxValue", GetNumberOfLevelsMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfLevelsMinValue", GetNumberOfLevelsMinValue);
	Nan::SetPrototypeMethod(tpl, "getNumberOfLevelsMinValue", GetNumberOfLevelsMinValue);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAutomatic", SetAutomatic);
	Nan::SetPrototypeMethod(tpl, "setAutomatic", SetAutomatic);

	Nan::SetPrototypeMethod(tpl, "SetBounds", SetBounds);
	Nan::SetPrototypeMethod(tpl, "setBounds", SetBounds);

	Nan::SetPrototypeMethod(tpl, "SetDivisions", SetDivisions);
	Nan::SetPrototypeMethod(tpl, "setDivisions", SetDivisions);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfLevels", SetNumberOfLevels);
	Nan::SetPrototypeMethod(tpl, "setNumberOfLevels", SetNumberOfLevels);

#ifdef VTK_NODE_PLUS_VTKHIERARCHICALBINNINGFILTERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKHIERARCHICALBINNINGFILTERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkHierarchicalBinningFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkHierarchicalBinningFilter> native = vtkSmartPointer<vtkHierarchicalBinningFilter>::New();
		VtkHierarchicalBinningFilterWrap* obj = new VtkHierarchicalBinningFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkHierarchicalBinningFilterWrap::AutomaticOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AutomaticOff();
}

void VtkHierarchicalBinningFilterWrap::AutomaticOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AutomaticOn();
}

void VtkHierarchicalBinningFilterWrap::GetAutomatic(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAutomatic();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHierarchicalBinningFilterWrap::GetBinBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsFloat64Array())
		{
			v8::Local<v8::Float64Array>a1(v8::Local<v8::Float64Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetBinBounds(
				info[0]->Int32Value(),
				(double *)(a1->Buffer()->GetContents().Data())
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			double b1[6];
			if( a1->Length() < 6 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 6; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GetBinBounds(
				info[0]->Int32Value(),
				b1
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHierarchicalBinningFilterWrap::GetBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBounds();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 6 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 6);
	memcpy(ab->GetContents().Data(), r, 6 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkHierarchicalBinningFilterWrap::GetDivisions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	int const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDivisions();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(int));
	Local<v8::Int32Array> at = v8::Int32Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(int));
	info.GetReturnValue().Set(at);
}

void VtkHierarchicalBinningFilterWrap::GetLocalBinBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsFloat64Array())
			{
				v8::Local<v8::Float64Array>a2(v8::Local<v8::Float64Array>::Cast(info[2]->ToObject()));
				if( a2->Length() < 6 )
				{
					Nan::ThrowError("Array too short.");
					return;
				}

								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->GetLocalBinBounds(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					(double *)(a2->Buffer()->GetContents().Data())
				);
				return;
			}
			else if(info.Length() > 2 && info[2]->IsArray())
			{
				v8::Local<v8::Array>a2(v8::Local<v8::Array>::Cast(info[2]->ToObject()));
				double b2[6];
				if( a2->Length() < 6 )
				{
					Nan::ThrowError("Array too short.");
					return;
				}

				for( i = 0; i < 6; i++ )
				{
					if( !a2->Get(i)->IsNumber() )
					{
						Nan::ThrowError("Array contents invalid.");
						return;
					}
					b2[i] = a2->Get(i)->NumberValue();
				}
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->GetLocalBinBounds(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					b2
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHierarchicalBinningFilterWrap::GetNumberOfBins(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfBins(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHierarchicalBinningFilterWrap::GetNumberOfGlobalBins(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfGlobalBins();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHierarchicalBinningFilterWrap::GetNumberOfLevels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfLevels();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHierarchicalBinningFilterWrap::GetNumberOfLevelsMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfLevelsMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHierarchicalBinningFilterWrap::GetNumberOfLevelsMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfLevelsMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHierarchicalBinningFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	vtkHierarchicalBinningFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkHierarchicalBinningFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkHierarchicalBinningFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkHierarchicalBinningFilterWrap *w = new VtkHierarchicalBinningFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkHierarchicalBinningFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkHierarchicalBinningFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkHierarchicalBinningFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkHierarchicalBinningFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkHierarchicalBinningFilterWrap *w = new VtkHierarchicalBinningFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHierarchicalBinningFilterWrap::SetAutomatic(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAutomatic(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHierarchicalBinningFilterWrap::SetBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBounds(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[6];
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 6; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBounds(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() > 4 && info[4]->IsNumber())
					{
						if(info.Length() > 5 && info[5]->IsNumber())
						{
														if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->SetBounds(
								info[0]->NumberValue(),
								info[1]->NumberValue(),
								info[2]->NumberValue(),
								info[3]->NumberValue(),
								info[4]->NumberValue(),
								info[5]->NumberValue()
							);
							return;
						}
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHierarchicalBinningFilterWrap::SetDivisions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDivisions(
			(int *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDivisions(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetDivisions(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHierarchicalBinningFilterWrap::SetNumberOfLevels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHierarchicalBinningFilterWrap *wrapper = ObjectWrap::Unwrap<VtkHierarchicalBinningFilterWrap>(info.Holder());
	vtkHierarchicalBinningFilter *native = (vtkHierarchicalBinningFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfLevels(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

