/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkSphereTreeFilterWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkSphereTreeWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkSphereTreeFilterWrap::ptpl;

VtkSphereTreeFilterWrap::VtkSphereTreeFilterWrap()
{ }

VtkSphereTreeFilterWrap::VtkSphereTreeFilterWrap(vtkSmartPointer<vtkSphereTreeFilter> _native)
{ native = _native; }

VtkSphereTreeFilterWrap::~VtkSphereTreeFilterWrap()
{ }

void VtkSphereTreeFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkSphereTreeFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("SphereTreeFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkSphereTreeFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkSphereTreeFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkSphereTreeFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetExtractionMode", GetExtractionMode);
	Nan::SetPrototypeMethod(tpl, "getExtractionMode", GetExtractionMode);

	Nan::SetPrototypeMethod(tpl, "GetExtractionModeAsString", GetExtractionModeAsString);
	Nan::SetPrototypeMethod(tpl, "getExtractionModeAsString", GetExtractionModeAsString);

	Nan::SetPrototypeMethod(tpl, "GetLevel", GetLevel);
	Nan::SetPrototypeMethod(tpl, "getLevel", GetLevel);

	Nan::SetPrototypeMethod(tpl, "GetLevelMaxValue", GetLevelMaxValue);
	Nan::SetPrototypeMethod(tpl, "getLevelMaxValue", GetLevelMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetLevelMinValue", GetLevelMinValue);
	Nan::SetPrototypeMethod(tpl, "getLevelMinValue", GetLevelMinValue);

	Nan::SetPrototypeMethod(tpl, "GetNormal", GetNormal);
	Nan::SetPrototypeMethod(tpl, "getNormal", GetNormal);

	Nan::SetPrototypeMethod(tpl, "GetPoint", GetPoint);
	Nan::SetPrototypeMethod(tpl, "getPoint", GetPoint);

	Nan::SetPrototypeMethod(tpl, "GetRay", GetRay);
	Nan::SetPrototypeMethod(tpl, "getRay", GetRay);

	Nan::SetPrototypeMethod(tpl, "GetSphereTree", GetSphereTree);
	Nan::SetPrototypeMethod(tpl, "getSphereTree", GetSphereTree);

	Nan::SetPrototypeMethod(tpl, "GetTreeHierarchy", GetTreeHierarchy);
	Nan::SetPrototypeMethod(tpl, "getTreeHierarchy", GetTreeHierarchy);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetExtractionMode", SetExtractionMode);
	Nan::SetPrototypeMethod(tpl, "setExtractionMode", SetExtractionMode);

	Nan::SetPrototypeMethod(tpl, "SetExtractionModeToLevels", SetExtractionModeToLevels);
	Nan::SetPrototypeMethod(tpl, "setExtractionModeToLevels", SetExtractionModeToLevels);

	Nan::SetPrototypeMethod(tpl, "SetExtractionModeToLine", SetExtractionModeToLine);
	Nan::SetPrototypeMethod(tpl, "setExtractionModeToLine", SetExtractionModeToLine);

	Nan::SetPrototypeMethod(tpl, "SetExtractionModeToPlane", SetExtractionModeToPlane);
	Nan::SetPrototypeMethod(tpl, "setExtractionModeToPlane", SetExtractionModeToPlane);

	Nan::SetPrototypeMethod(tpl, "SetExtractionModeToPoint", SetExtractionModeToPoint);
	Nan::SetPrototypeMethod(tpl, "setExtractionModeToPoint", SetExtractionModeToPoint);

	Nan::SetPrototypeMethod(tpl, "SetLevel", SetLevel);
	Nan::SetPrototypeMethod(tpl, "setLevel", SetLevel);

	Nan::SetPrototypeMethod(tpl, "SetNormal", SetNormal);
	Nan::SetPrototypeMethod(tpl, "setNormal", SetNormal);

	Nan::SetPrototypeMethod(tpl, "SetPoint", SetPoint);
	Nan::SetPrototypeMethod(tpl, "setPoint", SetPoint);

	Nan::SetPrototypeMethod(tpl, "SetRay", SetRay);
	Nan::SetPrototypeMethod(tpl, "setRay", SetRay);

	Nan::SetPrototypeMethod(tpl, "SetSphereTree", SetSphereTree);
	Nan::SetPrototypeMethod(tpl, "setSphereTree", SetSphereTree);

	Nan::SetPrototypeMethod(tpl, "SetTreeHierarchy", SetTreeHierarchy);
	Nan::SetPrototypeMethod(tpl, "setTreeHierarchy", SetTreeHierarchy);

	Nan::SetPrototypeMethod(tpl, "TreeHierarchyOff", TreeHierarchyOff);
	Nan::SetPrototypeMethod(tpl, "treeHierarchyOff", TreeHierarchyOff);

	Nan::SetPrototypeMethod(tpl, "TreeHierarchyOn", TreeHierarchyOn);
	Nan::SetPrototypeMethod(tpl, "treeHierarchyOn", TreeHierarchyOn);

#ifdef VTK_NODE_PLUS_VTKSPHERETREEFILTERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKSPHERETREEFILTERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkSphereTreeFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkSphereTreeFilter> native = vtkSmartPointer<vtkSphereTreeFilter>::New();
		VtkSphereTreeFilterWrap* obj = new VtkSphereTreeFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkSphereTreeFilterWrap::GetExtractionMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetExtractionMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSphereTreeFilterWrap::GetExtractionModeAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetExtractionModeAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkSphereTreeFilterWrap::GetLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLevel();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSphereTreeFilterWrap::GetLevelMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLevelMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSphereTreeFilterWrap::GetLevelMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLevelMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSphereTreeFilterWrap::GetNormal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormal();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkSphereTreeFilterWrap::GetPoint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPoint();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkSphereTreeFilterWrap::GetRay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRay();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkSphereTreeFilterWrap::GetSphereTree(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	vtkSphereTree * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSphereTree();
	VtkSphereTreeWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkSphereTreeWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkSphereTreeWrap *w = new VtkSphereTreeWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSphereTreeFilterWrap::GetTreeHierarchy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTreeHierarchy();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkSphereTreeFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	vtkSphereTreeFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkSphereTreeFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkSphereTreeFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkSphereTreeFilterWrap *w = new VtkSphereTreeFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkSphereTreeFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkSphereTreeFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkSphereTreeFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkSphereTreeFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkSphereTreeFilterWrap *w = new VtkSphereTreeFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSphereTreeFilterWrap::SetExtractionMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetExtractionMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSphereTreeFilterWrap::SetExtractionModeToLevels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetExtractionModeToLevels();
}

void VtkSphereTreeFilterWrap::SetExtractionModeToLine(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetExtractionModeToLine();
}

void VtkSphereTreeFilterWrap::SetExtractionModeToPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetExtractionModeToPlane();
}

void VtkSphereTreeFilterWrap::SetExtractionModeToPoint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetExtractionModeToPoint();
}

void VtkSphereTreeFilterWrap::SetLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLevel(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSphereTreeFilterWrap::SetNormal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormal(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormal(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetNormal(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSphereTreeFilterWrap::SetPoint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPoint(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPoint(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetPoint(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSphereTreeFilterWrap::SetRay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRay(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRay(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetRay(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSphereTreeFilterWrap::SetSphereTree(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkSphereTreeWrap::ptpl))->HasInstance(info[0]))
	{
		VtkSphereTreeWrap *a0 = ObjectWrap::Unwrap<VtkSphereTreeWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSphereTree(
			(vtkSphereTree *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSphereTreeFilterWrap::SetTreeHierarchy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTreeHierarchy(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkSphereTreeFilterWrap::TreeHierarchyOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TreeHierarchyOff();
}

void VtkSphereTreeFilterWrap::TreeHierarchyOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkSphereTreeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkSphereTreeFilterWrap>(info.Holder());
	vtkSphereTreeFilter *native = (vtkSphereTreeFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TreeHierarchyOn();
}

