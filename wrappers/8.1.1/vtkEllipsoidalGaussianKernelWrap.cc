/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkGeneralizedKernelWrap.h"
#include "vtkEllipsoidalGaussianKernelWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkAbstractPointLocatorWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkPointDataWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkEllipsoidalGaussianKernelWrap::ptpl;

VtkEllipsoidalGaussianKernelWrap::VtkEllipsoidalGaussianKernelWrap()
{ }

VtkEllipsoidalGaussianKernelWrap::VtkEllipsoidalGaussianKernelWrap(vtkSmartPointer<vtkEllipsoidalGaussianKernel> _native)
{ native = _native; }

VtkEllipsoidalGaussianKernelWrap::~VtkEllipsoidalGaussianKernelWrap()
{ }

void VtkEllipsoidalGaussianKernelWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkEllipsoidalGaussianKernel").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("EllipsoidalGaussianKernel").ToLocalChecked(), ConstructorGetter);
}

void VtkEllipsoidalGaussianKernelWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkEllipsoidalGaussianKernelWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkGeneralizedKernelWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkGeneralizedKernelWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkEllipsoidalGaussianKernelWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetEccentricity", GetEccentricity);
	Nan::SetPrototypeMethod(tpl, "getEccentricity", GetEccentricity);

	Nan::SetPrototypeMethod(tpl, "GetEccentricityMaxValue", GetEccentricityMaxValue);
	Nan::SetPrototypeMethod(tpl, "getEccentricityMaxValue", GetEccentricityMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetEccentricityMinValue", GetEccentricityMinValue);
	Nan::SetPrototypeMethod(tpl, "getEccentricityMinValue", GetEccentricityMinValue);

	Nan::SetPrototypeMethod(tpl, "GetScaleFactor", GetScaleFactor);
	Nan::SetPrototypeMethod(tpl, "getScaleFactor", GetScaleFactor);

	Nan::SetPrototypeMethod(tpl, "GetScaleFactorMaxValue", GetScaleFactorMaxValue);
	Nan::SetPrototypeMethod(tpl, "getScaleFactorMaxValue", GetScaleFactorMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetScaleFactorMinValue", GetScaleFactorMinValue);
	Nan::SetPrototypeMethod(tpl, "getScaleFactorMinValue", GetScaleFactorMinValue);

	Nan::SetPrototypeMethod(tpl, "GetSharpness", GetSharpness);
	Nan::SetPrototypeMethod(tpl, "getSharpness", GetSharpness);

	Nan::SetPrototypeMethod(tpl, "GetSharpnessMaxValue", GetSharpnessMaxValue);
	Nan::SetPrototypeMethod(tpl, "getSharpnessMaxValue", GetSharpnessMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetSharpnessMinValue", GetSharpnessMinValue);
	Nan::SetPrototypeMethod(tpl, "getSharpnessMinValue", GetSharpnessMinValue);

	Nan::SetPrototypeMethod(tpl, "GetUseNormals", GetUseNormals);
	Nan::SetPrototypeMethod(tpl, "getUseNormals", GetUseNormals);

	Nan::SetPrototypeMethod(tpl, "GetUseScalars", GetUseScalars);
	Nan::SetPrototypeMethod(tpl, "getUseScalars", GetUseScalars);

	Nan::SetPrototypeMethod(tpl, "Initialize", Initialize);
	Nan::SetPrototypeMethod(tpl, "initialize", Initialize);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetEccentricity", SetEccentricity);
	Nan::SetPrototypeMethod(tpl, "setEccentricity", SetEccentricity);

	Nan::SetPrototypeMethod(tpl, "SetScaleFactor", SetScaleFactor);
	Nan::SetPrototypeMethod(tpl, "setScaleFactor", SetScaleFactor);

	Nan::SetPrototypeMethod(tpl, "SetSharpness", SetSharpness);
	Nan::SetPrototypeMethod(tpl, "setSharpness", SetSharpness);

	Nan::SetPrototypeMethod(tpl, "SetUseNormals", SetUseNormals);
	Nan::SetPrototypeMethod(tpl, "setUseNormals", SetUseNormals);

	Nan::SetPrototypeMethod(tpl, "SetUseScalars", SetUseScalars);
	Nan::SetPrototypeMethod(tpl, "setUseScalars", SetUseScalars);

	Nan::SetPrototypeMethod(tpl, "UseNormalsOff", UseNormalsOff);
	Nan::SetPrototypeMethod(tpl, "useNormalsOff", UseNormalsOff);

	Nan::SetPrototypeMethod(tpl, "UseNormalsOn", UseNormalsOn);
	Nan::SetPrototypeMethod(tpl, "useNormalsOn", UseNormalsOn);

	Nan::SetPrototypeMethod(tpl, "UseScalarsOff", UseScalarsOff);
	Nan::SetPrototypeMethod(tpl, "useScalarsOff", UseScalarsOff);

	Nan::SetPrototypeMethod(tpl, "UseScalarsOn", UseScalarsOn);
	Nan::SetPrototypeMethod(tpl, "useScalarsOn", UseScalarsOn);

#ifdef VTK_NODE_PLUS_VTKELLIPSOIDALGAUSSIANKERNELWRAP_INITPTPL
	VTK_NODE_PLUS_VTKELLIPSOIDALGAUSSIANKERNELWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkEllipsoidalGaussianKernelWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkEllipsoidalGaussianKernel> native = vtkSmartPointer<vtkEllipsoidalGaussianKernel>::New();
		VtkEllipsoidalGaussianKernelWrap* obj = new VtkEllipsoidalGaussianKernelWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkEllipsoidalGaussianKernelWrap::GetEccentricity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEccentricity();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEllipsoidalGaussianKernelWrap::GetEccentricityMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEccentricityMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEllipsoidalGaussianKernelWrap::GetEccentricityMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEccentricityMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEllipsoidalGaussianKernelWrap::GetScaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScaleFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEllipsoidalGaussianKernelWrap::GetScaleFactorMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScaleFactorMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEllipsoidalGaussianKernelWrap::GetScaleFactorMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScaleFactorMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEllipsoidalGaussianKernelWrap::GetSharpness(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSharpness();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEllipsoidalGaussianKernelWrap::GetSharpnessMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSharpnessMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEllipsoidalGaussianKernelWrap::GetSharpnessMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSharpnessMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEllipsoidalGaussianKernelWrap::GetUseNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseNormals();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEllipsoidalGaussianKernelWrap::GetUseScalars(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseScalars();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkEllipsoidalGaussianKernelWrap::Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractPointLocatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractPointLocatorWrap *a0 = ObjectWrap::Unwrap<VtkAbstractPointLocatorWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataSetWrap *a1 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject() && (Nan::New(VtkPointDataWrap::ptpl))->HasInstance(info[2]))
			{
				VtkPointDataWrap *a2 = ObjectWrap::Unwrap<VtkPointDataWrap>(info[2]->ToObject());
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->Initialize(
					(vtkAbstractPointLocator *) a0->native.GetPointer(),
					(vtkDataSet *) a1->native.GetPointer(),
					(vtkPointData *) a2->native.GetPointer()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkEllipsoidalGaussianKernelWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	vtkEllipsoidalGaussianKernel * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkEllipsoidalGaussianKernelWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkEllipsoidalGaussianKernelWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkEllipsoidalGaussianKernelWrap *w = new VtkEllipsoidalGaussianKernelWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkEllipsoidalGaussianKernelWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkEllipsoidalGaussianKernel * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkEllipsoidalGaussianKernelWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkEllipsoidalGaussianKernelWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkEllipsoidalGaussianKernelWrap *w = new VtkEllipsoidalGaussianKernelWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkEllipsoidalGaussianKernelWrap::SetEccentricity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEccentricity(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkEllipsoidalGaussianKernelWrap::SetScaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScaleFactor(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkEllipsoidalGaussianKernelWrap::SetSharpness(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSharpness(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkEllipsoidalGaussianKernelWrap::SetUseNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseNormals(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkEllipsoidalGaussianKernelWrap::SetUseScalars(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseScalars(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkEllipsoidalGaussianKernelWrap::UseNormalsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseNormalsOff();
}

void VtkEllipsoidalGaussianKernelWrap::UseNormalsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseNormalsOn();
}

void VtkEllipsoidalGaussianKernelWrap::UseScalarsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseScalarsOff();
}

void VtkEllipsoidalGaussianKernelWrap::UseScalarsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkEllipsoidalGaussianKernelWrap *wrapper = ObjectWrap::Unwrap<VtkEllipsoidalGaussianKernelWrap>(info.Holder());
	vtkEllipsoidalGaussianKernel *native = (vtkEllipsoidalGaussianKernel *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseScalarsOn();
}

