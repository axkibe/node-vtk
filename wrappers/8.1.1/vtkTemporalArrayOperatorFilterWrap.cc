/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkMultiTimeStepAlgorithmWrap.h"
#include "vtkTemporalArrayOperatorFilterWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkTemporalArrayOperatorFilterWrap::ptpl;

VtkTemporalArrayOperatorFilterWrap::VtkTemporalArrayOperatorFilterWrap()
{ }

VtkTemporalArrayOperatorFilterWrap::VtkTemporalArrayOperatorFilterWrap(vtkSmartPointer<vtkTemporalArrayOperatorFilter> _native)
{ native = _native; }

VtkTemporalArrayOperatorFilterWrap::~VtkTemporalArrayOperatorFilterWrap()
{ }

void VtkTemporalArrayOperatorFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkTemporalArrayOperatorFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("TemporalArrayOperatorFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkTemporalArrayOperatorFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkTemporalArrayOperatorFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkMultiTimeStepAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkMultiTimeStepAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkTemporalArrayOperatorFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetFirstTimeStepIndex", GetFirstTimeStepIndex);
	Nan::SetPrototypeMethod(tpl, "getFirstTimeStepIndex", GetFirstTimeStepIndex);

	Nan::SetPrototypeMethod(tpl, "GetOperator", GetOperator);
	Nan::SetPrototypeMethod(tpl, "getOperator", GetOperator);

	Nan::SetPrototypeMethod(tpl, "GetOutputArrayNameSuffix", GetOutputArrayNameSuffix);
	Nan::SetPrototypeMethod(tpl, "getOutputArrayNameSuffix", GetOutputArrayNameSuffix);

	Nan::SetPrototypeMethod(tpl, "GetSecondTimeStepIndex", GetSecondTimeStepIndex);
	Nan::SetPrototypeMethod(tpl, "getSecondTimeStepIndex", GetSecondTimeStepIndex);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetFirstTimeStepIndex", SetFirstTimeStepIndex);
	Nan::SetPrototypeMethod(tpl, "setFirstTimeStepIndex", SetFirstTimeStepIndex);

	Nan::SetPrototypeMethod(tpl, "SetOperator", SetOperator);
	Nan::SetPrototypeMethod(tpl, "setOperator", SetOperator);

	Nan::SetPrototypeMethod(tpl, "SetOutputArrayNameSuffix", SetOutputArrayNameSuffix);
	Nan::SetPrototypeMethod(tpl, "setOutputArrayNameSuffix", SetOutputArrayNameSuffix);

	Nan::SetPrototypeMethod(tpl, "SetSecondTimeStepIndex", SetSecondTimeStepIndex);
	Nan::SetPrototypeMethod(tpl, "setSecondTimeStepIndex", SetSecondTimeStepIndex);

#ifdef VTK_NODE_PLUS_VTKTEMPORALARRAYOPERATORFILTERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKTEMPORALARRAYOPERATORFILTERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkTemporalArrayOperatorFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkTemporalArrayOperatorFilter> native = vtkSmartPointer<vtkTemporalArrayOperatorFilter>::New();
		VtkTemporalArrayOperatorFilterWrap* obj = new VtkTemporalArrayOperatorFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkTemporalArrayOperatorFilterWrap::GetFirstTimeStepIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTemporalArrayOperatorFilterWrap *wrapper = ObjectWrap::Unwrap<VtkTemporalArrayOperatorFilterWrap>(info.Holder());
	vtkTemporalArrayOperatorFilter *native = (vtkTemporalArrayOperatorFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFirstTimeStepIndex();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTemporalArrayOperatorFilterWrap::GetOperator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTemporalArrayOperatorFilterWrap *wrapper = ObjectWrap::Unwrap<VtkTemporalArrayOperatorFilterWrap>(info.Holder());
	vtkTemporalArrayOperatorFilter *native = (vtkTemporalArrayOperatorFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOperator();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTemporalArrayOperatorFilterWrap::GetOutputArrayNameSuffix(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTemporalArrayOperatorFilterWrap *wrapper = ObjectWrap::Unwrap<VtkTemporalArrayOperatorFilterWrap>(info.Holder());
	vtkTemporalArrayOperatorFilter *native = (vtkTemporalArrayOperatorFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputArrayNameSuffix();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkTemporalArrayOperatorFilterWrap::GetSecondTimeStepIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTemporalArrayOperatorFilterWrap *wrapper = ObjectWrap::Unwrap<VtkTemporalArrayOperatorFilterWrap>(info.Holder());
	vtkTemporalArrayOperatorFilter *native = (vtkTemporalArrayOperatorFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSecondTimeStepIndex();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkTemporalArrayOperatorFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTemporalArrayOperatorFilterWrap *wrapper = ObjectWrap::Unwrap<VtkTemporalArrayOperatorFilterWrap>(info.Holder());
	vtkTemporalArrayOperatorFilter *native = (vtkTemporalArrayOperatorFilter *)wrapper->native.GetPointer();
	vtkTemporalArrayOperatorFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkTemporalArrayOperatorFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTemporalArrayOperatorFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTemporalArrayOperatorFilterWrap *w = new VtkTemporalArrayOperatorFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkTemporalArrayOperatorFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTemporalArrayOperatorFilterWrap *wrapper = ObjectWrap::Unwrap<VtkTemporalArrayOperatorFilterWrap>(info.Holder());
	vtkTemporalArrayOperatorFilter *native = (vtkTemporalArrayOperatorFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkTemporalArrayOperatorFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkTemporalArrayOperatorFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkTemporalArrayOperatorFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkTemporalArrayOperatorFilterWrap *w = new VtkTemporalArrayOperatorFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTemporalArrayOperatorFilterWrap::SetFirstTimeStepIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTemporalArrayOperatorFilterWrap *wrapper = ObjectWrap::Unwrap<VtkTemporalArrayOperatorFilterWrap>(info.Holder());
	vtkTemporalArrayOperatorFilter *native = (vtkTemporalArrayOperatorFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFirstTimeStepIndex(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTemporalArrayOperatorFilterWrap::SetOperator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTemporalArrayOperatorFilterWrap *wrapper = ObjectWrap::Unwrap<VtkTemporalArrayOperatorFilterWrap>(info.Holder());
	vtkTemporalArrayOperatorFilter *native = (vtkTemporalArrayOperatorFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOperator(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTemporalArrayOperatorFilterWrap::SetOutputArrayNameSuffix(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTemporalArrayOperatorFilterWrap *wrapper = ObjectWrap::Unwrap<VtkTemporalArrayOperatorFilterWrap>(info.Holder());
	vtkTemporalArrayOperatorFilter *native = (vtkTemporalArrayOperatorFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputArrayNameSuffix(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkTemporalArrayOperatorFilterWrap::SetSecondTimeStepIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkTemporalArrayOperatorFilterWrap *wrapper = ObjectWrap::Unwrap<VtkTemporalArrayOperatorFilterWrap>(info.Holder());
	vtkTemporalArrayOperatorFilter *native = (vtkTemporalArrayOperatorFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSecondTimeStepIndex(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

