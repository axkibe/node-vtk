/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkGraphAlgorithmWrap.h"
#include "vtkCollapseVerticesByArrayWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkCollapseVerticesByArrayWrap::ptpl;

VtkCollapseVerticesByArrayWrap::VtkCollapseVerticesByArrayWrap()
{ }

VtkCollapseVerticesByArrayWrap::VtkCollapseVerticesByArrayWrap(vtkSmartPointer<vtkCollapseVerticesByArray> _native)
{ native = _native; }

VtkCollapseVerticesByArrayWrap::~VtkCollapseVerticesByArrayWrap()
{ }

void VtkCollapseVerticesByArrayWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkCollapseVerticesByArray").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("CollapseVerticesByArray").ToLocalChecked(), ConstructorGetter);
}

void VtkCollapseVerticesByArrayWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkCollapseVerticesByArrayWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkGraphAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkGraphAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkCollapseVerticesByArrayWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddAggregateEdgeArray", AddAggregateEdgeArray);
	Nan::SetPrototypeMethod(tpl, "addAggregateEdgeArray", AddAggregateEdgeArray);

	Nan::SetPrototypeMethod(tpl, "AllowSelfLoopsOff", AllowSelfLoopsOff);
	Nan::SetPrototypeMethod(tpl, "allowSelfLoopsOff", AllowSelfLoopsOff);

	Nan::SetPrototypeMethod(tpl, "AllowSelfLoopsOn", AllowSelfLoopsOn);
	Nan::SetPrototypeMethod(tpl, "allowSelfLoopsOn", AllowSelfLoopsOn);

	Nan::SetPrototypeMethod(tpl, "ClearAggregateEdgeArray", ClearAggregateEdgeArray);
	Nan::SetPrototypeMethod(tpl, "clearAggregateEdgeArray", ClearAggregateEdgeArray);

	Nan::SetPrototypeMethod(tpl, "CountEdgesCollapsedOff", CountEdgesCollapsedOff);
	Nan::SetPrototypeMethod(tpl, "countEdgesCollapsedOff", CountEdgesCollapsedOff);

	Nan::SetPrototypeMethod(tpl, "CountEdgesCollapsedOn", CountEdgesCollapsedOn);
	Nan::SetPrototypeMethod(tpl, "countEdgesCollapsedOn", CountEdgesCollapsedOn);

	Nan::SetPrototypeMethod(tpl, "CountVerticesCollapsedOff", CountVerticesCollapsedOff);
	Nan::SetPrototypeMethod(tpl, "countVerticesCollapsedOff", CountVerticesCollapsedOff);

	Nan::SetPrototypeMethod(tpl, "CountVerticesCollapsedOn", CountVerticesCollapsedOn);
	Nan::SetPrototypeMethod(tpl, "countVerticesCollapsedOn", CountVerticesCollapsedOn);

	Nan::SetPrototypeMethod(tpl, "GetAllowSelfLoops", GetAllowSelfLoops);
	Nan::SetPrototypeMethod(tpl, "getAllowSelfLoops", GetAllowSelfLoops);

	Nan::SetPrototypeMethod(tpl, "GetCountEdgesCollapsed", GetCountEdgesCollapsed);
	Nan::SetPrototypeMethod(tpl, "getCountEdgesCollapsed", GetCountEdgesCollapsed);

	Nan::SetPrototypeMethod(tpl, "GetCountVerticesCollapsed", GetCountVerticesCollapsed);
	Nan::SetPrototypeMethod(tpl, "getCountVerticesCollapsed", GetCountVerticesCollapsed);

	Nan::SetPrototypeMethod(tpl, "GetEdgesCollapsedArray", GetEdgesCollapsedArray);
	Nan::SetPrototypeMethod(tpl, "getEdgesCollapsedArray", GetEdgesCollapsedArray);

	Nan::SetPrototypeMethod(tpl, "GetVertexArray", GetVertexArray);
	Nan::SetPrototypeMethod(tpl, "getVertexArray", GetVertexArray);

	Nan::SetPrototypeMethod(tpl, "GetVerticesCollapsedArray", GetVerticesCollapsedArray);
	Nan::SetPrototypeMethod(tpl, "getVerticesCollapsedArray", GetVerticesCollapsedArray);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAllowSelfLoops", SetAllowSelfLoops);
	Nan::SetPrototypeMethod(tpl, "setAllowSelfLoops", SetAllowSelfLoops);

	Nan::SetPrototypeMethod(tpl, "SetCountEdgesCollapsed", SetCountEdgesCollapsed);
	Nan::SetPrototypeMethod(tpl, "setCountEdgesCollapsed", SetCountEdgesCollapsed);

	Nan::SetPrototypeMethod(tpl, "SetCountVerticesCollapsed", SetCountVerticesCollapsed);
	Nan::SetPrototypeMethod(tpl, "setCountVerticesCollapsed", SetCountVerticesCollapsed);

	Nan::SetPrototypeMethod(tpl, "SetEdgesCollapsedArray", SetEdgesCollapsedArray);
	Nan::SetPrototypeMethod(tpl, "setEdgesCollapsedArray", SetEdgesCollapsedArray);

	Nan::SetPrototypeMethod(tpl, "SetVertexArray", SetVertexArray);
	Nan::SetPrototypeMethod(tpl, "setVertexArray", SetVertexArray);

	Nan::SetPrototypeMethod(tpl, "SetVerticesCollapsedArray", SetVerticesCollapsedArray);
	Nan::SetPrototypeMethod(tpl, "setVerticesCollapsedArray", SetVerticesCollapsedArray);

#ifdef VTK_NODE_PLUS_VTKCOLLAPSEVERTICESBYARRAYWRAP_INITPTPL
	VTK_NODE_PLUS_VTKCOLLAPSEVERTICESBYARRAYWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkCollapseVerticesByArrayWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkCollapseVerticesByArray> native = vtkSmartPointer<vtkCollapseVerticesByArray>::New();
		VtkCollapseVerticesByArrayWrap* obj = new VtkCollapseVerticesByArrayWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkCollapseVerticesByArrayWrap::AddAggregateEdgeArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddAggregateEdgeArray(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCollapseVerticesByArrayWrap::AllowSelfLoopsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AllowSelfLoopsOff();
}

void VtkCollapseVerticesByArrayWrap::AllowSelfLoopsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AllowSelfLoopsOn();
}

void VtkCollapseVerticesByArrayWrap::ClearAggregateEdgeArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ClearAggregateEdgeArray();
}

void VtkCollapseVerticesByArrayWrap::CountEdgesCollapsedOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CountEdgesCollapsedOff();
}

void VtkCollapseVerticesByArrayWrap::CountEdgesCollapsedOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CountEdgesCollapsedOn();
}

void VtkCollapseVerticesByArrayWrap::CountVerticesCollapsedOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CountVerticesCollapsedOff();
}

void VtkCollapseVerticesByArrayWrap::CountVerticesCollapsedOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CountVerticesCollapsedOn();
}

void VtkCollapseVerticesByArrayWrap::GetAllowSelfLoops(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAllowSelfLoops();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCollapseVerticesByArrayWrap::GetCountEdgesCollapsed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCountEdgesCollapsed();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCollapseVerticesByArrayWrap::GetCountVerticesCollapsed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCountVerticesCollapsed();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCollapseVerticesByArrayWrap::GetEdgesCollapsedArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEdgesCollapsedArray();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCollapseVerticesByArrayWrap::GetVertexArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVertexArray();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCollapseVerticesByArrayWrap::GetVerticesCollapsedArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVerticesCollapsedArray();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCollapseVerticesByArrayWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	vtkCollapseVerticesByArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkCollapseVerticesByArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCollapseVerticesByArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCollapseVerticesByArrayWrap *w = new VtkCollapseVerticesByArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCollapseVerticesByArrayWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkCollapseVerticesByArray * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkCollapseVerticesByArrayWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkCollapseVerticesByArrayWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkCollapseVerticesByArrayWrap *w = new VtkCollapseVerticesByArrayWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCollapseVerticesByArrayWrap::SetAllowSelfLoops(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAllowSelfLoops(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCollapseVerticesByArrayWrap::SetCountEdgesCollapsed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCountEdgesCollapsed(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCollapseVerticesByArrayWrap::SetCountVerticesCollapsed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCountVerticesCollapsed(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCollapseVerticesByArrayWrap::SetEdgesCollapsedArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEdgesCollapsedArray(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCollapseVerticesByArrayWrap::SetVertexArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVertexArray(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCollapseVerticesByArrayWrap::SetVerticesCollapsedArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCollapseVerticesByArrayWrap *wrapper = ObjectWrap::Unwrap<VtkCollapseVerticesByArrayWrap>(info.Holder());
	vtkCollapseVerticesByArray *native = (vtkCollapseVerticesByArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVerticesCollapsedArray(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

