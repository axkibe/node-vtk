/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkFunctionSetWrap.h"
#include "vtkLagrangianBasicIntegrationModelWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkAbstractCellLocatorWrap.h"
#include "vtkLagrangianParticleTrackerWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkPointDataWrap.h"
#include "vtkStringArrayWrap.h"
#include "vtkIntArrayWrap.h"
#include "vtkDoubleArrayWrap.h"
#include "vtkPolyDataWrap.h"
#include "vtkDataObjectWrap.h"
#include "vtkAbstractArrayWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkLagrangianBasicIntegrationModelWrap::ptpl;

VtkLagrangianBasicIntegrationModelWrap::VtkLagrangianBasicIntegrationModelWrap()
{ }

VtkLagrangianBasicIntegrationModelWrap::VtkLagrangianBasicIntegrationModelWrap(vtkSmartPointer<vtkLagrangianBasicIntegrationModel> _native)
{ native = _native; }

VtkLagrangianBasicIntegrationModelWrap::~VtkLagrangianBasicIntegrationModelWrap()
{ }

void VtkLagrangianBasicIntegrationModelWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkLagrangianBasicIntegrationModel").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("LagrangianBasicIntegrationModel").ToLocalChecked(), ConstructorGetter);
}

void VtkLagrangianBasicIntegrationModelWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkLagrangianBasicIntegrationModelWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkFunctionSetWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkFunctionSetWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkLagrangianBasicIntegrationModelWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddDataSet", AddDataSet);
	Nan::SetPrototypeMethod(tpl, "addDataSet", AddDataSet);

	Nan::SetPrototypeMethod(tpl, "ClearDataSets", ClearDataSets);
	Nan::SetPrototypeMethod(tpl, "clearDataSets", ClearDataSets);

	Nan::SetPrototypeMethod(tpl, "FinalizeOutputs", FinalizeOutputs);
	Nan::SetPrototypeMethod(tpl, "finalizeOutputs", FinalizeOutputs);

	Nan::SetPrototypeMethod(tpl, "GetLocator", GetLocator);
	Nan::SetPrototypeMethod(tpl, "getLocator", GetLocator);

	Nan::SetPrototypeMethod(tpl, "GetLocatorsBuilt", GetLocatorsBuilt);
	Nan::SetPrototypeMethod(tpl, "getLocatorsBuilt", GetLocatorsBuilt);

	Nan::SetPrototypeMethod(tpl, "GetNonPlanarQuadSupport", GetNonPlanarQuadSupport);
	Nan::SetPrototypeMethod(tpl, "getNonPlanarQuadSupport", GetNonPlanarQuadSupport);

	Nan::SetPrototypeMethod(tpl, "GetSeedArray", GetSeedArray);
	Nan::SetPrototypeMethod(tpl, "getSeedArray", GetSeedArray);

	Nan::SetPrototypeMethod(tpl, "GetSeedArrayComps", GetSeedArrayComps);
	Nan::SetPrototypeMethod(tpl, "getSeedArrayComps", GetSeedArrayComps);

	Nan::SetPrototypeMethod(tpl, "GetSeedArrayNames", GetSeedArrayNames);
	Nan::SetPrototypeMethod(tpl, "getSeedArrayNames", GetSeedArrayNames);

	Nan::SetPrototypeMethod(tpl, "GetSeedArrayTypes", GetSeedArrayTypes);
	Nan::SetPrototypeMethod(tpl, "getSeedArrayTypes", GetSeedArrayTypes);

	Nan::SetPrototypeMethod(tpl, "GetSurfaceArrayComps", GetSurfaceArrayComps);
	Nan::SetPrototypeMethod(tpl, "getSurfaceArrayComps", GetSurfaceArrayComps);

	Nan::SetPrototypeMethod(tpl, "GetSurfaceArrayDefaultValues", GetSurfaceArrayDefaultValues);
	Nan::SetPrototypeMethod(tpl, "getSurfaceArrayDefaultValues", GetSurfaceArrayDefaultValues);

	Nan::SetPrototypeMethod(tpl, "GetSurfaceArrayEnumValues", GetSurfaceArrayEnumValues);
	Nan::SetPrototypeMethod(tpl, "getSurfaceArrayEnumValues", GetSurfaceArrayEnumValues);

	Nan::SetPrototypeMethod(tpl, "GetSurfaceArrayNames", GetSurfaceArrayNames);
	Nan::SetPrototypeMethod(tpl, "getSurfaceArrayNames", GetSurfaceArrayNames);

	Nan::SetPrototypeMethod(tpl, "GetSurfaceArrayTypes", GetSurfaceArrayTypes);
	Nan::SetPrototypeMethod(tpl, "getSurfaceArrayTypes", GetSurfaceArrayTypes);

	Nan::SetPrototypeMethod(tpl, "GetTolerance", GetTolerance);
	Nan::SetPrototypeMethod(tpl, "getTolerance", GetTolerance);

	Nan::SetPrototypeMethod(tpl, "GetUseInitialIntegrationTime", GetUseInitialIntegrationTime);
	Nan::SetPrototypeMethod(tpl, "getUseInitialIntegrationTime", GetUseInitialIntegrationTime);

	Nan::SetPrototypeMethod(tpl, "GetWeightsSize", GetWeightsSize);
	Nan::SetPrototypeMethod(tpl, "getWeightsSize", GetWeightsSize);

	Nan::SetPrototypeMethod(tpl, "InitializeVariablesParticleData", InitializeVariablesParticleData);
	Nan::SetPrototypeMethod(tpl, "initializeVariablesParticleData", InitializeVariablesParticleData);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "NonPlanarQuadSupportOff", NonPlanarQuadSupportOff);
	Nan::SetPrototypeMethod(tpl, "nonPlanarQuadSupportOff", NonPlanarQuadSupportOff);

	Nan::SetPrototypeMethod(tpl, "NonPlanarQuadSupportOn", NonPlanarQuadSupportOn);
	Nan::SetPrototypeMethod(tpl, "nonPlanarQuadSupportOn", NonPlanarQuadSupportOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetInputArrayToProcess", SetInputArrayToProcess);
	Nan::SetPrototypeMethod(tpl, "setInputArrayToProcess", SetInputArrayToProcess);

	Nan::SetPrototypeMethod(tpl, "SetLocator", SetLocator);
	Nan::SetPrototypeMethod(tpl, "setLocator", SetLocator);

	Nan::SetPrototypeMethod(tpl, "SetLocatorsBuilt", SetLocatorsBuilt);
	Nan::SetPrototypeMethod(tpl, "setLocatorsBuilt", SetLocatorsBuilt);

	Nan::SetPrototypeMethod(tpl, "SetNonPlanarQuadSupport", SetNonPlanarQuadSupport);
	Nan::SetPrototypeMethod(tpl, "setNonPlanarQuadSupport", SetNonPlanarQuadSupport);

	Nan::SetPrototypeMethod(tpl, "SetTracker", SetTracker);
	Nan::SetPrototypeMethod(tpl, "setTracker", SetTracker);

	Nan::SetPrototypeMethod(tpl, "SetUseInitialIntegrationTime", SetUseInitialIntegrationTime);
	Nan::SetPrototypeMethod(tpl, "setUseInitialIntegrationTime", SetUseInitialIntegrationTime);

	Nan::SetPrototypeMethod(tpl, "UseInitialIntegrationTimeOff", UseInitialIntegrationTimeOff);
	Nan::SetPrototypeMethod(tpl, "useInitialIntegrationTimeOff", UseInitialIntegrationTimeOff);

	Nan::SetPrototypeMethod(tpl, "UseInitialIntegrationTimeOn", UseInitialIntegrationTimeOn);
	Nan::SetPrototypeMethod(tpl, "useInitialIntegrationTimeOn", UseInitialIntegrationTimeOn);

#ifdef VTK_NODE_PLUS_VTKLAGRANGIANBASICINTEGRATIONMODELWRAP_INITPTPL
	VTK_NODE_PLUS_VTKLAGRANGIANBASICINTEGRATIONMODELWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkLagrangianBasicIntegrationModelWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkLagrangianBasicIntegrationModelWrap::AddDataSet(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsBoolean())
		{
			if(info.Length() > 2 && info[2]->IsUint32())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->AddDataSet(
					(vtkDataSet *) a0->native.GetPointer(),
					info[1]->BooleanValue(),
					info[2]->Uint32Value()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLagrangianBasicIntegrationModelWrap::ClearDataSets(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ClearDataSets(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLagrangianBasicIntegrationModelWrap::FinalizeOutputs(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[1]))
		{
			VtkDataObjectWrap *a1 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[1]->ToObject());
			bool r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->FinalizeOutputs(
				(vtkPolyData *) a0->native.GetPointer(),
				(vtkDataObject *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLagrangianBasicIntegrationModelWrap::GetLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	vtkAbstractCellLocator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLocator();
	VtkAbstractCellLocatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAbstractCellLocatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAbstractCellLocatorWrap *w = new VtkAbstractCellLocatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLagrangianBasicIntegrationModelWrap::GetLocatorsBuilt(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLocatorsBuilt();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLagrangianBasicIntegrationModelWrap::GetNonPlanarQuadSupport(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNonPlanarQuadSupport();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLagrangianBasicIntegrationModelWrap::GetSeedArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkPointDataWrap::ptpl))->HasInstance(info[1]))
		{
			VtkPointDataWrap *a1 = ObjectWrap::Unwrap<VtkPointDataWrap>(info[1]->ToObject());
			vtkAbstractArray * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetSeedArray(
				info[0]->Int32Value(),
				(vtkPointData *) a1->native.GetPointer()
			);
			VtkAbstractArrayWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkAbstractArrayWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkAbstractArrayWrap *w = new VtkAbstractArrayWrap();
			w->native = r;
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLagrangianBasicIntegrationModelWrap::GetSeedArrayComps(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	vtkIntArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSeedArrayComps();
	VtkIntArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkIntArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkIntArrayWrap *w = new VtkIntArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLagrangianBasicIntegrationModelWrap::GetSeedArrayNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	vtkStringArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSeedArrayNames();
	VtkStringArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkStringArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStringArrayWrap *w = new VtkStringArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLagrangianBasicIntegrationModelWrap::GetSeedArrayTypes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	vtkIntArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSeedArrayTypes();
	VtkIntArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkIntArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkIntArrayWrap *w = new VtkIntArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLagrangianBasicIntegrationModelWrap::GetSurfaceArrayComps(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	vtkIntArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSurfaceArrayComps();
	VtkIntArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkIntArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkIntArrayWrap *w = new VtkIntArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLagrangianBasicIntegrationModelWrap::GetSurfaceArrayDefaultValues(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	vtkDoubleArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSurfaceArrayDefaultValues();
	VtkDoubleArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDoubleArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDoubleArrayWrap *w = new VtkDoubleArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLagrangianBasicIntegrationModelWrap::GetSurfaceArrayEnumValues(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	vtkStringArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSurfaceArrayEnumValues();
	VtkStringArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkStringArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStringArrayWrap *w = new VtkStringArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLagrangianBasicIntegrationModelWrap::GetSurfaceArrayNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	vtkStringArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSurfaceArrayNames();
	VtkStringArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkStringArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStringArrayWrap *w = new VtkStringArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLagrangianBasicIntegrationModelWrap::GetSurfaceArrayTypes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	vtkIntArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSurfaceArrayTypes();
	VtkIntArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkIntArrayWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkIntArrayWrap *w = new VtkIntArrayWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLagrangianBasicIntegrationModelWrap::GetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLagrangianBasicIntegrationModelWrap::GetUseInitialIntegrationTime(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseInitialIntegrationTime();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLagrangianBasicIntegrationModelWrap::GetWeightsSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetWeightsSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLagrangianBasicIntegrationModelWrap::InitializeVariablesParticleData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPointDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPointDataWrap *a0 = ObjectWrap::Unwrap<VtkPointDataWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->InitializeVariablesParticleData(
				(vtkPointData *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLagrangianBasicIntegrationModelWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	vtkLagrangianBasicIntegrationModel * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkLagrangianBasicIntegrationModelWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkLagrangianBasicIntegrationModelWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkLagrangianBasicIntegrationModelWrap *w = new VtkLagrangianBasicIntegrationModelWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLagrangianBasicIntegrationModelWrap::NonPlanarQuadSupportOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NonPlanarQuadSupportOff();
}

void VtkLagrangianBasicIntegrationModelWrap::NonPlanarQuadSupportOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NonPlanarQuadSupportOn();
}

void VtkLagrangianBasicIntegrationModelWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkLagrangianBasicIntegrationModel * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkLagrangianBasicIntegrationModelWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkLagrangianBasicIntegrationModelWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkLagrangianBasicIntegrationModelWrap *w = new VtkLagrangianBasicIntegrationModelWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLagrangianBasicIntegrationModelWrap::SetInputArrayToProcess(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() > 4 && info[4]->IsString())
					{
						Nan::Utf8String a4(info[4]);
												if(info.Length() != 5)
						{
							Nan::ThrowError("Too many parameters.");
							return;
						}
						native->SetInputArrayToProcess(
							info[0]->Int32Value(),
							info[1]->Int32Value(),
							info[2]->Int32Value(),
							info[3]->Int32Value(),
							*a4
						);
						return;
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLagrangianBasicIntegrationModelWrap::SetLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractCellLocatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractCellLocatorWrap *a0 = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLocator(
			(vtkAbstractCellLocator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLagrangianBasicIntegrationModelWrap::SetLocatorsBuilt(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLocatorsBuilt(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLagrangianBasicIntegrationModelWrap::SetNonPlanarQuadSupport(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNonPlanarQuadSupport(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLagrangianBasicIntegrationModelWrap::SetTracker(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkLagrangianParticleTrackerWrap::ptpl))->HasInstance(info[0]))
	{
		VtkLagrangianParticleTrackerWrap *a0 = ObjectWrap::Unwrap<VtkLagrangianParticleTrackerWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTracker(
			(vtkLagrangianParticleTracker *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLagrangianBasicIntegrationModelWrap::SetUseInitialIntegrationTime(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseInitialIntegrationTime(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLagrangianBasicIntegrationModelWrap::UseInitialIntegrationTimeOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseInitialIntegrationTimeOff();
}

void VtkLagrangianBasicIntegrationModelWrap::UseInitialIntegrationTimeOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLagrangianBasicIntegrationModelWrap *wrapper = ObjectWrap::Unwrap<VtkLagrangianBasicIntegrationModelWrap>(info.Holder());
	vtkLagrangianBasicIntegrationModel *native = (vtkLagrangianBasicIntegrationModel *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseInitialIntegrationTimeOn();
}

