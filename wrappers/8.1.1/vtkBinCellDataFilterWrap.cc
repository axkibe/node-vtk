/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkDataSetAlgorithmWrap.h"
#include "vtkBinCellDataFilterWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkDataObjectWrap.h"
#include "vtkAlgorithmOutputWrap.h"
#include "vtkCellLocatorWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkBinCellDataFilterWrap::ptpl;

VtkBinCellDataFilterWrap::VtkBinCellDataFilterWrap()
{ }

VtkBinCellDataFilterWrap::VtkBinCellDataFilterWrap(vtkSmartPointer<vtkBinCellDataFilter> _native)
{ native = _native; }

VtkBinCellDataFilterWrap::~VtkBinCellDataFilterWrap()
{ }

void VtkBinCellDataFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkBinCellDataFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("BinCellDataFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkBinCellDataFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkBinCellDataFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkDataSetAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkDataSetAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkBinCellDataFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ComputeToleranceOff", ComputeToleranceOff);
	Nan::SetPrototypeMethod(tpl, "computeToleranceOff", ComputeToleranceOff);

	Nan::SetPrototypeMethod(tpl, "ComputeToleranceOn", ComputeToleranceOn);
	Nan::SetPrototypeMethod(tpl, "computeToleranceOn", ComputeToleranceOn);

	Nan::SetPrototypeMethod(tpl, "GenerateValues", GenerateValues);
	Nan::SetPrototypeMethod(tpl, "generateValues", GenerateValues);

	Nan::SetPrototypeMethod(tpl, "GetArrayComponent", GetArrayComponent);
	Nan::SetPrototypeMethod(tpl, "getArrayComponent", GetArrayComponent);

	Nan::SetPrototypeMethod(tpl, "GetCellLocator", GetCellLocator);
	Nan::SetPrototypeMethod(tpl, "getCellLocator", GetCellLocator);

	Nan::SetPrototypeMethod(tpl, "GetCellOverlapMethod", GetCellOverlapMethod);
	Nan::SetPrototypeMethod(tpl, "getCellOverlapMethod", GetCellOverlapMethod);

	Nan::SetPrototypeMethod(tpl, "GetCellOverlapMethodMaxValue", GetCellOverlapMethodMaxValue);
	Nan::SetPrototypeMethod(tpl, "getCellOverlapMethodMaxValue", GetCellOverlapMethodMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetCellOverlapMethodMinValue", GetCellOverlapMethodMinValue);
	Nan::SetPrototypeMethod(tpl, "getCellOverlapMethodMinValue", GetCellOverlapMethodMinValue);

	Nan::SetPrototypeMethod(tpl, "GetComputeTolerance", GetComputeTolerance);
	Nan::SetPrototypeMethod(tpl, "getComputeTolerance", GetComputeTolerance);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfBins", GetNumberOfBins);
	Nan::SetPrototypeMethod(tpl, "getNumberOfBins", GetNumberOfBins);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfNonzeroBinsArrayName", GetNumberOfNonzeroBinsArrayName);
	Nan::SetPrototypeMethod(tpl, "getNumberOfNonzeroBinsArrayName", GetNumberOfNonzeroBinsArrayName);

	Nan::SetPrototypeMethod(tpl, "GetSource", GetSource);
	Nan::SetPrototypeMethod(tpl, "getSource", GetSource);

	Nan::SetPrototypeMethod(tpl, "GetSpatialMatch", GetSpatialMatch);
	Nan::SetPrototypeMethod(tpl, "getSpatialMatch", GetSpatialMatch);

	Nan::SetPrototypeMethod(tpl, "GetStoreNumberOfNonzeroBins", GetStoreNumberOfNonzeroBins);
	Nan::SetPrototypeMethod(tpl, "getStoreNumberOfNonzeroBins", GetStoreNumberOfNonzeroBins);

	Nan::SetPrototypeMethod(tpl, "GetTolerance", GetTolerance);
	Nan::SetPrototypeMethod(tpl, "getTolerance", GetTolerance);

	Nan::SetPrototypeMethod(tpl, "GetValue", GetValue);
	Nan::SetPrototypeMethod(tpl, "getValue", GetValue);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetArrayComponent", SetArrayComponent);
	Nan::SetPrototypeMethod(tpl, "setArrayComponent", SetArrayComponent);

	Nan::SetPrototypeMethod(tpl, "SetCellLocator", SetCellLocator);
	Nan::SetPrototypeMethod(tpl, "setCellLocator", SetCellLocator);

	Nan::SetPrototypeMethod(tpl, "SetCellOverlapMethod", SetCellOverlapMethod);
	Nan::SetPrototypeMethod(tpl, "setCellOverlapMethod", SetCellOverlapMethod);

	Nan::SetPrototypeMethod(tpl, "SetComputeTolerance", SetComputeTolerance);
	Nan::SetPrototypeMethod(tpl, "setComputeTolerance", SetComputeTolerance);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfBins", SetNumberOfBins);
	Nan::SetPrototypeMethod(tpl, "setNumberOfBins", SetNumberOfBins);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfNonzeroBinsArrayName", SetNumberOfNonzeroBinsArrayName);
	Nan::SetPrototypeMethod(tpl, "setNumberOfNonzeroBinsArrayName", SetNumberOfNonzeroBinsArrayName);

	Nan::SetPrototypeMethod(tpl, "SetSourceConnection", SetSourceConnection);
	Nan::SetPrototypeMethod(tpl, "setSourceConnection", SetSourceConnection);

	Nan::SetPrototypeMethod(tpl, "SetSourceData", SetSourceData);
	Nan::SetPrototypeMethod(tpl, "setSourceData", SetSourceData);

	Nan::SetPrototypeMethod(tpl, "SetSpatialMatch", SetSpatialMatch);
	Nan::SetPrototypeMethod(tpl, "setSpatialMatch", SetSpatialMatch);

	Nan::SetPrototypeMethod(tpl, "SetStoreNumberOfNonzeroBins", SetStoreNumberOfNonzeroBins);
	Nan::SetPrototypeMethod(tpl, "setStoreNumberOfNonzeroBins", SetStoreNumberOfNonzeroBins);

	Nan::SetPrototypeMethod(tpl, "SetTolerance", SetTolerance);
	Nan::SetPrototypeMethod(tpl, "setTolerance", SetTolerance);

	Nan::SetPrototypeMethod(tpl, "SetValue", SetValue);
	Nan::SetPrototypeMethod(tpl, "setValue", SetValue);

	Nan::SetPrototypeMethod(tpl, "SpatialMatchOff", SpatialMatchOff);
	Nan::SetPrototypeMethod(tpl, "spatialMatchOff", SpatialMatchOff);

	Nan::SetPrototypeMethod(tpl, "SpatialMatchOn", SpatialMatchOn);
	Nan::SetPrototypeMethod(tpl, "spatialMatchOn", SpatialMatchOn);

	Nan::SetPrototypeMethod(tpl, "StoreNumberOfNonzeroBinsOff", StoreNumberOfNonzeroBinsOff);
	Nan::SetPrototypeMethod(tpl, "storeNumberOfNonzeroBinsOff", StoreNumberOfNonzeroBinsOff);

	Nan::SetPrototypeMethod(tpl, "StoreNumberOfNonzeroBinsOn", StoreNumberOfNonzeroBinsOn);
	Nan::SetPrototypeMethod(tpl, "storeNumberOfNonzeroBinsOn", StoreNumberOfNonzeroBinsOn);

#ifdef VTK_NODE_PLUS_VTKBINCELLDATAFILTERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKBINCELLDATAFILTERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkBinCellDataFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkBinCellDataFilter> native = vtkSmartPointer<vtkBinCellDataFilter>::New();
		VtkBinCellDataFilterWrap* obj = new VtkBinCellDataFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkBinCellDataFilterWrap::ComputeToleranceOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeToleranceOff();
}

void VtkBinCellDataFilterWrap::ComputeToleranceOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeToleranceOn();
}

void VtkBinCellDataFilterWrap::GenerateValues(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsFloat64Array())
		{
			v8::Local<v8::Float64Array>a1(v8::Local<v8::Float64Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 2 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GenerateValues(
				info[0]->Int32Value(),
				(double *)(a1->Buffer()->GetContents().Data())
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			double b1[2];
			if( a1->Length() < 2 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 2; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->GenerateValues(
				info[0]->Int32Value(),
				b1
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->GenerateValues(
					info[0]->Int32Value(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::GetArrayComponent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetArrayComponent();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBinCellDataFilterWrap::GetCellLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	vtkCellLocator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCellLocator();
	VtkCellLocatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCellLocatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCellLocatorWrap *w = new VtkCellLocatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkBinCellDataFilterWrap::GetCellOverlapMethod(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCellOverlapMethod();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBinCellDataFilterWrap::GetCellOverlapMethodMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCellOverlapMethodMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBinCellDataFilterWrap::GetCellOverlapMethodMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCellOverlapMethodMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBinCellDataFilterWrap::GetComputeTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBinCellDataFilterWrap::GetNumberOfBins(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfBins();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBinCellDataFilterWrap::GetNumberOfNonzeroBinsArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfNonzeroBinsArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkBinCellDataFilterWrap::GetSource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	vtkDataObject * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSource();
	VtkDataObjectWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataObjectWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataObjectWrap *w = new VtkDataObjectWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkBinCellDataFilterWrap::GetSpatialMatch(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSpatialMatch();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBinCellDataFilterWrap::GetStoreNumberOfNonzeroBins(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStoreNumberOfNonzeroBins();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBinCellDataFilterWrap::GetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBinCellDataFilterWrap::GetValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		double r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetValue(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	vtkBinCellDataFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkBinCellDataFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkBinCellDataFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkBinCellDataFilterWrap *w = new VtkBinCellDataFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkBinCellDataFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkBinCellDataFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkBinCellDataFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkBinCellDataFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkBinCellDataFilterWrap *w = new VtkBinCellDataFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SetArrayComponent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetArrayComponent(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SetCellLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkCellLocatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkCellLocatorWrap *a0 = ObjectWrap::Unwrap<VtkCellLocatorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCellLocator(
			(vtkCellLocator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SetCellOverlapMethod(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCellOverlapMethod(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SetComputeTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeTolerance(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SetNumberOfBins(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfBins(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SetNumberOfNonzeroBinsArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfNonzeroBinsArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SetSourceConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAlgorithmOutputWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSourceConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SetSourceData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSourceData(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SetSpatialMatch(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSpatialMatch(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SetStoreNumberOfNonzeroBins(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetStoreNumberOfNonzeroBins(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTolerance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SetValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetValue(
				info[0]->Int32Value(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBinCellDataFilterWrap::SpatialMatchOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SpatialMatchOff();
}

void VtkBinCellDataFilterWrap::SpatialMatchOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SpatialMatchOn();
}

void VtkBinCellDataFilterWrap::StoreNumberOfNonzeroBinsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->StoreNumberOfNonzeroBinsOff();
}

void VtkBinCellDataFilterWrap::StoreNumberOfNonzeroBinsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBinCellDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkBinCellDataFilterWrap>(info.Holder());
	vtkBinCellDataFilter *native = (vtkBinCellDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->StoreNumberOfNonzeroBinsOn();
}

