/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkActor2DWrap.h"
#include "vtkCornerAnnotationWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkViewportWrap.h"
#include "vtkWindowWrap.h"
#include "vtkImageActorWrap.h"
#include "vtkImageMapToWindowLevelColorsWrap.h"
#include "vtkTextPropertyWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkCornerAnnotationWrap::ptpl;

VtkCornerAnnotationWrap::VtkCornerAnnotationWrap()
{ }

VtkCornerAnnotationWrap::VtkCornerAnnotationWrap(vtkSmartPointer<vtkCornerAnnotation> _native)
{ native = _native; }

VtkCornerAnnotationWrap::~VtkCornerAnnotationWrap()
{ }

void VtkCornerAnnotationWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkCornerAnnotation").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("CornerAnnotation").ToLocalChecked(), ConstructorGetter);
}

void VtkCornerAnnotationWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkCornerAnnotationWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkActor2DWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkActor2DWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkCornerAnnotationWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ClearAllTexts", ClearAllTexts);
	Nan::SetPrototypeMethod(tpl, "clearAllTexts", ClearAllTexts);

	Nan::SetPrototypeMethod(tpl, "CopyAllTextsFrom", CopyAllTextsFrom);
	Nan::SetPrototypeMethod(tpl, "copyAllTextsFrom", CopyAllTextsFrom);

	Nan::SetPrototypeMethod(tpl, "GetImageActor", GetImageActor);
	Nan::SetPrototypeMethod(tpl, "getImageActor", GetImageActor);

	Nan::SetPrototypeMethod(tpl, "GetLevelScale", GetLevelScale);
	Nan::SetPrototypeMethod(tpl, "getLevelScale", GetLevelScale);

	Nan::SetPrototypeMethod(tpl, "GetLevelShift", GetLevelShift);
	Nan::SetPrototypeMethod(tpl, "getLevelShift", GetLevelShift);

	Nan::SetPrototypeMethod(tpl, "GetLinearFontScaleFactor", GetLinearFontScaleFactor);
	Nan::SetPrototypeMethod(tpl, "getLinearFontScaleFactor", GetLinearFontScaleFactor);

	Nan::SetPrototypeMethod(tpl, "GetMaximumFontSize", GetMaximumFontSize);
	Nan::SetPrototypeMethod(tpl, "getMaximumFontSize", GetMaximumFontSize);

	Nan::SetPrototypeMethod(tpl, "GetMaximumLineHeight", GetMaximumLineHeight);
	Nan::SetPrototypeMethod(tpl, "getMaximumLineHeight", GetMaximumLineHeight);

	Nan::SetPrototypeMethod(tpl, "GetMinimumFontSize", GetMinimumFontSize);
	Nan::SetPrototypeMethod(tpl, "getMinimumFontSize", GetMinimumFontSize);

	Nan::SetPrototypeMethod(tpl, "GetNonlinearFontScaleFactor", GetNonlinearFontScaleFactor);
	Nan::SetPrototypeMethod(tpl, "getNonlinearFontScaleFactor", GetNonlinearFontScaleFactor);

	Nan::SetPrototypeMethod(tpl, "GetShowSliceAndImage", GetShowSliceAndImage);
	Nan::SetPrototypeMethod(tpl, "getShowSliceAndImage", GetShowSliceAndImage);

	Nan::SetPrototypeMethod(tpl, "GetText", GetText);
	Nan::SetPrototypeMethod(tpl, "getText", GetText);

	Nan::SetPrototypeMethod(tpl, "GetTextProperty", GetTextProperty);
	Nan::SetPrototypeMethod(tpl, "getTextProperty", GetTextProperty);

	Nan::SetPrototypeMethod(tpl, "GetWindowLevel", GetWindowLevel);
	Nan::SetPrototypeMethod(tpl, "getWindowLevel", GetWindowLevel);

	Nan::SetPrototypeMethod(tpl, "HasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "hasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "RenderOpaqueGeometry", RenderOpaqueGeometry);
	Nan::SetPrototypeMethod(tpl, "renderOpaqueGeometry", RenderOpaqueGeometry);

	Nan::SetPrototypeMethod(tpl, "RenderOverlay", RenderOverlay);
	Nan::SetPrototypeMethod(tpl, "renderOverlay", RenderOverlay);

	Nan::SetPrototypeMethod(tpl, "RenderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "renderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetImageActor", SetImageActor);
	Nan::SetPrototypeMethod(tpl, "setImageActor", SetImageActor);

	Nan::SetPrototypeMethod(tpl, "SetLevelScale", SetLevelScale);
	Nan::SetPrototypeMethod(tpl, "setLevelScale", SetLevelScale);

	Nan::SetPrototypeMethod(tpl, "SetLevelShift", SetLevelShift);
	Nan::SetPrototypeMethod(tpl, "setLevelShift", SetLevelShift);

	Nan::SetPrototypeMethod(tpl, "SetLinearFontScaleFactor", SetLinearFontScaleFactor);
	Nan::SetPrototypeMethod(tpl, "setLinearFontScaleFactor", SetLinearFontScaleFactor);

	Nan::SetPrototypeMethod(tpl, "SetMaximumFontSize", SetMaximumFontSize);
	Nan::SetPrototypeMethod(tpl, "setMaximumFontSize", SetMaximumFontSize);

	Nan::SetPrototypeMethod(tpl, "SetMaximumLineHeight", SetMaximumLineHeight);
	Nan::SetPrototypeMethod(tpl, "setMaximumLineHeight", SetMaximumLineHeight);

	Nan::SetPrototypeMethod(tpl, "SetMinimumFontSize", SetMinimumFontSize);
	Nan::SetPrototypeMethod(tpl, "setMinimumFontSize", SetMinimumFontSize);

	Nan::SetPrototypeMethod(tpl, "SetNonlinearFontScaleFactor", SetNonlinearFontScaleFactor);
	Nan::SetPrototypeMethod(tpl, "setNonlinearFontScaleFactor", SetNonlinearFontScaleFactor);

	Nan::SetPrototypeMethod(tpl, "SetShowSliceAndImage", SetShowSliceAndImage);
	Nan::SetPrototypeMethod(tpl, "setShowSliceAndImage", SetShowSliceAndImage);

	Nan::SetPrototypeMethod(tpl, "SetText", SetText);
	Nan::SetPrototypeMethod(tpl, "setText", SetText);

	Nan::SetPrototypeMethod(tpl, "SetTextProperty", SetTextProperty);
	Nan::SetPrototypeMethod(tpl, "setTextProperty", SetTextProperty);

	Nan::SetPrototypeMethod(tpl, "SetWindowLevel", SetWindowLevel);
	Nan::SetPrototypeMethod(tpl, "setWindowLevel", SetWindowLevel);

	Nan::SetPrototypeMethod(tpl, "ShowSliceAndImageOff", ShowSliceAndImageOff);
	Nan::SetPrototypeMethod(tpl, "showSliceAndImageOff", ShowSliceAndImageOff);

	Nan::SetPrototypeMethod(tpl, "ShowSliceAndImageOn", ShowSliceAndImageOn);
	Nan::SetPrototypeMethod(tpl, "showSliceAndImageOn", ShowSliceAndImageOn);

#ifdef VTK_NODE_PLUS_VTKCORNERANNOTATIONWRAP_INITPTPL
	VTK_NODE_PLUS_VTKCORNERANNOTATIONWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkCornerAnnotationWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkCornerAnnotation> native = vtkSmartPointer<vtkCornerAnnotation>::New();
		VtkCornerAnnotationWrap* obj = new VtkCornerAnnotationWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkCornerAnnotationWrap::ClearAllTexts(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ClearAllTexts();
}

void VtkCornerAnnotationWrap::CopyAllTextsFrom(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkCornerAnnotationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkCornerAnnotationWrap *a0 = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->CopyAllTextsFrom(
			(vtkCornerAnnotation *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::GetImageActor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	vtkImageActor * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImageActor();
	VtkImageActorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImageActorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageActorWrap *w = new VtkImageActorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCornerAnnotationWrap::GetLevelScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLevelScale();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCornerAnnotationWrap::GetLevelShift(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLevelShift();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCornerAnnotationWrap::GetLinearFontScaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLinearFontScaleFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCornerAnnotationWrap::GetMaximumFontSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumFontSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCornerAnnotationWrap::GetMaximumLineHeight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumLineHeight();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCornerAnnotationWrap::GetMinimumFontSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMinimumFontSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCornerAnnotationWrap::GetNonlinearFontScaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNonlinearFontScaleFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCornerAnnotationWrap::GetShowSliceAndImage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetShowSliceAndImage();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCornerAnnotationWrap::GetText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetText(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::GetTextProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	vtkTextProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTextProperty();
	VtkTextPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTextPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTextPropertyWrap *w = new VtkTextPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCornerAnnotationWrap::GetWindowLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	vtkImageMapToWindowLevelColors * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetWindowLevel();
	VtkImageMapToWindowLevelColorsWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImageMapToWindowLevelColorsWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageMapToWindowLevelColorsWrap *w = new VtkImageMapToWindowLevelColorsWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCornerAnnotationWrap::HasTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasTranslucentPolygonalGeometry();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCornerAnnotationWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	vtkCornerAnnotation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkCornerAnnotationWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkCornerAnnotationWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCornerAnnotationWrap *w = new VtkCornerAnnotationWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCornerAnnotationWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOpaqueGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::RenderOverlay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOverlay(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::RenderTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderTranslucentPolygonalGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkCornerAnnotation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkCornerAnnotationWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkCornerAnnotationWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkCornerAnnotationWrap *w = new VtkCornerAnnotationWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SetImageActor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImageActorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImageActorWrap *a0 = ObjectWrap::Unwrap<VtkImageActorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetImageActor(
			(vtkImageActor *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SetLevelScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLevelScale(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SetLevelShift(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLevelShift(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SetLinearFontScaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLinearFontScaleFactor(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SetMaximumFontSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumFontSize(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SetMaximumLineHeight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumLineHeight(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SetMinimumFontSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMinimumFontSize(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SetNonlinearFontScaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNonlinearFontScaleFactor(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SetShowSliceAndImage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetShowSliceAndImage(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SetText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsString())
		{
			Nan::Utf8String a1(info[1]);
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetText(
				info[0]->Int32Value(),
				*a1
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SetTextProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTextPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTextPropertyWrap *a0 = ObjectWrap::Unwrap<VtkTextPropertyWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTextProperty(
			(vtkTextProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::SetWindowLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImageMapToWindowLevelColorsWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImageMapToWindowLevelColorsWrap *a0 = ObjectWrap::Unwrap<VtkImageMapToWindowLevelColorsWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetWindowLevel(
			(vtkImageMapToWindowLevelColors *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCornerAnnotationWrap::ShowSliceAndImageOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ShowSliceAndImageOff();
}

void VtkCornerAnnotationWrap::ShowSliceAndImageOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCornerAnnotationWrap *wrapper = ObjectWrap::Unwrap<VtkCornerAnnotationWrap>(info.Holder());
	vtkCornerAnnotation *native = (vtkCornerAnnotation *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ShowSliceAndImageOn();
}

