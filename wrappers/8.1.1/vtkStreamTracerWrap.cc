/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkStreamTracerWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkAlgorithmOutputWrap.h"
#include "vtkInitialValueProblemSolverWrap.h"
#include "vtkAbstractInterpolatedVelocityFieldWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkStreamTracerWrap::ptpl;

VtkStreamTracerWrap::VtkStreamTracerWrap()
{ }

VtkStreamTracerWrap::VtkStreamTracerWrap(vtkSmartPointer<vtkStreamTracer> _native)
{ native = _native; }

VtkStreamTracerWrap::~VtkStreamTracerWrap()
{ }

void VtkStreamTracerWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkStreamTracer").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("StreamTracer").ToLocalChecked(), ConstructorGetter);
}

void VtkStreamTracerWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkStreamTracerWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkStreamTracerWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetComputeVorticity", GetComputeVorticity);
	Nan::SetPrototypeMethod(tpl, "getComputeVorticity", GetComputeVorticity);

	Nan::SetPrototypeMethod(tpl, "GetInitialIntegrationStep", GetInitialIntegrationStep);
	Nan::SetPrototypeMethod(tpl, "getInitialIntegrationStep", GetInitialIntegrationStep);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationDirection", GetIntegrationDirection);
	Nan::SetPrototypeMethod(tpl, "getIntegrationDirection", GetIntegrationDirection);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationDirectionMaxValue", GetIntegrationDirectionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getIntegrationDirectionMaxValue", GetIntegrationDirectionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationDirectionMinValue", GetIntegrationDirectionMinValue);
	Nan::SetPrototypeMethod(tpl, "getIntegrationDirectionMinValue", GetIntegrationDirectionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationStepUnit", GetIntegrationStepUnit);
	Nan::SetPrototypeMethod(tpl, "getIntegrationStepUnit", GetIntegrationStepUnit);

	Nan::SetPrototypeMethod(tpl, "GetIntegrator", GetIntegrator);
	Nan::SetPrototypeMethod(tpl, "getIntegrator", GetIntegrator);

	Nan::SetPrototypeMethod(tpl, "GetIntegratorType", GetIntegratorType);
	Nan::SetPrototypeMethod(tpl, "getIntegratorType", GetIntegratorType);

	Nan::SetPrototypeMethod(tpl, "GetMaximumError", GetMaximumError);
	Nan::SetPrototypeMethod(tpl, "getMaximumError", GetMaximumError);

	Nan::SetPrototypeMethod(tpl, "GetMaximumIntegrationStep", GetMaximumIntegrationStep);
	Nan::SetPrototypeMethod(tpl, "getMaximumIntegrationStep", GetMaximumIntegrationStep);

	Nan::SetPrototypeMethod(tpl, "GetMaximumPropagation", GetMaximumPropagation);
	Nan::SetPrototypeMethod(tpl, "getMaximumPropagation", GetMaximumPropagation);

	Nan::SetPrototypeMethod(tpl, "GetMinimumIntegrationStep", GetMinimumIntegrationStep);
	Nan::SetPrototypeMethod(tpl, "getMinimumIntegrationStep", GetMinimumIntegrationStep);

	Nan::SetPrototypeMethod(tpl, "GetRotationScale", GetRotationScale);
	Nan::SetPrototypeMethod(tpl, "getRotationScale", GetRotationScale);

	Nan::SetPrototypeMethod(tpl, "GetSource", GetSource);
	Nan::SetPrototypeMethod(tpl, "getSource", GetSource);

	Nan::SetPrototypeMethod(tpl, "GetStartPosition", GetStartPosition);
	Nan::SetPrototypeMethod(tpl, "getStartPosition", GetStartPosition);

	Nan::SetPrototypeMethod(tpl, "GetSurfaceStreamlines", GetSurfaceStreamlines);
	Nan::SetPrototypeMethod(tpl, "getSurfaceStreamlines", GetSurfaceStreamlines);

	Nan::SetPrototypeMethod(tpl, "GetTerminalSpeed", GetTerminalSpeed);
	Nan::SetPrototypeMethod(tpl, "getTerminalSpeed", GetTerminalSpeed);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetComputeVorticity", SetComputeVorticity);
	Nan::SetPrototypeMethod(tpl, "setComputeVorticity", SetComputeVorticity);

	Nan::SetPrototypeMethod(tpl, "SetInitialIntegrationStep", SetInitialIntegrationStep);
	Nan::SetPrototypeMethod(tpl, "setInitialIntegrationStep", SetInitialIntegrationStep);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationDirection", SetIntegrationDirection);
	Nan::SetPrototypeMethod(tpl, "setIntegrationDirection", SetIntegrationDirection);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationDirectionToBackward", SetIntegrationDirectionToBackward);
	Nan::SetPrototypeMethod(tpl, "setIntegrationDirectionToBackward", SetIntegrationDirectionToBackward);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationDirectionToBoth", SetIntegrationDirectionToBoth);
	Nan::SetPrototypeMethod(tpl, "setIntegrationDirectionToBoth", SetIntegrationDirectionToBoth);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationDirectionToForward", SetIntegrationDirectionToForward);
	Nan::SetPrototypeMethod(tpl, "setIntegrationDirectionToForward", SetIntegrationDirectionToForward);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationStepUnit", SetIntegrationStepUnit);
	Nan::SetPrototypeMethod(tpl, "setIntegrationStepUnit", SetIntegrationStepUnit);

	Nan::SetPrototypeMethod(tpl, "SetIntegrator", SetIntegrator);
	Nan::SetPrototypeMethod(tpl, "setIntegrator", SetIntegrator);

	Nan::SetPrototypeMethod(tpl, "SetIntegratorType", SetIntegratorType);
	Nan::SetPrototypeMethod(tpl, "setIntegratorType", SetIntegratorType);

	Nan::SetPrototypeMethod(tpl, "SetIntegratorTypeToRungeKutta2", SetIntegratorTypeToRungeKutta2);
	Nan::SetPrototypeMethod(tpl, "setIntegratorTypeToRungeKutta2", SetIntegratorTypeToRungeKutta2);

	Nan::SetPrototypeMethod(tpl, "SetIntegratorTypeToRungeKutta4", SetIntegratorTypeToRungeKutta4);
	Nan::SetPrototypeMethod(tpl, "setIntegratorTypeToRungeKutta4", SetIntegratorTypeToRungeKutta4);

	Nan::SetPrototypeMethod(tpl, "SetIntegratorTypeToRungeKutta45", SetIntegratorTypeToRungeKutta45);
	Nan::SetPrototypeMethod(tpl, "setIntegratorTypeToRungeKutta45", SetIntegratorTypeToRungeKutta45);

	Nan::SetPrototypeMethod(tpl, "SetInterpolatorPrototype", SetInterpolatorPrototype);
	Nan::SetPrototypeMethod(tpl, "setInterpolatorPrototype", SetInterpolatorPrototype);

	Nan::SetPrototypeMethod(tpl, "SetInterpolatorType", SetInterpolatorType);
	Nan::SetPrototypeMethod(tpl, "setInterpolatorType", SetInterpolatorType);

	Nan::SetPrototypeMethod(tpl, "SetInterpolatorTypeToCellLocator", SetInterpolatorTypeToCellLocator);
	Nan::SetPrototypeMethod(tpl, "setInterpolatorTypeToCellLocator", SetInterpolatorTypeToCellLocator);

	Nan::SetPrototypeMethod(tpl, "SetInterpolatorTypeToDataSetPointLocator", SetInterpolatorTypeToDataSetPointLocator);
	Nan::SetPrototypeMethod(tpl, "setInterpolatorTypeToDataSetPointLocator", SetInterpolatorTypeToDataSetPointLocator);

	Nan::SetPrototypeMethod(tpl, "SetMaximumError", SetMaximumError);
	Nan::SetPrototypeMethod(tpl, "setMaximumError", SetMaximumError);

	Nan::SetPrototypeMethod(tpl, "SetMaximumIntegrationStep", SetMaximumIntegrationStep);
	Nan::SetPrototypeMethod(tpl, "setMaximumIntegrationStep", SetMaximumIntegrationStep);

	Nan::SetPrototypeMethod(tpl, "SetMaximumPropagation", SetMaximumPropagation);
	Nan::SetPrototypeMethod(tpl, "setMaximumPropagation", SetMaximumPropagation);

	Nan::SetPrototypeMethod(tpl, "SetMinimumIntegrationStep", SetMinimumIntegrationStep);
	Nan::SetPrototypeMethod(tpl, "setMinimumIntegrationStep", SetMinimumIntegrationStep);

	Nan::SetPrototypeMethod(tpl, "SetRotationScale", SetRotationScale);
	Nan::SetPrototypeMethod(tpl, "setRotationScale", SetRotationScale);

	Nan::SetPrototypeMethod(tpl, "SetSourceConnection", SetSourceConnection);
	Nan::SetPrototypeMethod(tpl, "setSourceConnection", SetSourceConnection);

	Nan::SetPrototypeMethod(tpl, "SetSourceData", SetSourceData);
	Nan::SetPrototypeMethod(tpl, "setSourceData", SetSourceData);

	Nan::SetPrototypeMethod(tpl, "SetStartPosition", SetStartPosition);
	Nan::SetPrototypeMethod(tpl, "setStartPosition", SetStartPosition);

	Nan::SetPrototypeMethod(tpl, "SetSurfaceStreamlines", SetSurfaceStreamlines);
	Nan::SetPrototypeMethod(tpl, "setSurfaceStreamlines", SetSurfaceStreamlines);

	Nan::SetPrototypeMethod(tpl, "SetTerminalSpeed", SetTerminalSpeed);
	Nan::SetPrototypeMethod(tpl, "setTerminalSpeed", SetTerminalSpeed);

	Nan::SetPrototypeMethod(tpl, "SurfaceStreamlinesOff", SurfaceStreamlinesOff);
	Nan::SetPrototypeMethod(tpl, "surfaceStreamlinesOff", SurfaceStreamlinesOff);

	Nan::SetPrototypeMethod(tpl, "SurfaceStreamlinesOn", SurfaceStreamlinesOn);
	Nan::SetPrototypeMethod(tpl, "surfaceStreamlinesOn", SurfaceStreamlinesOn);

#ifdef VTK_NODE_PLUS_VTKSTREAMTRACERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKSTREAMTRACERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkStreamTracerWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkStreamTracer> native = vtkSmartPointer<vtkStreamTracer>::New();
		VtkStreamTracerWrap* obj = new VtkStreamTracerWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkStreamTracerWrap::GetComputeVorticity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeVorticity();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetInitialIntegrationStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInitialIntegrationStep();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetIntegrationDirection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationDirection();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetIntegrationDirectionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationDirectionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetIntegrationDirectionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationDirectionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetIntegrationStepUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationStepUnit();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetIntegrator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	vtkInitialValueProblemSolver * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrator();
	VtkInitialValueProblemSolverWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInitialValueProblemSolverWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInitialValueProblemSolverWrap *w = new VtkInitialValueProblemSolverWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamTracerWrap::GetIntegratorType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegratorType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetMaximumError(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumError();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetMaximumIntegrationStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumIntegrationStep();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetMaximumPropagation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumPropagation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetMinimumIntegrationStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMinimumIntegrationStep();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetRotationScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRotationScale();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetSource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSource();
	VtkDataSetWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataSetWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamTracerWrap::GetStartPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStartPosition();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkStreamTracerWrap::GetSurfaceStreamlines(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSurfaceStreamlines();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::GetTerminalSpeed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTerminalSpeed();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStreamTracerWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	vtkStreamTracer * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkStreamTracerWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkStreamTracerWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStreamTracerWrap *w = new VtkStreamTracerWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStreamTracerWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkStreamTracer * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkStreamTracerWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkStreamTracerWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkStreamTracerWrap *w = new VtkStreamTracerWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetComputeVorticity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeVorticity(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetInitialIntegrationStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInitialIntegrationStep(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetIntegrationDirection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegrationDirection(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetIntegrationDirectionToBackward(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegrationDirectionToBackward();
}

void VtkStreamTracerWrap::SetIntegrationDirectionToBoth(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegrationDirectionToBoth();
}

void VtkStreamTracerWrap::SetIntegrationDirectionToForward(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegrationDirectionToForward();
}

void VtkStreamTracerWrap::SetIntegrationStepUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegrationStepUnit(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetIntegrator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInitialValueProblemSolverWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInitialValueProblemSolverWrap *a0 = ObjectWrap::Unwrap<VtkInitialValueProblemSolverWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegrator(
			(vtkInitialValueProblemSolver *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetIntegratorType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegratorType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetIntegratorTypeToRungeKutta2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegratorTypeToRungeKutta2();
}

void VtkStreamTracerWrap::SetIntegratorTypeToRungeKutta4(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegratorTypeToRungeKutta4();
}

void VtkStreamTracerWrap::SetIntegratorTypeToRungeKutta45(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegratorTypeToRungeKutta45();
}

void VtkStreamTracerWrap::SetInterpolatorPrototype(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractInterpolatedVelocityFieldWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractInterpolatedVelocityFieldWrap *a0 = ObjectWrap::Unwrap<VtkAbstractInterpolatedVelocityFieldWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInterpolatorPrototype(
			(vtkAbstractInterpolatedVelocityField *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetInterpolatorType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInterpolatorType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetInterpolatorTypeToCellLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInterpolatorTypeToCellLocator();
}

void VtkStreamTracerWrap::SetInterpolatorTypeToDataSetPointLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInterpolatorTypeToDataSetPointLocator();
}

void VtkStreamTracerWrap::SetMaximumError(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumError(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetMaximumIntegrationStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumIntegrationStep(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetMaximumPropagation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumPropagation(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetMinimumIntegrationStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMinimumIntegrationStep(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetRotationScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRotationScale(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetSourceConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAlgorithmOutputWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSourceConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetSourceData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSourceData(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetStartPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetStartPosition(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetStartPosition(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetStartPosition(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetSurfaceStreamlines(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSurfaceStreamlines(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SetTerminalSpeed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTerminalSpeed(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStreamTracerWrap::SurfaceStreamlinesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SurfaceStreamlinesOff();
}

void VtkStreamTracerWrap::SurfaceStreamlinesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkStreamTracerWrap>(info.Holder());
	vtkStreamTracer *native = (vtkStreamTracer *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SurfaceStreamlinesOn();
}

