/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPassInputTypeAlgorithmWrap.h"
#include "vtkExtractTimeStepsWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkExtractTimeStepsWrap::ptpl;

VtkExtractTimeStepsWrap::VtkExtractTimeStepsWrap()
{ }

VtkExtractTimeStepsWrap::VtkExtractTimeStepsWrap(vtkSmartPointer<vtkExtractTimeSteps> _native)
{ native = _native; }

VtkExtractTimeStepsWrap::~VtkExtractTimeStepsWrap()
{ }

void VtkExtractTimeStepsWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkExtractTimeSteps").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ExtractTimeSteps").ToLocalChecked(), ConstructorGetter);
}

void VtkExtractTimeStepsWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkExtractTimeStepsWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPassInputTypeAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPassInputTypeAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkExtractTimeStepsWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddTimeStepIndex", AddTimeStepIndex);
	Nan::SetPrototypeMethod(tpl, "addTimeStepIndex", AddTimeStepIndex);

	Nan::SetPrototypeMethod(tpl, "ClearTimeStepIndices", ClearTimeStepIndices);
	Nan::SetPrototypeMethod(tpl, "clearTimeStepIndices", ClearTimeStepIndices);

	Nan::SetPrototypeMethod(tpl, "GenerateTimeStepIndices", GenerateTimeStepIndices);
	Nan::SetPrototypeMethod(tpl, "generateTimeStepIndices", GenerateTimeStepIndices);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfTimeSteps", GetNumberOfTimeSteps);
	Nan::SetPrototypeMethod(tpl, "getNumberOfTimeSteps", GetNumberOfTimeSteps);

	Nan::SetPrototypeMethod(tpl, "GetRange", GetRange);
	Nan::SetPrototypeMethod(tpl, "getRange", GetRange);

	Nan::SetPrototypeMethod(tpl, "GetTimeEstimationMode", GetTimeEstimationMode);
	Nan::SetPrototypeMethod(tpl, "getTimeEstimationMode", GetTimeEstimationMode);

	Nan::SetPrototypeMethod(tpl, "GetTimeStepInterval", GetTimeStepInterval);
	Nan::SetPrototypeMethod(tpl, "getTimeStepInterval", GetTimeStepInterval);

	Nan::SetPrototypeMethod(tpl, "GetTimeStepIntervalMaxValue", GetTimeStepIntervalMaxValue);
	Nan::SetPrototypeMethod(tpl, "getTimeStepIntervalMaxValue", GetTimeStepIntervalMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetTimeStepIntervalMinValue", GetTimeStepIntervalMinValue);
	Nan::SetPrototypeMethod(tpl, "getTimeStepIntervalMinValue", GetTimeStepIntervalMinValue);

	Nan::SetPrototypeMethod(tpl, "GetUseRange", GetUseRange);
	Nan::SetPrototypeMethod(tpl, "getUseRange", GetUseRange);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetRange", SetRange);
	Nan::SetPrototypeMethod(tpl, "setRange", SetRange);

	Nan::SetPrototypeMethod(tpl, "SetTimeEstimationMode", SetTimeEstimationMode);
	Nan::SetPrototypeMethod(tpl, "setTimeEstimationMode", SetTimeEstimationMode);

	Nan::SetPrototypeMethod(tpl, "SetTimeEstimationModeToNearest", SetTimeEstimationModeToNearest);
	Nan::SetPrototypeMethod(tpl, "setTimeEstimationModeToNearest", SetTimeEstimationModeToNearest);

	Nan::SetPrototypeMethod(tpl, "SetTimeEstimationModeToNext", SetTimeEstimationModeToNext);
	Nan::SetPrototypeMethod(tpl, "setTimeEstimationModeToNext", SetTimeEstimationModeToNext);

	Nan::SetPrototypeMethod(tpl, "SetTimeEstimationModeToPrevious", SetTimeEstimationModeToPrevious);
	Nan::SetPrototypeMethod(tpl, "setTimeEstimationModeToPrevious", SetTimeEstimationModeToPrevious);

	Nan::SetPrototypeMethod(tpl, "SetTimeStepInterval", SetTimeStepInterval);
	Nan::SetPrototypeMethod(tpl, "setTimeStepInterval", SetTimeStepInterval);

	Nan::SetPrototypeMethod(tpl, "SetUseRange", SetUseRange);
	Nan::SetPrototypeMethod(tpl, "setUseRange", SetUseRange);

	Nan::SetPrototypeMethod(tpl, "UseRangeOff", UseRangeOff);
	Nan::SetPrototypeMethod(tpl, "useRangeOff", UseRangeOff);

	Nan::SetPrototypeMethod(tpl, "UseRangeOn", UseRangeOn);
	Nan::SetPrototypeMethod(tpl, "useRangeOn", UseRangeOn);

#ifdef VTK_NODE_PLUS_VTKEXTRACTTIMESTEPSWRAP_INITPTPL
	VTK_NODE_PLUS_VTKEXTRACTTIMESTEPSWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkExtractTimeStepsWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkExtractTimeSteps> native = vtkSmartPointer<vtkExtractTimeSteps>::New();
		VtkExtractTimeStepsWrap* obj = new VtkExtractTimeStepsWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkExtractTimeStepsWrap::AddTimeStepIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddTimeStepIndex(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractTimeStepsWrap::ClearTimeStepIndices(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ClearTimeStepIndices();
}

void VtkExtractTimeStepsWrap::GenerateTimeStepIndices(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->GenerateTimeStepIndices(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractTimeStepsWrap::GetNumberOfTimeSteps(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfTimeSteps();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractTimeStepsWrap::GetRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	int const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRange();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 2 * sizeof(int));
	Local<v8::Int32Array> at = v8::Int32Array::New(ab, 0, 2);
	memcpy(ab->GetContents().Data(), r, 2 * sizeof(int));
	info.GetReturnValue().Set(at);
}

void VtkExtractTimeStepsWrap::GetTimeEstimationMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTimeEstimationMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractTimeStepsWrap::GetTimeStepInterval(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTimeStepInterval();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractTimeStepsWrap::GetTimeStepIntervalMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTimeStepIntervalMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractTimeStepsWrap::GetTimeStepIntervalMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTimeStepIntervalMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractTimeStepsWrap::GetUseRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseRange();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractTimeStepsWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	vtkExtractTimeSteps * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkExtractTimeStepsWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkExtractTimeStepsWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkExtractTimeStepsWrap *w = new VtkExtractTimeStepsWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExtractTimeStepsWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkExtractTimeSteps * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkExtractTimeStepsWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkExtractTimeStepsWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkExtractTimeStepsWrap *w = new VtkExtractTimeStepsWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractTimeStepsWrap::SetRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRange(
			(int *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[2];
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 2; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRange(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetRange(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractTimeStepsWrap::SetTimeEstimationMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTimeEstimationMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractTimeStepsWrap::SetTimeEstimationModeToNearest(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetTimeEstimationModeToNearest();
}

void VtkExtractTimeStepsWrap::SetTimeEstimationModeToNext(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetTimeEstimationModeToNext();
}

void VtkExtractTimeStepsWrap::SetTimeEstimationModeToPrevious(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetTimeEstimationModeToPrevious();
}

void VtkExtractTimeStepsWrap::SetTimeStepInterval(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTimeStepInterval(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractTimeStepsWrap::SetUseRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseRange(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractTimeStepsWrap::UseRangeOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseRangeOff();
}

void VtkExtractTimeStepsWrap::UseRangeOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractTimeStepsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractTimeStepsWrap>(info.Holder());
	vtkExtractTimeSteps *native = (vtkExtractTimeSteps *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseRangeOn();
}

