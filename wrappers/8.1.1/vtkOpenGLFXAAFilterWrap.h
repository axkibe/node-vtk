/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKOPENGLFXAAFILTERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKOPENGLFXAAFILTERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkOpenGLFXAAFilter.h>

#include "vtkObjectWrap.h"
#include "../../plus/plus.h"

class VtkOpenGLFXAAFilterWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkOpenGLFXAAFilterWrap(vtkSmartPointer<vtkOpenGLFXAAFilter>);
		VtkOpenGLFXAAFilterWrap();
		~VtkOpenGLFXAAFilterWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void Execute(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetEndpointSearchIterations(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetEndpointSearchIterationsMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetEndpointSearchIterationsMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHardContrastThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHardContrastThresholdMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHardContrastThresholdMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRelativeContrastThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRelativeContrastThresholdMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRelativeContrastThresholdMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSubpixelBlendLimit(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSubpixelBlendLimitMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSubpixelBlendLimitMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSubpixelContrastThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSubpixelContrastThresholdMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSubpixelContrastThresholdMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetUseHighQualityEndpoints(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetEndpointSearchIterations(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetHardContrastThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRelativeContrastThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSubpixelBlendLimit(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSubpixelContrastThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetUseHighQualityEndpoints(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UpdateConfiguration(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UseHighQualityEndpointsOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UseHighQualityEndpointsOn(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKOPENGLFXAAFILTERWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKOPENGLFXAAFILTERWRAP_CLASSDEF
#endif
};

#endif
