/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkDataSetSurfaceFilterWrap.h"
#include "vtkDataSetRegionSurfaceFilterWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkPolyDataWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkDataSetRegionSurfaceFilterWrap::ptpl;

VtkDataSetRegionSurfaceFilterWrap::VtkDataSetRegionSurfaceFilterWrap()
{ }

VtkDataSetRegionSurfaceFilterWrap::VtkDataSetRegionSurfaceFilterWrap(vtkSmartPointer<vtkDataSetRegionSurfaceFilter> _native)
{ native = _native; }

VtkDataSetRegionSurfaceFilterWrap::~VtkDataSetRegionSurfaceFilterWrap()
{ }

void VtkDataSetRegionSurfaceFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkDataSetRegionSurfaceFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("DataSetRegionSurfaceFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkDataSetRegionSurfaceFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkDataSetRegionSurfaceFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkDataSetSurfaceFilterWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkDataSetSurfaceFilterWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkDataSetRegionSurfaceFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetInterfaceIDsName", GetInterfaceIDsName);
	Nan::SetPrototypeMethod(tpl, "getInterfaceIDsName", GetInterfaceIDsName);

	Nan::SetPrototypeMethod(tpl, "GetMaterialIDsName", GetMaterialIDsName);
	Nan::SetPrototypeMethod(tpl, "getMaterialIDsName", GetMaterialIDsName);

	Nan::SetPrototypeMethod(tpl, "GetMaterialPIDsName", GetMaterialPIDsName);
	Nan::SetPrototypeMethod(tpl, "getMaterialPIDsName", GetMaterialPIDsName);

	Nan::SetPrototypeMethod(tpl, "GetMaterialPropertiesName", GetMaterialPropertiesName);
	Nan::SetPrototypeMethod(tpl, "getMaterialPropertiesName", GetMaterialPropertiesName);

	Nan::SetPrototypeMethod(tpl, "GetRegionArrayName", GetRegionArrayName);
	Nan::SetPrototypeMethod(tpl, "getRegionArrayName", GetRegionArrayName);

	Nan::SetPrototypeMethod(tpl, "GetSingleSided", GetSingleSided);
	Nan::SetPrototypeMethod(tpl, "getSingleSided", GetSingleSided);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetInterfaceIDsName", SetInterfaceIDsName);
	Nan::SetPrototypeMethod(tpl, "setInterfaceIDsName", SetInterfaceIDsName);

	Nan::SetPrototypeMethod(tpl, "SetMaterialIDsName", SetMaterialIDsName);
	Nan::SetPrototypeMethod(tpl, "setMaterialIDsName", SetMaterialIDsName);

	Nan::SetPrototypeMethod(tpl, "SetMaterialPIDsName", SetMaterialPIDsName);
	Nan::SetPrototypeMethod(tpl, "setMaterialPIDsName", SetMaterialPIDsName);

	Nan::SetPrototypeMethod(tpl, "SetMaterialPropertiesName", SetMaterialPropertiesName);
	Nan::SetPrototypeMethod(tpl, "setMaterialPropertiesName", SetMaterialPropertiesName);

	Nan::SetPrototypeMethod(tpl, "SetRegionArrayName", SetRegionArrayName);
	Nan::SetPrototypeMethod(tpl, "setRegionArrayName", SetRegionArrayName);

	Nan::SetPrototypeMethod(tpl, "SetSingleSided", SetSingleSided);
	Nan::SetPrototypeMethod(tpl, "setSingleSided", SetSingleSided);

	Nan::SetPrototypeMethod(tpl, "UnstructuredGridExecute", UnstructuredGridExecute);
	Nan::SetPrototypeMethod(tpl, "unstructuredGridExecute", UnstructuredGridExecute);

#ifdef VTK_NODE_PLUS_VTKDATASETREGIONSURFACEFILTERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKDATASETREGIONSURFACEFILTERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkDataSetRegionSurfaceFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkDataSetRegionSurfaceFilter> native = vtkSmartPointer<vtkDataSetRegionSurfaceFilter>::New();
		VtkDataSetRegionSurfaceFilterWrap* obj = new VtkDataSetRegionSurfaceFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkDataSetRegionSurfaceFilterWrap::GetInterfaceIDsName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInterfaceIDsName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDataSetRegionSurfaceFilterWrap::GetMaterialIDsName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaterialIDsName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDataSetRegionSurfaceFilterWrap::GetMaterialPIDsName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaterialPIDsName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDataSetRegionSurfaceFilterWrap::GetMaterialPropertiesName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaterialPropertiesName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDataSetRegionSurfaceFilterWrap::GetRegionArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRegionArrayName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDataSetRegionSurfaceFilterWrap::GetSingleSided(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSingleSided();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataSetRegionSurfaceFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	vtkDataSetRegionSurfaceFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkDataSetRegionSurfaceFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkDataSetRegionSurfaceFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetRegionSurfaceFilterWrap *w = new VtkDataSetRegionSurfaceFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataSetRegionSurfaceFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkDataSetRegionSurfaceFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkDataSetRegionSurfaceFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkDataSetRegionSurfaceFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDataSetRegionSurfaceFilterWrap *w = new VtkDataSetRegionSurfaceFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetRegionSurfaceFilterWrap::SetInterfaceIDsName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInterfaceIDsName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetRegionSurfaceFilterWrap::SetMaterialIDsName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaterialIDsName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetRegionSurfaceFilterWrap::SetMaterialPIDsName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaterialPIDsName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetRegionSurfaceFilterWrap::SetMaterialPropertiesName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaterialPropertiesName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetRegionSurfaceFilterWrap::SetRegionArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRegionArrayName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetRegionSurfaceFilterWrap::SetSingleSided(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSingleSided(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetRegionSurfaceFilterWrap::UnstructuredGridExecute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetRegionSurfaceFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetRegionSurfaceFilterWrap>(info.Holder());
	vtkDataSetRegionSurfaceFilter *native = (vtkDataSetRegionSurfaceFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[1]))
		{
			VtkPolyDataWrap *a1 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[1]->ToObject());
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->UnstructuredGridExecute(
				(vtkDataSet *) a0->native.GetPointer(),
				(vtkPolyData *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

