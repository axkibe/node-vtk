/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkObjectWrap.h"
#include "vtkObserverMediatorWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkRenderWindowInteractorWrap.h"
#include "vtkInteractorObserverWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkObserverMediatorWrap::ptpl;

VtkObserverMediatorWrap::VtkObserverMediatorWrap()
{ }

VtkObserverMediatorWrap::VtkObserverMediatorWrap(vtkSmartPointer<vtkObserverMediator> _native)
{ native = _native; }

VtkObserverMediatorWrap::~VtkObserverMediatorWrap()
{ }

void VtkObserverMediatorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkObserverMediator").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ObserverMediator").ToLocalChecked(), ConstructorGetter);
}

void VtkObserverMediatorWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkObserverMediatorWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkObserverMediatorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetInteractor", GetInteractor);
	Nan::SetPrototypeMethod(tpl, "getInteractor", GetInteractor);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RemoveAllCursorShapeRequests", RemoveAllCursorShapeRequests);
	Nan::SetPrototypeMethod(tpl, "removeAllCursorShapeRequests", RemoveAllCursorShapeRequests);

	Nan::SetPrototypeMethod(tpl, "RequestCursorShape", RequestCursorShape);
	Nan::SetPrototypeMethod(tpl, "requestCursorShape", RequestCursorShape);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetInteractor", SetInteractor);
	Nan::SetPrototypeMethod(tpl, "setInteractor", SetInteractor);

#ifdef VTK_NODE_PLUS_VTKOBSERVERMEDIATORWRAP_INITPTPL
	VTK_NODE_PLUS_VTKOBSERVERMEDIATORWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkObserverMediatorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkObserverMediator> native = vtkSmartPointer<vtkObserverMediator>::New();
		VtkObserverMediatorWrap* obj = new VtkObserverMediatorWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkObserverMediatorWrap::GetInteractor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObserverMediatorWrap *wrapper = ObjectWrap::Unwrap<VtkObserverMediatorWrap>(info.Holder());
	vtkObserverMediator *native = (vtkObserverMediator *)wrapper->native.GetPointer();
	vtkRenderWindowInteractor * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInteractor();
	VtkRenderWindowInteractorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderWindowInteractorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderWindowInteractorWrap *w = new VtkRenderWindowInteractorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkObserverMediatorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObserverMediatorWrap *wrapper = ObjectWrap::Unwrap<VtkObserverMediatorWrap>(info.Holder());
	vtkObserverMediator *native = (vtkObserverMediator *)wrapper->native.GetPointer();
	vtkObserverMediator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkObserverMediatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkObserverMediatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkObserverMediatorWrap *w = new VtkObserverMediatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkObserverMediatorWrap::RemoveAllCursorShapeRequests(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObserverMediatorWrap *wrapper = ObjectWrap::Unwrap<VtkObserverMediatorWrap>(info.Holder());
	vtkObserverMediator *native = (vtkObserverMediator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInteractorObserverWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInteractorObserverWrap *a0 = ObjectWrap::Unwrap<VtkInteractorObserverWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveAllCursorShapeRequests(
			(vtkInteractorObserver *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkObserverMediatorWrap::RequestCursorShape(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObserverMediatorWrap *wrapper = ObjectWrap::Unwrap<VtkObserverMediatorWrap>(info.Holder());
	vtkObserverMediator *native = (vtkObserverMediator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInteractorObserverWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInteractorObserverWrap *a0 = ObjectWrap::Unwrap<VtkInteractorObserverWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->RequestCursorShape(
				(vtkInteractorObserver *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkObserverMediatorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObserverMediatorWrap *wrapper = ObjectWrap::Unwrap<VtkObserverMediatorWrap>(info.Holder());
	vtkObserverMediator *native = (vtkObserverMediator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkObserverMediator * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkObserverMediatorWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkObserverMediatorWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkObserverMediatorWrap *w = new VtkObserverMediatorWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkObserverMediatorWrap::SetInteractor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObserverMediatorWrap *wrapper = ObjectWrap::Unwrap<VtkObserverMediatorWrap>(info.Holder());
	vtkObserverMediator *native = (vtkObserverMediator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRenderWindowInteractorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRenderWindowInteractorWrap *a0 = ObjectWrap::Unwrap<VtkRenderWindowInteractorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInteractor(
			(vtkRenderWindowInteractor *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

