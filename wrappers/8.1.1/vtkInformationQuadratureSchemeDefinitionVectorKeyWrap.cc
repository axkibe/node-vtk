/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkInformationKeyWrap.h"
#include "vtkInformationQuadratureSchemeDefinitionVectorKeyWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkInformationWrap.h"
#include "vtkQuadratureSchemeDefinitionWrap.h"
#include "vtkXMLDataElementWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::ptpl;

VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::VtkInformationQuadratureSchemeDefinitionVectorKeyWrap()
{ }

VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::VtkInformationQuadratureSchemeDefinitionVectorKeyWrap(vtkSmartPointer<vtkInformationQuadratureSchemeDefinitionVectorKey> _native)
{ native = _native; }

VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::~VtkInformationQuadratureSchemeDefinitionVectorKeyWrap()
{ }

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkInformationQuadratureSchemeDefinitionVectorKey").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("InformationQuadratureSchemeDefinitionVectorKey").ToLocalChecked(), ConstructorGetter);
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkInformationKeyWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkInformationKeyWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkInformationQuadratureSchemeDefinitionVectorKeyWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "Append", Append);
	Nan::SetPrototypeMethod(tpl, "append", Append);

	Nan::SetPrototypeMethod(tpl, "Clear", Clear);
	Nan::SetPrototypeMethod(tpl, "clear", Clear);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "Get", Get);
	Nan::SetPrototypeMethod(tpl, "get", Get);

	Nan::SetPrototypeMethod(tpl, "Length", Length);
	Nan::SetPrototypeMethod(tpl, "length", Length);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "Resize", Resize);
	Nan::SetPrototypeMethod(tpl, "resize", Resize);

	Nan::SetPrototypeMethod(tpl, "RestoreState", RestoreState);
	Nan::SetPrototypeMethod(tpl, "restoreState", RestoreState);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SaveState", SaveState);
	Nan::SetPrototypeMethod(tpl, "saveState", SaveState);

	Nan::SetPrototypeMethod(tpl, "Set", Set);
	Nan::SetPrototypeMethod(tpl, "set", Set);

	Nan::SetPrototypeMethod(tpl, "ShallowCopy", ShallowCopy);
	Nan::SetPrototypeMethod(tpl, "shallowCopy", ShallowCopy);

	Nan::SetPrototypeMethod(tpl, "Size", Size);
	Nan::SetPrototypeMethod(tpl, "size", Size);

#ifdef VTK_NODE_PLUS_VTKINFORMATIONQUADRATURESCHEMEDEFINITIONVECTORKEYWRAP_INITPTPL
	VTK_NODE_PLUS_VTKINFORMATIONQUADRATURESCHEMEDEFINITIONVECTORKEYWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::Append(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkQuadratureSchemeDefinitionWrap::ptpl))->HasInstance(info[1]))
		{
			VtkQuadratureSchemeDefinitionWrap *a1 = ObjectWrap::Unwrap<VtkQuadratureSchemeDefinitionWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->Append(
				(vtkInformation *) a0->native.GetPointer(),
				(vtkQuadratureSchemeDefinition *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::Clear(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Clear(
			(vtkInformation *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[1]))
		{
			VtkInformationWrap *a1 = ObjectWrap::Unwrap<VtkInformationWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->DeepCopy(
				(vtkInformation *) a0->native.GetPointer(),
				(vtkInformation *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::Get(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkQuadratureSchemeDefinition * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->Get(
				(vtkInformation *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			VtkQuadratureSchemeDefinitionWrap::InitPtpl();
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::FunctionTemplate>(VtkQuadratureSchemeDefinitionWrap::ptpl)->GetFunction();
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkQuadratureSchemeDefinitionWrap *w = new VtkQuadratureSchemeDefinitionWrap();
			w->native = r;
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::Length(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->Length(
			(vtkInformation *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	vtkInformationQuadratureSchemeDefinitionVectorKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *w = new VtkInformationQuadratureSchemeDefinitionVectorKeyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::Resize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->Resize(
				(vtkInformation *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::RestoreState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkXMLDataElementWrap::ptpl))->HasInstance(info[1]))
		{
			VtkXMLDataElementWrap *a1 = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info[1]->ToObject());
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->RestoreState(
				(vtkInformation *) a0->native.GetPointer(),
				(vtkXMLDataElement *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkInformationQuadratureSchemeDefinitionVectorKey * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *w = new VtkInformationQuadratureSchemeDefinitionVectorKeyWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::SaveState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkXMLDataElementWrap::ptpl))->HasInstance(info[1]))
		{
			VtkXMLDataElementWrap *a1 = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info[1]->ToObject());
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SaveState(
				(vtkInformation *) a0->native.GetPointer(),
				(vtkXMLDataElement *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::Set(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkQuadratureSchemeDefinitionWrap::ptpl))->HasInstance(info[1]))
		{
			VtkQuadratureSchemeDefinitionWrap *a1 = ObjectWrap::Unwrap<VtkQuadratureSchemeDefinitionWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsInt32())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->Set(
					(vtkInformation *) a0->native.GetPointer(),
					(vtkQuadratureSchemeDefinition *) a1->native.GetPointer(),
					info[2]->Int32Value()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[1]))
		{
			VtkInformationWrap *a1 = ObjectWrap::Unwrap<VtkInformationWrap>(info[1]->ToObject());
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->ShallowCopy(
				(vtkInformation *) a0->native.GetPointer(),
				(vtkInformation *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInformationQuadratureSchemeDefinitionVectorKeyWrap::Size(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInformationQuadratureSchemeDefinitionVectorKeyWrap *wrapper = ObjectWrap::Unwrap<VtkInformationQuadratureSchemeDefinitionVectorKeyWrap>(info.Holder());
	vtkInformationQuadratureSchemeDefinitionVectorKey *native = (vtkInformationQuadratureSchemeDefinitionVectorKey *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkInformationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->Size(
			(vtkInformation *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

