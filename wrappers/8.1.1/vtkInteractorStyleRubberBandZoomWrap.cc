/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkInteractorStyleWrap.h"
#include "vtkInteractorStyleRubberBandZoomWrap.h"
#include "vtkObjectBaseWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkInteractorStyleRubberBandZoomWrap::ptpl;

VtkInteractorStyleRubberBandZoomWrap::VtkInteractorStyleRubberBandZoomWrap()
{ }

VtkInteractorStyleRubberBandZoomWrap::VtkInteractorStyleRubberBandZoomWrap(vtkSmartPointer<vtkInteractorStyleRubberBandZoom> _native)
{ native = _native; }

VtkInteractorStyleRubberBandZoomWrap::~VtkInteractorStyleRubberBandZoomWrap()
{ }

void VtkInteractorStyleRubberBandZoomWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkInteractorStyleRubberBandZoom").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("InteractorStyleRubberBandZoom").ToLocalChecked(), ConstructorGetter);
}

void VtkInteractorStyleRubberBandZoomWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkInteractorStyleRubberBandZoomWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkInteractorStyleWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkInteractorStyleWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkInteractorStyleRubberBandZoomWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CenterAtStartPositionOff", CenterAtStartPositionOff);
	Nan::SetPrototypeMethod(tpl, "centerAtStartPositionOff", CenterAtStartPositionOff);

	Nan::SetPrototypeMethod(tpl, "CenterAtStartPositionOn", CenterAtStartPositionOn);
	Nan::SetPrototypeMethod(tpl, "centerAtStartPositionOn", CenterAtStartPositionOn);

	Nan::SetPrototypeMethod(tpl, "GetCenterAtStartPosition", GetCenterAtStartPosition);
	Nan::SetPrototypeMethod(tpl, "getCenterAtStartPosition", GetCenterAtStartPosition);

	Nan::SetPrototypeMethod(tpl, "GetLockAspectToViewport", GetLockAspectToViewport);
	Nan::SetPrototypeMethod(tpl, "getLockAspectToViewport", GetLockAspectToViewport);

	Nan::SetPrototypeMethod(tpl, "GetUseDollyForPerspectiveProjection", GetUseDollyForPerspectiveProjection);
	Nan::SetPrototypeMethod(tpl, "getUseDollyForPerspectiveProjection", GetUseDollyForPerspectiveProjection);

	Nan::SetPrototypeMethod(tpl, "LockAspectToViewportOff", LockAspectToViewportOff);
	Nan::SetPrototypeMethod(tpl, "lockAspectToViewportOff", LockAspectToViewportOff);

	Nan::SetPrototypeMethod(tpl, "LockAspectToViewportOn", LockAspectToViewportOn);
	Nan::SetPrototypeMethod(tpl, "lockAspectToViewportOn", LockAspectToViewportOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "OnLeftButtonDown", OnLeftButtonDown);
	Nan::SetPrototypeMethod(tpl, "onLeftButtonDown", OnLeftButtonDown);

	Nan::SetPrototypeMethod(tpl, "OnLeftButtonUp", OnLeftButtonUp);
	Nan::SetPrototypeMethod(tpl, "onLeftButtonUp", OnLeftButtonUp);

	Nan::SetPrototypeMethod(tpl, "OnMouseMove", OnMouseMove);
	Nan::SetPrototypeMethod(tpl, "onMouseMove", OnMouseMove);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCenterAtStartPosition", SetCenterAtStartPosition);
	Nan::SetPrototypeMethod(tpl, "setCenterAtStartPosition", SetCenterAtStartPosition);

	Nan::SetPrototypeMethod(tpl, "SetLockAspectToViewport", SetLockAspectToViewport);
	Nan::SetPrototypeMethod(tpl, "setLockAspectToViewport", SetLockAspectToViewport);

	Nan::SetPrototypeMethod(tpl, "SetUseDollyForPerspectiveProjection", SetUseDollyForPerspectiveProjection);
	Nan::SetPrototypeMethod(tpl, "setUseDollyForPerspectiveProjection", SetUseDollyForPerspectiveProjection);

	Nan::SetPrototypeMethod(tpl, "UseDollyForPerspectiveProjectionOff", UseDollyForPerspectiveProjectionOff);
	Nan::SetPrototypeMethod(tpl, "useDollyForPerspectiveProjectionOff", UseDollyForPerspectiveProjectionOff);

	Nan::SetPrototypeMethod(tpl, "UseDollyForPerspectiveProjectionOn", UseDollyForPerspectiveProjectionOn);
	Nan::SetPrototypeMethod(tpl, "useDollyForPerspectiveProjectionOn", UseDollyForPerspectiveProjectionOn);

#ifdef VTK_NODE_PLUS_VTKINTERACTORSTYLERUBBERBANDZOOMWRAP_INITPTPL
	VTK_NODE_PLUS_VTKINTERACTORSTYLERUBBERBANDZOOMWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkInteractorStyleRubberBandZoomWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkInteractorStyleRubberBandZoom> native = vtkSmartPointer<vtkInteractorStyleRubberBandZoom>::New();
		VtkInteractorStyleRubberBandZoomWrap* obj = new VtkInteractorStyleRubberBandZoomWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkInteractorStyleRubberBandZoomWrap::CenterAtStartPositionOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CenterAtStartPositionOff();
}

void VtkInteractorStyleRubberBandZoomWrap::CenterAtStartPositionOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CenterAtStartPositionOn();
}

void VtkInteractorStyleRubberBandZoomWrap::GetCenterAtStartPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCenterAtStartPosition();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkInteractorStyleRubberBandZoomWrap::GetLockAspectToViewport(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLockAspectToViewport();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkInteractorStyleRubberBandZoomWrap::GetUseDollyForPerspectiveProjection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseDollyForPerspectiveProjection();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkInteractorStyleRubberBandZoomWrap::LockAspectToViewportOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LockAspectToViewportOff();
}

void VtkInteractorStyleRubberBandZoomWrap::LockAspectToViewportOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LockAspectToViewportOn();
}

void VtkInteractorStyleRubberBandZoomWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
	vtkInteractorStyleRubberBandZoom * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkInteractorStyleRubberBandZoomWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkInteractorStyleRubberBandZoomWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInteractorStyleRubberBandZoomWrap *w = new VtkInteractorStyleRubberBandZoomWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkInteractorStyleRubberBandZoomWrap::OnLeftButtonDown(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OnLeftButtonDown();
}

void VtkInteractorStyleRubberBandZoomWrap::OnLeftButtonUp(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OnLeftButtonUp();
}

void VtkInteractorStyleRubberBandZoomWrap::OnMouseMove(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OnMouseMove();
}

void VtkInteractorStyleRubberBandZoomWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkInteractorStyleRubberBandZoom * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkInteractorStyleRubberBandZoomWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkInteractorStyleRubberBandZoomWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkInteractorStyleRubberBandZoomWrap *w = new VtkInteractorStyleRubberBandZoomWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInteractorStyleRubberBandZoomWrap::SetCenterAtStartPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCenterAtStartPosition(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInteractorStyleRubberBandZoomWrap::SetLockAspectToViewport(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLockAspectToViewport(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInteractorStyleRubberBandZoomWrap::SetUseDollyForPerspectiveProjection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseDollyForPerspectiveProjection(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkInteractorStyleRubberBandZoomWrap::UseDollyForPerspectiveProjectionOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseDollyForPerspectiveProjectionOff();
}

void VtkInteractorStyleRubberBandZoomWrap::UseDollyForPerspectiveProjectionOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkInteractorStyleRubberBandZoomWrap *wrapper = ObjectWrap::Unwrap<VtkInteractorStyleRubberBandZoomWrap>(info.Holder());
	vtkInteractorStyleRubberBandZoom *native = (vtkInteractorStyleRubberBandZoom *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseDollyForPerspectiveProjectionOn();
}

