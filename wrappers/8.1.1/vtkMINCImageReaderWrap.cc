/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkImageReader2Wrap.h"
#include "vtkMINCImageReaderWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkMatrix4x4Wrap.h"
#include "vtkMINCImageAttributesWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkMINCImageReaderWrap::ptpl;

VtkMINCImageReaderWrap::VtkMINCImageReaderWrap()
{ }

VtkMINCImageReaderWrap::VtkMINCImageReaderWrap(vtkSmartPointer<vtkMINCImageReader> _native)
{ native = _native; }

VtkMINCImageReaderWrap::~VtkMINCImageReaderWrap()
{ }

void VtkMINCImageReaderWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkMINCImageReader").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("MINCImageReader").ToLocalChecked(), ConstructorGetter);
}

void VtkMINCImageReaderWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkMINCImageReaderWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkImageReader2Wrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkImageReader2Wrap::ptpl));
	tpl->SetClassName(Nan::New("VtkMINCImageReaderWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CanReadFile", CanReadFile);
	Nan::SetPrototypeMethod(tpl, "canReadFile", CanReadFile);

	Nan::SetPrototypeMethod(tpl, "GetDataRange", GetDataRange);
	Nan::SetPrototypeMethod(tpl, "getDataRange", GetDataRange);

	Nan::SetPrototypeMethod(tpl, "GetDescriptiveName", GetDescriptiveName);
	Nan::SetPrototypeMethod(tpl, "getDescriptiveName", GetDescriptiveName);

	Nan::SetPrototypeMethod(tpl, "GetDirectionCosines", GetDirectionCosines);
	Nan::SetPrototypeMethod(tpl, "getDirectionCosines", GetDirectionCosines);

	Nan::SetPrototypeMethod(tpl, "GetFileExtensions", GetFileExtensions);
	Nan::SetPrototypeMethod(tpl, "getFileExtensions", GetFileExtensions);

	Nan::SetPrototypeMethod(tpl, "GetImageAttributes", GetImageAttributes);
	Nan::SetPrototypeMethod(tpl, "getImageAttributes", GetImageAttributes);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfTimeSteps", GetNumberOfTimeSteps);
	Nan::SetPrototypeMethod(tpl, "getNumberOfTimeSteps", GetNumberOfTimeSteps);

	Nan::SetPrototypeMethod(tpl, "GetRescaleIntercept", GetRescaleIntercept);
	Nan::SetPrototypeMethod(tpl, "getRescaleIntercept", GetRescaleIntercept);

	Nan::SetPrototypeMethod(tpl, "GetRescaleRealValues", GetRescaleRealValues);
	Nan::SetPrototypeMethod(tpl, "getRescaleRealValues", GetRescaleRealValues);

	Nan::SetPrototypeMethod(tpl, "GetRescaleSlope", GetRescaleSlope);
	Nan::SetPrototypeMethod(tpl, "getRescaleSlope", GetRescaleSlope);

	Nan::SetPrototypeMethod(tpl, "GetTimeStep", GetTimeStep);
	Nan::SetPrototypeMethod(tpl, "getTimeStep", GetTimeStep);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RescaleRealValuesOff", RescaleRealValuesOff);
	Nan::SetPrototypeMethod(tpl, "rescaleRealValuesOff", RescaleRealValuesOff);

	Nan::SetPrototypeMethod(tpl, "RescaleRealValuesOn", RescaleRealValuesOn);
	Nan::SetPrototypeMethod(tpl, "rescaleRealValuesOn", RescaleRealValuesOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetFileName", SetFileName);
	Nan::SetPrototypeMethod(tpl, "setFileName", SetFileName);

	Nan::SetPrototypeMethod(tpl, "SetRescaleRealValues", SetRescaleRealValues);
	Nan::SetPrototypeMethod(tpl, "setRescaleRealValues", SetRescaleRealValues);

	Nan::SetPrototypeMethod(tpl, "SetTimeStep", SetTimeStep);
	Nan::SetPrototypeMethod(tpl, "setTimeStep", SetTimeStep);

#ifdef VTK_NODE_PLUS_VTKMINCIMAGEREADERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKMINCIMAGEREADERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkMINCImageReaderWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkMINCImageReader> native = vtkSmartPointer<vtkMINCImageReader>::New();
		VtkMINCImageReaderWrap* obj = new VtkMINCImageReaderWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkMINCImageReaderWrap::CanReadFile(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->CanReadFile(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageReaderWrap::GetDataRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetDataRange(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[2];
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 2; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetDataRange(
			b0
		);
		return;
	}
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataRange();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 2 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 2);
	memcpy(ab->GetContents().Data(), r, 2 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkMINCImageReaderWrap::GetDescriptiveName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDescriptiveName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMINCImageReaderWrap::GetDirectionCosines(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	vtkMatrix4x4 * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDirectionCosines();
	VtkMatrix4x4Wrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkMatrix4x4Wrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMatrix4x4Wrap *w = new VtkMatrix4x4Wrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMINCImageReaderWrap::GetFileExtensions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileExtensions();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMINCImageReaderWrap::GetImageAttributes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	vtkMINCImageAttributes * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImageAttributes();
	VtkMINCImageAttributesWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkMINCImageAttributesWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMINCImageAttributesWrap *w = new VtkMINCImageAttributesWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMINCImageReaderWrap::GetNumberOfTimeSteps(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfTimeSteps();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageReaderWrap::GetRescaleIntercept(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRescaleIntercept();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageReaderWrap::GetRescaleRealValues(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRescaleRealValues();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageReaderWrap::GetRescaleSlope(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRescaleSlope();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageReaderWrap::GetTimeStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTimeStep();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageReaderWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	vtkMINCImageReader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkMINCImageReaderWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkMINCImageReaderWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMINCImageReaderWrap *w = new VtkMINCImageReaderWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMINCImageReaderWrap::RescaleRealValuesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RescaleRealValuesOff();
}

void VtkMINCImageReaderWrap::RescaleRealValuesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RescaleRealValuesOn();
}

void VtkMINCImageReaderWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkMINCImageReader * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkMINCImageReaderWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkMINCImageReaderWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkMINCImageReaderWrap *w = new VtkMINCImageReaderWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageReaderWrap::SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageReaderWrap::SetRescaleRealValues(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRescaleRealValues(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageReaderWrap::SetTimeStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTimeStep(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

