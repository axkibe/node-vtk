/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkImageAlgorithmWrap.h"
#include "vtkUnsignedDistanceWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkAbstractPointLocatorWrap.h"
#include "vtkPolyDataWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkUnsignedDistanceWrap::ptpl;

VtkUnsignedDistanceWrap::VtkUnsignedDistanceWrap()
{ }

VtkUnsignedDistanceWrap::VtkUnsignedDistanceWrap(vtkSmartPointer<vtkUnsignedDistance> _native)
{ native = _native; }

VtkUnsignedDistanceWrap::~VtkUnsignedDistanceWrap()
{ }

void VtkUnsignedDistanceWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkUnsignedDistance").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("UnsignedDistance").ToLocalChecked(), ConstructorGetter);
}

void VtkUnsignedDistanceWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkUnsignedDistanceWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkImageAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkImageAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkUnsignedDistanceWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AdjustBoundsOff", AdjustBoundsOff);
	Nan::SetPrototypeMethod(tpl, "adjustBoundsOff", AdjustBoundsOff);

	Nan::SetPrototypeMethod(tpl, "AdjustBoundsOn", AdjustBoundsOn);
	Nan::SetPrototypeMethod(tpl, "adjustBoundsOn", AdjustBoundsOn);

	Nan::SetPrototypeMethod(tpl, "Append", Append);
	Nan::SetPrototypeMethod(tpl, "append", Append);

	Nan::SetPrototypeMethod(tpl, "CappingOff", CappingOff);
	Nan::SetPrototypeMethod(tpl, "cappingOff", CappingOff);

	Nan::SetPrototypeMethod(tpl, "CappingOn", CappingOn);
	Nan::SetPrototypeMethod(tpl, "cappingOn", CappingOn);

	Nan::SetPrototypeMethod(tpl, "EndAppend", EndAppend);
	Nan::SetPrototypeMethod(tpl, "endAppend", EndAppend);

	Nan::SetPrototypeMethod(tpl, "GetAdjustBounds", GetAdjustBounds);
	Nan::SetPrototypeMethod(tpl, "getAdjustBounds", GetAdjustBounds);

	Nan::SetPrototypeMethod(tpl, "GetAdjustDistance", GetAdjustDistance);
	Nan::SetPrototypeMethod(tpl, "getAdjustDistance", GetAdjustDistance);

	Nan::SetPrototypeMethod(tpl, "GetAdjustDistanceMaxValue", GetAdjustDistanceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getAdjustDistanceMaxValue", GetAdjustDistanceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetAdjustDistanceMinValue", GetAdjustDistanceMinValue);
	Nan::SetPrototypeMethod(tpl, "getAdjustDistanceMinValue", GetAdjustDistanceMinValue);

	Nan::SetPrototypeMethod(tpl, "GetBounds", GetBounds);
	Nan::SetPrototypeMethod(tpl, "getBounds", GetBounds);

	Nan::SetPrototypeMethod(tpl, "GetCapValue", GetCapValue);
	Nan::SetPrototypeMethod(tpl, "getCapValue", GetCapValue);

	Nan::SetPrototypeMethod(tpl, "GetCapping", GetCapping);
	Nan::SetPrototypeMethod(tpl, "getCapping", GetCapping);

	Nan::SetPrototypeMethod(tpl, "GetDimensions", GetDimensions);
	Nan::SetPrototypeMethod(tpl, "getDimensions", GetDimensions);

	Nan::SetPrototypeMethod(tpl, "GetLocator", GetLocator);
	Nan::SetPrototypeMethod(tpl, "getLocator", GetLocator);

	Nan::SetPrototypeMethod(tpl, "GetOutputScalarType", GetOutputScalarType);
	Nan::SetPrototypeMethod(tpl, "getOutputScalarType", GetOutputScalarType);

	Nan::SetPrototypeMethod(tpl, "GetRadius", GetRadius);
	Nan::SetPrototypeMethod(tpl, "getRadius", GetRadius);

	Nan::SetPrototypeMethod(tpl, "GetRadiusMaxValue", GetRadiusMaxValue);
	Nan::SetPrototypeMethod(tpl, "getRadiusMaxValue", GetRadiusMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetRadiusMinValue", GetRadiusMinValue);
	Nan::SetPrototypeMethod(tpl, "getRadiusMinValue", GetRadiusMinValue);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAdjustBounds", SetAdjustBounds);
	Nan::SetPrototypeMethod(tpl, "setAdjustBounds", SetAdjustBounds);

	Nan::SetPrototypeMethod(tpl, "SetAdjustDistance", SetAdjustDistance);
	Nan::SetPrototypeMethod(tpl, "setAdjustDistance", SetAdjustDistance);

	Nan::SetPrototypeMethod(tpl, "SetBounds", SetBounds);
	Nan::SetPrototypeMethod(tpl, "setBounds", SetBounds);

	Nan::SetPrototypeMethod(tpl, "SetCapValue", SetCapValue);
	Nan::SetPrototypeMethod(tpl, "setCapValue", SetCapValue);

	Nan::SetPrototypeMethod(tpl, "SetCapping", SetCapping);
	Nan::SetPrototypeMethod(tpl, "setCapping", SetCapping);

	Nan::SetPrototypeMethod(tpl, "SetDimensions", SetDimensions);
	Nan::SetPrototypeMethod(tpl, "setDimensions", SetDimensions);

	Nan::SetPrototypeMethod(tpl, "SetLocator", SetLocator);
	Nan::SetPrototypeMethod(tpl, "setLocator", SetLocator);

	Nan::SetPrototypeMethod(tpl, "SetOutputScalarType", SetOutputScalarType);
	Nan::SetPrototypeMethod(tpl, "setOutputScalarType", SetOutputScalarType);

	Nan::SetPrototypeMethod(tpl, "SetOutputScalarTypeToDouble", SetOutputScalarTypeToDouble);
	Nan::SetPrototypeMethod(tpl, "setOutputScalarTypeToDouble", SetOutputScalarTypeToDouble);

	Nan::SetPrototypeMethod(tpl, "SetOutputScalarTypeToFloat", SetOutputScalarTypeToFloat);
	Nan::SetPrototypeMethod(tpl, "setOutputScalarTypeToFloat", SetOutputScalarTypeToFloat);

	Nan::SetPrototypeMethod(tpl, "SetRadius", SetRadius);
	Nan::SetPrototypeMethod(tpl, "setRadius", SetRadius);

	Nan::SetPrototypeMethod(tpl, "StartAppend", StartAppend);
	Nan::SetPrototypeMethod(tpl, "startAppend", StartAppend);

#ifdef VTK_NODE_PLUS_VTKUNSIGNEDDISTANCEWRAP_INITPTPL
	VTK_NODE_PLUS_VTKUNSIGNEDDISTANCEWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkUnsignedDistanceWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkUnsignedDistance> native = vtkSmartPointer<vtkUnsignedDistance>::New();
		VtkUnsignedDistanceWrap* obj = new VtkUnsignedDistanceWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkUnsignedDistanceWrap::AdjustBoundsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AdjustBoundsOff();
}

void VtkUnsignedDistanceWrap::AdjustBoundsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AdjustBoundsOn();
}

void VtkUnsignedDistanceWrap::Append(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Append(
			(vtkPolyData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnsignedDistanceWrap::CappingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CappingOff();
}

void VtkUnsignedDistanceWrap::CappingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CappingOn();
}

void VtkUnsignedDistanceWrap::EndAppend(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EndAppend();
}

void VtkUnsignedDistanceWrap::GetAdjustBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAdjustBounds();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnsignedDistanceWrap::GetAdjustDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAdjustDistance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnsignedDistanceWrap::GetAdjustDistanceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAdjustDistanceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnsignedDistanceWrap::GetAdjustDistanceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAdjustDistanceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnsignedDistanceWrap::GetBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBounds();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 6 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 6);
	memcpy(ab->GetContents().Data(), r, 6 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkUnsignedDistanceWrap::GetCapValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCapValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnsignedDistanceWrap::GetCapping(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCapping();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnsignedDistanceWrap::GetDimensions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	int const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDimensions();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(int));
	Local<v8::Int32Array> at = v8::Int32Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(int));
	info.GetReturnValue().Set(at);
}

void VtkUnsignedDistanceWrap::GetLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	vtkAbstractPointLocator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLocator();
	VtkAbstractPointLocatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkAbstractPointLocatorWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAbstractPointLocatorWrap *w = new VtkAbstractPointLocatorWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkUnsignedDistanceWrap::GetOutputScalarType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputScalarType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnsignedDistanceWrap::GetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnsignedDistanceWrap::GetRadiusMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadiusMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnsignedDistanceWrap::GetRadiusMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadiusMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnsignedDistanceWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	vtkUnsignedDistance * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkUnsignedDistanceWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkUnsignedDistanceWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkUnsignedDistanceWrap *w = new VtkUnsignedDistanceWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkUnsignedDistanceWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkUnsignedDistance * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkUnsignedDistanceWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkUnsignedDistanceWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkUnsignedDistanceWrap *w = new VtkUnsignedDistanceWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnsignedDistanceWrap::SetAdjustBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAdjustBounds(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnsignedDistanceWrap::SetAdjustDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAdjustDistance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnsignedDistanceWrap::SetBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsFloat64Array())
	{
		v8::Local<v8::Float64Array>a0(v8::Local<v8::Float64Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBounds(
			(double *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		double b0[6];
		if( a0->Length() < 6 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 6; i++ )
		{
			if( !a0->Get(i)->IsNumber() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->NumberValue();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBounds(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() > 4 && info[4]->IsNumber())
					{
						if(info.Length() > 5 && info[5]->IsNumber())
						{
														if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->SetBounds(
								info[0]->NumberValue(),
								info[1]->NumberValue(),
								info[2]->NumberValue(),
								info[3]->NumberValue(),
								info[4]->NumberValue(),
								info[5]->NumberValue()
							);
							return;
						}
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnsignedDistanceWrap::SetCapValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCapValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnsignedDistanceWrap::SetCapping(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCapping(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnsignedDistanceWrap::SetDimensions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDimensions(
			(int *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[3];
		if( a0->Length() < 3 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 3; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDimensions(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetDimensions(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnsignedDistanceWrap::SetLocator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractPointLocatorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractPointLocatorWrap *a0 = ObjectWrap::Unwrap<VtkAbstractPointLocatorWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLocator(
			(vtkAbstractPointLocator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnsignedDistanceWrap::SetOutputScalarType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputScalarType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnsignedDistanceWrap::SetOutputScalarTypeToDouble(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputScalarTypeToDouble();
}

void VtkUnsignedDistanceWrap::SetOutputScalarTypeToFloat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputScalarTypeToFloat();
}

void VtkUnsignedDistanceWrap::SetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnsignedDistanceWrap::StartAppend(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnsignedDistanceWrap *wrapper = ObjectWrap::Unwrap<VtkUnsignedDistanceWrap>(info.Holder());
	vtkUnsignedDistance *native = (vtkUnsignedDistance *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->StartAppend();
}

