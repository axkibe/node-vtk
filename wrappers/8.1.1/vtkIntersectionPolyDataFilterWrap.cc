/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkIntersectionPolyDataFilterWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkPolyDataWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkIntersectionPolyDataFilterWrap::ptpl;

VtkIntersectionPolyDataFilterWrap::VtkIntersectionPolyDataFilterWrap()
{ }

VtkIntersectionPolyDataFilterWrap::VtkIntersectionPolyDataFilterWrap(vtkSmartPointer<vtkIntersectionPolyDataFilter> _native)
{ native = _native; }

VtkIntersectionPolyDataFilterWrap::~VtkIntersectionPolyDataFilterWrap()
{ }

void VtkIntersectionPolyDataFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkIntersectionPolyDataFilter").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("IntersectionPolyDataFilter").ToLocalChecked(), ConstructorGetter);
}

void VtkIntersectionPolyDataFilterWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkIntersectionPolyDataFilterWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkIntersectionPolyDataFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CheckInputOff", CheckInputOff);
	Nan::SetPrototypeMethod(tpl, "checkInputOff", CheckInputOff);

	Nan::SetPrototypeMethod(tpl, "CheckInputOn", CheckInputOn);
	Nan::SetPrototypeMethod(tpl, "checkInputOn", CheckInputOn);

	Nan::SetPrototypeMethod(tpl, "CheckMeshOff", CheckMeshOff);
	Nan::SetPrototypeMethod(tpl, "checkMeshOff", CheckMeshOff);

	Nan::SetPrototypeMethod(tpl, "CheckMeshOn", CheckMeshOn);
	Nan::SetPrototypeMethod(tpl, "checkMeshOn", CheckMeshOn);

	Nan::SetPrototypeMethod(tpl, "CleanAndCheckInput", CleanAndCheckInput);
	Nan::SetPrototypeMethod(tpl, "cleanAndCheckInput", CleanAndCheckInput);

	Nan::SetPrototypeMethod(tpl, "CleanAndCheckSurface", CleanAndCheckSurface);
	Nan::SetPrototypeMethod(tpl, "cleanAndCheckSurface", CleanAndCheckSurface);

	Nan::SetPrototypeMethod(tpl, "ComputeIntersectionPointArrayOff", ComputeIntersectionPointArrayOff);
	Nan::SetPrototypeMethod(tpl, "computeIntersectionPointArrayOff", ComputeIntersectionPointArrayOff);

	Nan::SetPrototypeMethod(tpl, "ComputeIntersectionPointArrayOn", ComputeIntersectionPointArrayOn);
	Nan::SetPrototypeMethod(tpl, "computeIntersectionPointArrayOn", ComputeIntersectionPointArrayOn);

	Nan::SetPrototypeMethod(tpl, "GetCheckInput", GetCheckInput);
	Nan::SetPrototypeMethod(tpl, "getCheckInput", GetCheckInput);

	Nan::SetPrototypeMethod(tpl, "GetCheckMesh", GetCheckMesh);
	Nan::SetPrototypeMethod(tpl, "getCheckMesh", GetCheckMesh);

	Nan::SetPrototypeMethod(tpl, "GetComputeIntersectionPointArray", GetComputeIntersectionPointArray);
	Nan::SetPrototypeMethod(tpl, "getComputeIntersectionPointArray", GetComputeIntersectionPointArray);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfIntersectionLines", GetNumberOfIntersectionLines);
	Nan::SetPrototypeMethod(tpl, "getNumberOfIntersectionLines", GetNumberOfIntersectionLines);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfIntersectionPoints", GetNumberOfIntersectionPoints);
	Nan::SetPrototypeMethod(tpl, "getNumberOfIntersectionPoints", GetNumberOfIntersectionPoints);

	Nan::SetPrototypeMethod(tpl, "GetRelativeSubtriangleArea", GetRelativeSubtriangleArea);
	Nan::SetPrototypeMethod(tpl, "getRelativeSubtriangleArea", GetRelativeSubtriangleArea);

	Nan::SetPrototypeMethod(tpl, "GetSplitFirstOutput", GetSplitFirstOutput);
	Nan::SetPrototypeMethod(tpl, "getSplitFirstOutput", GetSplitFirstOutput);

	Nan::SetPrototypeMethod(tpl, "GetSplitSecondOutput", GetSplitSecondOutput);
	Nan::SetPrototypeMethod(tpl, "getSplitSecondOutput", GetSplitSecondOutput);

	Nan::SetPrototypeMethod(tpl, "GetStatus", GetStatus);
	Nan::SetPrototypeMethod(tpl, "getStatus", GetStatus);

	Nan::SetPrototypeMethod(tpl, "GetTolerance", GetTolerance);
	Nan::SetPrototypeMethod(tpl, "getTolerance", GetTolerance);

	Nan::SetPrototypeMethod(tpl, "GetToleranceMaxValue", GetToleranceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getToleranceMaxValue", GetToleranceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetToleranceMinValue", GetToleranceMinValue);
	Nan::SetPrototypeMethod(tpl, "getToleranceMinValue", GetToleranceMinValue);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCheckInput", SetCheckInput);
	Nan::SetPrototypeMethod(tpl, "setCheckInput", SetCheckInput);

	Nan::SetPrototypeMethod(tpl, "SetCheckMesh", SetCheckMesh);
	Nan::SetPrototypeMethod(tpl, "setCheckMesh", SetCheckMesh);

	Nan::SetPrototypeMethod(tpl, "SetComputeIntersectionPointArray", SetComputeIntersectionPointArray);
	Nan::SetPrototypeMethod(tpl, "setComputeIntersectionPointArray", SetComputeIntersectionPointArray);

	Nan::SetPrototypeMethod(tpl, "SetRelativeSubtriangleArea", SetRelativeSubtriangleArea);
	Nan::SetPrototypeMethod(tpl, "setRelativeSubtriangleArea", SetRelativeSubtriangleArea);

	Nan::SetPrototypeMethod(tpl, "SetSplitFirstOutput", SetSplitFirstOutput);
	Nan::SetPrototypeMethod(tpl, "setSplitFirstOutput", SetSplitFirstOutput);

	Nan::SetPrototypeMethod(tpl, "SetSplitSecondOutput", SetSplitSecondOutput);
	Nan::SetPrototypeMethod(tpl, "setSplitSecondOutput", SetSplitSecondOutput);

	Nan::SetPrototypeMethod(tpl, "SetTolerance", SetTolerance);
	Nan::SetPrototypeMethod(tpl, "setTolerance", SetTolerance);

	Nan::SetPrototypeMethod(tpl, "SplitFirstOutputOff", SplitFirstOutputOff);
	Nan::SetPrototypeMethod(tpl, "splitFirstOutputOff", SplitFirstOutputOff);

	Nan::SetPrototypeMethod(tpl, "SplitFirstOutputOn", SplitFirstOutputOn);
	Nan::SetPrototypeMethod(tpl, "splitFirstOutputOn", SplitFirstOutputOn);

	Nan::SetPrototypeMethod(tpl, "SplitSecondOutputOff", SplitSecondOutputOff);
	Nan::SetPrototypeMethod(tpl, "splitSecondOutputOff", SplitSecondOutputOff);

	Nan::SetPrototypeMethod(tpl, "SplitSecondOutputOn", SplitSecondOutputOn);
	Nan::SetPrototypeMethod(tpl, "splitSecondOutputOn", SplitSecondOutputOn);

#ifdef VTK_NODE_PLUS_VTKINTERSECTIONPOLYDATAFILTERWRAP_INITPTPL
	VTK_NODE_PLUS_VTKINTERSECTIONPOLYDATAFILTERWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkIntersectionPolyDataFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkIntersectionPolyDataFilter> native = vtkSmartPointer<vtkIntersectionPolyDataFilter>::New();
		VtkIntersectionPolyDataFilterWrap* obj = new VtkIntersectionPolyDataFilterWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkIntersectionPolyDataFilterWrap::CheckInputOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CheckInputOff();
}

void VtkIntersectionPolyDataFilterWrap::CheckInputOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CheckInputOn();
}

void VtkIntersectionPolyDataFilterWrap::CheckMeshOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CheckMeshOff();
}

void VtkIntersectionPolyDataFilterWrap::CheckMeshOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CheckMeshOn();
}

void VtkIntersectionPolyDataFilterWrap::CleanAndCheckInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsNumber())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->CleanAndCheckInput(
				(vtkPolyData *) a0->native.GetPointer(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIntersectionPolyDataFilterWrap::CleanAndCheckSurface(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsFloat64Array())
		{
			v8::Local<v8::Float64Array>a1(v8::Local<v8::Float64Array>::Cast(info[1]->ToObject()));
			if( a1->Length() < 2 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->CleanAndCheckSurface(
					(vtkPolyData *) a0->native.GetPointer(),
					(double *)(a1->Buffer()->GetContents().Data()),
					info[2]->NumberValue()
				);
				return;
			}
		}
		else if(info.Length() > 1 && info[1]->IsArray())
		{
			v8::Local<v8::Array>a1(v8::Local<v8::Array>::Cast(info[1]->ToObject()));
			double b1[2];
			if( a1->Length() < 2 )
			{
				Nan::ThrowError("Array too short.");
				return;
			}

			for( i = 0; i < 2; i++ )
			{
				if( !a1->Get(i)->IsNumber() )
				{
					Nan::ThrowError("Array contents invalid.");
					return;
				}
				b1[i] = a1->Get(i)->NumberValue();
			}
			if(info.Length() > 2 && info[2]->IsNumber())
			{
								if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->CleanAndCheckSurface(
					(vtkPolyData *) a0->native.GetPointer(),
					b1,
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIntersectionPolyDataFilterWrap::ComputeIntersectionPointArrayOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeIntersectionPointArrayOff();
}

void VtkIntersectionPolyDataFilterWrap::ComputeIntersectionPointArrayOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeIntersectionPointArrayOn();
}

void VtkIntersectionPolyDataFilterWrap::GetCheckInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCheckInput();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIntersectionPolyDataFilterWrap::GetCheckMesh(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCheckMesh();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIntersectionPolyDataFilterWrap::GetComputeIntersectionPointArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeIntersectionPointArray();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIntersectionPolyDataFilterWrap::GetNumberOfIntersectionLines(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfIntersectionLines();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIntersectionPolyDataFilterWrap::GetNumberOfIntersectionPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfIntersectionPoints();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIntersectionPolyDataFilterWrap::GetRelativeSubtriangleArea(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRelativeSubtriangleArea();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIntersectionPolyDataFilterWrap::GetSplitFirstOutput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSplitFirstOutput();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIntersectionPolyDataFilterWrap::GetSplitSecondOutput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSplitSecondOutput();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIntersectionPolyDataFilterWrap::GetStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStatus();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIntersectionPolyDataFilterWrap::GetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIntersectionPolyDataFilterWrap::GetToleranceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetToleranceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIntersectionPolyDataFilterWrap::GetToleranceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetToleranceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkIntersectionPolyDataFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	vtkIntersectionPolyDataFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkIntersectionPolyDataFilterWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkIntersectionPolyDataFilterWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkIntersectionPolyDataFilterWrap *w = new VtkIntersectionPolyDataFilterWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkIntersectionPolyDataFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkIntersectionPolyDataFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkIntersectionPolyDataFilterWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkIntersectionPolyDataFilterWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkIntersectionPolyDataFilterWrap *w = new VtkIntersectionPolyDataFilterWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIntersectionPolyDataFilterWrap::SetCheckInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCheckInput(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIntersectionPolyDataFilterWrap::SetCheckMesh(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCheckMesh(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIntersectionPolyDataFilterWrap::SetComputeIntersectionPointArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeIntersectionPointArray(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIntersectionPolyDataFilterWrap::SetRelativeSubtriangleArea(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRelativeSubtriangleArea(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIntersectionPolyDataFilterWrap::SetSplitFirstOutput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSplitFirstOutput(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIntersectionPolyDataFilterWrap::SetSplitSecondOutput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSplitSecondOutput(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIntersectionPolyDataFilterWrap::SetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTolerance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkIntersectionPolyDataFilterWrap::SplitFirstOutputOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SplitFirstOutputOff();
}

void VtkIntersectionPolyDataFilterWrap::SplitFirstOutputOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SplitFirstOutputOn();
}

void VtkIntersectionPolyDataFilterWrap::SplitSecondOutputOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SplitSecondOutputOff();
}

void VtkIntersectionPolyDataFilterWrap::SplitSecondOutputOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkIntersectionPolyDataFilterWrap *wrapper = ObjectWrap::Unwrap<VtkIntersectionPolyDataFilterWrap>(info.Holder());
	vtkIntersectionPolyDataFilter *native = (vtkIntersectionPolyDataFilter *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SplitSecondOutputOn();
}

