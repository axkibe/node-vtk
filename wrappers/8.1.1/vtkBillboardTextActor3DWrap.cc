/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkProp3DWrap.h"
#include "vtkBillboardTextActor3DWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkTextPropertyWrap.h"
#include "vtkViewportWrap.h"
#include "vtkWindowWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkBillboardTextActor3DWrap::ptpl;

VtkBillboardTextActor3DWrap::VtkBillboardTextActor3DWrap()
{ }

VtkBillboardTextActor3DWrap::VtkBillboardTextActor3DWrap(vtkSmartPointer<vtkBillboardTextActor3D> _native)
{ native = _native; }

VtkBillboardTextActor3DWrap::~VtkBillboardTextActor3DWrap()
{ }

void VtkBillboardTextActor3DWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkBillboardTextActor3D").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("BillboardTextActor3D").ToLocalChecked(), ConstructorGetter);
}

void VtkBillboardTextActor3DWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkBillboardTextActor3DWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkProp3DWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkProp3DWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkBillboardTextActor3DWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ForceOpaqueOff", ForceOpaqueOff);
	Nan::SetPrototypeMethod(tpl, "forceOpaqueOff", ForceOpaqueOff);

	Nan::SetPrototypeMethod(tpl, "ForceOpaqueOn", ForceOpaqueOn);
	Nan::SetPrototypeMethod(tpl, "forceOpaqueOn", ForceOpaqueOn);

	Nan::SetPrototypeMethod(tpl, "ForceTranslucentOff", ForceTranslucentOff);
	Nan::SetPrototypeMethod(tpl, "forceTranslucentOff", ForceTranslucentOff);

	Nan::SetPrototypeMethod(tpl, "ForceTranslucentOn", ForceTranslucentOn);
	Nan::SetPrototypeMethod(tpl, "forceTranslucentOn", ForceTranslucentOn);

	Nan::SetPrototypeMethod(tpl, "GetAnchorDC", GetAnchorDC);
	Nan::SetPrototypeMethod(tpl, "getAnchorDC", GetAnchorDC);

	Nan::SetPrototypeMethod(tpl, "GetDisplayOffset", GetDisplayOffset);
	Nan::SetPrototypeMethod(tpl, "getDisplayOffset", GetDisplayOffset);

	Nan::SetPrototypeMethod(tpl, "GetForceOpaque", GetForceOpaque);
	Nan::SetPrototypeMethod(tpl, "getForceOpaque", GetForceOpaque);

	Nan::SetPrototypeMethod(tpl, "GetForceTranslucent", GetForceTranslucent);
	Nan::SetPrototypeMethod(tpl, "getForceTranslucent", GetForceTranslucent);

	Nan::SetPrototypeMethod(tpl, "GetInput", GetInput);
	Nan::SetPrototypeMethod(tpl, "getInput", GetInput);

	Nan::SetPrototypeMethod(tpl, "GetTextProperty", GetTextProperty);
	Nan::SetPrototypeMethod(tpl, "getTextProperty", GetTextProperty);

	Nan::SetPrototypeMethod(tpl, "HasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "hasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "RenderOpaqueGeometry", RenderOpaqueGeometry);
	Nan::SetPrototypeMethod(tpl, "renderOpaqueGeometry", RenderOpaqueGeometry);

	Nan::SetPrototypeMethod(tpl, "RenderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "renderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetDisplayOffset", SetDisplayOffset);
	Nan::SetPrototypeMethod(tpl, "setDisplayOffset", SetDisplayOffset);

	Nan::SetPrototypeMethod(tpl, "SetForceOpaque", SetForceOpaque);
	Nan::SetPrototypeMethod(tpl, "setForceOpaque", SetForceOpaque);

	Nan::SetPrototypeMethod(tpl, "SetForceTranslucent", SetForceTranslucent);
	Nan::SetPrototypeMethod(tpl, "setForceTranslucent", SetForceTranslucent);

	Nan::SetPrototypeMethod(tpl, "SetInput", SetInput);
	Nan::SetPrototypeMethod(tpl, "setInput", SetInput);

	Nan::SetPrototypeMethod(tpl, "SetTextProperty", SetTextProperty);
	Nan::SetPrototypeMethod(tpl, "setTextProperty", SetTextProperty);

#ifdef VTK_NODE_PLUS_VTKBILLBOARDTEXTACTOR3DWRAP_INITPTPL
	VTK_NODE_PLUS_VTKBILLBOARDTEXTACTOR3DWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkBillboardTextActor3DWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkBillboardTextActor3D> native = vtkSmartPointer<vtkBillboardTextActor3D>::New();
		VtkBillboardTextActor3DWrap* obj = new VtkBillboardTextActor3DWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkBillboardTextActor3DWrap::ForceOpaqueOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ForceOpaqueOff();
}

void VtkBillboardTextActor3DWrap::ForceOpaqueOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ForceOpaqueOn();
}

void VtkBillboardTextActor3DWrap::ForceTranslucentOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ForceTranslucentOff();
}

void VtkBillboardTextActor3DWrap::ForceTranslucentOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ForceTranslucentOn();
}

void VtkBillboardTextActor3DWrap::GetAnchorDC(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	double const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAnchorDC();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 3 * sizeof(double));
	Local<v8::Float64Array> at = v8::Float64Array::New(ab, 0, 3);
	memcpy(ab->GetContents().Data(), r, 3 * sizeof(double));
	info.GetReturnValue().Set(at);
}

void VtkBillboardTextActor3DWrap::GetDisplayOffset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	int const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDisplayOffset();
	Local<v8::ArrayBuffer> ab = v8::ArrayBuffer::New(v8::Isolate::GetCurrent(), 2 * sizeof(int));
	Local<v8::Int32Array> at = v8::Int32Array::New(ab, 0, 2);
	memcpy(ab->GetContents().Data(), r, 2 * sizeof(int));
	info.GetReturnValue().Set(at);
}

void VtkBillboardTextActor3DWrap::GetForceOpaque(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetForceOpaque();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBillboardTextActor3DWrap::GetForceTranslucent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetForceTranslucent();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBillboardTextActor3DWrap::GetInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInput();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkBillboardTextActor3DWrap::GetTextProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	vtkTextProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTextProperty();
	VtkTextPropertyWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkTextPropertyWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTextPropertyWrap *w = new VtkTextPropertyWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkBillboardTextActor3DWrap::HasTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasTranslucentPolygonalGeometry();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkBillboardTextActor3DWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	vtkBillboardTextActor3D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkBillboardTextActor3DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkBillboardTextActor3DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkBillboardTextActor3DWrap *w = new VtkBillboardTextActor3DWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkBillboardTextActor3DWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBillboardTextActor3DWrap::RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOpaqueGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBillboardTextActor3DWrap::RenderTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderTranslucentPolygonalGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBillboardTextActor3DWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkBillboardTextActor3D * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkBillboardTextActor3DWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkBillboardTextActor3DWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkBillboardTextActor3DWrap *w = new VtkBillboardTextActor3DWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBillboardTextActor3DWrap::SetDisplayOffset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	size_t i;
	if(info.Length() > 0 && info[0]->IsInt32Array())
	{
		v8::Local<v8::Int32Array>a0(v8::Local<v8::Int32Array>::Cast(info[0]->ToObject()));
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDisplayOffset(
			(int *)(a0->Buffer()->GetContents().Data())
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsArray())
	{
		v8::Local<v8::Array>a0(v8::Local<v8::Array>::Cast(info[0]->ToObject()));
		int b0[2];
		if( a0->Length() < 2 )
		{
			Nan::ThrowError("Array too short.");
			return;
		}

		for( i = 0; i < 2; i++ )
		{
			if( !a0->Get(i)->IsInt32() )
			{
				Nan::ThrowError("Array contents invalid.");
				return;
			}
			b0[i] = a0->Get(i)->Int32Value();
		}
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDisplayOffset(
			b0
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
						if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetDisplayOffset(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBillboardTextActor3DWrap::SetForceOpaque(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetForceOpaque(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBillboardTextActor3DWrap::SetForceTranslucent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetForceTranslucent(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBillboardTextActor3DWrap::SetInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInput(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkBillboardTextActor3DWrap::SetTextProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkBillboardTextActor3DWrap *wrapper = ObjectWrap::Unwrap<VtkBillboardTextActor3DWrap>(info.Holder());
	vtkBillboardTextActor3D *native = (vtkBillboardTextActor3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkTextPropertyWrap::ptpl))->HasInstance(info[0]))
	{
		VtkTextPropertyWrap *a0 = ObjectWrap::Unwrap<VtkTextPropertyWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTextProperty(
			(vtkTextProperty *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

