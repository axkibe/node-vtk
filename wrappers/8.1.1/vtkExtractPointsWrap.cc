/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include "vtkPointCloudFilterWrap.h"
#include "vtkExtractPointsWrap.h"
#include "vtkObjectBaseWrap.h"
#include "vtkImplicitFunctionWrap.h"
#include "../../plus/plus.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkExtractPointsWrap::ptpl;

VtkExtractPointsWrap::VtkExtractPointsWrap()
{ }

VtkExtractPointsWrap::VtkExtractPointsWrap(vtkSmartPointer<vtkExtractPoints> _native)
{ native = _native; }

VtkExtractPointsWrap::~VtkExtractPointsWrap()
{ }

void VtkExtractPointsWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkExtractPoints").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ExtractPoints").ToLocalChecked(), ConstructorGetter);
}

void VtkExtractPointsWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkExtractPointsWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPointCloudFilterWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPointCloudFilterWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkExtractPointsWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ExtractInsideOff", ExtractInsideOff);
	Nan::SetPrototypeMethod(tpl, "extractInsideOff", ExtractInsideOff);

	Nan::SetPrototypeMethod(tpl, "ExtractInsideOn", ExtractInsideOn);
	Nan::SetPrototypeMethod(tpl, "extractInsideOn", ExtractInsideOn);

	Nan::SetPrototypeMethod(tpl, "GetExtractInside", GetExtractInside);
	Nan::SetPrototypeMethod(tpl, "getExtractInside", GetExtractInside);

	Nan::SetPrototypeMethod(tpl, "GetImplicitFunction", GetImplicitFunction);
	Nan::SetPrototypeMethod(tpl, "getImplicitFunction", GetImplicitFunction);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetExtractInside", SetExtractInside);
	Nan::SetPrototypeMethod(tpl, "setExtractInside", SetExtractInside);

	Nan::SetPrototypeMethod(tpl, "SetImplicitFunction", SetImplicitFunction);
	Nan::SetPrototypeMethod(tpl, "setImplicitFunction", SetImplicitFunction);

#ifdef VTK_NODE_PLUS_VTKEXTRACTPOINTSWRAP_INITPTPL
	VTK_NODE_PLUS_VTKEXTRACTPOINTSWRAP_INITPTPL
#endif
	ptpl.Reset( tpl );
}

void VtkExtractPointsWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkExtractPoints> native = vtkSmartPointer<vtkExtractPoints>::New();
		VtkExtractPointsWrap* obj = new VtkExtractPointsWrap(native);
		obj->Wrap(info.This());
	}
	else
	{
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
		{
			Nan::ThrowError("Parameter Error");
			return;
		}
	}

	info.GetReturnValue().Set(info.This());
}

void VtkExtractPointsWrap::ExtractInsideOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractPointsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractPointsWrap>(info.Holder());
	vtkExtractPoints *native = (vtkExtractPoints *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ExtractInsideOff();
}

void VtkExtractPointsWrap::ExtractInsideOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractPointsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractPointsWrap>(info.Holder());
	vtkExtractPoints *native = (vtkExtractPoints *)wrapper->native.GetPointer();
		if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ExtractInsideOn();
}

void VtkExtractPointsWrap::GetExtractInside(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractPointsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractPointsWrap>(info.Holder());
	vtkExtractPoints *native = (vtkExtractPoints *)wrapper->native.GetPointer();
	bool r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetExtractInside();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtractPointsWrap::GetImplicitFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractPointsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractPointsWrap>(info.Holder());
	vtkExtractPoints *native = (vtkExtractPoints *)wrapper->native.GetPointer();
	vtkImplicitFunction * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImplicitFunction();
	VtkImplicitFunctionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImplicitFunctionWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImplicitFunctionWrap *w = new VtkImplicitFunctionWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExtractPointsWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractPointsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractPointsWrap>(info.Holder());
	vtkExtractPoints *native = (vtkExtractPoints *)wrapper->native.GetPointer();
	vtkExtractPoints * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	VtkExtractPointsWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkExtractPointsWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkExtractPointsWrap *w = new VtkExtractPointsWrap();
	w->native = r;
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExtractPointsWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractPointsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractPointsWrap>(info.Holder());
	vtkExtractPoints *native = (vtkExtractPoints *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectBaseWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectBaseWrap *a0 = ObjectWrap::Unwrap<VtkObjectBaseWrap>(info[0]->ToObject());
		vtkExtractPoints * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObjectBase *) a0->native.GetPointer()
		);
		VtkExtractPointsWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkExtractPointsWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkExtractPointsWrap *w = new VtkExtractPointsWrap();
		w->native = r;
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractPointsWrap::SetExtractInside(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractPointsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractPointsWrap>(info.Holder());
	vtkExtractPoints *native = (vtkExtractPoints *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsBoolean())
	{
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetExtractInside(
			info[0]->BooleanValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtractPointsWrap::SetImplicitFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtractPointsWrap *wrapper = ObjectWrap::Unwrap<VtkExtractPointsWrap>(info.Holder());
	vtkExtractPoints *native = (vtkExtractPoints *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImplicitFunctionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImplicitFunctionWrap *a0 = ObjectWrap::Unwrap<VtkImplicitFunctionWrap>(info[0]->ToObject());
				if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetImplicitFunction(
			(vtkImplicitFunction *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

