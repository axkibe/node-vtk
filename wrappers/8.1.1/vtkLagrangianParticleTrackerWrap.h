/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKLAGRANGIANPARTICLETRACKERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKLAGRANGIANPARTICLETRACKERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkLagrangianParticleTracker.h>

#include "vtkDataObjectAlgorithmWrap.h"
#include "../../plus/plus.h"

class VtkLagrangianParticleTrackerWrap : public VtkDataObjectAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkLagrangianParticleTrackerWrap(vtkSmartPointer<vtkLagrangianParticleTracker>);
		VtkLagrangianParticleTrackerWrap();
		~VtkLagrangianParticleTrackerWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AdaptiveStepReintegrationOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void AdaptiveStepReintegrationOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CreateOutOfDomainParticleOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CreateOutOfDomainParticleOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void FillInputPortInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void FillOutputPortInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAdaptiveStepReintegration(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCellLengthComputationMode(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCreateOutOfDomainParticle(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetIntegrationModel(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetIntegrator(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaximumNumberOfSteps(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetParticlePathsRenderingPointsThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSource(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetStepFactor(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetStepFactorMax(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetStepFactorMin(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSurface(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetUseParticlePathsRenderingThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAdaptiveStepReintegration(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCellLengthComputationMode(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCreateOutOfDomainParticle(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetIntegrationModel(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetIntegrator(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaximumNumberOfSteps(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetParticlePathsRenderingPointsThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSourceConnection(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSourceData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetStepFactor(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetStepFactorMax(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetStepFactorMin(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSurfaceConnection(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSurfaceData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetUseParticlePathsRenderingThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UseParticlePathsRenderingThresholdOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UseParticlePathsRenderingThresholdOn(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKLAGRANGIANPARTICLETRACKERWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKLAGRANGIANPARTICLETRACKERWRAP_CLASSDEF
#endif
};

#endif
