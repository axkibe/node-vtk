/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKCELLSIZEFILTERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKCELLSIZEFILTERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkCellSizeFilter.h>

#include "vtkPassInputTypeAlgorithmWrap.h"
#include "../../plus/plus.h"

class VtkCellSizeFilterWrap : public VtkPassInputTypeAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkCellSizeFilterWrap(vtkSmartPointer<vtkCellSizeFilter>);
		VtkCellSizeFilterWrap();
		~VtkCellSizeFilterWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void ComputeAreaOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ComputeAreaOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ComputeLengthOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ComputeLengthOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ComputeSumOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ComputeSumOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ComputeVertexCountOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ComputeVertexCountOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ComputeVolumeOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ComputeVolumeOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAreaArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetComputeArea(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetComputeLength(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetComputeSum(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetComputeVertexCount(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetComputeVolume(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLengthArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetVertexCountArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetVolumeArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAreaArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetComputeArea(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetComputeLength(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetComputeSum(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetComputeVertexCount(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetComputeVolume(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLengthArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetVertexCountArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetVolumeArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);

#ifdef VTK_NODE_PLUS_VTKCELLSIZEFILTERWRAP_CLASSDEF
		VTK_NODE_PLUS_VTKCELLSIZEFILTERWRAP_CLASSDEF
#endif
};

#endif
