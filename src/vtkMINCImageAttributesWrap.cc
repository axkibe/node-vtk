/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkMINCImageAttributesWrap.h"
#include "vtkStringArrayWrap.h"
#include "vtkIdTypeArrayWrap.h"
#include "vtkDoubleArrayWrap.h"
#include "vtkDataArrayWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkMINCImageAttributesWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkMINCImageAttributesWrap::ptpl;

VtkMINCImageAttributesWrap::VtkMINCImageAttributesWrap()
{ }

VtkMINCImageAttributesWrap::VtkMINCImageAttributesWrap(vtkSmartPointer<vtkMINCImageAttributes> _native)
{ native = _native; }

VtkMINCImageAttributesWrap::~VtkMINCImageAttributesWrap()
{ }

void VtkMINCImageAttributesWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkMINCImageAttributesWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkMINCImageAttributes").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("MINCImageAttributes").ToLocalChecked(),tpl->GetFunction());
}

void VtkMINCImageAttributesWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "AddDimension", AddDimension);
	Nan::SetPrototypeMethod(tpl, "addDimension", AddDimension);

	Nan::SetPrototypeMethod(tpl, "GetAttributeNames", GetAttributeNames);
	Nan::SetPrototypeMethod(tpl, "getAttributeNames", GetAttributeNames);

	Nan::SetPrototypeMethod(tpl, "GetAttributeValueAsArray", GetAttributeValueAsArray);
	Nan::SetPrototypeMethod(tpl, "getAttributeValueAsArray", GetAttributeValueAsArray);

	Nan::SetPrototypeMethod(tpl, "GetAttributeValueAsDouble", GetAttributeValueAsDouble);
	Nan::SetPrototypeMethod(tpl, "getAttributeValueAsDouble", GetAttributeValueAsDouble);

	Nan::SetPrototypeMethod(tpl, "GetAttributeValueAsInt", GetAttributeValueAsInt);
	Nan::SetPrototypeMethod(tpl, "getAttributeValueAsInt", GetAttributeValueAsInt);

	Nan::SetPrototypeMethod(tpl, "GetAttributeValueAsString", GetAttributeValueAsString);
	Nan::SetPrototypeMethod(tpl, "getAttributeValueAsString", GetAttributeValueAsString);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDataType", GetDataType);
	Nan::SetPrototypeMethod(tpl, "getDataType", GetDataType);

	Nan::SetPrototypeMethod(tpl, "GetDimensionLengths", GetDimensionLengths);
	Nan::SetPrototypeMethod(tpl, "getDimensionLengths", GetDimensionLengths);

	Nan::SetPrototypeMethod(tpl, "GetDimensionNames", GetDimensionNames);
	Nan::SetPrototypeMethod(tpl, "getDimensionNames", GetDimensionNames);

	Nan::SetPrototypeMethod(tpl, "GetImageMax", GetImageMax);
	Nan::SetPrototypeMethod(tpl, "getImageMax", GetImageMax);

	Nan::SetPrototypeMethod(tpl, "GetImageMin", GetImageMin);
	Nan::SetPrototypeMethod(tpl, "getImageMin", GetImageMin);

	Nan::SetPrototypeMethod(tpl, "GetName", GetName);
	Nan::SetPrototypeMethod(tpl, "getName", GetName);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfImageMinMaxDimensions", GetNumberOfImageMinMaxDimensions);
	Nan::SetPrototypeMethod(tpl, "getNumberOfImageMinMaxDimensions", GetNumberOfImageMinMaxDimensions);

	Nan::SetPrototypeMethod(tpl, "GetValidateAttributes", GetValidateAttributes);
	Nan::SetPrototypeMethod(tpl, "getValidateAttributes", GetValidateAttributes);

	Nan::SetPrototypeMethod(tpl, "GetVariableNames", GetVariableNames);
	Nan::SetPrototypeMethod(tpl, "getVariableNames", GetVariableNames);

	Nan::SetPrototypeMethod(tpl, "HasAttribute", HasAttribute);
	Nan::SetPrototypeMethod(tpl, "hasAttribute", HasAttribute);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PrintFileHeader", PrintFileHeader);
	Nan::SetPrototypeMethod(tpl, "printFileHeader", PrintFileHeader);

	Nan::SetPrototypeMethod(tpl, "Reset", Reset);
	Nan::SetPrototypeMethod(tpl, "reset", Reset);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAttributeValueAsArray", SetAttributeValueAsArray);
	Nan::SetPrototypeMethod(tpl, "setAttributeValueAsArray", SetAttributeValueAsArray);

	Nan::SetPrototypeMethod(tpl, "SetAttributeValueAsDouble", SetAttributeValueAsDouble);
	Nan::SetPrototypeMethod(tpl, "setAttributeValueAsDouble", SetAttributeValueAsDouble);

	Nan::SetPrototypeMethod(tpl, "SetAttributeValueAsInt", SetAttributeValueAsInt);
	Nan::SetPrototypeMethod(tpl, "setAttributeValueAsInt", SetAttributeValueAsInt);

	Nan::SetPrototypeMethod(tpl, "SetAttributeValueAsString", SetAttributeValueAsString);
	Nan::SetPrototypeMethod(tpl, "setAttributeValueAsString", SetAttributeValueAsString);

	Nan::SetPrototypeMethod(tpl, "SetDataType", SetDataType);
	Nan::SetPrototypeMethod(tpl, "setDataType", SetDataType);

	Nan::SetPrototypeMethod(tpl, "SetImageMax", SetImageMax);
	Nan::SetPrototypeMethod(tpl, "setImageMax", SetImageMax);

	Nan::SetPrototypeMethod(tpl, "SetImageMin", SetImageMin);
	Nan::SetPrototypeMethod(tpl, "setImageMin", SetImageMin);

	Nan::SetPrototypeMethod(tpl, "SetName", SetName);
	Nan::SetPrototypeMethod(tpl, "setName", SetName);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfImageMinMaxDimensions", SetNumberOfImageMinMaxDimensions);
	Nan::SetPrototypeMethod(tpl, "setNumberOfImageMinMaxDimensions", SetNumberOfImageMinMaxDimensions);

	Nan::SetPrototypeMethod(tpl, "SetValidateAttributes", SetValidateAttributes);
	Nan::SetPrototypeMethod(tpl, "setValidateAttributes", SetValidateAttributes);

	Nan::SetPrototypeMethod(tpl, "ShallowCopy", ShallowCopy);
	Nan::SetPrototypeMethod(tpl, "shallowCopy", ShallowCopy);

	Nan::SetPrototypeMethod(tpl, "ValidateAttribute", ValidateAttribute);
	Nan::SetPrototypeMethod(tpl, "validateAttribute", ValidateAttribute);

	Nan::SetPrototypeMethod(tpl, "ValidateAttributesOff", ValidateAttributesOff);
	Nan::SetPrototypeMethod(tpl, "validateAttributesOff", ValidateAttributesOff);

	Nan::SetPrototypeMethod(tpl, "ValidateAttributesOn", ValidateAttributesOn);
	Nan::SetPrototypeMethod(tpl, "validateAttributesOn", ValidateAttributesOn);

}

void VtkMINCImageAttributesWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkMINCImageAttributes> native = vtkSmartPointer<vtkMINCImageAttributes>::New();
		VtkMINCImageAttributesWrap* obj = new VtkMINCImageAttributesWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkMINCImageAttributesWrap::AddDimension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddDimension(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::GetAttributeNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		vtkStringArray * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetAttributeNames(
			*a0
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkStringArrayWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkStringArrayWrap *w = new VtkStringArrayWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::GetAttributeValueAsArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			vtkDataArray * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetAttributeValueAsArray(
				*a0,
				*a1
			);
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::Function>(VtkDataArrayWrap::constructor);
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkDataArrayWrap *w = new VtkDataArrayWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::GetAttributeValueAsDouble(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			double r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetAttributeValueAsDouble(
				*a0,
				*a1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::GetAttributeValueAsInt(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetAttributeValueAsInt(
				*a0,
				*a1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::GetAttributeValueAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetAttributeValueAsString(
				*a0,
				*a1
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMINCImageAttributesWrap::GetDataType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageAttributesWrap::GetDimensionLengths(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	vtkIdTypeArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDimensionLengths();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkIdTypeArrayWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkIdTypeArrayWrap *w = new VtkIdTypeArrayWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMINCImageAttributesWrap::GetDimensionNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	vtkStringArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDimensionNames();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkStringArrayWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStringArrayWrap *w = new VtkStringArrayWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMINCImageAttributesWrap::GetImageMax(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	vtkDoubleArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImageMax();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDoubleArrayWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDoubleArrayWrap *w = new VtkDoubleArrayWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMINCImageAttributesWrap::GetImageMin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	vtkDoubleArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImageMin();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDoubleArrayWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDoubleArrayWrap *w = new VtkDoubleArrayWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMINCImageAttributesWrap::GetName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMINCImageAttributesWrap::GetNumberOfImageMinMaxDimensions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfImageMinMaxDimensions();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageAttributesWrap::GetValidateAttributes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetValidateAttributes();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageAttributesWrap::GetVariableNames(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	vtkStringArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVariableNames();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkStringArrayWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStringArrayWrap *w = new VtkStringArrayWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMINCImageAttributesWrap::HasAttribute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->HasAttribute(
				*a0,
				*a1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	vtkMINCImageAttributes * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkMINCImageAttributesWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMINCImageAttributesWrap *w = new VtkMINCImageAttributesWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMINCImageAttributesWrap::PrintFileHeader(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PrintFileHeader();
}

void VtkMINCImageAttributesWrap::Reset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Reset();
}

void VtkMINCImageAttributesWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkMINCImageAttributes * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkMINCImageAttributesWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkMINCImageAttributesWrap *w = new VtkMINCImageAttributesWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::SetAttributeValueAsArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsObject())
			{
				VtkDataArrayWrap *a2 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[2]->ToObject());
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetAttributeValueAsArray(
					*a0,
					*a1,
					(vtkDataArray *) a2->native.GetPointer()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::SetAttributeValueAsDouble(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetAttributeValueAsDouble(
					*a0,
					*a1,
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::SetAttributeValueAsInt(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetAttributeValueAsInt(
					*a0,
					*a1,
					info[2]->Int32Value()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::SetAttributeValueAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				Nan::Utf8String a2(info[2]);
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetAttributeValueAsString(
					*a0,
					*a1,
					*a2
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::SetDataType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDataType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::SetImageMax(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDoubleArrayWrap *a0 = ObjectWrap::Unwrap<VtkDoubleArrayWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetImageMax(
			(vtkDoubleArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::SetImageMin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDoubleArrayWrap *a0 = ObjectWrap::Unwrap<VtkDoubleArrayWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetImageMin(
			(vtkDoubleArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::SetName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::SetNumberOfImageMinMaxDimensions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfImageMinMaxDimensions(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::SetValidateAttributes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetValidateAttributes(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkMINCImageAttributesWrap *a0 = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ShallowCopy(
			(vtkMINCImageAttributes *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::ValidateAttribute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsObject())
			{
				VtkDataArrayWrap *a2 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[2]->ToObject());
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->ValidateAttribute(
					*a0,
					*a1,
					(vtkDataArray *) a2->native.GetPointer()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageAttributesWrap::ValidateAttributesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ValidateAttributesOff();
}

void VtkMINCImageAttributesWrap::ValidateAttributesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageAttributesWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageAttributesWrap>(info.Holder());
	vtkMINCImageAttributes *native = (vtkMINCImageAttributes *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ValidateAttributesOn();
}

