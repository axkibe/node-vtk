/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkLocatorWrap.h"
#include "vtkAbstractCellLocatorWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkAbstractCellLocatorWrap::constructor;

VtkAbstractCellLocatorWrap::VtkAbstractCellLocatorWrap()
{ }

VtkAbstractCellLocatorWrap::VtkAbstractCellLocatorWrap(vtkSmartPointer<vtkAbstractCellLocator> _native)
{ native = _native; }

VtkAbstractCellLocatorWrap::~VtkAbstractCellLocatorWrap()
{ }

void VtkAbstractCellLocatorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkAbstractCellLocatorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkLocatorWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkAbstractCellLocator").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("AbstractCellLocator").ToLocalChecked(),tpl->GetFunction());
}

void VtkAbstractCellLocatorWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "CacheCellBoundsOff", CacheCellBoundsOff);
	Nan::SetPrototypeMethod(tpl, "cacheCellBoundsOff", CacheCellBoundsOff);

	Nan::SetPrototypeMethod(tpl, "CacheCellBoundsOn", CacheCellBoundsOn);
	Nan::SetPrototypeMethod(tpl, "cacheCellBoundsOn", CacheCellBoundsOn);

	Nan::SetPrototypeMethod(tpl, "GetCacheCellBounds", GetCacheCellBounds);
	Nan::SetPrototypeMethod(tpl, "getCacheCellBounds", GetCacheCellBounds);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetLazyEvaluation", GetLazyEvaluation);
	Nan::SetPrototypeMethod(tpl, "getLazyEvaluation", GetLazyEvaluation);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfCellsPerNode", GetNumberOfCellsPerNode);
	Nan::SetPrototypeMethod(tpl, "getNumberOfCellsPerNode", GetNumberOfCellsPerNode);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfCellsPerNodeMaxValue", GetNumberOfCellsPerNodeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getNumberOfCellsPerNodeMaxValue", GetNumberOfCellsPerNodeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfCellsPerNodeMinValue", GetNumberOfCellsPerNodeMinValue);
	Nan::SetPrototypeMethod(tpl, "getNumberOfCellsPerNodeMinValue", GetNumberOfCellsPerNodeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetRetainCellLists", GetRetainCellLists);
	Nan::SetPrototypeMethod(tpl, "getRetainCellLists", GetRetainCellLists);

	Nan::SetPrototypeMethod(tpl, "GetUseExistingSearchStructure", GetUseExistingSearchStructure);
	Nan::SetPrototypeMethod(tpl, "getUseExistingSearchStructure", GetUseExistingSearchStructure);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "LazyEvaluationOff", LazyEvaluationOff);
	Nan::SetPrototypeMethod(tpl, "lazyEvaluationOff", LazyEvaluationOff);

	Nan::SetPrototypeMethod(tpl, "LazyEvaluationOn", LazyEvaluationOn);
	Nan::SetPrototypeMethod(tpl, "lazyEvaluationOn", LazyEvaluationOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RetainCellListsOff", RetainCellListsOff);
	Nan::SetPrototypeMethod(tpl, "retainCellListsOff", RetainCellListsOff);

	Nan::SetPrototypeMethod(tpl, "RetainCellListsOn", RetainCellListsOn);
	Nan::SetPrototypeMethod(tpl, "retainCellListsOn", RetainCellListsOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCacheCellBounds", SetCacheCellBounds);
	Nan::SetPrototypeMethod(tpl, "setCacheCellBounds", SetCacheCellBounds);

	Nan::SetPrototypeMethod(tpl, "SetLazyEvaluation", SetLazyEvaluation);
	Nan::SetPrototypeMethod(tpl, "setLazyEvaluation", SetLazyEvaluation);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfCellsPerNode", SetNumberOfCellsPerNode);
	Nan::SetPrototypeMethod(tpl, "setNumberOfCellsPerNode", SetNumberOfCellsPerNode);

	Nan::SetPrototypeMethod(tpl, "SetRetainCellLists", SetRetainCellLists);
	Nan::SetPrototypeMethod(tpl, "setRetainCellLists", SetRetainCellLists);

	Nan::SetPrototypeMethod(tpl, "SetUseExistingSearchStructure", SetUseExistingSearchStructure);
	Nan::SetPrototypeMethod(tpl, "setUseExistingSearchStructure", SetUseExistingSearchStructure);

	Nan::SetPrototypeMethod(tpl, "UseExistingSearchStructureOff", UseExistingSearchStructureOff);
	Nan::SetPrototypeMethod(tpl, "useExistingSearchStructureOff", UseExistingSearchStructureOff);

	Nan::SetPrototypeMethod(tpl, "UseExistingSearchStructureOn", UseExistingSearchStructureOn);
	Nan::SetPrototypeMethod(tpl, "useExistingSearchStructureOn", UseExistingSearchStructureOn);

}

void VtkAbstractCellLocatorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkAbstractCellLocatorWrap::CacheCellBoundsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CacheCellBoundsOff();
}

void VtkAbstractCellLocatorWrap::CacheCellBoundsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CacheCellBoundsOn();
}

void VtkAbstractCellLocatorWrap::GetCacheCellBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCacheCellBounds();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractCellLocatorWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAbstractCellLocatorWrap::GetLazyEvaluation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLazyEvaluation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractCellLocatorWrap::GetNumberOfCellsPerNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfCellsPerNode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractCellLocatorWrap::GetNumberOfCellsPerNodeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfCellsPerNodeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractCellLocatorWrap::GetNumberOfCellsPerNodeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfCellsPerNodeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractCellLocatorWrap::GetRetainCellLists(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRetainCellLists();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractCellLocatorWrap::GetUseExistingSearchStructure(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseExistingSearchStructure();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractCellLocatorWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractCellLocatorWrap::LazyEvaluationOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LazyEvaluationOff();
}

void VtkAbstractCellLocatorWrap::LazyEvaluationOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LazyEvaluationOn();
}

void VtkAbstractCellLocatorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	vtkAbstractCellLocator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkAbstractCellLocatorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAbstractCellLocatorWrap *w = new VtkAbstractCellLocatorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAbstractCellLocatorWrap::RetainCellListsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RetainCellListsOff();
}

void VtkAbstractCellLocatorWrap::RetainCellListsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RetainCellListsOn();
}

void VtkAbstractCellLocatorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkAbstractCellLocator * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkAbstractCellLocatorWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAbstractCellLocatorWrap *w = new VtkAbstractCellLocatorWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractCellLocatorWrap::SetCacheCellBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCacheCellBounds(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractCellLocatorWrap::SetLazyEvaluation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLazyEvaluation(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractCellLocatorWrap::SetNumberOfCellsPerNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfCellsPerNode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractCellLocatorWrap::SetRetainCellLists(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRetainCellLists(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractCellLocatorWrap::SetUseExistingSearchStructure(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseExistingSearchStructure(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractCellLocatorWrap::UseExistingSearchStructureOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseExistingSearchStructureOff();
}

void VtkAbstractCellLocatorWrap::UseExistingSearchStructureOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractCellLocatorWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractCellLocatorWrap>(info.Holder());
	vtkAbstractCellLocator *native = (vtkAbstractCellLocator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseExistingSearchStructureOn();
}

