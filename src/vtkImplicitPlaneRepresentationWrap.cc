/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkWidgetRepresentationWrap.h"
#include "vtkImplicitPlaneRepresentationWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPolyDataWrap.h"
#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkPlaneWrap.h"
#include "vtkPropertyWrap.h"
#include "vtkLookupTableWrap.h"
#include "vtkPropCollectionWrap.h"
#include "vtkWindowWrap.h"
#include "vtkViewportWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkImplicitPlaneRepresentationWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkImplicitPlaneRepresentationWrap::ptpl;

VtkImplicitPlaneRepresentationWrap::VtkImplicitPlaneRepresentationWrap()
{ }

VtkImplicitPlaneRepresentationWrap::VtkImplicitPlaneRepresentationWrap(vtkSmartPointer<vtkImplicitPlaneRepresentation> _native)
{ native = _native; }

VtkImplicitPlaneRepresentationWrap::~VtkImplicitPlaneRepresentationWrap()
{ }

void VtkImplicitPlaneRepresentationWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkWidgetRepresentationWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkWidgetRepresentationWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkImplicitPlaneRepresentationWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkImplicitPlaneRepresentation").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ImplicitPlaneRepresentation").ToLocalChecked(),tpl->GetFunction());
}

void VtkImplicitPlaneRepresentationWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "BuildRepresentation", BuildRepresentation);
	Nan::SetPrototypeMethod(tpl, "buildRepresentation", BuildRepresentation);

	Nan::SetPrototypeMethod(tpl, "BumpPlane", BumpPlane);
	Nan::SetPrototypeMethod(tpl, "bumpPlane", BumpPlane);

	Nan::SetPrototypeMethod(tpl, "ComputeInteractionState", ComputeInteractionState);
	Nan::SetPrototypeMethod(tpl, "computeInteractionState", ComputeInteractionState);

	Nan::SetPrototypeMethod(tpl, "DrawPlaneOff", DrawPlaneOff);
	Nan::SetPrototypeMethod(tpl, "drawPlaneOff", DrawPlaneOff);

	Nan::SetPrototypeMethod(tpl, "DrawPlaneOn", DrawPlaneOn);
	Nan::SetPrototypeMethod(tpl, "drawPlaneOn", DrawPlaneOn);

	Nan::SetPrototypeMethod(tpl, "GetActors", GetActors);
	Nan::SetPrototypeMethod(tpl, "getActors", GetActors);

	Nan::SetPrototypeMethod(tpl, "GetBumpDistance", GetBumpDistance);
	Nan::SetPrototypeMethod(tpl, "getBumpDistance", GetBumpDistance);

	Nan::SetPrototypeMethod(tpl, "GetBumpDistanceMaxValue", GetBumpDistanceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getBumpDistanceMaxValue", GetBumpDistanceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetBumpDistanceMinValue", GetBumpDistanceMinValue);
	Nan::SetPrototypeMethod(tpl, "getBumpDistanceMinValue", GetBumpDistanceMinValue);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDrawPlane", GetDrawPlane);
	Nan::SetPrototypeMethod(tpl, "getDrawPlane", GetDrawPlane);

	Nan::SetPrototypeMethod(tpl, "GetEdgesProperty", GetEdgesProperty);
	Nan::SetPrototypeMethod(tpl, "getEdgesProperty", GetEdgesProperty);

	Nan::SetPrototypeMethod(tpl, "GetInteractionStateMaxValue", GetInteractionStateMaxValue);
	Nan::SetPrototypeMethod(tpl, "getInteractionStateMaxValue", GetInteractionStateMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetInteractionStateMinValue", GetInteractionStateMinValue);
	Nan::SetPrototypeMethod(tpl, "getInteractionStateMinValue", GetInteractionStateMinValue);

	Nan::SetPrototypeMethod(tpl, "GetLockNormalToCamera", GetLockNormalToCamera);
	Nan::SetPrototypeMethod(tpl, "getLockNormalToCamera", GetLockNormalToCamera);

	Nan::SetPrototypeMethod(tpl, "GetNormalProperty", GetNormalProperty);
	Nan::SetPrototypeMethod(tpl, "getNormalProperty", GetNormalProperty);

	Nan::SetPrototypeMethod(tpl, "GetNormalToXAxis", GetNormalToXAxis);
	Nan::SetPrototypeMethod(tpl, "getNormalToXAxis", GetNormalToXAxis);

	Nan::SetPrototypeMethod(tpl, "GetNormalToYAxis", GetNormalToYAxis);
	Nan::SetPrototypeMethod(tpl, "getNormalToYAxis", GetNormalToYAxis);

	Nan::SetPrototypeMethod(tpl, "GetNormalToZAxis", GetNormalToZAxis);
	Nan::SetPrototypeMethod(tpl, "getNormalToZAxis", GetNormalToZAxis);

	Nan::SetPrototypeMethod(tpl, "GetOutlineProperty", GetOutlineProperty);
	Nan::SetPrototypeMethod(tpl, "getOutlineProperty", GetOutlineProperty);

	Nan::SetPrototypeMethod(tpl, "GetOutlineTranslation", GetOutlineTranslation);
	Nan::SetPrototypeMethod(tpl, "getOutlineTranslation", GetOutlineTranslation);

	Nan::SetPrototypeMethod(tpl, "GetOutsideBounds", GetOutsideBounds);
	Nan::SetPrototypeMethod(tpl, "getOutsideBounds", GetOutsideBounds);

	Nan::SetPrototypeMethod(tpl, "GetPlane", GetPlane);
	Nan::SetPrototypeMethod(tpl, "getPlane", GetPlane);

	Nan::SetPrototypeMethod(tpl, "GetPlaneProperty", GetPlaneProperty);
	Nan::SetPrototypeMethod(tpl, "getPlaneProperty", GetPlaneProperty);

	Nan::SetPrototypeMethod(tpl, "GetPolyData", GetPolyData);
	Nan::SetPrototypeMethod(tpl, "getPolyData", GetPolyData);

	Nan::SetPrototypeMethod(tpl, "GetPolyDataAlgorithm", GetPolyDataAlgorithm);
	Nan::SetPrototypeMethod(tpl, "getPolyDataAlgorithm", GetPolyDataAlgorithm);

	Nan::SetPrototypeMethod(tpl, "GetRepresentationState", GetRepresentationState);
	Nan::SetPrototypeMethod(tpl, "getRepresentationState", GetRepresentationState);

	Nan::SetPrototypeMethod(tpl, "GetScaleEnabled", GetScaleEnabled);
	Nan::SetPrototypeMethod(tpl, "getScaleEnabled", GetScaleEnabled);

	Nan::SetPrototypeMethod(tpl, "GetSelectedNormalProperty", GetSelectedNormalProperty);
	Nan::SetPrototypeMethod(tpl, "getSelectedNormalProperty", GetSelectedNormalProperty);

	Nan::SetPrototypeMethod(tpl, "GetSelectedOutlineProperty", GetSelectedOutlineProperty);
	Nan::SetPrototypeMethod(tpl, "getSelectedOutlineProperty", GetSelectedOutlineProperty);

	Nan::SetPrototypeMethod(tpl, "GetSelectedPlaneProperty", GetSelectedPlaneProperty);
	Nan::SetPrototypeMethod(tpl, "getSelectedPlaneProperty", GetSelectedPlaneProperty);

	Nan::SetPrototypeMethod(tpl, "GetTubing", GetTubing);
	Nan::SetPrototypeMethod(tpl, "getTubing", GetTubing);

	Nan::SetPrototypeMethod(tpl, "HasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "hasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "LockNormalToCameraOff", LockNormalToCameraOff);
	Nan::SetPrototypeMethod(tpl, "lockNormalToCameraOff", LockNormalToCameraOff);

	Nan::SetPrototypeMethod(tpl, "LockNormalToCameraOn", LockNormalToCameraOn);
	Nan::SetPrototypeMethod(tpl, "lockNormalToCameraOn", LockNormalToCameraOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "NormalToXAxisOff", NormalToXAxisOff);
	Nan::SetPrototypeMethod(tpl, "normalToXAxisOff", NormalToXAxisOff);

	Nan::SetPrototypeMethod(tpl, "NormalToXAxisOn", NormalToXAxisOn);
	Nan::SetPrototypeMethod(tpl, "normalToXAxisOn", NormalToXAxisOn);

	Nan::SetPrototypeMethod(tpl, "NormalToYAxisOff", NormalToYAxisOff);
	Nan::SetPrototypeMethod(tpl, "normalToYAxisOff", NormalToYAxisOff);

	Nan::SetPrototypeMethod(tpl, "NormalToYAxisOn", NormalToYAxisOn);
	Nan::SetPrototypeMethod(tpl, "normalToYAxisOn", NormalToYAxisOn);

	Nan::SetPrototypeMethod(tpl, "NormalToZAxisOff", NormalToZAxisOff);
	Nan::SetPrototypeMethod(tpl, "normalToZAxisOff", NormalToZAxisOff);

	Nan::SetPrototypeMethod(tpl, "NormalToZAxisOn", NormalToZAxisOn);
	Nan::SetPrototypeMethod(tpl, "normalToZAxisOn", NormalToZAxisOn);

	Nan::SetPrototypeMethod(tpl, "OutlineTranslationOff", OutlineTranslationOff);
	Nan::SetPrototypeMethod(tpl, "outlineTranslationOff", OutlineTranslationOff);

	Nan::SetPrototypeMethod(tpl, "OutlineTranslationOn", OutlineTranslationOn);
	Nan::SetPrototypeMethod(tpl, "outlineTranslationOn", OutlineTranslationOn);

	Nan::SetPrototypeMethod(tpl, "OutsideBoundsOff", OutsideBoundsOff);
	Nan::SetPrototypeMethod(tpl, "outsideBoundsOff", OutsideBoundsOff);

	Nan::SetPrototypeMethod(tpl, "OutsideBoundsOn", OutsideBoundsOn);
	Nan::SetPrototypeMethod(tpl, "outsideBoundsOn", OutsideBoundsOn);

	Nan::SetPrototypeMethod(tpl, "PushPlane", PushPlane);
	Nan::SetPrototypeMethod(tpl, "pushPlane", PushPlane);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "RenderOpaqueGeometry", RenderOpaqueGeometry);
	Nan::SetPrototypeMethod(tpl, "renderOpaqueGeometry", RenderOpaqueGeometry);

	Nan::SetPrototypeMethod(tpl, "RenderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "renderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "ScaleEnabledOff", ScaleEnabledOff);
	Nan::SetPrototypeMethod(tpl, "scaleEnabledOff", ScaleEnabledOff);

	Nan::SetPrototypeMethod(tpl, "ScaleEnabledOn", ScaleEnabledOn);
	Nan::SetPrototypeMethod(tpl, "scaleEnabledOn", ScaleEnabledOn);

	Nan::SetPrototypeMethod(tpl, "SetBumpDistance", SetBumpDistance);
	Nan::SetPrototypeMethod(tpl, "setBumpDistance", SetBumpDistance);

	Nan::SetPrototypeMethod(tpl, "SetDrawPlane", SetDrawPlane);
	Nan::SetPrototypeMethod(tpl, "setDrawPlane", SetDrawPlane);

	Nan::SetPrototypeMethod(tpl, "SetEdgeColor", SetEdgeColor);
	Nan::SetPrototypeMethod(tpl, "setEdgeColor", SetEdgeColor);

	Nan::SetPrototypeMethod(tpl, "SetInteractionState", SetInteractionState);
	Nan::SetPrototypeMethod(tpl, "setInteractionState", SetInteractionState);

	Nan::SetPrototypeMethod(tpl, "SetLockNormalToCamera", SetLockNormalToCamera);
	Nan::SetPrototypeMethod(tpl, "setLockNormalToCamera", SetLockNormalToCamera);

	Nan::SetPrototypeMethod(tpl, "SetNormal", SetNormal);
	Nan::SetPrototypeMethod(tpl, "setNormal", SetNormal);

	Nan::SetPrototypeMethod(tpl, "SetNormalToCamera", SetNormalToCamera);
	Nan::SetPrototypeMethod(tpl, "setNormalToCamera", SetNormalToCamera);

	Nan::SetPrototypeMethod(tpl, "SetNormalToXAxis", SetNormalToXAxis);
	Nan::SetPrototypeMethod(tpl, "setNormalToXAxis", SetNormalToXAxis);

	Nan::SetPrototypeMethod(tpl, "SetNormalToYAxis", SetNormalToYAxis);
	Nan::SetPrototypeMethod(tpl, "setNormalToYAxis", SetNormalToYAxis);

	Nan::SetPrototypeMethod(tpl, "SetNormalToZAxis", SetNormalToZAxis);
	Nan::SetPrototypeMethod(tpl, "setNormalToZAxis", SetNormalToZAxis);

	Nan::SetPrototypeMethod(tpl, "SetOrigin", SetOrigin);
	Nan::SetPrototypeMethod(tpl, "setOrigin", SetOrigin);

	Nan::SetPrototypeMethod(tpl, "SetOutlineTranslation", SetOutlineTranslation);
	Nan::SetPrototypeMethod(tpl, "setOutlineTranslation", SetOutlineTranslation);

	Nan::SetPrototypeMethod(tpl, "SetOutsideBounds", SetOutsideBounds);
	Nan::SetPrototypeMethod(tpl, "setOutsideBounds", SetOutsideBounds);

	Nan::SetPrototypeMethod(tpl, "SetRepresentationState", SetRepresentationState);
	Nan::SetPrototypeMethod(tpl, "setRepresentationState", SetRepresentationState);

	Nan::SetPrototypeMethod(tpl, "SetScaleEnabled", SetScaleEnabled);
	Nan::SetPrototypeMethod(tpl, "setScaleEnabled", SetScaleEnabled);

	Nan::SetPrototypeMethod(tpl, "SetTubing", SetTubing);
	Nan::SetPrototypeMethod(tpl, "setTubing", SetTubing);

	Nan::SetPrototypeMethod(tpl, "TubingOff", TubingOff);
	Nan::SetPrototypeMethod(tpl, "tubingOff", TubingOff);

	Nan::SetPrototypeMethod(tpl, "TubingOn", TubingOn);
	Nan::SetPrototypeMethod(tpl, "tubingOn", TubingOn);

	Nan::SetPrototypeMethod(tpl, "UpdatePlacement", UpdatePlacement);
	Nan::SetPrototypeMethod(tpl, "updatePlacement", UpdatePlacement);

}

void VtkImplicitPlaneRepresentationWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImplicitPlaneRepresentation> native = vtkSmartPointer<vtkImplicitPlaneRepresentation>::New();
		VtkImplicitPlaneRepresentationWrap* obj = new VtkImplicitPlaneRepresentationWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImplicitPlaneRepresentationWrap::BuildRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BuildRepresentation();
}

void VtkImplicitPlaneRepresentationWrap::BumpPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->BumpPlane(
				info[0]->Int32Value(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::ComputeInteractionState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->ComputeInteractionState(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::DrawPlaneOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DrawPlaneOff();
}

void VtkImplicitPlaneRepresentationWrap::DrawPlaneOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DrawPlaneOn();
}

void VtkImplicitPlaneRepresentationWrap::GetActors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPropCollectionWrap *a0 = ObjectWrap::Unwrap<VtkPropCollectionWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetActors(
			(vtkPropCollection *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::GetBumpDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBumpDistance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetBumpDistanceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBumpDistanceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetBumpDistanceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBumpDistanceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImplicitPlaneRepresentationWrap::GetDrawPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDrawPlane();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetEdgesProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEdgesProperty();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPropertyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneRepresentationWrap::GetInteractionStateMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInteractionStateMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetInteractionStateMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInteractionStateMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetLockNormalToCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLockNormalToCamera();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetNormalProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormalProperty();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPropertyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneRepresentationWrap::GetNormalToXAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormalToXAxis();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetNormalToYAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormalToYAxis();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetNormalToZAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormalToZAxis();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetOutlineProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutlineProperty();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPropertyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneRepresentationWrap::GetOutlineTranslation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutlineTranslation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetOutsideBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutsideBounds();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPlaneWrap *a0 = ObjectWrap::Unwrap<VtkPlaneWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetPlane(
			(vtkPlane *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::GetPlaneProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPlaneProperty();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPropertyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneRepresentationWrap::GetPolyData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetPolyData(
			(vtkPolyData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::GetPolyDataAlgorithm(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	vtkPolyDataAlgorithm * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPolyDataAlgorithm();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPolyDataAlgorithmWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataAlgorithmWrap *w = new VtkPolyDataAlgorithmWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneRepresentationWrap::GetRepresentationState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRepresentationState();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetScaleEnabled(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScaleEnabled();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::GetSelectedNormalProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedNormalProperty();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPropertyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneRepresentationWrap::GetSelectedOutlineProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedOutlineProperty();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPropertyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneRepresentationWrap::GetSelectedPlaneProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedPlaneProperty();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPropertyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneRepresentationWrap::GetTubing(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTubing();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::HasTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasTranslucentPolygonalGeometry();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitPlaneRepresentationWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::LockNormalToCameraOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LockNormalToCameraOff();
}

void VtkImplicitPlaneRepresentationWrap::LockNormalToCameraOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LockNormalToCameraOn();
}

void VtkImplicitPlaneRepresentationWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	vtkImplicitPlaneRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImplicitPlaneRepresentationWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImplicitPlaneRepresentationWrap *w = new VtkImplicitPlaneRepresentationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitPlaneRepresentationWrap::NormalToXAxisOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalToXAxisOff();
}

void VtkImplicitPlaneRepresentationWrap::NormalToXAxisOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalToXAxisOn();
}

void VtkImplicitPlaneRepresentationWrap::NormalToYAxisOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalToYAxisOff();
}

void VtkImplicitPlaneRepresentationWrap::NormalToYAxisOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalToYAxisOn();
}

void VtkImplicitPlaneRepresentationWrap::NormalToZAxisOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalToZAxisOff();
}

void VtkImplicitPlaneRepresentationWrap::NormalToZAxisOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalToZAxisOn();
}

void VtkImplicitPlaneRepresentationWrap::OutlineTranslationOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutlineTranslationOff();
}

void VtkImplicitPlaneRepresentationWrap::OutlineTranslationOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutlineTranslationOn();
}

void VtkImplicitPlaneRepresentationWrap::OutsideBoundsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutsideBoundsOff();
}

void VtkImplicitPlaneRepresentationWrap::OutsideBoundsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutsideBoundsOn();
}

void VtkImplicitPlaneRepresentationWrap::PushPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->PushPlane(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOpaqueGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::RenderTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderTranslucentPolygonalGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImplicitPlaneRepresentation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkImplicitPlaneRepresentationWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImplicitPlaneRepresentationWrap *w = new VtkImplicitPlaneRepresentationWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::ScaleEnabledOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ScaleEnabledOff();
}

void VtkImplicitPlaneRepresentationWrap::ScaleEnabledOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ScaleEnabledOn();
}

void VtkImplicitPlaneRepresentationWrap::SetBumpDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBumpDistance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetDrawPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDrawPlane(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetEdgeColor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkLookupTableWrap *a0 = ObjectWrap::Unwrap<VtkLookupTableWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEdgeColor(
			(vtkLookupTable *) a0->native.GetPointer()
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetEdgeColor(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetInteractionState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInteractionState(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetLockNormalToCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLockNormalToCamera(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetNormal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetNormal(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetNormalToCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetNormalToCamera();
}

void VtkImplicitPlaneRepresentationWrap::SetNormalToXAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalToXAxis(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetNormalToYAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalToYAxis(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetNormalToZAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalToZAxis(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetOrigin(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetOutlineTranslation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutlineTranslation(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetOutsideBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutsideBounds(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetRepresentationState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRepresentationState(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetScaleEnabled(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScaleEnabled(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::SetTubing(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTubing(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitPlaneRepresentationWrap::TubingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TubingOff();
}

void VtkImplicitPlaneRepresentationWrap::TubingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TubingOn();
}

void VtkImplicitPlaneRepresentationWrap::UpdatePlacement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitPlaneRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitPlaneRepresentationWrap>(info.Holder());
	vtkImplicitPlaneRepresentation *native = (vtkImplicitPlaneRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UpdatePlacement();
}

