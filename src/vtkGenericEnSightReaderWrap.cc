/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkMultiBlockDataSetAlgorithmWrap.h"
#include "vtkGenericEnSightReaderWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDataArrayCollectionWrap.h"
#include "vtkDataArraySelectionWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkGenericEnSightReaderWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkGenericEnSightReaderWrap::ptpl;

VtkGenericEnSightReaderWrap::VtkGenericEnSightReaderWrap()
{ }

VtkGenericEnSightReaderWrap::VtkGenericEnSightReaderWrap(vtkSmartPointer<vtkGenericEnSightReader> _native)
{ native = _native; }

VtkGenericEnSightReaderWrap::~VtkGenericEnSightReaderWrap()
{ }

void VtkGenericEnSightReaderWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkGenericEnSightReader").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("GenericEnSightReader").ToLocalChecked(), ConstructorGetter);
}

void VtkGenericEnSightReaderWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkGenericEnSightReaderWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkMultiBlockDataSetAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkMultiBlockDataSetAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkGenericEnSightReaderWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "CanReadFile", CanReadFile);
	Nan::SetPrototypeMethod(tpl, "canReadFile", CanReadFile);

	Nan::SetPrototypeMethod(tpl, "DetermineEnSightVersion", DetermineEnSightVersion);
	Nan::SetPrototypeMethod(tpl, "determineEnSightVersion", DetermineEnSightVersion);

	Nan::SetPrototypeMethod(tpl, "GetByteOrder", GetByteOrder);
	Nan::SetPrototypeMethod(tpl, "getByteOrder", GetByteOrder);

	Nan::SetPrototypeMethod(tpl, "GetByteOrderAsString", GetByteOrderAsString);
	Nan::SetPrototypeMethod(tpl, "getByteOrderAsString", GetByteOrderAsString);

	Nan::SetPrototypeMethod(tpl, "GetCaseFileName", GetCaseFileName);
	Nan::SetPrototypeMethod(tpl, "getCaseFileName", GetCaseFileName);

	Nan::SetPrototypeMethod(tpl, "GetCellArrayName", GetCellArrayName);
	Nan::SetPrototypeMethod(tpl, "getCellArrayName", GetCellArrayName);

	Nan::SetPrototypeMethod(tpl, "GetCellArrayStatus", GetCellArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getCellArrayStatus", GetCellArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetCellDataArraySelection", GetCellDataArraySelection);
	Nan::SetPrototypeMethod(tpl, "getCellDataArraySelection", GetCellDataArraySelection);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetComplexDescription", GetComplexDescription);
	Nan::SetPrototypeMethod(tpl, "getComplexDescription", GetComplexDescription);

	Nan::SetPrototypeMethod(tpl, "GetComplexVariableType", GetComplexVariableType);
	Nan::SetPrototypeMethod(tpl, "getComplexVariableType", GetComplexVariableType);

	Nan::SetPrototypeMethod(tpl, "GetDescription", GetDescription);
	Nan::SetPrototypeMethod(tpl, "getDescription", GetDescription);

	Nan::SetPrototypeMethod(tpl, "GetEnSightVersion", GetEnSightVersion);
	Nan::SetPrototypeMethod(tpl, "getEnSightVersion", GetEnSightVersion);

	Nan::SetPrototypeMethod(tpl, "GetFilePath", GetFilePath);
	Nan::SetPrototypeMethod(tpl, "getFilePath", GetFilePath);

	Nan::SetPrototypeMethod(tpl, "GetGeometryFileName", GetGeometryFileName);
	Nan::SetPrototypeMethod(tpl, "getGeometryFileName", GetGeometryFileName);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfCellArrays", GetNumberOfCellArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfCellArrays", GetNumberOfCellArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComplexScalarsPerElement", GetNumberOfComplexScalarsPerElement);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComplexScalarsPerElement", GetNumberOfComplexScalarsPerElement);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComplexScalarsPerNode", GetNumberOfComplexScalarsPerNode);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComplexScalarsPerNode", GetNumberOfComplexScalarsPerNode);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComplexVariables", GetNumberOfComplexVariables);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComplexVariables", GetNumberOfComplexVariables);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComplexVectorsPerElement", GetNumberOfComplexVectorsPerElement);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComplexVectorsPerElement", GetNumberOfComplexVectorsPerElement);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComplexVectorsPerNode", GetNumberOfComplexVectorsPerNode);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComplexVectorsPerNode", GetNumberOfComplexVectorsPerNode);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPointArrays", GetNumberOfPointArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPointArrays", GetNumberOfPointArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfScalarsPerElement", GetNumberOfScalarsPerElement);
	Nan::SetPrototypeMethod(tpl, "getNumberOfScalarsPerElement", GetNumberOfScalarsPerElement);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfScalarsPerMeasuredNode", GetNumberOfScalarsPerMeasuredNode);
	Nan::SetPrototypeMethod(tpl, "getNumberOfScalarsPerMeasuredNode", GetNumberOfScalarsPerMeasuredNode);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfScalarsPerNode", GetNumberOfScalarsPerNode);
	Nan::SetPrototypeMethod(tpl, "getNumberOfScalarsPerNode", GetNumberOfScalarsPerNode);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfTensorsSymmPerElement", GetNumberOfTensorsSymmPerElement);
	Nan::SetPrototypeMethod(tpl, "getNumberOfTensorsSymmPerElement", GetNumberOfTensorsSymmPerElement);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfTensorsSymmPerNode", GetNumberOfTensorsSymmPerNode);
	Nan::SetPrototypeMethod(tpl, "getNumberOfTensorsSymmPerNode", GetNumberOfTensorsSymmPerNode);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfVariables", GetNumberOfVariables);
	Nan::SetPrototypeMethod(tpl, "getNumberOfVariables", GetNumberOfVariables);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfVectorsPerElement", GetNumberOfVectorsPerElement);
	Nan::SetPrototypeMethod(tpl, "getNumberOfVectorsPerElement", GetNumberOfVectorsPerElement);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfVectorsPerMeasuredNode", GetNumberOfVectorsPerMeasuredNode);
	Nan::SetPrototypeMethod(tpl, "getNumberOfVectorsPerMeasuredNode", GetNumberOfVectorsPerMeasuredNode);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfVectorsPerNode", GetNumberOfVectorsPerNode);
	Nan::SetPrototypeMethod(tpl, "getNumberOfVectorsPerNode", GetNumberOfVectorsPerNode);

	Nan::SetPrototypeMethod(tpl, "GetParticleCoordinatesByIndex", GetParticleCoordinatesByIndex);
	Nan::SetPrototypeMethod(tpl, "getParticleCoordinatesByIndex", GetParticleCoordinatesByIndex);

	Nan::SetPrototypeMethod(tpl, "GetPointArrayName", GetPointArrayName);
	Nan::SetPrototypeMethod(tpl, "getPointArrayName", GetPointArrayName);

	Nan::SetPrototypeMethod(tpl, "GetPointArrayStatus", GetPointArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getPointArrayStatus", GetPointArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetPointDataArraySelection", GetPointDataArraySelection);
	Nan::SetPrototypeMethod(tpl, "getPointDataArraySelection", GetPointDataArraySelection);

	Nan::SetPrototypeMethod(tpl, "GetReadAllVariables", GetReadAllVariables);
	Nan::SetPrototypeMethod(tpl, "getReadAllVariables", GetReadAllVariables);

	Nan::SetPrototypeMethod(tpl, "GetReader", GetReader);
	Nan::SetPrototypeMethod(tpl, "getReader", GetReader);

	Nan::SetPrototypeMethod(tpl, "GetTimeSets", GetTimeSets);
	Nan::SetPrototypeMethod(tpl, "getTimeSets", GetTimeSets);

	Nan::SetPrototypeMethod(tpl, "GetVariableType", GetVariableType);
	Nan::SetPrototypeMethod(tpl, "getVariableType", GetVariableType);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ParticleCoordinatesByIndexOff", ParticleCoordinatesByIndexOff);
	Nan::SetPrototypeMethod(tpl, "particleCoordinatesByIndexOff", ParticleCoordinatesByIndexOff);

	Nan::SetPrototypeMethod(tpl, "ParticleCoordinatesByIndexOn", ParticleCoordinatesByIndexOn);
	Nan::SetPrototypeMethod(tpl, "particleCoordinatesByIndexOn", ParticleCoordinatesByIndexOn);

	Nan::SetPrototypeMethod(tpl, "ReadAllVariablesOff", ReadAllVariablesOff);
	Nan::SetPrototypeMethod(tpl, "readAllVariablesOff", ReadAllVariablesOff);

	Nan::SetPrototypeMethod(tpl, "ReadAllVariablesOn", ReadAllVariablesOn);
	Nan::SetPrototypeMethod(tpl, "readAllVariablesOn", ReadAllVariablesOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetByteOrder", SetByteOrder);
	Nan::SetPrototypeMethod(tpl, "setByteOrder", SetByteOrder);

	Nan::SetPrototypeMethod(tpl, "SetByteOrderToBigEndian", SetByteOrderToBigEndian);
	Nan::SetPrototypeMethod(tpl, "setByteOrderToBigEndian", SetByteOrderToBigEndian);

	Nan::SetPrototypeMethod(tpl, "SetByteOrderToLittleEndian", SetByteOrderToLittleEndian);
	Nan::SetPrototypeMethod(tpl, "setByteOrderToLittleEndian", SetByteOrderToLittleEndian);

	Nan::SetPrototypeMethod(tpl, "SetCaseFileName", SetCaseFileName);
	Nan::SetPrototypeMethod(tpl, "setCaseFileName", SetCaseFileName);

	Nan::SetPrototypeMethod(tpl, "SetCellArrayStatus", SetCellArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setCellArrayStatus", SetCellArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetFilePath", SetFilePath);
	Nan::SetPrototypeMethod(tpl, "setFilePath", SetFilePath);

	Nan::SetPrototypeMethod(tpl, "SetParticleCoordinatesByIndex", SetParticleCoordinatesByIndex);
	Nan::SetPrototypeMethod(tpl, "setParticleCoordinatesByIndex", SetParticleCoordinatesByIndex);

	Nan::SetPrototypeMethod(tpl, "SetPointArrayStatus", SetPointArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setPointArrayStatus", SetPointArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetReadAllVariables", SetReadAllVariables);
	Nan::SetPrototypeMethod(tpl, "setReadAllVariables", SetReadAllVariables);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );
}

void VtkGenericEnSightReaderWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkGenericEnSightReader> native = vtkSmartPointer<vtkGenericEnSightReader>::New();
		VtkGenericEnSightReaderWrap* obj = new VtkGenericEnSightReaderWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkGenericEnSightReaderWrap::CanReadFile(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->CanReadFile(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::DetermineEnSightVersion(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->DetermineEnSightVersion(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::GetByteOrder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetByteOrder();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetByteOrderAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetByteOrderAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGenericEnSightReaderWrap::GetCaseFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCaseFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGenericEnSightReaderWrap::GetCellArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetCellArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::GetCellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetCellArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::GetCellDataArraySelection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	vtkDataArraySelection * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCellDataArraySelection();
		VtkDataArraySelectionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataArraySelectionWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataArraySelectionWrap *w = new VtkDataArraySelectionWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericEnSightReaderWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGenericEnSightReaderWrap::GetComplexDescription(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetComplexDescription(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::GetComplexVariableType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetComplexVariableType(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::GetDescription(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetDescription(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetDescription(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::GetEnSightVersion(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEnSightVersion();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetFilePath(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFilePath();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGenericEnSightReaderWrap::GetGeometryFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGeometryFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGenericEnSightReaderWrap::GetNumberOfCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfCellArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfComplexScalarsPerElement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfComplexScalarsPerElement();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfComplexScalarsPerNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfComplexScalarsPerNode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfComplexVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfComplexVariables();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfComplexVectorsPerElement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfComplexVectorsPerElement();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfComplexVectorsPerNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfComplexVectorsPerNode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPointArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfScalarsPerElement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfScalarsPerElement();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfScalarsPerMeasuredNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfScalarsPerMeasuredNode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfScalarsPerNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfScalarsPerNode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfTensorsSymmPerElement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfTensorsSymmPerElement();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfTensorsSymmPerNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfTensorsSymmPerNode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfVariables(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfVariables();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfVectorsPerElement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfVectorsPerElement();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfVectorsPerMeasuredNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfVectorsPerMeasuredNode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetNumberOfVectorsPerNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfVectorsPerNode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetParticleCoordinatesByIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetParticleCoordinatesByIndex();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetPointArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPointArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::GetPointArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPointArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::GetPointDataArraySelection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	vtkDataArraySelection * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointDataArraySelection();
		VtkDataArraySelectionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataArraySelectionWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataArraySelectionWrap *w = new VtkDataArraySelectionWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericEnSightReaderWrap::GetReadAllVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetReadAllVariables();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericEnSightReaderWrap::GetReader(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	vtkGenericEnSightReader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetReader();
		VtkGenericEnSightReaderWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkGenericEnSightReaderWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGenericEnSightReaderWrap *w = new VtkGenericEnSightReaderWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericEnSightReaderWrap::GetTimeSets(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	vtkDataArrayCollection * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTimeSets();
		VtkDataArrayCollectionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataArrayCollectionWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataArrayCollectionWrap *w = new VtkDataArrayCollectionWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericEnSightReaderWrap::GetVariableType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetVariableType(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	vtkGenericEnSightReader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkGenericEnSightReaderWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkGenericEnSightReaderWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGenericEnSightReaderWrap *w = new VtkGenericEnSightReaderWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericEnSightReaderWrap::ParticleCoordinatesByIndexOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ParticleCoordinatesByIndexOff();
}

void VtkGenericEnSightReaderWrap::ParticleCoordinatesByIndexOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ParticleCoordinatesByIndexOn();
}

void VtkGenericEnSightReaderWrap::ReadAllVariablesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReadAllVariablesOff();
}

void VtkGenericEnSightReaderWrap::ReadAllVariablesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReadAllVariablesOn();
}

void VtkGenericEnSightReaderWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkGenericEnSightReader * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkGenericEnSightReaderWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkGenericEnSightReaderWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkGenericEnSightReaderWrap *w = new VtkGenericEnSightReaderWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::SetByteOrder(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetByteOrder(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::SetByteOrderToBigEndian(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetByteOrderToBigEndian();
}

void VtkGenericEnSightReaderWrap::SetByteOrderToLittleEndian(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetByteOrderToLittleEndian();
}

void VtkGenericEnSightReaderWrap::SetCaseFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCaseFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::SetCellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetCellArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::SetFilePath(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFilePath(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::SetParticleCoordinatesByIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetParticleCoordinatesByIndex(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::SetPointArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetPointArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericEnSightReaderWrap::SetReadAllVariables(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericEnSightReaderWrap *wrapper = ObjectWrap::Unwrap<VtkGenericEnSightReaderWrap>(info.Holder());
	vtkGenericEnSightReader *native = (vtkGenericEnSightReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetReadAllVariables(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

