/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkCubeSource.h>

#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkCubeSourceWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

Nan::Persistent<v8::Function> VtkCubeSourceWrap::constructor;

VtkCubeSourceWrap::VtkCubeSourceWrap()
{ }

VtkCubeSourceWrap::VtkCubeSourceWrap(vtkSmartPointer<vtkCubeSource> _native)
{ native = _native; }

VtkCubeSourceWrap::~VtkCubeSourceWrap()
{ }

void VtkCubeSourceWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkCubeSourceWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkPolyDataAlgorithmWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkCubeSource").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("cubeSource").ToLocalChecked(),tpl->GetFunction());
}

void VtkCubeSourceWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetXLength", SetXLength);
	Nan::SetPrototypeMethod(tpl, "setXLength", SetXLength);

	Nan::SetPrototypeMethod(tpl, "GetXLengthMinValue", GetXLengthMinValue);
	Nan::SetPrototypeMethod(tpl, "getXLengthMinValue", GetXLengthMinValue);

	Nan::SetPrototypeMethod(tpl, "GetXLengthMaxValue", GetXLengthMaxValue);
	Nan::SetPrototypeMethod(tpl, "getXLengthMaxValue", GetXLengthMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetXLength", GetXLength);
	Nan::SetPrototypeMethod(tpl, "getXLength", GetXLength);

	Nan::SetPrototypeMethod(tpl, "SetYLength", SetYLength);
	Nan::SetPrototypeMethod(tpl, "setYLength", SetYLength);

	Nan::SetPrototypeMethod(tpl, "GetYLengthMinValue", GetYLengthMinValue);
	Nan::SetPrototypeMethod(tpl, "getYLengthMinValue", GetYLengthMinValue);

	Nan::SetPrototypeMethod(tpl, "GetYLengthMaxValue", GetYLengthMaxValue);
	Nan::SetPrototypeMethod(tpl, "getYLengthMaxValue", GetYLengthMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetYLength", GetYLength);
	Nan::SetPrototypeMethod(tpl, "getYLength", GetYLength);

	Nan::SetPrototypeMethod(tpl, "SetZLength", SetZLength);
	Nan::SetPrototypeMethod(tpl, "setZLength", SetZLength);

	Nan::SetPrototypeMethod(tpl, "GetZLengthMinValue", GetZLengthMinValue);
	Nan::SetPrototypeMethod(tpl, "getZLengthMinValue", GetZLengthMinValue);

	Nan::SetPrototypeMethod(tpl, "GetZLengthMaxValue", GetZLengthMaxValue);
	Nan::SetPrototypeMethod(tpl, "getZLengthMaxValue", GetZLengthMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetZLength", GetZLength);
	Nan::SetPrototypeMethod(tpl, "getZLength", GetZLength);

	Nan::SetPrototypeMethod(tpl, "SetCenter", SetCenter);
	Nan::SetPrototypeMethod(tpl, "setCenter", SetCenter);

	Nan::SetPrototypeMethod(tpl, "SetBounds", SetBounds);
	Nan::SetPrototypeMethod(tpl, "setBounds", SetBounds);

	Nan::SetPrototypeMethod(tpl, "SetOutputPointsPrecision", SetOutputPointsPrecision);
	Nan::SetPrototypeMethod(tpl, "setOutputPointsPrecision", SetOutputPointsPrecision);

	Nan::SetPrototypeMethod(tpl, "GetOutputPointsPrecision", GetOutputPointsPrecision);
	Nan::SetPrototypeMethod(tpl, "getOutputPointsPrecision", GetOutputPointsPrecision);

}

void VtkCubeSourceWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkCubeSource> native = vtkSmartPointer<vtkCubeSource>::New();
		VtkCubeSourceWrap* obj = new VtkCubeSourceWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(strcmp(*s, "__nowrap" ))
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkCubeSourceWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCubeSourceWrap::GetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputPointsPrecision();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCubeSourceWrap::GetXLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXLength();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCubeSourceWrap::GetXLengthMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXLengthMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCubeSourceWrap::GetXLengthMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXLengthMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCubeSourceWrap::GetYLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYLength();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCubeSourceWrap::GetYLengthMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYLengthMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCubeSourceWrap::GetYLengthMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYLengthMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCubeSourceWrap::GetZLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZLength();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCubeSourceWrap::GetZLengthMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZLengthMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCubeSourceWrap::GetZLengthMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZLengthMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCubeSourceWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCubeSourceWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	vtkCubeSource * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	const int argc = 1;
	v8::Local<v8::Value> argv[argc] =
		{ Nan::New("__nowrap").ToLocalChecked() };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkCubeSourceWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(argc, argv);
	VtkCubeSourceWrap *w = new VtkCubeSourceWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCubeSourceWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkCubeSource * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		const int argc = 1;
		v8::Local<v8::Value> argv[argc] =
			{ Nan::New("__nowrap").ToLocalChecked() };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkCubeSourceWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(argc, argv);
		VtkCubeSourceWrap *w = new VtkCubeSourceWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCubeSourceWrap::SetBounds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() > 4 && info[4]->IsNumber())
					{
						if(info.Length() > 5 && info[5]->IsNumber())
						{
							if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->SetBounds(
								info[0]->NumberValue(),
								info[1]->NumberValue(),
								info[2]->NumberValue(),
								info[3]->NumberValue(),
								info[4]->NumberValue(),
								info[5]->NumberValue()
							);
							return;
						}
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCubeSourceWrap::SetCenter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetCenter(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCubeSourceWrap::SetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputPointsPrecision(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCubeSourceWrap::SetXLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetXLength(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCubeSourceWrap::SetYLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetYLength(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCubeSourceWrap::SetZLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCubeSourceWrap *wrapper = ObjectWrap::Unwrap<VtkCubeSourceWrap>(info.Holder());
	vtkCubeSource *native = (vtkCubeSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetZLength(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

