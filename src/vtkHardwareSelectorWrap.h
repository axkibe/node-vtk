/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKHARDWARESELECTORWRAP_H
#define NATIVE_EXTENSION_VTK_VTKHARDWARESELECTORWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkHardwareSelector.h>

#include "vtkObjectWrap.h"

class VtkHardwareSelectorWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkHardwareSelectorWrap(vtkSmartPointer<vtkHardwareSelector>);
		VtkHardwareSelectorWrap();
		~VtkHardwareSelectorWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void BeginRenderProp(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ClearBuffers(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EndRenderProp(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GenerateSelection(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCurrentPass(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFieldAssociation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetProcessID(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPropFromID(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRenderer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Select(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFieldAssociation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetProcessID(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRenderer(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
