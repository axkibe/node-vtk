/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkThreadedImageAlgorithmWrap.h"
#include "vtkImageLogicWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDataObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkImageLogicWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkImageLogicWrap::ptpl;

VtkImageLogicWrap::VtkImageLogicWrap()
{ }

VtkImageLogicWrap::VtkImageLogicWrap(vtkSmartPointer<vtkImageLogic> _native)
{ native = _native; }

VtkImageLogicWrap::~VtkImageLogicWrap()
{ }

void VtkImageLogicWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkImageLogic").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ImageLogic").ToLocalChecked(), ConstructorGetter);
}

void VtkImageLogicWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkImageLogicWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkThreadedImageAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkThreadedImageAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkImageLogicWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetOperation", GetOperation);
	Nan::SetPrototypeMethod(tpl, "getOperation", GetOperation);

	Nan::SetPrototypeMethod(tpl, "GetOutputTrueValue", GetOutputTrueValue);
	Nan::SetPrototypeMethod(tpl, "getOutputTrueValue", GetOutputTrueValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetInput1Data", SetInput1Data);
	Nan::SetPrototypeMethod(tpl, "setInput1Data", SetInput1Data);

	Nan::SetPrototypeMethod(tpl, "SetInput2Data", SetInput2Data);
	Nan::SetPrototypeMethod(tpl, "setInput2Data", SetInput2Data);

	Nan::SetPrototypeMethod(tpl, "SetOperation", SetOperation);
	Nan::SetPrototypeMethod(tpl, "setOperation", SetOperation);

	Nan::SetPrototypeMethod(tpl, "SetOperationToAnd", SetOperationToAnd);
	Nan::SetPrototypeMethod(tpl, "setOperationToAnd", SetOperationToAnd);

	Nan::SetPrototypeMethod(tpl, "SetOperationToNand", SetOperationToNand);
	Nan::SetPrototypeMethod(tpl, "setOperationToNand", SetOperationToNand);

	Nan::SetPrototypeMethod(tpl, "SetOperationToNor", SetOperationToNor);
	Nan::SetPrototypeMethod(tpl, "setOperationToNor", SetOperationToNor);

	Nan::SetPrototypeMethod(tpl, "SetOperationToNot", SetOperationToNot);
	Nan::SetPrototypeMethod(tpl, "setOperationToNot", SetOperationToNot);

	Nan::SetPrototypeMethod(tpl, "SetOperationToOr", SetOperationToOr);
	Nan::SetPrototypeMethod(tpl, "setOperationToOr", SetOperationToOr);

	Nan::SetPrototypeMethod(tpl, "SetOperationToXor", SetOperationToXor);
	Nan::SetPrototypeMethod(tpl, "setOperationToXor", SetOperationToXor);

	Nan::SetPrototypeMethod(tpl, "SetOutputTrueValue", SetOutputTrueValue);
	Nan::SetPrototypeMethod(tpl, "setOutputTrueValue", SetOutputTrueValue);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );
}

void VtkImageLogicWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageLogic> native = vtkSmartPointer<vtkImageLogic>::New();
		VtkImageLogicWrap* obj = new VtkImageLogicWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageLogicWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageLogicWrap::GetOperation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOperation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageLogicWrap::GetOutputTrueValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputTrueValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageLogicWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageLogicWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	vtkImageLogic * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkImageLogicWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImageLogicWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageLogicWrap *w = new VtkImageLogicWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageLogicWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageLogic * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkImageLogicWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkImageLogicWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageLogicWrap *w = new VtkImageLogicWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageLogicWrap::SetInput1Data(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInput1Data(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageLogicWrap::SetInput2Data(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInput2Data(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageLogicWrap::SetOperation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOperation(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageLogicWrap::SetOperationToAnd(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToAnd();
}

void VtkImageLogicWrap::SetOperationToNand(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToNand();
}

void VtkImageLogicWrap::SetOperationToNor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToNor();
}

void VtkImageLogicWrap::SetOperationToNot(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToNot();
}

void VtkImageLogicWrap::SetOperationToOr(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToOr();
}

void VtkImageLogicWrap::SetOperationToXor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToXor();
}

void VtkImageLogicWrap::SetOutputTrueValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageLogicWrap *wrapper = ObjectWrap::Unwrap<VtkImageLogicWrap>(info.Holder());
	vtkImageLogic *native = (vtkImageLogic *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputTrueValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

