/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKTUPLEINTERPOLATORWRAP_H
#define NATIVE_EXTENSION_VTK_VTKTUPLEINTERPOLATORWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkTupleInterpolator.h>

#include "vtkObjectWrap.h"

class VtkTupleInterpolatorWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkTupleInterpolatorWrap(vtkSmartPointer<vtkTupleInterpolator>);
		VtkTupleInterpolatorWrap();
		~VtkTupleInterpolatorWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInterpolatingSpline(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInterpolationType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaximumT(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMinimumT(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfComponents(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfTuples(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RemoveTuple(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetInterpolatingSpline(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetInterpolationType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetInterpolationTypeToLinear(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetInterpolationTypeToSpline(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetNumberOfComponents(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
