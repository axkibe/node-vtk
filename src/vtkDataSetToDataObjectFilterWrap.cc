/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkDataObjectAlgorithmWrap.h"
#include "vtkDataSetToDataObjectFilterWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkDataSetToDataObjectFilterWrap::constructor;

VtkDataSetToDataObjectFilterWrap::VtkDataSetToDataObjectFilterWrap()
{ }

VtkDataSetToDataObjectFilterWrap::VtkDataSetToDataObjectFilterWrap(vtkSmartPointer<vtkDataSetToDataObjectFilter> _native)
{ native = _native; }

VtkDataSetToDataObjectFilterWrap::~VtkDataSetToDataObjectFilterWrap()
{ }

void VtkDataSetToDataObjectFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkDataSetToDataObjectFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkDataObjectAlgorithmWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkDataSetToDataObjectFilter").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("DataSetToDataObjectFilter").ToLocalChecked(),tpl->GetFunction());
}

void VtkDataSetToDataObjectFilterWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "CellDataOff", CellDataOff);
	Nan::SetPrototypeMethod(tpl, "cellDataOff", CellDataOff);

	Nan::SetPrototypeMethod(tpl, "CellDataOn", CellDataOn);
	Nan::SetPrototypeMethod(tpl, "cellDataOn", CellDataOn);

	Nan::SetPrototypeMethod(tpl, "FieldDataOff", FieldDataOff);
	Nan::SetPrototypeMethod(tpl, "fieldDataOff", FieldDataOff);

	Nan::SetPrototypeMethod(tpl, "FieldDataOn", FieldDataOn);
	Nan::SetPrototypeMethod(tpl, "fieldDataOn", FieldDataOn);

	Nan::SetPrototypeMethod(tpl, "GeometryOff", GeometryOff);
	Nan::SetPrototypeMethod(tpl, "geometryOff", GeometryOff);

	Nan::SetPrototypeMethod(tpl, "GeometryOn", GeometryOn);
	Nan::SetPrototypeMethod(tpl, "geometryOn", GeometryOn);

	Nan::SetPrototypeMethod(tpl, "GetCellData", GetCellData);
	Nan::SetPrototypeMethod(tpl, "getCellData", GetCellData);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetFieldData", GetFieldData);
	Nan::SetPrototypeMethod(tpl, "getFieldData", GetFieldData);

	Nan::SetPrototypeMethod(tpl, "GetGeometry", GetGeometry);
	Nan::SetPrototypeMethod(tpl, "getGeometry", GetGeometry);

	Nan::SetPrototypeMethod(tpl, "GetPointData", GetPointData);
	Nan::SetPrototypeMethod(tpl, "getPointData", GetPointData);

	Nan::SetPrototypeMethod(tpl, "GetTopology", GetTopology);
	Nan::SetPrototypeMethod(tpl, "getTopology", GetTopology);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PointDataOff", PointDataOff);
	Nan::SetPrototypeMethod(tpl, "pointDataOff", PointDataOff);

	Nan::SetPrototypeMethod(tpl, "PointDataOn", PointDataOn);
	Nan::SetPrototypeMethod(tpl, "pointDataOn", PointDataOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCellData", SetCellData);
	Nan::SetPrototypeMethod(tpl, "setCellData", SetCellData);

	Nan::SetPrototypeMethod(tpl, "SetFieldData", SetFieldData);
	Nan::SetPrototypeMethod(tpl, "setFieldData", SetFieldData);

	Nan::SetPrototypeMethod(tpl, "SetGeometry", SetGeometry);
	Nan::SetPrototypeMethod(tpl, "setGeometry", SetGeometry);

	Nan::SetPrototypeMethod(tpl, "SetPointData", SetPointData);
	Nan::SetPrototypeMethod(tpl, "setPointData", SetPointData);

	Nan::SetPrototypeMethod(tpl, "SetTopology", SetTopology);
	Nan::SetPrototypeMethod(tpl, "setTopology", SetTopology);

	Nan::SetPrototypeMethod(tpl, "TopologyOff", TopologyOff);
	Nan::SetPrototypeMethod(tpl, "topologyOff", TopologyOff);

	Nan::SetPrototypeMethod(tpl, "TopologyOn", TopologyOn);
	Nan::SetPrototypeMethod(tpl, "topologyOn", TopologyOn);

}

void VtkDataSetToDataObjectFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkDataSetToDataObjectFilter> native = vtkSmartPointer<vtkDataSetToDataObjectFilter>::New();
		VtkDataSetToDataObjectFilterWrap* obj = new VtkDataSetToDataObjectFilterWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkDataSetToDataObjectFilterWrap::CellDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CellDataOff();
}

void VtkDataSetToDataObjectFilterWrap::CellDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CellDataOn();
}

void VtkDataSetToDataObjectFilterWrap::FieldDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FieldDataOff();
}

void VtkDataSetToDataObjectFilterWrap::FieldDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FieldDataOn();
}

void VtkDataSetToDataObjectFilterWrap::GeometryOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GeometryOff();
}

void VtkDataSetToDataObjectFilterWrap::GeometryOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GeometryOn();
}

void VtkDataSetToDataObjectFilterWrap::GetCellData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCellData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataSetToDataObjectFilterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDataSetToDataObjectFilterWrap::GetFieldData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFieldData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataSetToDataObjectFilterWrap::GetGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGeometry();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataSetToDataObjectFilterWrap::GetPointData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataSetToDataObjectFilterWrap::GetTopology(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTopology();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataSetToDataObjectFilterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetToDataObjectFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	vtkDataSetToDataObjectFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataSetToDataObjectFilterWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetToDataObjectFilterWrap *w = new VtkDataSetToDataObjectFilterWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataSetToDataObjectFilterWrap::PointDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PointDataOff();
}

void VtkDataSetToDataObjectFilterWrap::PointDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PointDataOn();
}

void VtkDataSetToDataObjectFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkDataSetToDataObjectFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkDataSetToDataObjectFilterWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDataSetToDataObjectFilterWrap *w = new VtkDataSetToDataObjectFilterWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetToDataObjectFilterWrap::SetCellData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCellData(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetToDataObjectFilterWrap::SetFieldData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFieldData(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetToDataObjectFilterWrap::SetGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGeometry(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetToDataObjectFilterWrap::SetPointData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPointData(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetToDataObjectFilterWrap::SetTopology(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTopology(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetToDataObjectFilterWrap::TopologyOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TopologyOff();
}

void VtkDataSetToDataObjectFilterWrap::TopologyOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetToDataObjectFilterWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetToDataObjectFilterWrap>(info.Holder());
	vtkDataSetToDataObjectFilter *native = (vtkDataSetToDataObjectFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TopologyOn();
}

