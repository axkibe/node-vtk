/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKABSTRACTPARTICLEWRITERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKABSTRACTPARTICLEWRITERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkAbstractParticleWriter.h>

#include "vtkWriterWrap.h"

class VtkAbstractParticleWriterWrap : public VtkWriterWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkAbstractParticleWriterWrap(vtkSmartPointer<vtkAbstractParticleWriter>);
		VtkAbstractParticleWriterWrap();
		~VtkAbstractParticleWriterWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void CloseFile(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCollectiveIO(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTimeStep(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTimeValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCollectiveIO(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetTimeStep(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetTimeValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetWriteModeToCollective(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetWriteModeToIndependent(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
