/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkPolyDataSilhouetteWrap.h"
#include "vtkObjectWrap.h"
#include "vtkCameraWrap.h"
#include "vtkProp3DWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkPolyDataSilhouetteWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkPolyDataSilhouetteWrap::ptpl;

VtkPolyDataSilhouetteWrap::VtkPolyDataSilhouetteWrap()
{ }

VtkPolyDataSilhouetteWrap::VtkPolyDataSilhouetteWrap(vtkSmartPointer<vtkPolyDataSilhouette> _native)
{ native = _native; }

VtkPolyDataSilhouetteWrap::~VtkPolyDataSilhouetteWrap()
{ }

void VtkPolyDataSilhouetteWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkPolyDataSilhouetteWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkPolyDataSilhouette").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("PolyDataSilhouette").ToLocalChecked(),tpl->GetFunction());
}

void VtkPolyDataSilhouetteWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "BorderEdgesOff", BorderEdgesOff);
	Nan::SetPrototypeMethod(tpl, "borderEdgesOff", BorderEdgesOff);

	Nan::SetPrototypeMethod(tpl, "BorderEdgesOn", BorderEdgesOn);
	Nan::SetPrototypeMethod(tpl, "borderEdgesOn", BorderEdgesOn);

	Nan::SetPrototypeMethod(tpl, "GetBorderEdges", GetBorderEdges);
	Nan::SetPrototypeMethod(tpl, "getBorderEdges", GetBorderEdges);

	Nan::SetPrototypeMethod(tpl, "GetCamera", GetCamera);
	Nan::SetPrototypeMethod(tpl, "getCamera", GetCamera);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDirection", GetDirection);
	Nan::SetPrototypeMethod(tpl, "getDirection", GetDirection);

	Nan::SetPrototypeMethod(tpl, "GetEnableFeatureAngle", GetEnableFeatureAngle);
	Nan::SetPrototypeMethod(tpl, "getEnableFeatureAngle", GetEnableFeatureAngle);

	Nan::SetPrototypeMethod(tpl, "GetFeatureAngle", GetFeatureAngle);
	Nan::SetPrototypeMethod(tpl, "getFeatureAngle", GetFeatureAngle);

	Nan::SetPrototypeMethod(tpl, "GetPieceInvariant", GetPieceInvariant);
	Nan::SetPrototypeMethod(tpl, "getPieceInvariant", GetPieceInvariant);

	Nan::SetPrototypeMethod(tpl, "GetProp3D", GetProp3D);
	Nan::SetPrototypeMethod(tpl, "getProp3D", GetProp3D);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PieceInvariantOff", PieceInvariantOff);
	Nan::SetPrototypeMethod(tpl, "pieceInvariantOff", PieceInvariantOff);

	Nan::SetPrototypeMethod(tpl, "PieceInvariantOn", PieceInvariantOn);
	Nan::SetPrototypeMethod(tpl, "pieceInvariantOn", PieceInvariantOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBorderEdges", SetBorderEdges);
	Nan::SetPrototypeMethod(tpl, "setBorderEdges", SetBorderEdges);

	Nan::SetPrototypeMethod(tpl, "SetCamera", SetCamera);
	Nan::SetPrototypeMethod(tpl, "setCamera", SetCamera);

	Nan::SetPrototypeMethod(tpl, "SetDirection", SetDirection);
	Nan::SetPrototypeMethod(tpl, "setDirection", SetDirection);

	Nan::SetPrototypeMethod(tpl, "SetDirectionToCameraOrigin", SetDirectionToCameraOrigin);
	Nan::SetPrototypeMethod(tpl, "setDirectionToCameraOrigin", SetDirectionToCameraOrigin);

	Nan::SetPrototypeMethod(tpl, "SetDirectionToCameraVector", SetDirectionToCameraVector);
	Nan::SetPrototypeMethod(tpl, "setDirectionToCameraVector", SetDirectionToCameraVector);

	Nan::SetPrototypeMethod(tpl, "SetDirectionToSpecifiedOrigin", SetDirectionToSpecifiedOrigin);
	Nan::SetPrototypeMethod(tpl, "setDirectionToSpecifiedOrigin", SetDirectionToSpecifiedOrigin);

	Nan::SetPrototypeMethod(tpl, "SetDirectionToSpecifiedVector", SetDirectionToSpecifiedVector);
	Nan::SetPrototypeMethod(tpl, "setDirectionToSpecifiedVector", SetDirectionToSpecifiedVector);

	Nan::SetPrototypeMethod(tpl, "SetEnableFeatureAngle", SetEnableFeatureAngle);
	Nan::SetPrototypeMethod(tpl, "setEnableFeatureAngle", SetEnableFeatureAngle);

	Nan::SetPrototypeMethod(tpl, "SetFeatureAngle", SetFeatureAngle);
	Nan::SetPrototypeMethod(tpl, "setFeatureAngle", SetFeatureAngle);

	Nan::SetPrototypeMethod(tpl, "SetOrigin", SetOrigin);
	Nan::SetPrototypeMethod(tpl, "setOrigin", SetOrigin);

	Nan::SetPrototypeMethod(tpl, "SetPieceInvariant", SetPieceInvariant);
	Nan::SetPrototypeMethod(tpl, "setPieceInvariant", SetPieceInvariant);

	Nan::SetPrototypeMethod(tpl, "SetProp3D", SetProp3D);
	Nan::SetPrototypeMethod(tpl, "setProp3D", SetProp3D);

	Nan::SetPrototypeMethod(tpl, "SetVector", SetVector);
	Nan::SetPrototypeMethod(tpl, "setVector", SetVector);

}

void VtkPolyDataSilhouetteWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkPolyDataSilhouette> native = vtkSmartPointer<vtkPolyDataSilhouette>::New();
		VtkPolyDataSilhouetteWrap* obj = new VtkPolyDataSilhouetteWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkPolyDataSilhouetteWrap::BorderEdgesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BorderEdgesOff();
}

void VtkPolyDataSilhouetteWrap::BorderEdgesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BorderEdgesOn();
}

void VtkPolyDataSilhouetteWrap::GetBorderEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBorderEdges();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataSilhouetteWrap::GetCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	vtkCamera * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCamera();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkCameraWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCameraWrap *w = new VtkCameraWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataSilhouetteWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPolyDataSilhouetteWrap::GetDirection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDirection();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataSilhouetteWrap::GetEnableFeatureAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEnableFeatureAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataSilhouetteWrap::GetFeatureAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFeatureAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataSilhouetteWrap::GetPieceInvariant(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPieceInvariant();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataSilhouetteWrap::GetProp3D(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	vtkProp3D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProp3D();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkProp3DWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkProp3DWrap *w = new VtkProp3DWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataSilhouetteWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataSilhouetteWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	vtkPolyDataSilhouette * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPolyDataSilhouetteWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataSilhouetteWrap *w = new VtkPolyDataSilhouetteWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataSilhouetteWrap::PieceInvariantOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PieceInvariantOff();
}

void VtkPolyDataSilhouetteWrap::PieceInvariantOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PieceInvariantOn();
}

void VtkPolyDataSilhouetteWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkPolyDataSilhouette * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkPolyDataSilhouetteWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPolyDataSilhouetteWrap *w = new VtkPolyDataSilhouetteWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataSilhouetteWrap::SetBorderEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBorderEdges(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataSilhouetteWrap::SetCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkCameraWrap *a0 = ObjectWrap::Unwrap<VtkCameraWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCamera(
			(vtkCamera *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataSilhouetteWrap::SetDirection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDirection(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataSilhouetteWrap::SetDirectionToCameraOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDirectionToCameraOrigin();
}

void VtkPolyDataSilhouetteWrap::SetDirectionToCameraVector(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDirectionToCameraVector();
}

void VtkPolyDataSilhouetteWrap::SetDirectionToSpecifiedOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDirectionToSpecifiedOrigin();
}

void VtkPolyDataSilhouetteWrap::SetDirectionToSpecifiedVector(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetDirectionToSpecifiedVector();
}

void VtkPolyDataSilhouetteWrap::SetEnableFeatureAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEnableFeatureAngle(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataSilhouetteWrap::SetFeatureAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFeatureAngle(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataSilhouetteWrap::SetOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetOrigin(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataSilhouetteWrap::SetPieceInvariant(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPieceInvariant(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataSilhouetteWrap::SetProp3D(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkProp3DWrap *a0 = ObjectWrap::Unwrap<VtkProp3DWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProp3D(
			(vtkProp3D *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataSilhouetteWrap::SetVector(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataSilhouetteWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataSilhouetteWrap>(info.Holder());
	vtkPolyDataSilhouette *native = (vtkPolyDataSilhouette *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetVector(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

