/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkOverlappingAMRAlgorithmWrap.h"
#include "vtkAMRGaussianPulseSourceWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkAMRGaussianPulseSourceWrap::constructor;

VtkAMRGaussianPulseSourceWrap::VtkAMRGaussianPulseSourceWrap()
{ }

VtkAMRGaussianPulseSourceWrap::VtkAMRGaussianPulseSourceWrap(vtkSmartPointer<vtkAMRGaussianPulseSource> _native)
{ native = _native; }

VtkAMRGaussianPulseSourceWrap::~VtkAMRGaussianPulseSourceWrap()
{ }

void VtkAMRGaussianPulseSourceWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkAMRGaussianPulseSourceWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkUniformGridAMRAlgorithmWrap::InitTpl(tpl);
	VtkOverlappingAMRAlgorithmWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkAMRGaussianPulseSource").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("AMRGaussianPulseSource").ToLocalChecked(),tpl->GetFunction());
}

void VtkAMRGaussianPulseSourceWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetPulseAmplitude", GetPulseAmplitude);
	Nan::SetPrototypeMethod(tpl, "getPulseAmplitude", GetPulseAmplitude);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetDimension", SetDimension);
	Nan::SetPrototypeMethod(tpl, "setDimension", SetDimension);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfLevels", SetNumberOfLevels);
	Nan::SetPrototypeMethod(tpl, "setNumberOfLevels", SetNumberOfLevels);

	Nan::SetPrototypeMethod(tpl, "SetPulseAmplitude", SetPulseAmplitude);
	Nan::SetPrototypeMethod(tpl, "setPulseAmplitude", SetPulseAmplitude);

	Nan::SetPrototypeMethod(tpl, "SetPulseOrigin", SetPulseOrigin);
	Nan::SetPrototypeMethod(tpl, "setPulseOrigin", SetPulseOrigin);

	Nan::SetPrototypeMethod(tpl, "SetPulseWidth", SetPulseWidth);
	Nan::SetPrototypeMethod(tpl, "setPulseWidth", SetPulseWidth);

	Nan::SetPrototypeMethod(tpl, "SetRefinementRatio", SetRefinementRatio);
	Nan::SetPrototypeMethod(tpl, "setRefinementRatio", SetRefinementRatio);

	Nan::SetPrototypeMethod(tpl, "SetRootSpacing", SetRootSpacing);
	Nan::SetPrototypeMethod(tpl, "setRootSpacing", SetRootSpacing);

	Nan::SetPrototypeMethod(tpl, "SetXPulseOrigin", SetXPulseOrigin);
	Nan::SetPrototypeMethod(tpl, "setXPulseOrigin", SetXPulseOrigin);

	Nan::SetPrototypeMethod(tpl, "SetXPulseWidth", SetXPulseWidth);
	Nan::SetPrototypeMethod(tpl, "setXPulseWidth", SetXPulseWidth);

	Nan::SetPrototypeMethod(tpl, "SetYPulseOrigin", SetYPulseOrigin);
	Nan::SetPrototypeMethod(tpl, "setYPulseOrigin", SetYPulseOrigin);

	Nan::SetPrototypeMethod(tpl, "SetYPulseWidth", SetYPulseWidth);
	Nan::SetPrototypeMethod(tpl, "setYPulseWidth", SetYPulseWidth);

	Nan::SetPrototypeMethod(tpl, "SetZPulseOrigin", SetZPulseOrigin);
	Nan::SetPrototypeMethod(tpl, "setZPulseOrigin", SetZPulseOrigin);

	Nan::SetPrototypeMethod(tpl, "SetZPulseWidth", SetZPulseWidth);
	Nan::SetPrototypeMethod(tpl, "setZPulseWidth", SetZPulseWidth);

}

void VtkAMRGaussianPulseSourceWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkAMRGaussianPulseSource> native = vtkSmartPointer<vtkAMRGaussianPulseSource>::New();
		VtkAMRGaussianPulseSourceWrap* obj = new VtkAMRGaussianPulseSourceWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkAMRGaussianPulseSourceWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAMRGaussianPulseSourceWrap::GetPulseAmplitude(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPulseAmplitude();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAMRGaussianPulseSourceWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	vtkAMRGaussianPulseSource * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkAMRGaussianPulseSourceWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAMRGaussianPulseSourceWrap *w = new VtkAMRGaussianPulseSourceWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAMRGaussianPulseSourceWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkAMRGaussianPulseSource * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkAMRGaussianPulseSourceWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAMRGaussianPulseSourceWrap *w = new VtkAMRGaussianPulseSourceWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetDimension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDimension(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetNumberOfLevels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfLevels(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetPulseAmplitude(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPulseAmplitude(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetPulseOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetPulseOrigin(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetPulseWidth(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetPulseWidth(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetRefinementRatio(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRefinementRatio(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetRootSpacing(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRootSpacing(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetXPulseOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetXPulseOrigin(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetXPulseWidth(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetXPulseWidth(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetYPulseOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetYPulseOrigin(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetYPulseWidth(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetYPulseWidth(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetZPulseOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetZPulseOrigin(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAMRGaussianPulseSourceWrap::SetZPulseWidth(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAMRGaussianPulseSourceWrap *wrapper = ObjectWrap::Unwrap<VtkAMRGaussianPulseSourceWrap>(info.Holder());
	vtkAMRGaussianPulseSource *native = (vtkAMRGaussianPulseSource *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetZPulseWidth(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

