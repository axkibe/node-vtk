/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkDataSetAlgorithmWrap.h"
#include "vtkMergeFilterWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkAlgorithmOutputWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkMergeFilterWrap::constructor;

VtkMergeFilterWrap::VtkMergeFilterWrap()
{ }

VtkMergeFilterWrap::VtkMergeFilterWrap(vtkSmartPointer<vtkMergeFilter> _native)
{ native = _native; }

VtkMergeFilterWrap::~VtkMergeFilterWrap()
{ }

void VtkMergeFilterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkMergeFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkDataSetAlgorithmWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkMergeFilter").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("MergeFilter").ToLocalChecked(),tpl->GetFunction());
}

void VtkMergeFilterWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "AddField", AddField);
	Nan::SetPrototypeMethod(tpl, "addField", AddField);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetGeometry", GetGeometry);
	Nan::SetPrototypeMethod(tpl, "getGeometry", GetGeometry);

	Nan::SetPrototypeMethod(tpl, "GetNormals", GetNormals);
	Nan::SetPrototypeMethod(tpl, "getNormals", GetNormals);

	Nan::SetPrototypeMethod(tpl, "GetScalars", GetScalars);
	Nan::SetPrototypeMethod(tpl, "getScalars", GetScalars);

	Nan::SetPrototypeMethod(tpl, "GetTCoords", GetTCoords);
	Nan::SetPrototypeMethod(tpl, "getTCoords", GetTCoords);

	Nan::SetPrototypeMethod(tpl, "GetTensors", GetTensors);
	Nan::SetPrototypeMethod(tpl, "getTensors", GetTensors);

	Nan::SetPrototypeMethod(tpl, "GetVectors", GetVectors);
	Nan::SetPrototypeMethod(tpl, "getVectors", GetVectors);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetGeometryConnection", SetGeometryConnection);
	Nan::SetPrototypeMethod(tpl, "setGeometryConnection", SetGeometryConnection);

	Nan::SetPrototypeMethod(tpl, "SetGeometryInputData", SetGeometryInputData);
	Nan::SetPrototypeMethod(tpl, "setGeometryInputData", SetGeometryInputData);

	Nan::SetPrototypeMethod(tpl, "SetNormalsConnection", SetNormalsConnection);
	Nan::SetPrototypeMethod(tpl, "setNormalsConnection", SetNormalsConnection);

	Nan::SetPrototypeMethod(tpl, "SetNormalsData", SetNormalsData);
	Nan::SetPrototypeMethod(tpl, "setNormalsData", SetNormalsData);

	Nan::SetPrototypeMethod(tpl, "SetScalarsConnection", SetScalarsConnection);
	Nan::SetPrototypeMethod(tpl, "setScalarsConnection", SetScalarsConnection);

	Nan::SetPrototypeMethod(tpl, "SetScalarsData", SetScalarsData);
	Nan::SetPrototypeMethod(tpl, "setScalarsData", SetScalarsData);

	Nan::SetPrototypeMethod(tpl, "SetTCoordsConnection", SetTCoordsConnection);
	Nan::SetPrototypeMethod(tpl, "setTCoordsConnection", SetTCoordsConnection);

	Nan::SetPrototypeMethod(tpl, "SetTCoordsData", SetTCoordsData);
	Nan::SetPrototypeMethod(tpl, "setTCoordsData", SetTCoordsData);

	Nan::SetPrototypeMethod(tpl, "SetTensorsConnection", SetTensorsConnection);
	Nan::SetPrototypeMethod(tpl, "setTensorsConnection", SetTensorsConnection);

	Nan::SetPrototypeMethod(tpl, "SetTensorsData", SetTensorsData);
	Nan::SetPrototypeMethod(tpl, "setTensorsData", SetTensorsData);

	Nan::SetPrototypeMethod(tpl, "SetVectorsConnection", SetVectorsConnection);
	Nan::SetPrototypeMethod(tpl, "setVectorsConnection", SetVectorsConnection);

	Nan::SetPrototypeMethod(tpl, "SetVectorsData", SetVectorsData);
	Nan::SetPrototypeMethod(tpl, "setVectorsData", SetVectorsData);

}

void VtkMergeFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkMergeFilter> native = vtkSmartPointer<vtkMergeFilter>::New();
		VtkMergeFilterWrap* obj = new VtkMergeFilterWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkMergeFilterWrap::AddField(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkDataSetWrap *a1 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->AddField(
				*a0,
				(vtkDataSet *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMergeFilterWrap::GetGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGeometry();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataSetWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMergeFilterWrap::GetNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormals();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataSetWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMergeFilterWrap::GetScalars(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScalars();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataSetWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMergeFilterWrap::GetTCoords(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTCoords();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataSetWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMergeFilterWrap::GetTensors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTensors();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataSetWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMergeFilterWrap::GetVectors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVectors();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataSetWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMergeFilterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	vtkMergeFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkMergeFilterWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMergeFilterWrap *w = new VtkMergeFilterWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMergeFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkMergeFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkMergeFilterWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkMergeFilterWrap *w = new VtkMergeFilterWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::SetGeometryConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGeometryConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::SetGeometryInputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGeometryInputData(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::SetNormalsConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalsConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::SetNormalsData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalsData(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::SetScalarsConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScalarsConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::SetScalarsData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScalarsData(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::SetTCoordsConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTCoordsConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::SetTCoordsData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTCoordsData(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::SetTensorsConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTensorsConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::SetTensorsData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTensorsData(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::SetVectorsConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVectorsConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMergeFilterWrap::SetVectorsData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMergeFilterWrap *wrapper = ObjectWrap::Unwrap<VtkMergeFilterWrap>(info.Holder());
	vtkMergeFilter *native = (vtkMergeFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVectorsData(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

