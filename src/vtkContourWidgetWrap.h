/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKCONTOURWIDGETWRAP_H
#define NATIVE_EXTENSION_VTK_VTKCONTOURWIDGETWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkContourWidget.h>

#include "vtkAbstractWidgetWrap.h"

class VtkContourWidgetWrap : public VtkAbstractWidgetWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkContourWidgetWrap(vtkSmartPointer<vtkContourWidget>);
		VtkContourWidgetWrap();
		~VtkContourWidgetWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AllowNodePickingOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void AllowNodePickingOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CloseLoop(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ContinuousDrawOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ContinuousDrawOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CreateDefaultRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void FollowCursorOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void FollowCursorOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAllowNodePicking(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetContinuousDraw(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetContourRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFollowCursor(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetWidgetState(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAllowNodePicking(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetContinuousDraw(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetEnabled(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFollowCursor(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetWidgetState(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
