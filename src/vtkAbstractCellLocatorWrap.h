/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKABSTRACTCELLLOCATORWRAP_H
#define NATIVE_EXTENSION_VTK_VTKABSTRACTCELLLOCATORWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkAbstractCellLocator.h>

#include "vtkLocatorWrap.h"

class VtkAbstractCellLocatorWrap : public VtkLocatorWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkAbstractCellLocatorWrap(vtkSmartPointer<vtkAbstractCellLocator>);
		VtkAbstractCellLocatorWrap();
		~VtkAbstractCellLocatorWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void CacheCellBoundsOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CacheCellBoundsOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCacheCellBounds(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLazyEvaluation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfCellsPerNode(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfCellsPerNodeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfCellsPerNodeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetRetainCellLists(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetUseExistingSearchStructure(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void LazyEvaluationOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void LazyEvaluationOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RetainCellListsOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RetainCellListsOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCacheCellBounds(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLazyEvaluation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetNumberOfCellsPerNode(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRetainCellLists(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetUseExistingSearchStructure(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UseExistingSearchStructureOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UseExistingSearchStructureOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
