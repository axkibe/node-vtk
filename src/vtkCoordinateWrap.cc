/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkCoordinateWrap.h"
#include "vtkViewportWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkCoordinateWrap::constructor;

VtkCoordinateWrap::VtkCoordinateWrap()
{ }

VtkCoordinateWrap::VtkCoordinateWrap(vtkSmartPointer<vtkCoordinate> _native)
{ native = _native; }

VtkCoordinateWrap::~VtkCoordinateWrap()
{ }

void VtkCoordinateWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkCoordinateWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkCoordinate").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("Coordinate").ToLocalChecked(),tpl->GetFunction());
}

void VtkCoordinateWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetCoordinateSystem", GetCoordinateSystem);
	Nan::SetPrototypeMethod(tpl, "getCoordinateSystem", GetCoordinateSystem);

	Nan::SetPrototypeMethod(tpl, "GetCoordinateSystemAsString", GetCoordinateSystemAsString);
	Nan::SetPrototypeMethod(tpl, "getCoordinateSystemAsString", GetCoordinateSystemAsString);

	Nan::SetPrototypeMethod(tpl, "GetReferenceCoordinate", GetReferenceCoordinate);
	Nan::SetPrototypeMethod(tpl, "getReferenceCoordinate", GetReferenceCoordinate);

	Nan::SetPrototypeMethod(tpl, "GetViewport", GetViewport);
	Nan::SetPrototypeMethod(tpl, "getViewport", GetViewport);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCoordinateSystem", SetCoordinateSystem);
	Nan::SetPrototypeMethod(tpl, "setCoordinateSystem", SetCoordinateSystem);

	Nan::SetPrototypeMethod(tpl, "SetCoordinateSystemToDisplay", SetCoordinateSystemToDisplay);
	Nan::SetPrototypeMethod(tpl, "setCoordinateSystemToDisplay", SetCoordinateSystemToDisplay);

	Nan::SetPrototypeMethod(tpl, "SetCoordinateSystemToNormalizedDisplay", SetCoordinateSystemToNormalizedDisplay);
	Nan::SetPrototypeMethod(tpl, "setCoordinateSystemToNormalizedDisplay", SetCoordinateSystemToNormalizedDisplay);

	Nan::SetPrototypeMethod(tpl, "SetCoordinateSystemToNormalizedViewport", SetCoordinateSystemToNormalizedViewport);
	Nan::SetPrototypeMethod(tpl, "setCoordinateSystemToNormalizedViewport", SetCoordinateSystemToNormalizedViewport);

	Nan::SetPrototypeMethod(tpl, "SetCoordinateSystemToView", SetCoordinateSystemToView);
	Nan::SetPrototypeMethod(tpl, "setCoordinateSystemToView", SetCoordinateSystemToView);

	Nan::SetPrototypeMethod(tpl, "SetCoordinateSystemToViewport", SetCoordinateSystemToViewport);
	Nan::SetPrototypeMethod(tpl, "setCoordinateSystemToViewport", SetCoordinateSystemToViewport);

	Nan::SetPrototypeMethod(tpl, "SetCoordinateSystemToWorld", SetCoordinateSystemToWorld);
	Nan::SetPrototypeMethod(tpl, "setCoordinateSystemToWorld", SetCoordinateSystemToWorld);

	Nan::SetPrototypeMethod(tpl, "SetReferenceCoordinate", SetReferenceCoordinate);
	Nan::SetPrototypeMethod(tpl, "setReferenceCoordinate", SetReferenceCoordinate);

	Nan::SetPrototypeMethod(tpl, "SetValue", SetValue);
	Nan::SetPrototypeMethod(tpl, "setValue", SetValue);

	Nan::SetPrototypeMethod(tpl, "SetViewport", SetViewport);
	Nan::SetPrototypeMethod(tpl, "setViewport", SetViewport);

}

void VtkCoordinateWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkCoordinate> native = vtkSmartPointer<vtkCoordinate>::New();
		VtkCoordinateWrap* obj = new VtkCoordinateWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkCoordinateWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCoordinateWrap::GetCoordinateSystem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCoordinateSystem();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkCoordinateWrap::GetCoordinateSystemAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCoordinateSystemAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkCoordinateWrap::GetReferenceCoordinate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	vtkCoordinate * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetReferenceCoordinate();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkCoordinateWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCoordinateWrap *w = new VtkCoordinateWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCoordinateWrap::GetViewport(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	vtkViewport * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetViewport();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkViewportWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkViewportWrap *w = new VtkViewportWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCoordinateWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCoordinateWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	vtkCoordinate * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkCoordinateWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCoordinateWrap *w = new VtkCoordinateWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkCoordinateWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkCoordinate * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkCoordinateWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkCoordinateWrap *w = new VtkCoordinateWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCoordinateWrap::SetCoordinateSystem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCoordinateSystem(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCoordinateWrap::SetCoordinateSystemToDisplay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetCoordinateSystemToDisplay();
}

void VtkCoordinateWrap::SetCoordinateSystemToNormalizedDisplay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetCoordinateSystemToNormalizedDisplay();
}

void VtkCoordinateWrap::SetCoordinateSystemToNormalizedViewport(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetCoordinateSystemToNormalizedViewport();
}

void VtkCoordinateWrap::SetCoordinateSystemToView(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetCoordinateSystemToView();
}

void VtkCoordinateWrap::SetCoordinateSystemToViewport(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetCoordinateSystemToViewport();
}

void VtkCoordinateWrap::SetCoordinateSystemToWorld(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetCoordinateSystemToWorld();
}

void VtkCoordinateWrap::SetReferenceCoordinate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkCoordinateWrap *a0 = ObjectWrap::Unwrap<VtkCoordinateWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetReferenceCoordinate(
			(vtkCoordinate *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCoordinateWrap::SetValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetValue(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetValue(
				info[0]->NumberValue(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkCoordinateWrap::SetViewport(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkCoordinateWrap *wrapper = ObjectWrap::Unwrap<VtkCoordinateWrap>(info.Holder());
	vtkCoordinate *native = (vtkCoordinate *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetViewport(
			(vtkViewport *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

