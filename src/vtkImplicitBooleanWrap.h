/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKIMPLICITBOOLEANWRAP_H
#define NATIVE_EXTENSION_VTK_VTKIMPLICITBOOLEANWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkImplicitBoolean.h>

#include "vtkImplicitFunctionWrap.h"

class VtkImplicitBooleanWrap : public VtkImplicitFunctionWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkImplicitBooleanWrap(vtkSmartPointer<vtkImplicitBoolean>);
		VtkImplicitBooleanWrap();
		~VtkImplicitBooleanWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AddFunction(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EvaluateFunction(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFunction(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOperationType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOperationTypeAsString(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOperationTypeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOperationTypeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RemoveFunction(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetOperationType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetOperationTypeToDifference(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetOperationTypeToIntersection(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetOperationTypeToUnion(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetOperationTypeToUnionOfMagnitudes(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
