/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKABSTRACTPOLYGONALHANDLEREPRESENTATION3DWRAP_H
#define NATIVE_EXTENSION_VTK_VTKABSTRACTPOLYGONALHANDLEREPRESENTATION3DWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkAbstractPolygonalHandleRepresentation3D.h>

#include "vtkHandleRepresentationWrap.h"

class VtkAbstractPolygonalHandleRepresentation3DWrap : public VtkHandleRepresentationWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkAbstractPolygonalHandleRepresentation3DWrap(vtkSmartPointer<vtkAbstractPolygonalHandleRepresentation3D>);
		VtkAbstractPolygonalHandleRepresentation3DWrap();
		~VtkAbstractPolygonalHandleRepresentation3DWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void BuildRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ComputeInteractionState(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetActors(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHandle(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHandleVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLabelText(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLabelTextActor(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLabelVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSelectedProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSmoothMotion(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTransform(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void HandleVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void HandleVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void HasTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Highlight(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void LabelVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void LabelVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RenderTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetHandle(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetHandleVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLabelText(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLabelTextScale(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetLabelVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSelectedProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSmoothMotion(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetUniformScale(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SmoothMotionOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SmoothMotionOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
