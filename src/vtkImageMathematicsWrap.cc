/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkThreadedImageAlgorithmWrap.h"
#include "vtkImageMathematicsWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDataObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkImageMathematicsWrap::constructor;

VtkImageMathematicsWrap::VtkImageMathematicsWrap()
{ }

VtkImageMathematicsWrap::VtkImageMathematicsWrap(vtkSmartPointer<vtkImageMathematics> _native)
{ native = _native; }

VtkImageMathematicsWrap::~VtkImageMathematicsWrap()
{ }

void VtkImageMathematicsWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkImageMathematicsWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkImageAlgorithmWrap::InitTpl(tpl);
	VtkThreadedImageAlgorithmWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkImageMathematics").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ImageMathematics").ToLocalChecked(),tpl->GetFunction());
}

void VtkImageMathematicsWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "DivideByZeroToCOff", DivideByZeroToCOff);
	Nan::SetPrototypeMethod(tpl, "divideByZeroToCOff", DivideByZeroToCOff);

	Nan::SetPrototypeMethod(tpl, "DivideByZeroToCOn", DivideByZeroToCOn);
	Nan::SetPrototypeMethod(tpl, "divideByZeroToCOn", DivideByZeroToCOn);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetConstantC", GetConstantC);
	Nan::SetPrototypeMethod(tpl, "getConstantC", GetConstantC);

	Nan::SetPrototypeMethod(tpl, "GetConstantK", GetConstantK);
	Nan::SetPrototypeMethod(tpl, "getConstantK", GetConstantK);

	Nan::SetPrototypeMethod(tpl, "GetDivideByZeroToC", GetDivideByZeroToC);
	Nan::SetPrototypeMethod(tpl, "getDivideByZeroToC", GetDivideByZeroToC);

	Nan::SetPrototypeMethod(tpl, "GetOperation", GetOperation);
	Nan::SetPrototypeMethod(tpl, "getOperation", GetOperation);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetConstantC", SetConstantC);
	Nan::SetPrototypeMethod(tpl, "setConstantC", SetConstantC);

	Nan::SetPrototypeMethod(tpl, "SetConstantK", SetConstantK);
	Nan::SetPrototypeMethod(tpl, "setConstantK", SetConstantK);

	Nan::SetPrototypeMethod(tpl, "SetDivideByZeroToC", SetDivideByZeroToC);
	Nan::SetPrototypeMethod(tpl, "setDivideByZeroToC", SetDivideByZeroToC);

	Nan::SetPrototypeMethod(tpl, "SetInput1Data", SetInput1Data);
	Nan::SetPrototypeMethod(tpl, "setInput1Data", SetInput1Data);

	Nan::SetPrototypeMethod(tpl, "SetInput2Data", SetInput2Data);
	Nan::SetPrototypeMethod(tpl, "setInput2Data", SetInput2Data);

	Nan::SetPrototypeMethod(tpl, "SetOperation", SetOperation);
	Nan::SetPrototypeMethod(tpl, "setOperation", SetOperation);

	Nan::SetPrototypeMethod(tpl, "SetOperationToATAN", SetOperationToATAN);
	Nan::SetPrototypeMethod(tpl, "setOperationToATAN", SetOperationToATAN);

	Nan::SetPrototypeMethod(tpl, "SetOperationToATAN2", SetOperationToATAN2);
	Nan::SetPrototypeMethod(tpl, "setOperationToATAN2", SetOperationToATAN2);

	Nan::SetPrototypeMethod(tpl, "SetOperationToAbsoluteValue", SetOperationToAbsoluteValue);
	Nan::SetPrototypeMethod(tpl, "setOperationToAbsoluteValue", SetOperationToAbsoluteValue);

	Nan::SetPrototypeMethod(tpl, "SetOperationToAdd", SetOperationToAdd);
	Nan::SetPrototypeMethod(tpl, "setOperationToAdd", SetOperationToAdd);

	Nan::SetPrototypeMethod(tpl, "SetOperationToAddConstant", SetOperationToAddConstant);
	Nan::SetPrototypeMethod(tpl, "setOperationToAddConstant", SetOperationToAddConstant);

	Nan::SetPrototypeMethod(tpl, "SetOperationToComplexMultiply", SetOperationToComplexMultiply);
	Nan::SetPrototypeMethod(tpl, "setOperationToComplexMultiply", SetOperationToComplexMultiply);

	Nan::SetPrototypeMethod(tpl, "SetOperationToConjugate", SetOperationToConjugate);
	Nan::SetPrototypeMethod(tpl, "setOperationToConjugate", SetOperationToConjugate);

	Nan::SetPrototypeMethod(tpl, "SetOperationToCos", SetOperationToCos);
	Nan::SetPrototypeMethod(tpl, "setOperationToCos", SetOperationToCos);

	Nan::SetPrototypeMethod(tpl, "SetOperationToDivide", SetOperationToDivide);
	Nan::SetPrototypeMethod(tpl, "setOperationToDivide", SetOperationToDivide);

	Nan::SetPrototypeMethod(tpl, "SetOperationToExp", SetOperationToExp);
	Nan::SetPrototypeMethod(tpl, "setOperationToExp", SetOperationToExp);

	Nan::SetPrototypeMethod(tpl, "SetOperationToInvert", SetOperationToInvert);
	Nan::SetPrototypeMethod(tpl, "setOperationToInvert", SetOperationToInvert);

	Nan::SetPrototypeMethod(tpl, "SetOperationToLog", SetOperationToLog);
	Nan::SetPrototypeMethod(tpl, "setOperationToLog", SetOperationToLog);

	Nan::SetPrototypeMethod(tpl, "SetOperationToMax", SetOperationToMax);
	Nan::SetPrototypeMethod(tpl, "setOperationToMax", SetOperationToMax);

	Nan::SetPrototypeMethod(tpl, "SetOperationToMin", SetOperationToMin);
	Nan::SetPrototypeMethod(tpl, "setOperationToMin", SetOperationToMin);

	Nan::SetPrototypeMethod(tpl, "SetOperationToMultiply", SetOperationToMultiply);
	Nan::SetPrototypeMethod(tpl, "setOperationToMultiply", SetOperationToMultiply);

	Nan::SetPrototypeMethod(tpl, "SetOperationToMultiplyByK", SetOperationToMultiplyByK);
	Nan::SetPrototypeMethod(tpl, "setOperationToMultiplyByK", SetOperationToMultiplyByK);

	Nan::SetPrototypeMethod(tpl, "SetOperationToReplaceCByK", SetOperationToReplaceCByK);
	Nan::SetPrototypeMethod(tpl, "setOperationToReplaceCByK", SetOperationToReplaceCByK);

	Nan::SetPrototypeMethod(tpl, "SetOperationToSin", SetOperationToSin);
	Nan::SetPrototypeMethod(tpl, "setOperationToSin", SetOperationToSin);

	Nan::SetPrototypeMethod(tpl, "SetOperationToSquare", SetOperationToSquare);
	Nan::SetPrototypeMethod(tpl, "setOperationToSquare", SetOperationToSquare);

	Nan::SetPrototypeMethod(tpl, "SetOperationToSquareRoot", SetOperationToSquareRoot);
	Nan::SetPrototypeMethod(tpl, "setOperationToSquareRoot", SetOperationToSquareRoot);

	Nan::SetPrototypeMethod(tpl, "SetOperationToSubtract", SetOperationToSubtract);
	Nan::SetPrototypeMethod(tpl, "setOperationToSubtract", SetOperationToSubtract);

}

void VtkImageMathematicsWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageMathematics> native = vtkSmartPointer<vtkImageMathematics>::New();
		VtkImageMathematicsWrap* obj = new VtkImageMathematicsWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageMathematicsWrap::DivideByZeroToCOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DivideByZeroToCOff();
}

void VtkImageMathematicsWrap::DivideByZeroToCOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DivideByZeroToCOn();
}

void VtkImageMathematicsWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageMathematicsWrap::GetConstantC(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConstantC();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageMathematicsWrap::GetConstantK(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConstantK();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageMathematicsWrap::GetDivideByZeroToC(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDivideByZeroToC();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageMathematicsWrap::GetOperation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOperation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageMathematicsWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMathematicsWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	vtkImageMathematics * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImageMathematicsWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageMathematicsWrap *w = new VtkImageMathematicsWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageMathematicsWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageMathematics * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkImageMathematicsWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageMathematicsWrap *w = new VtkImageMathematicsWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMathematicsWrap::SetConstantC(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConstantC(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMathematicsWrap::SetConstantK(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConstantK(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMathematicsWrap::SetDivideByZeroToC(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDivideByZeroToC(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMathematicsWrap::SetInput1Data(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInput1Data(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMathematicsWrap::SetInput2Data(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInput2Data(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMathematicsWrap::SetOperation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOperation(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMathematicsWrap::SetOperationToATAN(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToATAN();
}

void VtkImageMathematicsWrap::SetOperationToATAN2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToATAN2();
}

void VtkImageMathematicsWrap::SetOperationToAbsoluteValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToAbsoluteValue();
}

void VtkImageMathematicsWrap::SetOperationToAdd(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToAdd();
}

void VtkImageMathematicsWrap::SetOperationToAddConstant(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToAddConstant();
}

void VtkImageMathematicsWrap::SetOperationToComplexMultiply(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToComplexMultiply();
}

void VtkImageMathematicsWrap::SetOperationToConjugate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToConjugate();
}

void VtkImageMathematicsWrap::SetOperationToCos(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToCos();
}

void VtkImageMathematicsWrap::SetOperationToDivide(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToDivide();
}

void VtkImageMathematicsWrap::SetOperationToExp(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToExp();
}

void VtkImageMathematicsWrap::SetOperationToInvert(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToInvert();
}

void VtkImageMathematicsWrap::SetOperationToLog(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToLog();
}

void VtkImageMathematicsWrap::SetOperationToMax(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToMax();
}

void VtkImageMathematicsWrap::SetOperationToMin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToMin();
}

void VtkImageMathematicsWrap::SetOperationToMultiply(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToMultiply();
}

void VtkImageMathematicsWrap::SetOperationToMultiplyByK(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToMultiplyByK();
}

void VtkImageMathematicsWrap::SetOperationToReplaceCByK(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToReplaceCByK();
}

void VtkImageMathematicsWrap::SetOperationToSin(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToSin();
}

void VtkImageMathematicsWrap::SetOperationToSquare(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToSquare();
}

void VtkImageMathematicsWrap::SetOperationToSquareRoot(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToSquareRoot();
}

void VtkImageMathematicsWrap::SetOperationToSubtract(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMathematicsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMathematicsWrap>(info.Holder());
	vtkImageMathematics *native = (vtkImageMathematics *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOperationToSubtract();
}

