/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkHyperTreeCursorWrap.h"
#include "vtkHyperTreeWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkHyperTreeCursorWrap::constructor;

VtkHyperTreeCursorWrap::VtkHyperTreeCursorWrap()
{ }

VtkHyperTreeCursorWrap::VtkHyperTreeCursorWrap(vtkSmartPointer<vtkHyperTreeCursor> _native)
{ native = _native; }

VtkHyperTreeCursorWrap::~VtkHyperTreeCursorWrap()
{ }

void VtkHyperTreeCursorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkHyperTreeCursorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkHyperTreeCursor").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("HyperTreeCursor").ToLocalChecked(),tpl->GetFunction());
}

void VtkHyperTreeCursorWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "Clone", Clone);
	Nan::SetPrototypeMethod(tpl, "clone", Clone);

	Nan::SetPrototypeMethod(tpl, "GetChildIndex", GetChildIndex);
	Nan::SetPrototypeMethod(tpl, "getChildIndex", GetChildIndex);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetCurrentLevel", GetCurrentLevel);
	Nan::SetPrototypeMethod(tpl, "getCurrentLevel", GetCurrentLevel);

	Nan::SetPrototypeMethod(tpl, "GetDimension", GetDimension);
	Nan::SetPrototypeMethod(tpl, "getDimension", GetDimension);

	Nan::SetPrototypeMethod(tpl, "GetIndex", GetIndex);
	Nan::SetPrototypeMethod(tpl, "getIndex", GetIndex);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfChildren", GetNumberOfChildren);
	Nan::SetPrototypeMethod(tpl, "getNumberOfChildren", GetNumberOfChildren);

	Nan::SetPrototypeMethod(tpl, "GetTree", GetTree);
	Nan::SetPrototypeMethod(tpl, "getTree", GetTree);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SameTree", SameTree);
	Nan::SetPrototypeMethod(tpl, "sameTree", SameTree);

	Nan::SetPrototypeMethod(tpl, "ToChild", ToChild);
	Nan::SetPrototypeMethod(tpl, "toChild", ToChild);

	Nan::SetPrototypeMethod(tpl, "ToParent", ToParent);
	Nan::SetPrototypeMethod(tpl, "toParent", ToParent);

	Nan::SetPrototypeMethod(tpl, "ToRoot", ToRoot);
	Nan::SetPrototypeMethod(tpl, "toRoot", ToRoot);

	Nan::SetPrototypeMethod(tpl, "ToSameNode", ToSameNode);
	Nan::SetPrototypeMethod(tpl, "toSameNode", ToSameNode);

}

void VtkHyperTreeCursorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkHyperTreeCursorWrap::Clone(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	vtkHyperTreeCursor * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->Clone();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkHyperTreeCursorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkHyperTreeCursorWrap *w = new VtkHyperTreeCursorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkHyperTreeCursorWrap::GetChildIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetChildIndex();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperTreeCursorWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkHyperTreeCursorWrap::GetCurrentLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCurrentLevel();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperTreeCursorWrap::GetDimension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDimension();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperTreeCursorWrap::GetIndex(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetIndex(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperTreeCursorWrap::GetNumberOfChildren(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfChildren();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperTreeCursorWrap::GetTree(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	vtkHyperTree * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTree();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkHyperTreeWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkHyperTreeWrap *w = new VtkHyperTreeWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkHyperTreeCursorWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperTreeCursorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	vtkHyperTreeCursor * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkHyperTreeCursorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkHyperTreeCursorWrap *w = new VtkHyperTreeCursorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkHyperTreeCursorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkHyperTreeCursor * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkHyperTreeCursorWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkHyperTreeCursorWrap *w = new VtkHyperTreeCursorWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperTreeCursorWrap::SameTree(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkHyperTreeCursorWrap *a0 = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SameTree(
			(vtkHyperTreeCursor *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperTreeCursorWrap::ToChild(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ToChild(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperTreeCursorWrap::ToParent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ToParent();
}

void VtkHyperTreeCursorWrap::ToRoot(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ToRoot();
}

void VtkHyperTreeCursorWrap::ToSameNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperTreeCursorWrap *wrapper = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info.Holder());
	vtkHyperTreeCursor *native = (vtkHyperTreeCursor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkHyperTreeCursorWrap *a0 = ObjectWrap::Unwrap<VtkHyperTreeCursorWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ToSameNode(
			(vtkHyperTreeCursor *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

