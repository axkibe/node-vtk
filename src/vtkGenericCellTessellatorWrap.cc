/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkGenericCellTessellatorWrap.h"
#include "vtkGenericAdaptorCellWrap.h"
#include "vtkGenericAttributeCollectionWrap.h"
#include "vtkDoubleArrayWrap.h"
#include "vtkCellArrayWrap.h"
#include "vtkPointDataWrap.h"
#include "vtkCollectionWrap.h"
#include "vtkGenericDataSetWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkGenericCellTessellatorWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkGenericCellTessellatorWrap::ptpl;

VtkGenericCellTessellatorWrap::VtkGenericCellTessellatorWrap()
{ }

VtkGenericCellTessellatorWrap::VtkGenericCellTessellatorWrap(vtkSmartPointer<vtkGenericCellTessellator> _native)
{ native = _native; }

VtkGenericCellTessellatorWrap::~VtkGenericCellTessellatorWrap()
{ }

void VtkGenericCellTessellatorWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkGenericCellTessellatorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkGenericCellTessellator").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("GenericCellTessellator").ToLocalChecked(),tpl->GetFunction());
}

void VtkGenericCellTessellatorWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetErrorMetrics", GetErrorMetrics);
	Nan::SetPrototypeMethod(tpl, "getErrorMetrics", GetErrorMetrics);

	Nan::SetPrototypeMethod(tpl, "GetMeasurement", GetMeasurement);
	Nan::SetPrototypeMethod(tpl, "getMeasurement", GetMeasurement);

	Nan::SetPrototypeMethod(tpl, "InitErrorMetrics", InitErrorMetrics);
	Nan::SetPrototypeMethod(tpl, "initErrorMetrics", InitErrorMetrics);

	Nan::SetPrototypeMethod(tpl, "Initialize", Initialize);
	Nan::SetPrototypeMethod(tpl, "initialize", Initialize);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetErrorMetrics", SetErrorMetrics);
	Nan::SetPrototypeMethod(tpl, "setErrorMetrics", SetErrorMetrics);

	Nan::SetPrototypeMethod(tpl, "SetMeasurement", SetMeasurement);
	Nan::SetPrototypeMethod(tpl, "setMeasurement", SetMeasurement);

	Nan::SetPrototypeMethod(tpl, "Tessellate", Tessellate);
	Nan::SetPrototypeMethod(tpl, "tessellate", Tessellate);

	Nan::SetPrototypeMethod(tpl, "Triangulate", Triangulate);
	Nan::SetPrototypeMethod(tpl, "triangulate", Triangulate);

}

void VtkGenericCellTessellatorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkGenericCellTessellatorWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericCellTessellatorWrap *wrapper = ObjectWrap::Unwrap<VtkGenericCellTessellatorWrap>(info.Holder());
	vtkGenericCellTessellator *native = (vtkGenericCellTessellator *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGenericCellTessellatorWrap::GetErrorMetrics(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericCellTessellatorWrap *wrapper = ObjectWrap::Unwrap<VtkGenericCellTessellatorWrap>(info.Holder());
	vtkGenericCellTessellator *native = (vtkGenericCellTessellator *)wrapper->native.GetPointer();
	vtkCollection * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetErrorMetrics();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkCollectionWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCollectionWrap *w = new VtkCollectionWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericCellTessellatorWrap::GetMeasurement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericCellTessellatorWrap *wrapper = ObjectWrap::Unwrap<VtkGenericCellTessellatorWrap>(info.Holder());
	vtkGenericCellTessellator *native = (vtkGenericCellTessellator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMeasurement();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericCellTessellatorWrap::InitErrorMetrics(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericCellTessellatorWrap *wrapper = ObjectWrap::Unwrap<VtkGenericCellTessellatorWrap>(info.Holder());
	vtkGenericCellTessellator *native = (vtkGenericCellTessellator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkGenericDataSetWrap *a0 = ObjectWrap::Unwrap<VtkGenericDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->InitErrorMetrics(
			(vtkGenericDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericCellTessellatorWrap::Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericCellTessellatorWrap *wrapper = ObjectWrap::Unwrap<VtkGenericCellTessellatorWrap>(info.Holder());
	vtkGenericCellTessellator *native = (vtkGenericCellTessellator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkGenericDataSetWrap *a0 = ObjectWrap::Unwrap<VtkGenericDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Initialize(
			(vtkGenericDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericCellTessellatorWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericCellTessellatorWrap *wrapper = ObjectWrap::Unwrap<VtkGenericCellTessellatorWrap>(info.Holder());
	vtkGenericCellTessellator *native = (vtkGenericCellTessellator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericCellTessellatorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericCellTessellatorWrap *wrapper = ObjectWrap::Unwrap<VtkGenericCellTessellatorWrap>(info.Holder());
	vtkGenericCellTessellator *native = (vtkGenericCellTessellator *)wrapper->native.GetPointer();
	vtkGenericCellTessellator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkGenericCellTessellatorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGenericCellTessellatorWrap *w = new VtkGenericCellTessellatorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericCellTessellatorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericCellTessellatorWrap *wrapper = ObjectWrap::Unwrap<VtkGenericCellTessellatorWrap>(info.Holder());
	vtkGenericCellTessellator *native = (vtkGenericCellTessellator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkGenericCellTessellator * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkGenericCellTessellatorWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkGenericCellTessellatorWrap *w = new VtkGenericCellTessellatorWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericCellTessellatorWrap::SetErrorMetrics(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericCellTessellatorWrap *wrapper = ObjectWrap::Unwrap<VtkGenericCellTessellatorWrap>(info.Holder());
	vtkGenericCellTessellator *native = (vtkGenericCellTessellator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkCollectionWrap *a0 = ObjectWrap::Unwrap<VtkCollectionWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetErrorMetrics(
			(vtkCollection *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericCellTessellatorWrap::SetMeasurement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericCellTessellatorWrap *wrapper = ObjectWrap::Unwrap<VtkGenericCellTessellatorWrap>(info.Holder());
	vtkGenericCellTessellator *native = (vtkGenericCellTessellator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMeasurement(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericCellTessellatorWrap::Tessellate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericCellTessellatorWrap *wrapper = ObjectWrap::Unwrap<VtkGenericCellTessellatorWrap>(info.Holder());
	vtkGenericCellTessellator *native = (vtkGenericCellTessellator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkGenericAdaptorCellWrap *a0 = ObjectWrap::Unwrap<VtkGenericAdaptorCellWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkGenericAttributeCollectionWrap *a1 = ObjectWrap::Unwrap<VtkGenericAttributeCollectionWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject())
			{
				VtkDoubleArrayWrap *a2 = ObjectWrap::Unwrap<VtkDoubleArrayWrap>(info[2]->ToObject());
				if(info.Length() > 3 && info[3]->IsObject())
				{
					VtkCellArrayWrap *a3 = ObjectWrap::Unwrap<VtkCellArrayWrap>(info[3]->ToObject());
					if(info.Length() > 4 && info[4]->IsObject())
					{
						VtkPointDataWrap *a4 = ObjectWrap::Unwrap<VtkPointDataWrap>(info[4]->ToObject());
						if(info.Length() != 5)
						{
							Nan::ThrowError("Too many parameters.");
							return;
						}
						native->Tessellate(
							(vtkGenericAdaptorCell *) a0->native.GetPointer(),
							(vtkGenericAttributeCollection *) a1->native.GetPointer(),
							(vtkDoubleArray *) a2->native.GetPointer(),
							(vtkCellArray *) a3->native.GetPointer(),
							(vtkPointData *) a4->native.GetPointer()
						);
						return;
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericCellTessellatorWrap::Triangulate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericCellTessellatorWrap *wrapper = ObjectWrap::Unwrap<VtkGenericCellTessellatorWrap>(info.Holder());
	vtkGenericCellTessellator *native = (vtkGenericCellTessellator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkGenericAdaptorCellWrap *a0 = ObjectWrap::Unwrap<VtkGenericAdaptorCellWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkGenericAttributeCollectionWrap *a1 = ObjectWrap::Unwrap<VtkGenericAttributeCollectionWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject())
			{
				VtkDoubleArrayWrap *a2 = ObjectWrap::Unwrap<VtkDoubleArrayWrap>(info[2]->ToObject());
				if(info.Length() > 3 && info[3]->IsObject())
				{
					VtkCellArrayWrap *a3 = ObjectWrap::Unwrap<VtkCellArrayWrap>(info[3]->ToObject());
					if(info.Length() > 4 && info[4]->IsObject())
					{
						VtkPointDataWrap *a4 = ObjectWrap::Unwrap<VtkPointDataWrap>(info[4]->ToObject());
						if(info.Length() != 5)
						{
							Nan::ThrowError("Too many parameters.");
							return;
						}
						native->Triangulate(
							(vtkGenericAdaptorCell *) a0->native.GetPointer(),
							(vtkGenericAttributeCollection *) a1->native.GetPointer(),
							(vtkDoubleArray *) a2->native.GetPointer(),
							(vtkCellArray *) a3->native.GetPointer(),
							(vtkPointData *) a4->native.GetPointer()
						);
						return;
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

