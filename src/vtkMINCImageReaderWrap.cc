/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkImageReader2Wrap.h"
#include "vtkMINCImageReaderWrap.h"
#include "vtkObjectWrap.h"
#include "vtkMatrix4x4Wrap.h"
#include "vtkMINCImageAttributesWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkMINCImageReaderWrap::constructor;

VtkMINCImageReaderWrap::VtkMINCImageReaderWrap()
{ }

VtkMINCImageReaderWrap::VtkMINCImageReaderWrap(vtkSmartPointer<vtkMINCImageReader> _native)
{ native = _native; }

VtkMINCImageReaderWrap::~VtkMINCImageReaderWrap()
{ }

void VtkMINCImageReaderWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkMINCImageReaderWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkImageAlgorithmWrap::InitTpl(tpl);
	VtkImageReader2Wrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkMINCImageReader").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("MINCImageReader").ToLocalChecked(),tpl->GetFunction());
}

void VtkMINCImageReaderWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "CanReadFile", CanReadFile);
	Nan::SetPrototypeMethod(tpl, "canReadFile", CanReadFile);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDescriptiveName", GetDescriptiveName);
	Nan::SetPrototypeMethod(tpl, "getDescriptiveName", GetDescriptiveName);

	Nan::SetPrototypeMethod(tpl, "GetDirectionCosines", GetDirectionCosines);
	Nan::SetPrototypeMethod(tpl, "getDirectionCosines", GetDirectionCosines);

	Nan::SetPrototypeMethod(tpl, "GetFileExtensions", GetFileExtensions);
	Nan::SetPrototypeMethod(tpl, "getFileExtensions", GetFileExtensions);

	Nan::SetPrototypeMethod(tpl, "GetImageAttributes", GetImageAttributes);
	Nan::SetPrototypeMethod(tpl, "getImageAttributes", GetImageAttributes);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfTimeSteps", GetNumberOfTimeSteps);
	Nan::SetPrototypeMethod(tpl, "getNumberOfTimeSteps", GetNumberOfTimeSteps);

	Nan::SetPrototypeMethod(tpl, "GetRescaleIntercept", GetRescaleIntercept);
	Nan::SetPrototypeMethod(tpl, "getRescaleIntercept", GetRescaleIntercept);

	Nan::SetPrototypeMethod(tpl, "GetRescaleRealValues", GetRescaleRealValues);
	Nan::SetPrototypeMethod(tpl, "getRescaleRealValues", GetRescaleRealValues);

	Nan::SetPrototypeMethod(tpl, "GetRescaleSlope", GetRescaleSlope);
	Nan::SetPrototypeMethod(tpl, "getRescaleSlope", GetRescaleSlope);

	Nan::SetPrototypeMethod(tpl, "GetTimeStep", GetTimeStep);
	Nan::SetPrototypeMethod(tpl, "getTimeStep", GetTimeStep);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RescaleRealValuesOff", RescaleRealValuesOff);
	Nan::SetPrototypeMethod(tpl, "rescaleRealValuesOff", RescaleRealValuesOff);

	Nan::SetPrototypeMethod(tpl, "RescaleRealValuesOn", RescaleRealValuesOn);
	Nan::SetPrototypeMethod(tpl, "rescaleRealValuesOn", RescaleRealValuesOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetFileName", SetFileName);
	Nan::SetPrototypeMethod(tpl, "setFileName", SetFileName);

	Nan::SetPrototypeMethod(tpl, "SetRescaleRealValues", SetRescaleRealValues);
	Nan::SetPrototypeMethod(tpl, "setRescaleRealValues", SetRescaleRealValues);

	Nan::SetPrototypeMethod(tpl, "SetTimeStep", SetTimeStep);
	Nan::SetPrototypeMethod(tpl, "setTimeStep", SetTimeStep);

}

void VtkMINCImageReaderWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkMINCImageReader> native = vtkSmartPointer<vtkMINCImageReader>::New();
		VtkMINCImageReaderWrap* obj = new VtkMINCImageReaderWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkMINCImageReaderWrap::CanReadFile(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->CanReadFile(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageReaderWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMINCImageReaderWrap::GetDescriptiveName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDescriptiveName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMINCImageReaderWrap::GetDirectionCosines(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	vtkMatrix4x4 * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDirectionCosines();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkMatrix4x4Wrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMatrix4x4Wrap *w = new VtkMatrix4x4Wrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMINCImageReaderWrap::GetFileExtensions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileExtensions();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkMINCImageReaderWrap::GetImageAttributes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	vtkMINCImageAttributes * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetImageAttributes();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkMINCImageAttributesWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMINCImageAttributesWrap *w = new VtkMINCImageAttributesWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMINCImageReaderWrap::GetNumberOfTimeSteps(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfTimeSteps();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageReaderWrap::GetRescaleIntercept(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRescaleIntercept();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageReaderWrap::GetRescaleRealValues(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRescaleRealValues();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageReaderWrap::GetRescaleSlope(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRescaleSlope();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageReaderWrap::GetTimeStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTimeStep();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkMINCImageReaderWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageReaderWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	vtkMINCImageReader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkMINCImageReaderWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMINCImageReaderWrap *w = new VtkMINCImageReaderWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkMINCImageReaderWrap::RescaleRealValuesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RescaleRealValuesOff();
}

void VtkMINCImageReaderWrap::RescaleRealValuesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RescaleRealValuesOn();
}

void VtkMINCImageReaderWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkMINCImageReader * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkMINCImageReaderWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkMINCImageReaderWrap *w = new VtkMINCImageReaderWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageReaderWrap::SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageReaderWrap::SetRescaleRealValues(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRescaleRealValues(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkMINCImageReaderWrap::SetTimeStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkMINCImageReaderWrap *wrapper = ObjectWrap::Unwrap<VtkMINCImageReaderWrap>(info.Holder());
	vtkMINCImageReader *native = (vtkMINCImageReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTimeStep(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

