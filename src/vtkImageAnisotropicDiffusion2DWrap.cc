/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkImageSpatialAlgorithmWrap.h"
#include "vtkImageAnisotropicDiffusion2DWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkImageAnisotropicDiffusion2DWrap::constructor;

VtkImageAnisotropicDiffusion2DWrap::VtkImageAnisotropicDiffusion2DWrap()
{ }

VtkImageAnisotropicDiffusion2DWrap::VtkImageAnisotropicDiffusion2DWrap(vtkSmartPointer<vtkImageAnisotropicDiffusion2D> _native)
{ native = _native; }

VtkImageAnisotropicDiffusion2DWrap::~VtkImageAnisotropicDiffusion2DWrap()
{ }

void VtkImageAnisotropicDiffusion2DWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkImageAnisotropicDiffusion2DWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkImageAlgorithmWrap::InitTpl(tpl);
	VtkThreadedImageAlgorithmWrap::InitTpl(tpl);
	VtkImageSpatialAlgorithmWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkImageAnisotropicDiffusion2D").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ImageAnisotropicDiffusion2D").ToLocalChecked(),tpl->GetFunction());
}

void VtkImageAnisotropicDiffusion2DWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "CornersOff", CornersOff);
	Nan::SetPrototypeMethod(tpl, "cornersOff", CornersOff);

	Nan::SetPrototypeMethod(tpl, "CornersOn", CornersOn);
	Nan::SetPrototypeMethod(tpl, "cornersOn", CornersOn);

	Nan::SetPrototypeMethod(tpl, "EdgesOff", EdgesOff);
	Nan::SetPrototypeMethod(tpl, "edgesOff", EdgesOff);

	Nan::SetPrototypeMethod(tpl, "EdgesOn", EdgesOn);
	Nan::SetPrototypeMethod(tpl, "edgesOn", EdgesOn);

	Nan::SetPrototypeMethod(tpl, "FacesOff", FacesOff);
	Nan::SetPrototypeMethod(tpl, "facesOff", FacesOff);

	Nan::SetPrototypeMethod(tpl, "FacesOn", FacesOn);
	Nan::SetPrototypeMethod(tpl, "facesOn", FacesOn);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetCorners", GetCorners);
	Nan::SetPrototypeMethod(tpl, "getCorners", GetCorners);

	Nan::SetPrototypeMethod(tpl, "GetDiffusionFactor", GetDiffusionFactor);
	Nan::SetPrototypeMethod(tpl, "getDiffusionFactor", GetDiffusionFactor);

	Nan::SetPrototypeMethod(tpl, "GetDiffusionThreshold", GetDiffusionThreshold);
	Nan::SetPrototypeMethod(tpl, "getDiffusionThreshold", GetDiffusionThreshold);

	Nan::SetPrototypeMethod(tpl, "GetEdges", GetEdges);
	Nan::SetPrototypeMethod(tpl, "getEdges", GetEdges);

	Nan::SetPrototypeMethod(tpl, "GetFaces", GetFaces);
	Nan::SetPrototypeMethod(tpl, "getFaces", GetFaces);

	Nan::SetPrototypeMethod(tpl, "GetGradientMagnitudeThreshold", GetGradientMagnitudeThreshold);
	Nan::SetPrototypeMethod(tpl, "getGradientMagnitudeThreshold", GetGradientMagnitudeThreshold);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfIterations", GetNumberOfIterations);
	Nan::SetPrototypeMethod(tpl, "getNumberOfIterations", GetNumberOfIterations);

	Nan::SetPrototypeMethod(tpl, "GradientMagnitudeThresholdOff", GradientMagnitudeThresholdOff);
	Nan::SetPrototypeMethod(tpl, "gradientMagnitudeThresholdOff", GradientMagnitudeThresholdOff);

	Nan::SetPrototypeMethod(tpl, "GradientMagnitudeThresholdOn", GradientMagnitudeThresholdOn);
	Nan::SetPrototypeMethod(tpl, "gradientMagnitudeThresholdOn", GradientMagnitudeThresholdOn);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCorners", SetCorners);
	Nan::SetPrototypeMethod(tpl, "setCorners", SetCorners);

	Nan::SetPrototypeMethod(tpl, "SetDiffusionFactor", SetDiffusionFactor);
	Nan::SetPrototypeMethod(tpl, "setDiffusionFactor", SetDiffusionFactor);

	Nan::SetPrototypeMethod(tpl, "SetDiffusionThreshold", SetDiffusionThreshold);
	Nan::SetPrototypeMethod(tpl, "setDiffusionThreshold", SetDiffusionThreshold);

	Nan::SetPrototypeMethod(tpl, "SetEdges", SetEdges);
	Nan::SetPrototypeMethod(tpl, "setEdges", SetEdges);

	Nan::SetPrototypeMethod(tpl, "SetFaces", SetFaces);
	Nan::SetPrototypeMethod(tpl, "setFaces", SetFaces);

	Nan::SetPrototypeMethod(tpl, "SetGradientMagnitudeThreshold", SetGradientMagnitudeThreshold);
	Nan::SetPrototypeMethod(tpl, "setGradientMagnitudeThreshold", SetGradientMagnitudeThreshold);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfIterations", SetNumberOfIterations);
	Nan::SetPrototypeMethod(tpl, "setNumberOfIterations", SetNumberOfIterations);

}

void VtkImageAnisotropicDiffusion2DWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageAnisotropicDiffusion2D> native = vtkSmartPointer<vtkImageAnisotropicDiffusion2D>::New();
		VtkImageAnisotropicDiffusion2DWrap* obj = new VtkImageAnisotropicDiffusion2DWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageAnisotropicDiffusion2DWrap::CornersOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CornersOff();
}

void VtkImageAnisotropicDiffusion2DWrap::CornersOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CornersOn();
}

void VtkImageAnisotropicDiffusion2DWrap::EdgesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EdgesOff();
}

void VtkImageAnisotropicDiffusion2DWrap::EdgesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EdgesOn();
}

void VtkImageAnisotropicDiffusion2DWrap::FacesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FacesOff();
}

void VtkImageAnisotropicDiffusion2DWrap::FacesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FacesOn();
}

void VtkImageAnisotropicDiffusion2DWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageAnisotropicDiffusion2DWrap::GetCorners(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCorners();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageAnisotropicDiffusion2DWrap::GetDiffusionFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDiffusionFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageAnisotropicDiffusion2DWrap::GetDiffusionThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDiffusionThreshold();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageAnisotropicDiffusion2DWrap::GetEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetEdges();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageAnisotropicDiffusion2DWrap::GetFaces(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFaces();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageAnisotropicDiffusion2DWrap::GetGradientMagnitudeThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGradientMagnitudeThreshold();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageAnisotropicDiffusion2DWrap::GetNumberOfIterations(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfIterations();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageAnisotropicDiffusion2DWrap::GradientMagnitudeThresholdOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GradientMagnitudeThresholdOff();
}

void VtkImageAnisotropicDiffusion2DWrap::GradientMagnitudeThresholdOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GradientMagnitudeThresholdOn();
}

void VtkImageAnisotropicDiffusion2DWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageAnisotropicDiffusion2DWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	vtkImageAnisotropicDiffusion2D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImageAnisotropicDiffusion2DWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageAnisotropicDiffusion2DWrap *w = new VtkImageAnisotropicDiffusion2DWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageAnisotropicDiffusion2DWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageAnisotropicDiffusion2D * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkImageAnisotropicDiffusion2DWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageAnisotropicDiffusion2DWrap *w = new VtkImageAnisotropicDiffusion2DWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageAnisotropicDiffusion2DWrap::SetCorners(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCorners(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageAnisotropicDiffusion2DWrap::SetDiffusionFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDiffusionFactor(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageAnisotropicDiffusion2DWrap::SetDiffusionThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDiffusionThreshold(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageAnisotropicDiffusion2DWrap::SetEdges(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEdges(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageAnisotropicDiffusion2DWrap::SetFaces(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFaces(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageAnisotropicDiffusion2DWrap::SetGradientMagnitudeThreshold(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGradientMagnitudeThreshold(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageAnisotropicDiffusion2DWrap::SetNumberOfIterations(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageAnisotropicDiffusion2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageAnisotropicDiffusion2DWrap>(info.Holder());
	vtkImageAnisotropicDiffusion2D *native = (vtkImageAnisotropicDiffusion2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfIterations(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

