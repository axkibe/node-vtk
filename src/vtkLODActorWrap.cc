/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkActorWrap.h"
#include "vtkLODActorWrap.h"
#include "vtkObjectWrap.h"
#include "vtkRendererWrap.h"
#include "vtkMapperWrap.h"
#include "vtkViewportWrap.h"
#include "vtkWindowWrap.h"
#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkMapperCollectionWrap.h"
#include "vtkPropWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkLODActorWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkLODActorWrap::ptpl;

VtkLODActorWrap::VtkLODActorWrap()
{ }

VtkLODActorWrap::VtkLODActorWrap(vtkSmartPointer<vtkLODActor> _native)
{ native = _native; }

VtkLODActorWrap::~VtkLODActorWrap()
{ }

void VtkLODActorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkLODActor").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("LODActor").ToLocalChecked(), ConstructorGetter);
}

void VtkLODActorWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkLODActorWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkActorWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkActorWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkLODActorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddLODMapper", AddLODMapper);
	Nan::SetPrototypeMethod(tpl, "addLODMapper", AddLODMapper);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetLODMappers", GetLODMappers);
	Nan::SetPrototypeMethod(tpl, "getLODMappers", GetLODMappers);

	Nan::SetPrototypeMethod(tpl, "GetLowResFilter", GetLowResFilter);
	Nan::SetPrototypeMethod(tpl, "getLowResFilter", GetLowResFilter);

	Nan::SetPrototypeMethod(tpl, "GetMediumResFilter", GetMediumResFilter);
	Nan::SetPrototypeMethod(tpl, "getMediumResFilter", GetMediumResFilter);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfCloudPoints", GetNumberOfCloudPoints);
	Nan::SetPrototypeMethod(tpl, "getNumberOfCloudPoints", GetNumberOfCloudPoints);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "Modified", Modified);
	Nan::SetPrototypeMethod(tpl, "modified", Modified);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "Render", Render);
	Nan::SetPrototypeMethod(tpl, "render", Render);

	Nan::SetPrototypeMethod(tpl, "RenderOpaqueGeometry", RenderOpaqueGeometry);
	Nan::SetPrototypeMethod(tpl, "renderOpaqueGeometry", RenderOpaqueGeometry);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetLowResFilter", SetLowResFilter);
	Nan::SetPrototypeMethod(tpl, "setLowResFilter", SetLowResFilter);

	Nan::SetPrototypeMethod(tpl, "SetMediumResFilter", SetMediumResFilter);
	Nan::SetPrototypeMethod(tpl, "setMediumResFilter", SetMediumResFilter);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfCloudPoints", SetNumberOfCloudPoints);
	Nan::SetPrototypeMethod(tpl, "setNumberOfCloudPoints", SetNumberOfCloudPoints);

	Nan::SetPrototypeMethod(tpl, "ShallowCopy", ShallowCopy);
	Nan::SetPrototypeMethod(tpl, "shallowCopy", ShallowCopy);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );
}

void VtkLODActorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkLODActor> native = vtkSmartPointer<vtkLODActor>::New();
		VtkLODActorWrap* obj = new VtkLODActorWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkLODActorWrap::AddLODMapper(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkMapperWrap::ptpl))->HasInstance(info[0]))
	{
		VtkMapperWrap *a0 = ObjectWrap::Unwrap<VtkMapperWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddLODMapper(
			(vtkMapper *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLODActorWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkLODActorWrap::GetLODMappers(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	vtkMapperCollection * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLODMappers();
		VtkMapperCollectionWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkMapperCollectionWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkMapperCollectionWrap *w = new VtkMapperCollectionWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLODActorWrap::GetLowResFilter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	vtkPolyDataAlgorithm * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLowResFilter();
		VtkPolyDataAlgorithmWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPolyDataAlgorithmWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataAlgorithmWrap *w = new VtkPolyDataAlgorithmWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLODActorWrap::GetMediumResFilter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	vtkPolyDataAlgorithm * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMediumResFilter();
		VtkPolyDataAlgorithmWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPolyDataAlgorithmWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataAlgorithmWrap *w = new VtkPolyDataAlgorithmWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLODActorWrap::GetNumberOfCloudPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfCloudPoints();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLODActorWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLODActorWrap::Modified(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Modified();
}

void VtkLODActorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	vtkLODActor * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkLODActorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkLODActorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkLODActorWrap *w = new VtkLODActorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLODActorWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLODActorWrap::Render(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkMapperWrap::ptpl))->HasInstance(info[1]))
		{
			VtkMapperWrap *a1 = ObjectWrap::Unwrap<VtkMapperWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->Render(
				(vtkRenderer *) a0->native.GetPointer(),
				(vtkMapper *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLODActorWrap::RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkViewportWrap::ptpl))->HasInstance(info[0]))
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOpaqueGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLODActorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkLODActor * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkLODActorWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkLODActorWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkLODActorWrap *w = new VtkLODActorWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLODActorWrap::SetLowResFilter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataAlgorithmWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataAlgorithmWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataAlgorithmWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLowResFilter(
			(vtkPolyDataAlgorithm *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLODActorWrap::SetMediumResFilter(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPolyDataAlgorithmWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPolyDataAlgorithmWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataAlgorithmWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMediumResFilter(
			(vtkPolyDataAlgorithm *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLODActorWrap::SetNumberOfCloudPoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfCloudPoints(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLODActorWrap::ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLODActorWrap *wrapper = ObjectWrap::Unwrap<VtkLODActorWrap>(info.Holder());
	vtkLODActor *native = (vtkLODActor *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkPropWrap::ptpl))->HasInstance(info[0]))
	{
		VtkPropWrap *a0 = ObjectWrap::Unwrap<VtkPropWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ShallowCopy(
			(vtkProp *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

