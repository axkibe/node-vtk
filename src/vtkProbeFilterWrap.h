/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKPROBEFILTERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKPROBEFILTERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkProbeFilter.h>

#include "vtkDataSetAlgorithmWrap.h"

class VtkProbeFilterWrap : public VtkDataSetAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkProbeFilterWrap(vtkSmartPointer<vtkProbeFilter>);
		VtkProbeFilterWrap();
		~VtkProbeFilterWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPassCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPassPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSource(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSpatialMatch(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetValidPointMaskArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetValidPoints(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetPassCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetPassPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSourceConnection(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSourceData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSpatialMatch(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetValidPointMaskArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SpatialMatchOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SpatialMatchOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
