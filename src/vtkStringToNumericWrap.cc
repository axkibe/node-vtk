/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkDataObjectAlgorithmWrap.h"
#include "vtkStringToNumericWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkStringToNumericWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkStringToNumericWrap::ptpl;

VtkStringToNumericWrap::VtkStringToNumericWrap()
{ }

VtkStringToNumericWrap::VtkStringToNumericWrap(vtkSmartPointer<vtkStringToNumeric> _native)
{ native = _native; }

VtkStringToNumericWrap::~VtkStringToNumericWrap()
{ }

void VtkStringToNumericWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkDataObjectAlgorithmWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkDataObjectAlgorithmWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkStringToNumericWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkStringToNumeric").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("StringToNumeric").ToLocalChecked(),tpl->GetFunction());
}

void VtkStringToNumericWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "ConvertCellDataOff", ConvertCellDataOff);
	Nan::SetPrototypeMethod(tpl, "convertCellDataOff", ConvertCellDataOff);

	Nan::SetPrototypeMethod(tpl, "ConvertCellDataOn", ConvertCellDataOn);
	Nan::SetPrototypeMethod(tpl, "convertCellDataOn", ConvertCellDataOn);

	Nan::SetPrototypeMethod(tpl, "ConvertEdgeDataOff", ConvertEdgeDataOff);
	Nan::SetPrototypeMethod(tpl, "convertEdgeDataOff", ConvertEdgeDataOff);

	Nan::SetPrototypeMethod(tpl, "ConvertEdgeDataOn", ConvertEdgeDataOn);
	Nan::SetPrototypeMethod(tpl, "convertEdgeDataOn", ConvertEdgeDataOn);

	Nan::SetPrototypeMethod(tpl, "ConvertFieldDataOff", ConvertFieldDataOff);
	Nan::SetPrototypeMethod(tpl, "convertFieldDataOff", ConvertFieldDataOff);

	Nan::SetPrototypeMethod(tpl, "ConvertFieldDataOn", ConvertFieldDataOn);
	Nan::SetPrototypeMethod(tpl, "convertFieldDataOn", ConvertFieldDataOn);

	Nan::SetPrototypeMethod(tpl, "ConvertPointDataOff", ConvertPointDataOff);
	Nan::SetPrototypeMethod(tpl, "convertPointDataOff", ConvertPointDataOff);

	Nan::SetPrototypeMethod(tpl, "ConvertPointDataOn", ConvertPointDataOn);
	Nan::SetPrototypeMethod(tpl, "convertPointDataOn", ConvertPointDataOn);

	Nan::SetPrototypeMethod(tpl, "ConvertRowDataOff", ConvertRowDataOff);
	Nan::SetPrototypeMethod(tpl, "convertRowDataOff", ConvertRowDataOff);

	Nan::SetPrototypeMethod(tpl, "ConvertRowDataOn", ConvertRowDataOn);
	Nan::SetPrototypeMethod(tpl, "convertRowDataOn", ConvertRowDataOn);

	Nan::SetPrototypeMethod(tpl, "ConvertVertexDataOff", ConvertVertexDataOff);
	Nan::SetPrototypeMethod(tpl, "convertVertexDataOff", ConvertVertexDataOff);

	Nan::SetPrototypeMethod(tpl, "ConvertVertexDataOn", ConvertVertexDataOn);
	Nan::SetPrototypeMethod(tpl, "convertVertexDataOn", ConvertVertexDataOn);

	Nan::SetPrototypeMethod(tpl, "ForceDoubleOff", ForceDoubleOff);
	Nan::SetPrototypeMethod(tpl, "forceDoubleOff", ForceDoubleOff);

	Nan::SetPrototypeMethod(tpl, "ForceDoubleOn", ForceDoubleOn);
	Nan::SetPrototypeMethod(tpl, "forceDoubleOn", ForceDoubleOn);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDefaultDoubleValue", GetDefaultDoubleValue);
	Nan::SetPrototypeMethod(tpl, "getDefaultDoubleValue", GetDefaultDoubleValue);

	Nan::SetPrototypeMethod(tpl, "GetDefaultIntegerValue", GetDefaultIntegerValue);
	Nan::SetPrototypeMethod(tpl, "getDefaultIntegerValue", GetDefaultIntegerValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetDefaultDoubleValue", SetDefaultDoubleValue);
	Nan::SetPrototypeMethod(tpl, "setDefaultDoubleValue", SetDefaultDoubleValue);

	Nan::SetPrototypeMethod(tpl, "SetDefaultIntegerValue", SetDefaultIntegerValue);
	Nan::SetPrototypeMethod(tpl, "setDefaultIntegerValue", SetDefaultIntegerValue);

	Nan::SetPrototypeMethod(tpl, "TrimWhitespacePriorToNumericConversionOff", TrimWhitespacePriorToNumericConversionOff);
	Nan::SetPrototypeMethod(tpl, "trimWhitespacePriorToNumericConversionOff", TrimWhitespacePriorToNumericConversionOff);

	Nan::SetPrototypeMethod(tpl, "TrimWhitespacePriorToNumericConversionOn", TrimWhitespacePriorToNumericConversionOn);
	Nan::SetPrototypeMethod(tpl, "trimWhitespacePriorToNumericConversionOn", TrimWhitespacePriorToNumericConversionOn);

}

void VtkStringToNumericWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkStringToNumeric> native = vtkSmartPointer<vtkStringToNumeric>::New();
		VtkStringToNumericWrap* obj = new VtkStringToNumericWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkStringToNumericWrap::ConvertCellDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertCellDataOff();
}

void VtkStringToNumericWrap::ConvertCellDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertCellDataOn();
}

void VtkStringToNumericWrap::ConvertEdgeDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertEdgeDataOff();
}

void VtkStringToNumericWrap::ConvertEdgeDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertEdgeDataOn();
}

void VtkStringToNumericWrap::ConvertFieldDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertFieldDataOff();
}

void VtkStringToNumericWrap::ConvertFieldDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertFieldDataOn();
}

void VtkStringToNumericWrap::ConvertPointDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertPointDataOff();
}

void VtkStringToNumericWrap::ConvertPointDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertPointDataOn();
}

void VtkStringToNumericWrap::ConvertRowDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertRowDataOff();
}

void VtkStringToNumericWrap::ConvertRowDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertRowDataOn();
}

void VtkStringToNumericWrap::ConvertVertexDataOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertVertexDataOff();
}

void VtkStringToNumericWrap::ConvertVertexDataOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConvertVertexDataOn();
}

void VtkStringToNumericWrap::ForceDoubleOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ForceDoubleOff();
}

void VtkStringToNumericWrap::ForceDoubleOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ForceDoubleOn();
}

void VtkStringToNumericWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkStringToNumericWrap::GetDefaultDoubleValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDefaultDoubleValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStringToNumericWrap::GetDefaultIntegerValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDefaultIntegerValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStringToNumericWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	vtkStringToNumeric * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkStringToNumericWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStringToNumericWrap *w = new VtkStringToNumericWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStringToNumericWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkStringToNumeric * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkStringToNumericWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkStringToNumericWrap *w = new VtkStringToNumericWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::SetDefaultDoubleValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDefaultDoubleValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::SetDefaultIntegerValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDefaultIntegerValue(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStringToNumericWrap::TrimWhitespacePriorToNumericConversionOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TrimWhitespacePriorToNumericConversionOff();
}

void VtkStringToNumericWrap::TrimWhitespacePriorToNumericConversionOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStringToNumericWrap *wrapper = ObjectWrap::Unwrap<VtkStringToNumericWrap>(info.Holder());
	vtkStringToNumeric *native = (vtkStringToNumeric *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TrimWhitespacePriorToNumericConversionOn();
}

