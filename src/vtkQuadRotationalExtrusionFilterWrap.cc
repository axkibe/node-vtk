/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkMultiBlockDataSetAlgorithmWrap.h"
#include "vtkQuadRotationalExtrusionFilterWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkQuadRotationalExtrusionFilterWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkQuadRotationalExtrusionFilterWrap::ptpl;

VtkQuadRotationalExtrusionFilterWrap::VtkQuadRotationalExtrusionFilterWrap()
{ }

VtkQuadRotationalExtrusionFilterWrap::VtkQuadRotationalExtrusionFilterWrap(vtkSmartPointer<vtkQuadRotationalExtrusionFilter> _native)
{ native = _native; }

VtkQuadRotationalExtrusionFilterWrap::~VtkQuadRotationalExtrusionFilterWrap()
{ }

void VtkQuadRotationalExtrusionFilterWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkMultiBlockDataSetAlgorithmWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkMultiBlockDataSetAlgorithmWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkQuadRotationalExtrusionFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkQuadRotationalExtrusionFilter").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("QuadRotationalExtrusionFilter").ToLocalChecked(),tpl->GetFunction());
}

void VtkQuadRotationalExtrusionFilterWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "CappingOff", CappingOff);
	Nan::SetPrototypeMethod(tpl, "cappingOff", CappingOff);

	Nan::SetPrototypeMethod(tpl, "CappingOn", CappingOn);
	Nan::SetPrototypeMethod(tpl, "cappingOn", CappingOn);

	Nan::SetPrototypeMethod(tpl, "GetAxis", GetAxis);
	Nan::SetPrototypeMethod(tpl, "getAxis", GetAxis);

	Nan::SetPrototypeMethod(tpl, "GetAxisMaxValue", GetAxisMaxValue);
	Nan::SetPrototypeMethod(tpl, "getAxisMaxValue", GetAxisMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetAxisMinValue", GetAxisMinValue);
	Nan::SetPrototypeMethod(tpl, "getAxisMinValue", GetAxisMinValue);

	Nan::SetPrototypeMethod(tpl, "GetCapping", GetCapping);
	Nan::SetPrototypeMethod(tpl, "getCapping", GetCapping);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDefaultAngle", GetDefaultAngle);
	Nan::SetPrototypeMethod(tpl, "getDefaultAngle", GetDefaultAngle);

	Nan::SetPrototypeMethod(tpl, "GetDeltaRadius", GetDeltaRadius);
	Nan::SetPrototypeMethod(tpl, "getDeltaRadius", GetDeltaRadius);

	Nan::SetPrototypeMethod(tpl, "GetResolution", GetResolution);
	Nan::SetPrototypeMethod(tpl, "getResolution", GetResolution);

	Nan::SetPrototypeMethod(tpl, "GetResolutionMaxValue", GetResolutionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getResolutionMaxValue", GetResolutionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetResolutionMinValue", GetResolutionMinValue);
	Nan::SetPrototypeMethod(tpl, "getResolutionMinValue", GetResolutionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetTranslation", GetTranslation);
	Nan::SetPrototypeMethod(tpl, "getTranslation", GetTranslation);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RemoveAllPerBlockAngles", RemoveAllPerBlockAngles);
	Nan::SetPrototypeMethod(tpl, "removeAllPerBlockAngles", RemoveAllPerBlockAngles);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAxis", SetAxis);
	Nan::SetPrototypeMethod(tpl, "setAxis", SetAxis);

	Nan::SetPrototypeMethod(tpl, "SetAxisToX", SetAxisToX);
	Nan::SetPrototypeMethod(tpl, "setAxisToX", SetAxisToX);

	Nan::SetPrototypeMethod(tpl, "SetAxisToY", SetAxisToY);
	Nan::SetPrototypeMethod(tpl, "setAxisToY", SetAxisToY);

	Nan::SetPrototypeMethod(tpl, "SetAxisToZ", SetAxisToZ);
	Nan::SetPrototypeMethod(tpl, "setAxisToZ", SetAxisToZ);

	Nan::SetPrototypeMethod(tpl, "SetCapping", SetCapping);
	Nan::SetPrototypeMethod(tpl, "setCapping", SetCapping);

	Nan::SetPrototypeMethod(tpl, "SetDefaultAngle", SetDefaultAngle);
	Nan::SetPrototypeMethod(tpl, "setDefaultAngle", SetDefaultAngle);

	Nan::SetPrototypeMethod(tpl, "SetDeltaRadius", SetDeltaRadius);
	Nan::SetPrototypeMethod(tpl, "setDeltaRadius", SetDeltaRadius);

	Nan::SetPrototypeMethod(tpl, "SetResolution", SetResolution);
	Nan::SetPrototypeMethod(tpl, "setResolution", SetResolution);

	Nan::SetPrototypeMethod(tpl, "SetTranslation", SetTranslation);
	Nan::SetPrototypeMethod(tpl, "setTranslation", SetTranslation);

}

void VtkQuadRotationalExtrusionFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkQuadRotationalExtrusionFilter> native = vtkSmartPointer<vtkQuadRotationalExtrusionFilter>::New();
		VtkQuadRotationalExtrusionFilterWrap* obj = new VtkQuadRotationalExtrusionFilterWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkQuadRotationalExtrusionFilterWrap::CappingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CappingOff();
}

void VtkQuadRotationalExtrusionFilterWrap::CappingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CappingOn();
}

void VtkQuadRotationalExtrusionFilterWrap::GetAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAxis();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkQuadRotationalExtrusionFilterWrap::GetAxisMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAxisMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkQuadRotationalExtrusionFilterWrap::GetAxisMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAxisMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkQuadRotationalExtrusionFilterWrap::GetCapping(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCapping();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkQuadRotationalExtrusionFilterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkQuadRotationalExtrusionFilterWrap::GetDefaultAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDefaultAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkQuadRotationalExtrusionFilterWrap::GetDeltaRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDeltaRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkQuadRotationalExtrusionFilterWrap::GetResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResolution();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkQuadRotationalExtrusionFilterWrap::GetResolutionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResolutionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkQuadRotationalExtrusionFilterWrap::GetResolutionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResolutionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkQuadRotationalExtrusionFilterWrap::GetTranslation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTranslation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkQuadRotationalExtrusionFilterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkQuadRotationalExtrusionFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	vtkQuadRotationalExtrusionFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkQuadRotationalExtrusionFilterWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkQuadRotationalExtrusionFilterWrap *w = new VtkQuadRotationalExtrusionFilterWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkQuadRotationalExtrusionFilterWrap::RemoveAllPerBlockAngles(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllPerBlockAngles();
}

void VtkQuadRotationalExtrusionFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkQuadRotationalExtrusionFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkQuadRotationalExtrusionFilterWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkQuadRotationalExtrusionFilterWrap *w = new VtkQuadRotationalExtrusionFilterWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkQuadRotationalExtrusionFilterWrap::SetAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAxis(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkQuadRotationalExtrusionFilterWrap::SetAxisToX(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetAxisToX();
}

void VtkQuadRotationalExtrusionFilterWrap::SetAxisToY(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetAxisToY();
}

void VtkQuadRotationalExtrusionFilterWrap::SetAxisToZ(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetAxisToZ();
}

void VtkQuadRotationalExtrusionFilterWrap::SetCapping(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCapping(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkQuadRotationalExtrusionFilterWrap::SetDefaultAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDefaultAngle(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkQuadRotationalExtrusionFilterWrap::SetDeltaRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDeltaRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkQuadRotationalExtrusionFilterWrap::SetResolution(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetResolution(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkQuadRotationalExtrusionFilterWrap::SetTranslation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkQuadRotationalExtrusionFilterWrap *wrapper = ObjectWrap::Unwrap<VtkQuadRotationalExtrusionFilterWrap>(info.Holder());
	vtkQuadRotationalExtrusionFilter *native = (vtkQuadRotationalExtrusionFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTranslation(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

