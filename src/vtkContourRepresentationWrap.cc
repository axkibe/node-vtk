/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkWidgetRepresentationWrap.h"
#include "vtkContourRepresentationWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPointPlacerWrap.h"
#include "vtkContourLineInterpolatorWrap.h"
#include "vtkWindowWrap.h"
#include "vtkViewportWrap.h"
#include "vtkPolyDataWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkContourRepresentationWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkContourRepresentationWrap::ptpl;

VtkContourRepresentationWrap::VtkContourRepresentationWrap()
{ }

VtkContourRepresentationWrap::VtkContourRepresentationWrap(vtkSmartPointer<vtkContourRepresentation> _native)
{ native = _native; }

VtkContourRepresentationWrap::~VtkContourRepresentationWrap()
{ }

void VtkContourRepresentationWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkWidgetRepresentationWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkWidgetRepresentationWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkContourRepresentationWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkContourRepresentation").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ContourRepresentation").ToLocalChecked(),tpl->GetFunction());
}

void VtkContourRepresentationWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "ActivateNode", ActivateNode);
	Nan::SetPrototypeMethod(tpl, "activateNode", ActivateNode);

	Nan::SetPrototypeMethod(tpl, "AddNodeAtDisplayPosition", AddNodeAtDisplayPosition);
	Nan::SetPrototypeMethod(tpl, "addNodeAtDisplayPosition", AddNodeAtDisplayPosition);

	Nan::SetPrototypeMethod(tpl, "AddNodeAtWorldPosition", AddNodeAtWorldPosition);
	Nan::SetPrototypeMethod(tpl, "addNodeAtWorldPosition", AddNodeAtWorldPosition);

	Nan::SetPrototypeMethod(tpl, "AddNodeOnContour", AddNodeOnContour);
	Nan::SetPrototypeMethod(tpl, "addNodeOnContour", AddNodeOnContour);

	Nan::SetPrototypeMethod(tpl, "BuildRepresentation", BuildRepresentation);
	Nan::SetPrototypeMethod(tpl, "buildRepresentation", BuildRepresentation);

	Nan::SetPrototypeMethod(tpl, "ClearAllNodes", ClearAllNodes);
	Nan::SetPrototypeMethod(tpl, "clearAllNodes", ClearAllNodes);

	Nan::SetPrototypeMethod(tpl, "ClosedLoopOff", ClosedLoopOff);
	Nan::SetPrototypeMethod(tpl, "closedLoopOff", ClosedLoopOff);

	Nan::SetPrototypeMethod(tpl, "ClosedLoopOn", ClosedLoopOn);
	Nan::SetPrototypeMethod(tpl, "closedLoopOn", ClosedLoopOn);

	Nan::SetPrototypeMethod(tpl, "ComputeInteractionState", ComputeInteractionState);
	Nan::SetPrototypeMethod(tpl, "computeInteractionState", ComputeInteractionState);

	Nan::SetPrototypeMethod(tpl, "DeleteActiveNode", DeleteActiveNode);
	Nan::SetPrototypeMethod(tpl, "deleteActiveNode", DeleteActiveNode);

	Nan::SetPrototypeMethod(tpl, "DeleteLastNode", DeleteLastNode);
	Nan::SetPrototypeMethod(tpl, "deleteLastNode", DeleteLastNode);

	Nan::SetPrototypeMethod(tpl, "DeleteNthNode", DeleteNthNode);
	Nan::SetPrototypeMethod(tpl, "deleteNthNode", DeleteNthNode);

	Nan::SetPrototypeMethod(tpl, "GetActiveNodeSelected", GetActiveNodeSelected);
	Nan::SetPrototypeMethod(tpl, "getActiveNodeSelected", GetActiveNodeSelected);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetClosedLoop", GetClosedLoop);
	Nan::SetPrototypeMethod(tpl, "getClosedLoop", GetClosedLoop);

	Nan::SetPrototypeMethod(tpl, "GetContourRepresentationAsPolyData", GetContourRepresentationAsPolyData);
	Nan::SetPrototypeMethod(tpl, "getContourRepresentationAsPolyData", GetContourRepresentationAsPolyData);

	Nan::SetPrototypeMethod(tpl, "GetCurrentOperation", GetCurrentOperation);
	Nan::SetPrototypeMethod(tpl, "getCurrentOperation", GetCurrentOperation);

	Nan::SetPrototypeMethod(tpl, "GetCurrentOperationMaxValue", GetCurrentOperationMaxValue);
	Nan::SetPrototypeMethod(tpl, "getCurrentOperationMaxValue", GetCurrentOperationMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetCurrentOperationMinValue", GetCurrentOperationMinValue);
	Nan::SetPrototypeMethod(tpl, "getCurrentOperationMinValue", GetCurrentOperationMinValue);

	Nan::SetPrototypeMethod(tpl, "GetLineInterpolator", GetLineInterpolator);
	Nan::SetPrototypeMethod(tpl, "getLineInterpolator", GetLineInterpolator);

	Nan::SetPrototypeMethod(tpl, "GetNodePolyData", GetNodePolyData);
	Nan::SetPrototypeMethod(tpl, "getNodePolyData", GetNodePolyData);

	Nan::SetPrototypeMethod(tpl, "GetNthNodeSelected", GetNthNodeSelected);
	Nan::SetPrototypeMethod(tpl, "getNthNodeSelected", GetNthNodeSelected);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfIntermediatePoints", GetNumberOfIntermediatePoints);
	Nan::SetPrototypeMethod(tpl, "getNumberOfIntermediatePoints", GetNumberOfIntermediatePoints);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfNodes", GetNumberOfNodes);
	Nan::SetPrototypeMethod(tpl, "getNumberOfNodes", GetNumberOfNodes);

	Nan::SetPrototypeMethod(tpl, "GetPixelTolerance", GetPixelTolerance);
	Nan::SetPrototypeMethod(tpl, "getPixelTolerance", GetPixelTolerance);

	Nan::SetPrototypeMethod(tpl, "GetPixelToleranceMaxValue", GetPixelToleranceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getPixelToleranceMaxValue", GetPixelToleranceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetPixelToleranceMinValue", GetPixelToleranceMinValue);
	Nan::SetPrototypeMethod(tpl, "getPixelToleranceMinValue", GetPixelToleranceMinValue);

	Nan::SetPrototypeMethod(tpl, "GetPointPlacer", GetPointPlacer);
	Nan::SetPrototypeMethod(tpl, "getPointPlacer", GetPointPlacer);

	Nan::SetPrototypeMethod(tpl, "GetShowSelectedNodes", GetShowSelectedNodes);
	Nan::SetPrototypeMethod(tpl, "getShowSelectedNodes", GetShowSelectedNodes);

	Nan::SetPrototypeMethod(tpl, "GetWorldTolerance", GetWorldTolerance);
	Nan::SetPrototypeMethod(tpl, "getWorldTolerance", GetWorldTolerance);

	Nan::SetPrototypeMethod(tpl, "GetWorldToleranceMaxValue", GetWorldToleranceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getWorldToleranceMaxValue", GetWorldToleranceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetWorldToleranceMinValue", GetWorldToleranceMinValue);
	Nan::SetPrototypeMethod(tpl, "getWorldToleranceMinValue", GetWorldToleranceMinValue);

	Nan::SetPrototypeMethod(tpl, "HasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "hasTranslucentPolygonalGeometry", HasTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "RenderOpaqueGeometry", RenderOpaqueGeometry);
	Nan::SetPrototypeMethod(tpl, "renderOpaqueGeometry", RenderOpaqueGeometry);

	Nan::SetPrototypeMethod(tpl, "RenderOverlay", RenderOverlay);
	Nan::SetPrototypeMethod(tpl, "renderOverlay", RenderOverlay);

	Nan::SetPrototypeMethod(tpl, "RenderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "renderTranslucentPolygonalGeometry", RenderTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetActiveNodeToDisplayPosition", SetActiveNodeToDisplayPosition);
	Nan::SetPrototypeMethod(tpl, "setActiveNodeToDisplayPosition", SetActiveNodeToDisplayPosition);

	Nan::SetPrototypeMethod(tpl, "SetClosedLoop", SetClosedLoop);
	Nan::SetPrototypeMethod(tpl, "setClosedLoop", SetClosedLoop);

	Nan::SetPrototypeMethod(tpl, "SetCurrentOperation", SetCurrentOperation);
	Nan::SetPrototypeMethod(tpl, "setCurrentOperation", SetCurrentOperation);

	Nan::SetPrototypeMethod(tpl, "SetCurrentOperationToInactive", SetCurrentOperationToInactive);
	Nan::SetPrototypeMethod(tpl, "setCurrentOperationToInactive", SetCurrentOperationToInactive);

	Nan::SetPrototypeMethod(tpl, "SetCurrentOperationToScale", SetCurrentOperationToScale);
	Nan::SetPrototypeMethod(tpl, "setCurrentOperationToScale", SetCurrentOperationToScale);

	Nan::SetPrototypeMethod(tpl, "SetCurrentOperationToShift", SetCurrentOperationToShift);
	Nan::SetPrototypeMethod(tpl, "setCurrentOperationToShift", SetCurrentOperationToShift);

	Nan::SetPrototypeMethod(tpl, "SetCurrentOperationToTranslate", SetCurrentOperationToTranslate);
	Nan::SetPrototypeMethod(tpl, "setCurrentOperationToTranslate", SetCurrentOperationToTranslate);

	Nan::SetPrototypeMethod(tpl, "SetLineInterpolator", SetLineInterpolator);
	Nan::SetPrototypeMethod(tpl, "setLineInterpolator", SetLineInterpolator);

	Nan::SetPrototypeMethod(tpl, "SetNthNodeDisplayPosition", SetNthNodeDisplayPosition);
	Nan::SetPrototypeMethod(tpl, "setNthNodeDisplayPosition", SetNthNodeDisplayPosition);

	Nan::SetPrototypeMethod(tpl, "SetNthNodeSelected", SetNthNodeSelected);
	Nan::SetPrototypeMethod(tpl, "setNthNodeSelected", SetNthNodeSelected);

	Nan::SetPrototypeMethod(tpl, "SetPixelTolerance", SetPixelTolerance);
	Nan::SetPrototypeMethod(tpl, "setPixelTolerance", SetPixelTolerance);

	Nan::SetPrototypeMethod(tpl, "SetPointPlacer", SetPointPlacer);
	Nan::SetPrototypeMethod(tpl, "setPointPlacer", SetPointPlacer);

	Nan::SetPrototypeMethod(tpl, "SetShowSelectedNodes", SetShowSelectedNodes);
	Nan::SetPrototypeMethod(tpl, "setShowSelectedNodes", SetShowSelectedNodes);

	Nan::SetPrototypeMethod(tpl, "SetWorldTolerance", SetWorldTolerance);
	Nan::SetPrototypeMethod(tpl, "setWorldTolerance", SetWorldTolerance);

	Nan::SetPrototypeMethod(tpl, "ShowSelectedNodesOff", ShowSelectedNodesOff);
	Nan::SetPrototypeMethod(tpl, "showSelectedNodesOff", ShowSelectedNodesOff);

	Nan::SetPrototypeMethod(tpl, "ShowSelectedNodesOn", ShowSelectedNodesOn);
	Nan::SetPrototypeMethod(tpl, "showSelectedNodesOn", ShowSelectedNodesOn);

	Nan::SetPrototypeMethod(tpl, "ToggleActiveNodeSelected", ToggleActiveNodeSelected);
	Nan::SetPrototypeMethod(tpl, "toggleActiveNodeSelected", ToggleActiveNodeSelected);

}

void VtkContourRepresentationWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkContourRepresentationWrap::ActivateNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->ActivateNode(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::AddNodeAtDisplayPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->AddNodeAtDisplayPosition(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::AddNodeAtWorldPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->AddNodeAtWorldPosition(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::AddNodeOnContour(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->AddNodeOnContour(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::BuildRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BuildRepresentation();
}

void VtkContourRepresentationWrap::ClearAllNodes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ClearAllNodes();
}

void VtkContourRepresentationWrap::ClosedLoopOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ClosedLoopOff();
}

void VtkContourRepresentationWrap::ClosedLoopOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ClosedLoopOn();
}

void VtkContourRepresentationWrap::ComputeInteractionState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->ComputeInteractionState(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::DeleteActiveNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->DeleteActiveNode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::DeleteLastNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->DeleteLastNode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::DeleteNthNode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->DeleteNthNode(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::GetActiveNodeSelected(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetActiveNodeSelected();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkContourRepresentationWrap::GetClosedLoop(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClosedLoop();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::GetContourRepresentationAsPolyData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	vtkPolyData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetContourRepresentationAsPolyData();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPolyDataWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataWrap *w = new VtkPolyDataWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContourRepresentationWrap::GetCurrentOperation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCurrentOperation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::GetCurrentOperationMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCurrentOperationMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::GetCurrentOperationMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCurrentOperationMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::GetLineInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	vtkContourLineInterpolator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLineInterpolator();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkContourLineInterpolatorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkContourLineInterpolatorWrap *w = new VtkContourLineInterpolatorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContourRepresentationWrap::GetNodePolyData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetNodePolyData(
			(vtkPolyData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::GetNthNodeSelected(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNthNodeSelected(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::GetNumberOfIntermediatePoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfIntermediatePoints(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::GetNumberOfNodes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfNodes();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::GetPixelTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPixelTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::GetPixelToleranceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPixelToleranceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::GetPixelToleranceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPixelToleranceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::GetPointPlacer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	vtkPointPlacer * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointPlacer();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPointPlacerWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPointPlacerWrap *w = new VtkPointPlacerWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContourRepresentationWrap::GetShowSelectedNodes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetShowSelectedNodes();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::GetWorldTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetWorldTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::GetWorldToleranceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetWorldToleranceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::GetWorldToleranceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetWorldToleranceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::HasTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasTranslucentPolygonalGeometry();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkContourRepresentationWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	vtkContourRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkContourRepresentationWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkContourRepresentationWrap *w = new VtkContourRepresentationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkContourRepresentationWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOpaqueGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::RenderOverlay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderOverlay(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::RenderTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkViewportWrap *a0 = ObjectWrap::Unwrap<VtkViewportWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RenderTranslucentPolygonalGeometry(
			(vtkViewport *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkContourRepresentation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkContourRepresentationWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkContourRepresentationWrap *w = new VtkContourRepresentationWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::SetActiveNodeToDisplayPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetActiveNodeToDisplayPosition(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::SetClosedLoop(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetClosedLoop(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::SetCurrentOperation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCurrentOperation(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::SetCurrentOperationToInactive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetCurrentOperationToInactive();
}

void VtkContourRepresentationWrap::SetCurrentOperationToScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetCurrentOperationToScale();
}

void VtkContourRepresentationWrap::SetCurrentOperationToShift(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetCurrentOperationToShift();
}

void VtkContourRepresentationWrap::SetCurrentOperationToTranslate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetCurrentOperationToTranslate();
}

void VtkContourRepresentationWrap::SetLineInterpolator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkContourLineInterpolatorWrap *a0 = ObjectWrap::Unwrap<VtkContourLineInterpolatorWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLineInterpolator(
			(vtkContourLineInterpolator *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::SetNthNodeDisplayPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->SetNthNodeDisplayPosition(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::SetNthNodeSelected(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SetNthNodeSelected(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::SetPixelTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPixelTolerance(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::SetPointPlacer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPointPlacerWrap *a0 = ObjectWrap::Unwrap<VtkPointPlacerWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPointPlacer(
			(vtkPointPlacer *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::SetShowSelectedNodes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetShowSelectedNodes(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::SetWorldTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetWorldTolerance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkContourRepresentationWrap::ShowSelectedNodesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ShowSelectedNodesOff();
}

void VtkContourRepresentationWrap::ShowSelectedNodesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ShowSelectedNodesOn();
}

void VtkContourRepresentationWrap::ToggleActiveNodeSelected(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkContourRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info.Holder());
	vtkContourRepresentation *native = (vtkContourRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->ToggleActiveNodeSelected();
	info.GetReturnValue().Set(Nan::New(r));
}

