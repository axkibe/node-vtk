/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkContourLineInterpolatorWrap.h"
#include "vtkDijkstraImageContourLineInterpolatorWrap.h"
#include "vtkObjectWrap.h"
#include "vtkRendererWrap.h"
#include "vtkContourRepresentationWrap.h"
#include "vtkImageDataWrap.h"
#include "vtkDijkstraImageGeodesicPathWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkDijkstraImageContourLineInterpolatorWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkDijkstraImageContourLineInterpolatorWrap::ptpl;

VtkDijkstraImageContourLineInterpolatorWrap::VtkDijkstraImageContourLineInterpolatorWrap()
{ }

VtkDijkstraImageContourLineInterpolatorWrap::VtkDijkstraImageContourLineInterpolatorWrap(vtkSmartPointer<vtkDijkstraImageContourLineInterpolator> _native)
{ native = _native; }

VtkDijkstraImageContourLineInterpolatorWrap::~VtkDijkstraImageContourLineInterpolatorWrap()
{ }

void VtkDijkstraImageContourLineInterpolatorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkDijkstraImageContourLineInterpolator").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("DijkstraImageContourLineInterpolator").ToLocalChecked(), ConstructorGetter);
}

void VtkDijkstraImageContourLineInterpolatorWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkDijkstraImageContourLineInterpolatorWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkContourLineInterpolatorWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkContourLineInterpolatorWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkDijkstraImageContourLineInterpolatorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetCostImage", GetCostImage);
	Nan::SetPrototypeMethod(tpl, "getCostImage", GetCostImage);

	Nan::SetPrototypeMethod(tpl, "GetDijkstraImageGeodesicPath", GetDijkstraImageGeodesicPath);
	Nan::SetPrototypeMethod(tpl, "getDijkstraImageGeodesicPath", GetDijkstraImageGeodesicPath);

	Nan::SetPrototypeMethod(tpl, "InterpolateLine", InterpolateLine);
	Nan::SetPrototypeMethod(tpl, "interpolateLine", InterpolateLine);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetCostImage", SetCostImage);
	Nan::SetPrototypeMethod(tpl, "setCostImage", SetCostImage);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );
}

void VtkDijkstraImageContourLineInterpolatorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkDijkstraImageContourLineInterpolator> native = vtkSmartPointer<vtkDijkstraImageContourLineInterpolator>::New();
		VtkDijkstraImageContourLineInterpolatorWrap* obj = new VtkDijkstraImageContourLineInterpolatorWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkDijkstraImageContourLineInterpolatorWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDijkstraImageContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkDijkstraImageContourLineInterpolatorWrap>(info.Holder());
	vtkDijkstraImageContourLineInterpolator *native = (vtkDijkstraImageContourLineInterpolator *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDijkstraImageContourLineInterpolatorWrap::GetCostImage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDijkstraImageContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkDijkstraImageContourLineInterpolatorWrap>(info.Holder());
	vtkDijkstraImageContourLineInterpolator *native = (vtkDijkstraImageContourLineInterpolator *)wrapper->native.GetPointer();
	vtkImageData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCostImage();
		VtkImageDataWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImageDataWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageDataWrap *w = new VtkImageDataWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDijkstraImageContourLineInterpolatorWrap::GetDijkstraImageGeodesicPath(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDijkstraImageContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkDijkstraImageContourLineInterpolatorWrap>(info.Holder());
	vtkDijkstraImageContourLineInterpolator *native = (vtkDijkstraImageContourLineInterpolator *)wrapper->native.GetPointer();
	vtkDijkstraImageGeodesicPath * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDijkstraImageGeodesicPath();
		VtkDijkstraImageGeodesicPathWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDijkstraImageGeodesicPathWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDijkstraImageGeodesicPathWrap *w = new VtkDijkstraImageGeodesicPathWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDijkstraImageContourLineInterpolatorWrap::InterpolateLine(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDijkstraImageContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkDijkstraImageContourLineInterpolatorWrap>(info.Holder());
	vtkDijkstraImageContourLineInterpolator *native = (vtkDijkstraImageContourLineInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkContourRepresentationWrap::ptpl))->HasInstance(info[1]))
		{
			VtkContourRepresentationWrap *a1 = ObjectWrap::Unwrap<VtkContourRepresentationWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->InterpolateLine(
						(vtkRenderer *) a0->native.GetPointer(),
						(vtkContourRepresentation *) a1->native.GetPointer(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDijkstraImageContourLineInterpolatorWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDijkstraImageContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkDijkstraImageContourLineInterpolatorWrap>(info.Holder());
	vtkDijkstraImageContourLineInterpolator *native = (vtkDijkstraImageContourLineInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDijkstraImageContourLineInterpolatorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDijkstraImageContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkDijkstraImageContourLineInterpolatorWrap>(info.Holder());
	vtkDijkstraImageContourLineInterpolator *native = (vtkDijkstraImageContourLineInterpolator *)wrapper->native.GetPointer();
	vtkDijkstraImageContourLineInterpolator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkDijkstraImageContourLineInterpolatorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDijkstraImageContourLineInterpolatorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDijkstraImageContourLineInterpolatorWrap *w = new VtkDijkstraImageContourLineInterpolatorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDijkstraImageContourLineInterpolatorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDijkstraImageContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkDijkstraImageContourLineInterpolatorWrap>(info.Holder());
	vtkDijkstraImageContourLineInterpolator *native = (vtkDijkstraImageContourLineInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkDijkstraImageContourLineInterpolator * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkDijkstraImageContourLineInterpolatorWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkDijkstraImageContourLineInterpolatorWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDijkstraImageContourLineInterpolatorWrap *w = new VtkDijkstraImageContourLineInterpolatorWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDijkstraImageContourLineInterpolatorWrap::SetCostImage(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDijkstraImageContourLineInterpolatorWrap *wrapper = ObjectWrap::Unwrap<VtkDijkstraImageContourLineInterpolatorWrap>(info.Holder());
	vtkDijkstraImageContourLineInterpolator *native = (vtkDijkstraImageContourLineInterpolator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImageDataWrap *a0 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCostImage(
			(vtkImageData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

