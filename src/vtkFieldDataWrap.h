/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKFIELDDATAWRAP_H
#define NATIVE_EXTENSION_VTK_VTKFIELDDATAWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkFieldData.h>

#include "vtkObjectWrap.h"

class VtkFieldDataWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkFieldDataWrap(vtkSmartPointer<vtkFieldData>);
		VtkFieldDataWrap();
		~VtkFieldDataWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AddArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void AllocateArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CopyAllOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CopyAllOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CopyFieldOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CopyFieldOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CopyStructure(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAbstractArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetField(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfArrays(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfComponents(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void HasArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void PassData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RemoveArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Reset(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Squeeze(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
