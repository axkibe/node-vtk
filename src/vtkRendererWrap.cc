/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkRenderer.h>

#include "vtkViewportWrap.h"
#include "vtkRendererWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPropWrap.h"
#include "vtkRenderWindowWrap.h"
#include "vtkWindowWrap.h"

using namespace v8;

Nan::Persistent<v8::Function> VtkRendererWrap::constructor;

VtkRendererWrap::VtkRendererWrap()
{ }

VtkRendererWrap::VtkRendererWrap(vtkSmartPointer<vtkRenderer> _native)
{ native = _native; }

VtkRendererWrap::~VtkRendererWrap()
{ }

void VtkRendererWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkRendererWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkViewportWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkRenderer").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("renderer").ToLocalChecked(),tpl->GetFunction());
}

void VtkRendererWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "AddActor", AddActor);
	Nan::SetPrototypeMethod(tpl, "addActor", AddActor);

	Nan::SetPrototypeMethod(tpl, "AddVolume", AddVolume);
	Nan::SetPrototypeMethod(tpl, "addVolume", AddVolume);

	Nan::SetPrototypeMethod(tpl, "RemoveActor", RemoveActor);
	Nan::SetPrototypeMethod(tpl, "removeActor", RemoveActor);

	Nan::SetPrototypeMethod(tpl, "RemoveVolume", RemoveVolume);
	Nan::SetPrototypeMethod(tpl, "removeVolume", RemoveVolume);

	Nan::SetPrototypeMethod(tpl, "RemoveAllLights", RemoveAllLights);
	Nan::SetPrototypeMethod(tpl, "removeAllLights", RemoveAllLights);

	Nan::SetPrototypeMethod(tpl, "CreateLight", CreateLight);
	Nan::SetPrototypeMethod(tpl, "createLight", CreateLight);

	Nan::SetPrototypeMethod(tpl, "GetTwoSidedLighting", GetTwoSidedLighting);
	Nan::SetPrototypeMethod(tpl, "getTwoSidedLighting", GetTwoSidedLighting);

	Nan::SetPrototypeMethod(tpl, "SetTwoSidedLighting", SetTwoSidedLighting);
	Nan::SetPrototypeMethod(tpl, "setTwoSidedLighting", SetTwoSidedLighting);

	Nan::SetPrototypeMethod(tpl, "TwoSidedLightingOn", TwoSidedLightingOn);
	Nan::SetPrototypeMethod(tpl, "twoSidedLightingOn", TwoSidedLightingOn);

	Nan::SetPrototypeMethod(tpl, "TwoSidedLightingOff", TwoSidedLightingOff);
	Nan::SetPrototypeMethod(tpl, "twoSidedLightingOff", TwoSidedLightingOff);

	Nan::SetPrototypeMethod(tpl, "SetLightFollowCamera", SetLightFollowCamera);
	Nan::SetPrototypeMethod(tpl, "setLightFollowCamera", SetLightFollowCamera);

	Nan::SetPrototypeMethod(tpl, "GetLightFollowCamera", GetLightFollowCamera);
	Nan::SetPrototypeMethod(tpl, "getLightFollowCamera", GetLightFollowCamera);

	Nan::SetPrototypeMethod(tpl, "LightFollowCameraOn", LightFollowCameraOn);
	Nan::SetPrototypeMethod(tpl, "lightFollowCameraOn", LightFollowCameraOn);

	Nan::SetPrototypeMethod(tpl, "LightFollowCameraOff", LightFollowCameraOff);
	Nan::SetPrototypeMethod(tpl, "lightFollowCameraOff", LightFollowCameraOff);

	Nan::SetPrototypeMethod(tpl, "GetAutomaticLightCreation", GetAutomaticLightCreation);
	Nan::SetPrototypeMethod(tpl, "getAutomaticLightCreation", GetAutomaticLightCreation);

	Nan::SetPrototypeMethod(tpl, "SetAutomaticLightCreation", SetAutomaticLightCreation);
	Nan::SetPrototypeMethod(tpl, "setAutomaticLightCreation", SetAutomaticLightCreation);

	Nan::SetPrototypeMethod(tpl, "AutomaticLightCreationOn", AutomaticLightCreationOn);
	Nan::SetPrototypeMethod(tpl, "automaticLightCreationOn", AutomaticLightCreationOn);

	Nan::SetPrototypeMethod(tpl, "AutomaticLightCreationOff", AutomaticLightCreationOff);
	Nan::SetPrototypeMethod(tpl, "automaticLightCreationOff", AutomaticLightCreationOff);

	Nan::SetPrototypeMethod(tpl, "UpdateLightsGeometryToFollowCamera", UpdateLightsGeometryToFollowCamera);
	Nan::SetPrototypeMethod(tpl, "updateLightsGeometryToFollowCamera", UpdateLightsGeometryToFollowCamera);

	Nan::SetPrototypeMethod(tpl, "SetErase", SetErase);
	Nan::SetPrototypeMethod(tpl, "setErase", SetErase);

	Nan::SetPrototypeMethod(tpl, "GetErase", GetErase);
	Nan::SetPrototypeMethod(tpl, "getErase", GetErase);

	Nan::SetPrototypeMethod(tpl, "EraseOn", EraseOn);
	Nan::SetPrototypeMethod(tpl, "eraseOn", EraseOn);

	Nan::SetPrototypeMethod(tpl, "EraseOff", EraseOff);
	Nan::SetPrototypeMethod(tpl, "eraseOff", EraseOff);

	Nan::SetPrototypeMethod(tpl, "SetDraw", SetDraw);
	Nan::SetPrototypeMethod(tpl, "setDraw", SetDraw);

	Nan::SetPrototypeMethod(tpl, "GetDraw", GetDraw);
	Nan::SetPrototypeMethod(tpl, "getDraw", GetDraw);

	Nan::SetPrototypeMethod(tpl, "DrawOn", DrawOn);
	Nan::SetPrototypeMethod(tpl, "drawOn", DrawOn);

	Nan::SetPrototypeMethod(tpl, "DrawOff", DrawOff);
	Nan::SetPrototypeMethod(tpl, "drawOff", DrawOff);

	Nan::SetPrototypeMethod(tpl, "CaptureGL2PSSpecialProp", CaptureGL2PSSpecialProp);
	Nan::SetPrototypeMethod(tpl, "captureGL2PSSpecialProp", CaptureGL2PSSpecialProp);

	Nan::SetPrototypeMethod(tpl, "SetAmbient", SetAmbient);
	Nan::SetPrototypeMethod(tpl, "setAmbient", SetAmbient);

	Nan::SetPrototypeMethod(tpl, "SetAllocatedRenderTime", SetAllocatedRenderTime);
	Nan::SetPrototypeMethod(tpl, "setAllocatedRenderTime", SetAllocatedRenderTime);

	Nan::SetPrototypeMethod(tpl, "GetAllocatedRenderTime", GetAllocatedRenderTime);
	Nan::SetPrototypeMethod(tpl, "getAllocatedRenderTime", GetAllocatedRenderTime);

	Nan::SetPrototypeMethod(tpl, "GetTimeFactor", GetTimeFactor);
	Nan::SetPrototypeMethod(tpl, "getTimeFactor", GetTimeFactor);

	Nan::SetPrototypeMethod(tpl, "Render", Render);
	Nan::SetPrototypeMethod(tpl, "render", Render);

	Nan::SetPrototypeMethod(tpl, "DeviceRender", DeviceRender);
	Nan::SetPrototypeMethod(tpl, "deviceRender", DeviceRender);

	Nan::SetPrototypeMethod(tpl, "DeviceRenderTranslucentPolygonalGeometry", DeviceRenderTranslucentPolygonalGeometry);
	Nan::SetPrototypeMethod(tpl, "deviceRenderTranslucentPolygonalGeometry", DeviceRenderTranslucentPolygonalGeometry);

	Nan::SetPrototypeMethod(tpl, "Clear", Clear);
	Nan::SetPrototypeMethod(tpl, "clear", Clear);

	Nan::SetPrototypeMethod(tpl, "VisibleActorCount", VisibleActorCount);
	Nan::SetPrototypeMethod(tpl, "visibleActorCount", VisibleActorCount);

	Nan::SetPrototypeMethod(tpl, "VisibleVolumeCount", VisibleVolumeCount);
	Nan::SetPrototypeMethod(tpl, "visibleVolumeCount", VisibleVolumeCount);

	Nan::SetPrototypeMethod(tpl, "ResetCameraClippingRange", ResetCameraClippingRange);
	Nan::SetPrototypeMethod(tpl, "resetCameraClippingRange", ResetCameraClippingRange);

	Nan::SetPrototypeMethod(tpl, "ResetCameraClippingRange", ResetCameraClippingRange);
	Nan::SetPrototypeMethod(tpl, "resetCameraClippingRange", ResetCameraClippingRange);

	Nan::SetPrototypeMethod(tpl, "SetNearClippingPlaneTolerance", SetNearClippingPlaneTolerance);
	Nan::SetPrototypeMethod(tpl, "setNearClippingPlaneTolerance", SetNearClippingPlaneTolerance);

	Nan::SetPrototypeMethod(tpl, "GetNearClippingPlaneToleranceMinValue", GetNearClippingPlaneToleranceMinValue);
	Nan::SetPrototypeMethod(tpl, "getNearClippingPlaneToleranceMinValue", GetNearClippingPlaneToleranceMinValue);

	Nan::SetPrototypeMethod(tpl, "GetNearClippingPlaneToleranceMaxValue", GetNearClippingPlaneToleranceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getNearClippingPlaneToleranceMaxValue", GetNearClippingPlaneToleranceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetNearClippingPlaneTolerance", GetNearClippingPlaneTolerance);
	Nan::SetPrototypeMethod(tpl, "getNearClippingPlaneTolerance", GetNearClippingPlaneTolerance);

	Nan::SetPrototypeMethod(tpl, "ResetCamera", ResetCamera);
	Nan::SetPrototypeMethod(tpl, "resetCamera", ResetCamera);

	Nan::SetPrototypeMethod(tpl, "ResetCamera", ResetCamera);
	Nan::SetPrototypeMethod(tpl, "resetCamera", ResetCamera);

	Nan::SetPrototypeMethod(tpl, "SetRenderWindow", SetRenderWindow);
	Nan::SetPrototypeMethod(tpl, "setRenderWindow", SetRenderWindow);

	Nan::SetPrototypeMethod(tpl, "GetRenderWindow", GetRenderWindow);
	Nan::SetPrototypeMethod(tpl, "getRenderWindow", GetRenderWindow);

	Nan::SetPrototypeMethod(tpl, "GetVTKWindow", GetVTKWindow);
	Nan::SetPrototypeMethod(tpl, "getVTKWindow", GetVTKWindow);

	Nan::SetPrototypeMethod(tpl, "SetBackingStore", SetBackingStore);
	Nan::SetPrototypeMethod(tpl, "setBackingStore", SetBackingStore);

	Nan::SetPrototypeMethod(tpl, "GetBackingStore", GetBackingStore);
	Nan::SetPrototypeMethod(tpl, "getBackingStore", GetBackingStore);

	Nan::SetPrototypeMethod(tpl, "BackingStoreOn", BackingStoreOn);
	Nan::SetPrototypeMethod(tpl, "backingStoreOn", BackingStoreOn);

	Nan::SetPrototypeMethod(tpl, "BackingStoreOff", BackingStoreOff);
	Nan::SetPrototypeMethod(tpl, "backingStoreOff", BackingStoreOff);

	Nan::SetPrototypeMethod(tpl, "SetInteractive", SetInteractive);
	Nan::SetPrototypeMethod(tpl, "setInteractive", SetInteractive);

	Nan::SetPrototypeMethod(tpl, "GetInteractive", GetInteractive);
	Nan::SetPrototypeMethod(tpl, "getInteractive", GetInteractive);

	Nan::SetPrototypeMethod(tpl, "InteractiveOn", InteractiveOn);
	Nan::SetPrototypeMethod(tpl, "interactiveOn", InteractiveOn);

	Nan::SetPrototypeMethod(tpl, "InteractiveOff", InteractiveOff);
	Nan::SetPrototypeMethod(tpl, "interactiveOff", InteractiveOff);

	Nan::SetPrototypeMethod(tpl, "SetLayer", SetLayer);
	Nan::SetPrototypeMethod(tpl, "setLayer", SetLayer);

	Nan::SetPrototypeMethod(tpl, "GetLayer", GetLayer);
	Nan::SetPrototypeMethod(tpl, "getLayer", GetLayer);

	Nan::SetPrototypeMethod(tpl, "SetPreserveDepthBuffer", SetPreserveDepthBuffer);
	Nan::SetPrototypeMethod(tpl, "setPreserveDepthBuffer", SetPreserveDepthBuffer);

	Nan::SetPrototypeMethod(tpl, "GetPreserveDepthBuffer", GetPreserveDepthBuffer);
	Nan::SetPrototypeMethod(tpl, "getPreserveDepthBuffer", GetPreserveDepthBuffer);

	Nan::SetPrototypeMethod(tpl, "PreserveDepthBufferOn", PreserveDepthBufferOn);
	Nan::SetPrototypeMethod(tpl, "preserveDepthBufferOn", PreserveDepthBufferOn);

	Nan::SetPrototypeMethod(tpl, "PreserveDepthBufferOff", PreserveDepthBufferOff);
	Nan::SetPrototypeMethod(tpl, "preserveDepthBufferOff", PreserveDepthBufferOff);

	Nan::SetPrototypeMethod(tpl, "Transparent", Transparent);
	Nan::SetPrototypeMethod(tpl, "transparent", Transparent);

	Nan::SetPrototypeMethod(tpl, "WorldToView", WorldToView);
	Nan::SetPrototypeMethod(tpl, "worldToView", WorldToView);

	Nan::SetPrototypeMethod(tpl, "ViewToWorld", ViewToWorld);
	Nan::SetPrototypeMethod(tpl, "viewToWorld", ViewToWorld);

	Nan::SetPrototypeMethod(tpl, "GetZ", GetZ);
	Nan::SetPrototypeMethod(tpl, "getZ", GetZ);

	Nan::SetPrototypeMethod(tpl, "GetLastRenderTimeInSeconds", GetLastRenderTimeInSeconds);
	Nan::SetPrototypeMethod(tpl, "getLastRenderTimeInSeconds", GetLastRenderTimeInSeconds);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPropsRendered", GetNumberOfPropsRendered);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPropsRendered", GetNumberOfPropsRendered);

	Nan::SetPrototypeMethod(tpl, "StereoMidpoint", StereoMidpoint);
	Nan::SetPrototypeMethod(tpl, "stereoMidpoint", StereoMidpoint);

	Nan::SetPrototypeMethod(tpl, "GetTiledAspectRatio", GetTiledAspectRatio);
	Nan::SetPrototypeMethod(tpl, "getTiledAspectRatio", GetTiledAspectRatio);

	Nan::SetPrototypeMethod(tpl, "IsActiveCameraCreated", IsActiveCameraCreated);
	Nan::SetPrototypeMethod(tpl, "isActiveCameraCreated", IsActiveCameraCreated);

	Nan::SetPrototypeMethod(tpl, "SetUseDepthPeeling", SetUseDepthPeeling);
	Nan::SetPrototypeMethod(tpl, "setUseDepthPeeling", SetUseDepthPeeling);

	Nan::SetPrototypeMethod(tpl, "GetUseDepthPeeling", GetUseDepthPeeling);
	Nan::SetPrototypeMethod(tpl, "getUseDepthPeeling", GetUseDepthPeeling);

	Nan::SetPrototypeMethod(tpl, "UseDepthPeelingOn", UseDepthPeelingOn);
	Nan::SetPrototypeMethod(tpl, "useDepthPeelingOn", UseDepthPeelingOn);

	Nan::SetPrototypeMethod(tpl, "UseDepthPeelingOff", UseDepthPeelingOff);
	Nan::SetPrototypeMethod(tpl, "useDepthPeelingOff", UseDepthPeelingOff);

	Nan::SetPrototypeMethod(tpl, "SetOcclusionRatio", SetOcclusionRatio);
	Nan::SetPrototypeMethod(tpl, "setOcclusionRatio", SetOcclusionRatio);

	Nan::SetPrototypeMethod(tpl, "GetOcclusionRatioMinValue", GetOcclusionRatioMinValue);
	Nan::SetPrototypeMethod(tpl, "getOcclusionRatioMinValue", GetOcclusionRatioMinValue);

	Nan::SetPrototypeMethod(tpl, "GetOcclusionRatioMaxValue", GetOcclusionRatioMaxValue);
	Nan::SetPrototypeMethod(tpl, "getOcclusionRatioMaxValue", GetOcclusionRatioMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetOcclusionRatio", GetOcclusionRatio);
	Nan::SetPrototypeMethod(tpl, "getOcclusionRatio", GetOcclusionRatio);

	Nan::SetPrototypeMethod(tpl, "SetMaximumNumberOfPeels", SetMaximumNumberOfPeels);
	Nan::SetPrototypeMethod(tpl, "setMaximumNumberOfPeels", SetMaximumNumberOfPeels);

	Nan::SetPrototypeMethod(tpl, "GetMaximumNumberOfPeels", GetMaximumNumberOfPeels);
	Nan::SetPrototypeMethod(tpl, "getMaximumNumberOfPeels", GetMaximumNumberOfPeels);

	Nan::SetPrototypeMethod(tpl, "GetLastRenderingUsedDepthPeeling", GetLastRenderingUsedDepthPeeling);
	Nan::SetPrototypeMethod(tpl, "getLastRenderingUsedDepthPeeling", GetLastRenderingUsedDepthPeeling);

	Nan::SetPrototypeMethod(tpl, "TexturedBackgroundOn", TexturedBackgroundOn);
	Nan::SetPrototypeMethod(tpl, "texturedBackgroundOn", TexturedBackgroundOn);

	Nan::SetPrototypeMethod(tpl, "TexturedBackgroundOff", TexturedBackgroundOff);
	Nan::SetPrototypeMethod(tpl, "texturedBackgroundOff", TexturedBackgroundOff);

}

void VtkRendererWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkRenderer> native = vtkSmartPointer<vtkRenderer>::New();
		VtkRendererWrap* obj = new VtkRendererWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(strcmp(*s, "__nowrap" ))
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkRendererWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRendererWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsString())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	vtkRenderer * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	const int argc = 1;
	v8::Local<v8::Value> argv[argc] =
		{ Nan::New("__nowrap").ToLocalChecked() };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkRendererWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(argc, argv);
	VtkRendererWrap *w = new VtkRendererWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRendererWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkRenderer * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		const int argc = 1;
		v8::Local<v8::Value> argv[argc] =
			{ Nan::New("__nowrap").ToLocalChecked() };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkRendererWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(argc, argv);
		VtkRendererWrap *w = new VtkRendererWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::AddActor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPropWrap *a0 = ObjectWrap::Unwrap<VtkPropWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddActor(
			(vtkProp *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::AddVolume(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPropWrap *a0 = ObjectWrap::Unwrap<VtkPropWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddVolume(
			(vtkProp *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::RemoveActor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPropWrap *a0 = ObjectWrap::Unwrap<VtkPropWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveActor(
			(vtkProp *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::RemoveVolume(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPropWrap *a0 = ObjectWrap::Unwrap<VtkPropWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveVolume(
			(vtkProp *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::RemoveAllLights(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllLights();
}

void VtkRendererWrap::CreateLight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CreateLight();
}

void VtkRendererWrap::GetTwoSidedLighting(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTwoSidedLighting();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::SetTwoSidedLighting(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTwoSidedLighting(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::TwoSidedLightingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TwoSidedLightingOn();
}

void VtkRendererWrap::TwoSidedLightingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TwoSidedLightingOff();
}

void VtkRendererWrap::SetLightFollowCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLightFollowCamera(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetLightFollowCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLightFollowCamera();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::LightFollowCameraOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LightFollowCameraOn();
}

void VtkRendererWrap::LightFollowCameraOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LightFollowCameraOff();
}

void VtkRendererWrap::GetAutomaticLightCreation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAutomaticLightCreation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::SetAutomaticLightCreation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAutomaticLightCreation(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::AutomaticLightCreationOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AutomaticLightCreationOn();
}

void VtkRendererWrap::AutomaticLightCreationOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AutomaticLightCreationOff();
}

void VtkRendererWrap::UpdateLightsGeometryToFollowCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UpdateLightsGeometryToFollowCamera();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::SetErase(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetErase(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetErase(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetErase();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::EraseOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EraseOn();
}

void VtkRendererWrap::EraseOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->EraseOff();
}

void VtkRendererWrap::SetDraw(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDraw(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetDraw(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDraw();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::DrawOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DrawOn();
}

void VtkRendererWrap::DrawOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DrawOff();
}

void VtkRendererWrap::CaptureGL2PSSpecialProp(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPropWrap *a0 = ObjectWrap::Unwrap<VtkPropWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->CaptureGL2PSSpecialProp(
			(vtkProp *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::SetAmbient(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetAmbient(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::SetAllocatedRenderTime(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAllocatedRenderTime(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetAllocatedRenderTime(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAllocatedRenderTime();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::GetTimeFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTimeFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::Render(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Render();
}

void VtkRendererWrap::DeviceRender(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DeviceRender();
}

void VtkRendererWrap::DeviceRenderTranslucentPolygonalGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DeviceRenderTranslucentPolygonalGeometry();
}

void VtkRendererWrap::Clear(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Clear();
}

void VtkRendererWrap::VisibleActorCount(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->VisibleActorCount();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::VisibleVolumeCount(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->VisibleVolumeCount();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::ResetCameraClippingRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ResetCameraClippingRange();
}

void VtkRendererWrap::SetNearClippingPlaneTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNearClippingPlaneTolerance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetNearClippingPlaneToleranceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNearClippingPlaneToleranceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::GetNearClippingPlaneToleranceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNearClippingPlaneToleranceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::GetNearClippingPlaneTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNearClippingPlaneTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::ResetCamera(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ResetCamera();
}

void VtkRendererWrap::SetRenderWindow(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkRenderWindowWrap *a0 = ObjectWrap::Unwrap<VtkRenderWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRenderWindow(
			(vtkRenderWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetRenderWindow(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	vtkRenderWindow * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRenderWindow();
	const int argc = 1;
	v8::Local<v8::Value> argv[argc] =
		{ Nan::New("__nowrap").ToLocalChecked() };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkRenderWindowWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(argc, argv);
	VtkRenderWindowWrap *w = new VtkRenderWindowWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRendererWrap::GetVTKWindow(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	vtkWindow * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVTKWindow();
	const int argc = 1;
	v8::Local<v8::Value> argv[argc] =
		{ Nan::New("__nowrap").ToLocalChecked() };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkWindowWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(argc, argv);
	VtkWindowWrap *w = new VtkWindowWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRendererWrap::SetBackingStore(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBackingStore(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetBackingStore(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBackingStore();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::BackingStoreOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BackingStoreOn();
}

void VtkRendererWrap::BackingStoreOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BackingStoreOff();
}

void VtkRendererWrap::SetInteractive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInteractive(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetInteractive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInteractive();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::InteractiveOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InteractiveOn();
}

void VtkRendererWrap::InteractiveOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InteractiveOff();
}

void VtkRendererWrap::SetLayer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLayer(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetLayer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLayer();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::SetPreserveDepthBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPreserveDepthBuffer(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetPreserveDepthBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPreserveDepthBuffer();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::PreserveDepthBufferOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PreserveDepthBufferOn();
}

void VtkRendererWrap::PreserveDepthBufferOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PreserveDepthBufferOff();
}

void VtkRendererWrap::Transparent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->Transparent();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::WorldToView(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->WorldToView();
}

void VtkRendererWrap::ViewToWorld(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ViewToWorld();
}

void VtkRendererWrap::GetZ(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			double r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetZ(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetLastRenderTimeInSeconds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLastRenderTimeInSeconds();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::GetNumberOfPropsRendered(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPropsRendered();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::StereoMidpoint(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->StereoMidpoint();
}

void VtkRendererWrap::GetTiledAspectRatio(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTiledAspectRatio();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::IsActiveCameraCreated(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->IsActiveCameraCreated();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::SetUseDepthPeeling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseDepthPeeling(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetUseDepthPeeling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseDepthPeeling();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::UseDepthPeelingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseDepthPeelingOn();
}

void VtkRendererWrap::UseDepthPeelingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseDepthPeelingOff();
}

void VtkRendererWrap::SetOcclusionRatio(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOcclusionRatio(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetOcclusionRatioMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOcclusionRatioMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::GetOcclusionRatioMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOcclusionRatioMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::GetOcclusionRatio(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOcclusionRatio();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::SetMaximumNumberOfPeels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumNumberOfPeels(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRendererWrap::GetMaximumNumberOfPeels(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumNumberOfPeels();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::GetLastRenderingUsedDepthPeeling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLastRenderingUsedDepthPeeling();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkRendererWrap::TexturedBackgroundOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TexturedBackgroundOn();
}

void VtkRendererWrap::TexturedBackgroundOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRendererWrap *wrapper = ObjectWrap::Unwrap<VtkRendererWrap>(info.Holder());
	vtkRenderer *native = (vtkRenderer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TexturedBackgroundOff();
}

