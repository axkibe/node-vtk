/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkThreadedImageAlgorithmWrap.h"
#include "vtkImageBSplineCoefficientsWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkImageBSplineCoefficientsWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkImageBSplineCoefficientsWrap::ptpl;

VtkImageBSplineCoefficientsWrap::VtkImageBSplineCoefficientsWrap()
{ }

VtkImageBSplineCoefficientsWrap::VtkImageBSplineCoefficientsWrap(vtkSmartPointer<vtkImageBSplineCoefficients> _native)
{ native = _native; }

VtkImageBSplineCoefficientsWrap::~VtkImageBSplineCoefficientsWrap()
{ }

void VtkImageBSplineCoefficientsWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkThreadedImageAlgorithmWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkThreadedImageAlgorithmWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkImageBSplineCoefficientsWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkImageBSplineCoefficients").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ImageBSplineCoefficients").ToLocalChecked(),tpl->GetFunction());
}

void VtkImageBSplineCoefficientsWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "BypassOff", BypassOff);
	Nan::SetPrototypeMethod(tpl, "bypassOff", BypassOff);

	Nan::SetPrototypeMethod(tpl, "BypassOn", BypassOn);
	Nan::SetPrototypeMethod(tpl, "bypassOn", BypassOn);

	Nan::SetPrototypeMethod(tpl, "Evaluate", Evaluate);
	Nan::SetPrototypeMethod(tpl, "evaluate", Evaluate);

	Nan::SetPrototypeMethod(tpl, "GetBorderMode", GetBorderMode);
	Nan::SetPrototypeMethod(tpl, "getBorderMode", GetBorderMode);

	Nan::SetPrototypeMethod(tpl, "GetBorderModeAsString", GetBorderModeAsString);
	Nan::SetPrototypeMethod(tpl, "getBorderModeAsString", GetBorderModeAsString);

	Nan::SetPrototypeMethod(tpl, "GetBorderModeMaxValue", GetBorderModeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getBorderModeMaxValue", GetBorderModeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetBorderModeMinValue", GetBorderModeMinValue);
	Nan::SetPrototypeMethod(tpl, "getBorderModeMinValue", GetBorderModeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetBypass", GetBypass);
	Nan::SetPrototypeMethod(tpl, "getBypass", GetBypass);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetOutputScalarType", GetOutputScalarType);
	Nan::SetPrototypeMethod(tpl, "getOutputScalarType", GetOutputScalarType);

	Nan::SetPrototypeMethod(tpl, "GetOutputScalarTypeAsString", GetOutputScalarTypeAsString);
	Nan::SetPrototypeMethod(tpl, "getOutputScalarTypeAsString", GetOutputScalarTypeAsString);

	Nan::SetPrototypeMethod(tpl, "GetOutputScalarTypeMaxValue", GetOutputScalarTypeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getOutputScalarTypeMaxValue", GetOutputScalarTypeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetOutputScalarTypeMinValue", GetOutputScalarTypeMinValue);
	Nan::SetPrototypeMethod(tpl, "getOutputScalarTypeMinValue", GetOutputScalarTypeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetSplineDegree", GetSplineDegree);
	Nan::SetPrototypeMethod(tpl, "getSplineDegree", GetSplineDegree);

	Nan::SetPrototypeMethod(tpl, "GetSplineDegreeMaxValue", GetSplineDegreeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getSplineDegreeMaxValue", GetSplineDegreeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetSplineDegreeMinValue", GetSplineDegreeMinValue);
	Nan::SetPrototypeMethod(tpl, "getSplineDegreeMinValue", GetSplineDegreeMinValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBorderMode", SetBorderMode);
	Nan::SetPrototypeMethod(tpl, "setBorderMode", SetBorderMode);

	Nan::SetPrototypeMethod(tpl, "SetBorderModeToClamp", SetBorderModeToClamp);
	Nan::SetPrototypeMethod(tpl, "setBorderModeToClamp", SetBorderModeToClamp);

	Nan::SetPrototypeMethod(tpl, "SetBorderModeToMirror", SetBorderModeToMirror);
	Nan::SetPrototypeMethod(tpl, "setBorderModeToMirror", SetBorderModeToMirror);

	Nan::SetPrototypeMethod(tpl, "SetBorderModeToRepeat", SetBorderModeToRepeat);
	Nan::SetPrototypeMethod(tpl, "setBorderModeToRepeat", SetBorderModeToRepeat);

	Nan::SetPrototypeMethod(tpl, "SetBypass", SetBypass);
	Nan::SetPrototypeMethod(tpl, "setBypass", SetBypass);

	Nan::SetPrototypeMethod(tpl, "SetOutputScalarType", SetOutputScalarType);
	Nan::SetPrototypeMethod(tpl, "setOutputScalarType", SetOutputScalarType);

	Nan::SetPrototypeMethod(tpl, "SetOutputScalarTypeToDouble", SetOutputScalarTypeToDouble);
	Nan::SetPrototypeMethod(tpl, "setOutputScalarTypeToDouble", SetOutputScalarTypeToDouble);

	Nan::SetPrototypeMethod(tpl, "SetOutputScalarTypeToFloat", SetOutputScalarTypeToFloat);
	Nan::SetPrototypeMethod(tpl, "setOutputScalarTypeToFloat", SetOutputScalarTypeToFloat);

	Nan::SetPrototypeMethod(tpl, "SetSplineDegree", SetSplineDegree);
	Nan::SetPrototypeMethod(tpl, "setSplineDegree", SetSplineDegree);

}

void VtkImageBSplineCoefficientsWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageBSplineCoefficients> native = vtkSmartPointer<vtkImageBSplineCoefficients>::New();
		VtkImageBSplineCoefficientsWrap* obj = new VtkImageBSplineCoefficientsWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageBSplineCoefficientsWrap::BypassOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BypassOff();
}

void VtkImageBSplineCoefficientsWrap::BypassOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BypassOn();
}

void VtkImageBSplineCoefficientsWrap::Evaluate(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				double r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->Evaluate(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageBSplineCoefficientsWrap::GetBorderMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBorderMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageBSplineCoefficientsWrap::GetBorderModeAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBorderModeAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageBSplineCoefficientsWrap::GetBorderModeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBorderModeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageBSplineCoefficientsWrap::GetBorderModeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBorderModeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageBSplineCoefficientsWrap::GetBypass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBypass();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageBSplineCoefficientsWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageBSplineCoefficientsWrap::GetOutputScalarType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputScalarType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageBSplineCoefficientsWrap::GetOutputScalarTypeAsString(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputScalarTypeAsString();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageBSplineCoefficientsWrap::GetOutputScalarTypeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputScalarTypeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageBSplineCoefficientsWrap::GetOutputScalarTypeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputScalarTypeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageBSplineCoefficientsWrap::GetSplineDegree(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSplineDegree();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageBSplineCoefficientsWrap::GetSplineDegreeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSplineDegreeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageBSplineCoefficientsWrap::GetSplineDegreeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSplineDegreeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageBSplineCoefficientsWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageBSplineCoefficientsWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	vtkImageBSplineCoefficients * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImageBSplineCoefficientsWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageBSplineCoefficientsWrap *w = new VtkImageBSplineCoefficientsWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageBSplineCoefficientsWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageBSplineCoefficients * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkImageBSplineCoefficientsWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageBSplineCoefficientsWrap *w = new VtkImageBSplineCoefficientsWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageBSplineCoefficientsWrap::SetBorderMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBorderMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageBSplineCoefficientsWrap::SetBorderModeToClamp(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetBorderModeToClamp();
}

void VtkImageBSplineCoefficientsWrap::SetBorderModeToMirror(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetBorderModeToMirror();
}

void VtkImageBSplineCoefficientsWrap::SetBorderModeToRepeat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetBorderModeToRepeat();
}

void VtkImageBSplineCoefficientsWrap::SetBypass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBypass(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageBSplineCoefficientsWrap::SetOutputScalarType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputScalarType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageBSplineCoefficientsWrap::SetOutputScalarTypeToDouble(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputScalarTypeToDouble();
}

void VtkImageBSplineCoefficientsWrap::SetOutputScalarTypeToFloat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputScalarTypeToFloat();
}

void VtkImageBSplineCoefficientsWrap::SetSplineDegree(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageBSplineCoefficientsWrap *wrapper = ObjectWrap::Unwrap<VtkImageBSplineCoefficientsWrap>(info.Holder());
	vtkImageBSplineCoefficients *native = (vtkImageBSplineCoefficients *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSplineDegree(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

