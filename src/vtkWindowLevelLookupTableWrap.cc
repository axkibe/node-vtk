/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkLookupTableWrap.h"
#include "vtkWindowLevelLookupTableWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkWindowLevelLookupTableWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkWindowLevelLookupTableWrap::ptpl;

VtkWindowLevelLookupTableWrap::VtkWindowLevelLookupTableWrap()
{ }

VtkWindowLevelLookupTableWrap::VtkWindowLevelLookupTableWrap(vtkSmartPointer<vtkWindowLevelLookupTable> _native)
{ native = _native; }

VtkWindowLevelLookupTableWrap::~VtkWindowLevelLookupTableWrap()
{ }

void VtkWindowLevelLookupTableWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkWindowLevelLookupTable").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("WindowLevelLookupTable").ToLocalChecked(), ConstructorGetter);
}

void VtkWindowLevelLookupTableWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkWindowLevelLookupTableWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkLookupTableWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkLookupTableWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkWindowLevelLookupTableWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "Build", Build);
	Nan::SetPrototypeMethod(tpl, "build", Build);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetInverseVideo", GetInverseVideo);
	Nan::SetPrototypeMethod(tpl, "getInverseVideo", GetInverseVideo);

	Nan::SetPrototypeMethod(tpl, "GetLevel", GetLevel);
	Nan::SetPrototypeMethod(tpl, "getLevel", GetLevel);

	Nan::SetPrototypeMethod(tpl, "GetWindow", GetWindow);
	Nan::SetPrototypeMethod(tpl, "getWindow", GetWindow);

	Nan::SetPrototypeMethod(tpl, "InverseVideoOff", InverseVideoOff);
	Nan::SetPrototypeMethod(tpl, "inverseVideoOff", InverseVideoOff);

	Nan::SetPrototypeMethod(tpl, "InverseVideoOn", InverseVideoOn);
	Nan::SetPrototypeMethod(tpl, "inverseVideoOn", InverseVideoOn);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetInverseVideo", SetInverseVideo);
	Nan::SetPrototypeMethod(tpl, "setInverseVideo", SetInverseVideo);

	Nan::SetPrototypeMethod(tpl, "SetLevel", SetLevel);
	Nan::SetPrototypeMethod(tpl, "setLevel", SetLevel);

	Nan::SetPrototypeMethod(tpl, "SetMaximumTableValue", SetMaximumTableValue);
	Nan::SetPrototypeMethod(tpl, "setMaximumTableValue", SetMaximumTableValue);

	Nan::SetPrototypeMethod(tpl, "SetMinimumTableValue", SetMinimumTableValue);
	Nan::SetPrototypeMethod(tpl, "setMinimumTableValue", SetMinimumTableValue);

	Nan::SetPrototypeMethod(tpl, "SetWindow", SetWindow);
	Nan::SetPrototypeMethod(tpl, "setWindow", SetWindow);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );
}

void VtkWindowLevelLookupTableWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkWindowLevelLookupTable> native = vtkSmartPointer<vtkWindowLevelLookupTable>::New();
		VtkWindowLevelLookupTableWrap* obj = new VtkWindowLevelLookupTableWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkWindowLevelLookupTableWrap::Build(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Build();
}

void VtkWindowLevelLookupTableWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkWindowLevelLookupTableWrap::GetInverseVideo(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInverseVideo();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkWindowLevelLookupTableWrap::GetLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLevel();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkWindowLevelLookupTableWrap::GetWindow(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetWindow();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkWindowLevelLookupTableWrap::InverseVideoOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InverseVideoOff();
}

void VtkWindowLevelLookupTableWrap::InverseVideoOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InverseVideoOn();
}

void VtkWindowLevelLookupTableWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWindowLevelLookupTableWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	vtkWindowLevelLookupTable * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkWindowLevelLookupTableWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkWindowLevelLookupTableWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkWindowLevelLookupTableWrap *w = new VtkWindowLevelLookupTableWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkWindowLevelLookupTableWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkWindowLevelLookupTable * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkWindowLevelLookupTableWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkWindowLevelLookupTableWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkWindowLevelLookupTableWrap *w = new VtkWindowLevelLookupTableWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWindowLevelLookupTableWrap::SetInverseVideo(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInverseVideo(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWindowLevelLookupTableWrap::SetLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLevel(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWindowLevelLookupTableWrap::SetMaximumTableValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->SetMaximumTableValue(
						info[0]->NumberValue(),
						info[1]->NumberValue(),
						info[2]->NumberValue(),
						info[3]->NumberValue()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWindowLevelLookupTableWrap::SetMinimumTableValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->SetMinimumTableValue(
						info[0]->NumberValue(),
						info[1]->NumberValue(),
						info[2]->NumberValue(),
						info[3]->NumberValue()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWindowLevelLookupTableWrap::SetWindow(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWindowLevelLookupTableWrap *wrapper = ObjectWrap::Unwrap<VtkWindowLevelLookupTableWrap>(info.Holder());
	vtkWindowLevelLookupTable *native = (vtkWindowLevelLookupTable *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetWindow(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

