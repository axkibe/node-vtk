/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkThreadedImageAlgorithmWrap.h"
#include "vtkImageRectilinearWipeWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDataObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkImageRectilinearWipeWrap::constructor;

VtkImageRectilinearWipeWrap::VtkImageRectilinearWipeWrap()
{ }

VtkImageRectilinearWipeWrap::VtkImageRectilinearWipeWrap(vtkSmartPointer<vtkImageRectilinearWipe> _native)
{ native = _native; }

VtkImageRectilinearWipeWrap::~VtkImageRectilinearWipeWrap()
{ }

void VtkImageRectilinearWipeWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkImageRectilinearWipeWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkImageAlgorithmWrap::InitTpl(tpl);
	VtkThreadedImageAlgorithmWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkImageRectilinearWipe").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ImageRectilinearWipe").ToLocalChecked(),tpl->GetFunction());
}

void VtkImageRectilinearWipeWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetWipe", GetWipe);
	Nan::SetPrototypeMethod(tpl, "getWipe", GetWipe);

	Nan::SetPrototypeMethod(tpl, "GetWipeMaxValue", GetWipeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getWipeMaxValue", GetWipeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetWipeMinValue", GetWipeMinValue);
	Nan::SetPrototypeMethod(tpl, "getWipeMinValue", GetWipeMinValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAxis", SetAxis);
	Nan::SetPrototypeMethod(tpl, "setAxis", SetAxis);

	Nan::SetPrototypeMethod(tpl, "SetInput1Data", SetInput1Data);
	Nan::SetPrototypeMethod(tpl, "setInput1Data", SetInput1Data);

	Nan::SetPrototypeMethod(tpl, "SetInput2Data", SetInput2Data);
	Nan::SetPrototypeMethod(tpl, "setInput2Data", SetInput2Data);

	Nan::SetPrototypeMethod(tpl, "SetPosition", SetPosition);
	Nan::SetPrototypeMethod(tpl, "setPosition", SetPosition);

	Nan::SetPrototypeMethod(tpl, "SetWipe", SetWipe);
	Nan::SetPrototypeMethod(tpl, "setWipe", SetWipe);

	Nan::SetPrototypeMethod(tpl, "SetWipeToHorizontal", SetWipeToHorizontal);
	Nan::SetPrototypeMethod(tpl, "setWipeToHorizontal", SetWipeToHorizontal);

	Nan::SetPrototypeMethod(tpl, "SetWipeToLowerLeft", SetWipeToLowerLeft);
	Nan::SetPrototypeMethod(tpl, "setWipeToLowerLeft", SetWipeToLowerLeft);

	Nan::SetPrototypeMethod(tpl, "SetWipeToLowerRight", SetWipeToLowerRight);
	Nan::SetPrototypeMethod(tpl, "setWipeToLowerRight", SetWipeToLowerRight);

	Nan::SetPrototypeMethod(tpl, "SetWipeToQuad", SetWipeToQuad);
	Nan::SetPrototypeMethod(tpl, "setWipeToQuad", SetWipeToQuad);

	Nan::SetPrototypeMethod(tpl, "SetWipeToUpperLeft", SetWipeToUpperLeft);
	Nan::SetPrototypeMethod(tpl, "setWipeToUpperLeft", SetWipeToUpperLeft);

	Nan::SetPrototypeMethod(tpl, "SetWipeToUpperRight", SetWipeToUpperRight);
	Nan::SetPrototypeMethod(tpl, "setWipeToUpperRight", SetWipeToUpperRight);

	Nan::SetPrototypeMethod(tpl, "SetWipeToVertical", SetWipeToVertical);
	Nan::SetPrototypeMethod(tpl, "setWipeToVertical", SetWipeToVertical);

}

void VtkImageRectilinearWipeWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageRectilinearWipe> native = vtkSmartPointer<vtkImageRectilinearWipe>::New();
		VtkImageRectilinearWipeWrap* obj = new VtkImageRectilinearWipeWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageRectilinearWipeWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageRectilinearWipeWrap::GetWipe(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetWipe();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageRectilinearWipeWrap::GetWipeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetWipeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageRectilinearWipeWrap::GetWipeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetWipeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageRectilinearWipeWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageRectilinearWipeWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	vtkImageRectilinearWipe * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImageRectilinearWipeWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageRectilinearWipeWrap *w = new VtkImageRectilinearWipeWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageRectilinearWipeWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageRectilinearWipe * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkImageRectilinearWipeWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageRectilinearWipeWrap *w = new VtkImageRectilinearWipeWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageRectilinearWipeWrap::SetAxis(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetAxis(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageRectilinearWipeWrap::SetInput1Data(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInput1Data(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageRectilinearWipeWrap::SetInput2Data(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInput2Data(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageRectilinearWipeWrap::SetPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetPosition(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageRectilinearWipeWrap::SetWipe(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetWipe(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageRectilinearWipeWrap::SetWipeToHorizontal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetWipeToHorizontal();
}

void VtkImageRectilinearWipeWrap::SetWipeToLowerLeft(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetWipeToLowerLeft();
}

void VtkImageRectilinearWipeWrap::SetWipeToLowerRight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetWipeToLowerRight();
}

void VtkImageRectilinearWipeWrap::SetWipeToQuad(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetWipeToQuad();
}

void VtkImageRectilinearWipeWrap::SetWipeToUpperLeft(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetWipeToUpperLeft();
}

void VtkImageRectilinearWipeWrap::SetWipeToUpperRight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetWipeToUpperRight();
}

void VtkImageRectilinearWipeWrap::SetWipeToVertical(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageRectilinearWipeWrap *wrapper = ObjectWrap::Unwrap<VtkImageRectilinearWipeWrap>(info.Holder());
	vtkImageRectilinearWipe *native = (vtkImageRectilinearWipe *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetWipeToVertical();
}

