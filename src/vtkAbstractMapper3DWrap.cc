/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkAbstractMapper3D.h>

#include "vtkAbstractMapperWrap.h"
#include "vtkAbstractMapper3DWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

Nan::Persistent<v8::Function> VtkAbstractMapper3DWrap::constructor;

VtkAbstractMapper3DWrap::VtkAbstractMapper3DWrap()
{ }

VtkAbstractMapper3DWrap::VtkAbstractMapper3DWrap(vtkSmartPointer<vtkAbstractMapper3D> _native)
{ native = _native; }

VtkAbstractMapper3DWrap::~VtkAbstractMapper3DWrap()
{ }

void VtkAbstractMapper3DWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkAbstractMapper3DWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkAbstractMapperWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkAbstractMapper3D").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("abstractMapper3D").ToLocalChecked(),tpl->GetFunction());
}

void VtkAbstractMapper3DWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "GetLength", GetLength);
	Nan::SetPrototypeMethod(tpl, "getLength", GetLength);

	Nan::SetPrototypeMethod(tpl, "IsARayCastMapper", IsARayCastMapper);
	Nan::SetPrototypeMethod(tpl, "isARayCastMapper", IsARayCastMapper);

	Nan::SetPrototypeMethod(tpl, "IsARenderIntoImageMapper", IsARenderIntoImageMapper);
	Nan::SetPrototypeMethod(tpl, "isARenderIntoImageMapper", IsARenderIntoImageMapper);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfClippingPlanes", GetNumberOfClippingPlanes);
	Nan::SetPrototypeMethod(tpl, "getNumberOfClippingPlanes", GetNumberOfClippingPlanes);

}

void VtkAbstractMapper3DWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(strcmp(*s, "__nowrap" ))
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkAbstractMapper3DWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractMapper3DWrap>(info.Holder());
	vtkAbstractMapper3D *native = (vtkAbstractMapper3D *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAbstractMapper3DWrap::GetLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractMapper3DWrap>(info.Holder());
	vtkAbstractMapper3D *native = (vtkAbstractMapper3D *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLength();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractMapper3DWrap::GetNumberOfClippingPlanes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractMapper3DWrap>(info.Holder());
	vtkAbstractMapper3D *native = (vtkAbstractMapper3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfClippingPlanes();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractMapper3DWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractMapper3DWrap>(info.Holder());
	vtkAbstractMapper3D *native = (vtkAbstractMapper3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAbstractMapper3DWrap::IsARayCastMapper(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractMapper3DWrap>(info.Holder());
	vtkAbstractMapper3D *native = (vtkAbstractMapper3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->IsARayCastMapper();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractMapper3DWrap::IsARenderIntoImageMapper(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractMapper3DWrap>(info.Holder());
	vtkAbstractMapper3D *native = (vtkAbstractMapper3D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->IsARenderIntoImageMapper();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAbstractMapper3DWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractMapper3DWrap>(info.Holder());
	vtkAbstractMapper3D *native = (vtkAbstractMapper3D *)wrapper->native.GetPointer();
	vtkAbstractMapper3D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	const int argc = 1;
	v8::Local<v8::Value> argv[argc] =
		{ Nan::New("__nowrap").ToLocalChecked() };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkAbstractMapper3DWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(argc, argv);
	VtkAbstractMapper3DWrap *w = new VtkAbstractMapper3DWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAbstractMapper3DWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAbstractMapper3DWrap *wrapper = ObjectWrap::Unwrap<VtkAbstractMapper3DWrap>(info.Holder());
	vtkAbstractMapper3D *native = (vtkAbstractMapper3D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkAbstractMapper3D * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		const int argc = 1;
		v8::Local<v8::Value> argv[argc] =
			{ Nan::New("__nowrap").ToLocalChecked() };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkAbstractMapper3DWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(argc, argv);
		VtkAbstractMapper3DWrap *w = new VtkAbstractMapper3DWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

