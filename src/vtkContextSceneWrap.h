/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKCONTEXTSCENEWRAP_H
#define NATIVE_EXTENSION_VTK_VTKCONTEXTSCENEWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkContextScene.h>

#include "vtkObjectWrap.h"

class VtkContextSceneWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkContextSceneWrap(vtkSmartPointer<vtkContextScene>);
		VtkContextSceneWrap();
		~VtkContextSceneWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void ClearItems(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAnnotationLink(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetBufferId(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSceneHeight(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSceneWidth(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTransform(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetViewHeight(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetViewWidth(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ScaleTilesOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ScaleTilesOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAnnotationLink(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetRenderer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetTransform(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
