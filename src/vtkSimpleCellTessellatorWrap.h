/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKSIMPLECELLTESSELLATORWRAP_H
#define NATIVE_EXTENSION_VTK_VTKSIMPLECELLTESSELLATORWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkSimpleCellTessellator.h>

#include "vtkGenericCellTessellatorWrap.h"

class VtkSimpleCellTessellatorWrap : public VtkGenericCellTessellatorWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkSimpleCellTessellatorWrap(vtkSmartPointer<vtkSimpleCellTessellator>);
		VtkSimpleCellTessellatorWrap();
		~VtkSimpleCellTessellatorWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFixedSubdivisions(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGenericCell(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaxAdaptiveSubdivisions(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaxSubdivisionLevel(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Reset(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFixedSubdivisions(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaxSubdivisionLevel(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSubdivisionLevels(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Tessellate(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Triangulate(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
