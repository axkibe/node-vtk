/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkHyperStreamlineWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkHyperStreamlineWrap::constructor;

VtkHyperStreamlineWrap::VtkHyperStreamlineWrap()
{ }

VtkHyperStreamlineWrap::VtkHyperStreamlineWrap(vtkSmartPointer<vtkHyperStreamline> _native)
{ native = _native; }

VtkHyperStreamlineWrap::~VtkHyperStreamlineWrap()
{ }

void VtkHyperStreamlineWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkHyperStreamlineWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkPolyDataAlgorithmWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkHyperStreamline").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("HyperStreamline").ToLocalChecked(),tpl->GetFunction());
}

void VtkHyperStreamlineWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationDirection", GetIntegrationDirection);
	Nan::SetPrototypeMethod(tpl, "getIntegrationDirection", GetIntegrationDirection);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationDirectionMaxValue", GetIntegrationDirectionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getIntegrationDirectionMaxValue", GetIntegrationDirectionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationDirectionMinValue", GetIntegrationDirectionMinValue);
	Nan::SetPrototypeMethod(tpl, "getIntegrationDirectionMinValue", GetIntegrationDirectionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationEigenvector", GetIntegrationEigenvector);
	Nan::SetPrototypeMethod(tpl, "getIntegrationEigenvector", GetIntegrationEigenvector);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationEigenvectorMaxValue", GetIntegrationEigenvectorMaxValue);
	Nan::SetPrototypeMethod(tpl, "getIntegrationEigenvectorMaxValue", GetIntegrationEigenvectorMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationEigenvectorMinValue", GetIntegrationEigenvectorMinValue);
	Nan::SetPrototypeMethod(tpl, "getIntegrationEigenvectorMinValue", GetIntegrationEigenvectorMinValue);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationStepLength", GetIntegrationStepLength);
	Nan::SetPrototypeMethod(tpl, "getIntegrationStepLength", GetIntegrationStepLength);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationStepLengthMaxValue", GetIntegrationStepLengthMaxValue);
	Nan::SetPrototypeMethod(tpl, "getIntegrationStepLengthMaxValue", GetIntegrationStepLengthMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationStepLengthMinValue", GetIntegrationStepLengthMinValue);
	Nan::SetPrototypeMethod(tpl, "getIntegrationStepLengthMinValue", GetIntegrationStepLengthMinValue);

	Nan::SetPrototypeMethod(tpl, "GetLogScaling", GetLogScaling);
	Nan::SetPrototypeMethod(tpl, "getLogScaling", GetLogScaling);

	Nan::SetPrototypeMethod(tpl, "GetMaximumPropagationDistance", GetMaximumPropagationDistance);
	Nan::SetPrototypeMethod(tpl, "getMaximumPropagationDistance", GetMaximumPropagationDistance);

	Nan::SetPrototypeMethod(tpl, "GetMaximumPropagationDistanceMaxValue", GetMaximumPropagationDistanceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getMaximumPropagationDistanceMaxValue", GetMaximumPropagationDistanceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetMaximumPropagationDistanceMinValue", GetMaximumPropagationDistanceMinValue);
	Nan::SetPrototypeMethod(tpl, "getMaximumPropagationDistanceMinValue", GetMaximumPropagationDistanceMinValue);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfSides", GetNumberOfSides);
	Nan::SetPrototypeMethod(tpl, "getNumberOfSides", GetNumberOfSides);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfSidesMaxValue", GetNumberOfSidesMaxValue);
	Nan::SetPrototypeMethod(tpl, "getNumberOfSidesMaxValue", GetNumberOfSidesMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfSidesMinValue", GetNumberOfSidesMinValue);
	Nan::SetPrototypeMethod(tpl, "getNumberOfSidesMinValue", GetNumberOfSidesMinValue);

	Nan::SetPrototypeMethod(tpl, "GetRadius", GetRadius);
	Nan::SetPrototypeMethod(tpl, "getRadius", GetRadius);

	Nan::SetPrototypeMethod(tpl, "GetRadiusMaxValue", GetRadiusMaxValue);
	Nan::SetPrototypeMethod(tpl, "getRadiusMaxValue", GetRadiusMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetRadiusMinValue", GetRadiusMinValue);
	Nan::SetPrototypeMethod(tpl, "getRadiusMinValue", GetRadiusMinValue);

	Nan::SetPrototypeMethod(tpl, "GetStepLength", GetStepLength);
	Nan::SetPrototypeMethod(tpl, "getStepLength", GetStepLength);

	Nan::SetPrototypeMethod(tpl, "GetStepLengthMaxValue", GetStepLengthMaxValue);
	Nan::SetPrototypeMethod(tpl, "getStepLengthMaxValue", GetStepLengthMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetStepLengthMinValue", GetStepLengthMinValue);
	Nan::SetPrototypeMethod(tpl, "getStepLengthMinValue", GetStepLengthMinValue);

	Nan::SetPrototypeMethod(tpl, "GetTerminalEigenvalue", GetTerminalEigenvalue);
	Nan::SetPrototypeMethod(tpl, "getTerminalEigenvalue", GetTerminalEigenvalue);

	Nan::SetPrototypeMethod(tpl, "GetTerminalEigenvalueMaxValue", GetTerminalEigenvalueMaxValue);
	Nan::SetPrototypeMethod(tpl, "getTerminalEigenvalueMaxValue", GetTerminalEigenvalueMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetTerminalEigenvalueMinValue", GetTerminalEigenvalueMinValue);
	Nan::SetPrototypeMethod(tpl, "getTerminalEigenvalueMinValue", GetTerminalEigenvalueMinValue);

	Nan::SetPrototypeMethod(tpl, "IntegrateMajorEigenvector", IntegrateMajorEigenvector);
	Nan::SetPrototypeMethod(tpl, "integrateMajorEigenvector", IntegrateMajorEigenvector);

	Nan::SetPrototypeMethod(tpl, "IntegrateMediumEigenvector", IntegrateMediumEigenvector);
	Nan::SetPrototypeMethod(tpl, "integrateMediumEigenvector", IntegrateMediumEigenvector);

	Nan::SetPrototypeMethod(tpl, "IntegrateMinorEigenvector", IntegrateMinorEigenvector);
	Nan::SetPrototypeMethod(tpl, "integrateMinorEigenvector", IntegrateMinorEigenvector);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "LogScalingOff", LogScalingOff);
	Nan::SetPrototypeMethod(tpl, "logScalingOff", LogScalingOff);

	Nan::SetPrototypeMethod(tpl, "LogScalingOn", LogScalingOn);
	Nan::SetPrototypeMethod(tpl, "logScalingOn", LogScalingOn);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationDirection", SetIntegrationDirection);
	Nan::SetPrototypeMethod(tpl, "setIntegrationDirection", SetIntegrationDirection);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationDirectionToBackward", SetIntegrationDirectionToBackward);
	Nan::SetPrototypeMethod(tpl, "setIntegrationDirectionToBackward", SetIntegrationDirectionToBackward);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationDirectionToForward", SetIntegrationDirectionToForward);
	Nan::SetPrototypeMethod(tpl, "setIntegrationDirectionToForward", SetIntegrationDirectionToForward);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationDirectionToIntegrateBothDirections", SetIntegrationDirectionToIntegrateBothDirections);
	Nan::SetPrototypeMethod(tpl, "setIntegrationDirectionToIntegrateBothDirections", SetIntegrationDirectionToIntegrateBothDirections);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationEigenvector", SetIntegrationEigenvector);
	Nan::SetPrototypeMethod(tpl, "setIntegrationEigenvector", SetIntegrationEigenvector);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationEigenvectorToMajor", SetIntegrationEigenvectorToMajor);
	Nan::SetPrototypeMethod(tpl, "setIntegrationEigenvectorToMajor", SetIntegrationEigenvectorToMajor);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationEigenvectorToMedium", SetIntegrationEigenvectorToMedium);
	Nan::SetPrototypeMethod(tpl, "setIntegrationEigenvectorToMedium", SetIntegrationEigenvectorToMedium);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationEigenvectorToMinor", SetIntegrationEigenvectorToMinor);
	Nan::SetPrototypeMethod(tpl, "setIntegrationEigenvectorToMinor", SetIntegrationEigenvectorToMinor);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationStepLength", SetIntegrationStepLength);
	Nan::SetPrototypeMethod(tpl, "setIntegrationStepLength", SetIntegrationStepLength);

	Nan::SetPrototypeMethod(tpl, "SetLogScaling", SetLogScaling);
	Nan::SetPrototypeMethod(tpl, "setLogScaling", SetLogScaling);

	Nan::SetPrototypeMethod(tpl, "SetMaximumPropagationDistance", SetMaximumPropagationDistance);
	Nan::SetPrototypeMethod(tpl, "setMaximumPropagationDistance", SetMaximumPropagationDistance);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfSides", SetNumberOfSides);
	Nan::SetPrototypeMethod(tpl, "setNumberOfSides", SetNumberOfSides);

	Nan::SetPrototypeMethod(tpl, "SetRadius", SetRadius);
	Nan::SetPrototypeMethod(tpl, "setRadius", SetRadius);

	Nan::SetPrototypeMethod(tpl, "SetStartPosition", SetStartPosition);
	Nan::SetPrototypeMethod(tpl, "setStartPosition", SetStartPosition);

	Nan::SetPrototypeMethod(tpl, "SetStepLength", SetStepLength);
	Nan::SetPrototypeMethod(tpl, "setStepLength", SetStepLength);

	Nan::SetPrototypeMethod(tpl, "SetTerminalEigenvalue", SetTerminalEigenvalue);
	Nan::SetPrototypeMethod(tpl, "setTerminalEigenvalue", SetTerminalEigenvalue);

}

void VtkHyperStreamlineWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkHyperStreamline> native = vtkSmartPointer<vtkHyperStreamline>::New();
		VtkHyperStreamlineWrap* obj = new VtkHyperStreamlineWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkHyperStreamlineWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkHyperStreamlineWrap::GetIntegrationDirection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationDirection();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetIntegrationDirectionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationDirectionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetIntegrationDirectionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationDirectionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetIntegrationEigenvector(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationEigenvector();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetIntegrationEigenvectorMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationEigenvectorMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetIntegrationEigenvectorMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationEigenvectorMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetIntegrationStepLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationStepLength();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetIntegrationStepLengthMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationStepLengthMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetIntegrationStepLengthMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationStepLengthMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetLogScaling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLogScaling();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetMaximumPropagationDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumPropagationDistance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetMaximumPropagationDistanceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumPropagationDistanceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetMaximumPropagationDistanceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumPropagationDistanceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetNumberOfSides(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfSides();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetNumberOfSidesMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfSidesMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetNumberOfSidesMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfSidesMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetRadiusMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadiusMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetRadiusMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRadiusMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetStepLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStepLength();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetStepLengthMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStepLengthMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetStepLengthMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStepLengthMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetTerminalEigenvalue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTerminalEigenvalue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetTerminalEigenvalueMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTerminalEigenvalueMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::GetTerminalEigenvalueMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTerminalEigenvalueMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkHyperStreamlineWrap::IntegrateMajorEigenvector(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->IntegrateMajorEigenvector();
}

void VtkHyperStreamlineWrap::IntegrateMediumEigenvector(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->IntegrateMediumEigenvector();
}

void VtkHyperStreamlineWrap::IntegrateMinorEigenvector(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->IntegrateMinorEigenvector();
}

void VtkHyperStreamlineWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperStreamlineWrap::LogScalingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LogScalingOff();
}

void VtkHyperStreamlineWrap::LogScalingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->LogScalingOn();
}

void VtkHyperStreamlineWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	vtkHyperStreamline * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkHyperStreamlineWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkHyperStreamlineWrap *w = new VtkHyperStreamlineWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkHyperStreamlineWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkHyperStreamline * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkHyperStreamlineWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkHyperStreamlineWrap *w = new VtkHyperStreamlineWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperStreamlineWrap::SetIntegrationDirection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegrationDirection(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperStreamlineWrap::SetIntegrationDirectionToBackward(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegrationDirectionToBackward();
}

void VtkHyperStreamlineWrap::SetIntegrationDirectionToForward(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegrationDirectionToForward();
}

void VtkHyperStreamlineWrap::SetIntegrationDirectionToIntegrateBothDirections(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegrationDirectionToIntegrateBothDirections();
}

void VtkHyperStreamlineWrap::SetIntegrationEigenvector(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegrationEigenvector(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperStreamlineWrap::SetIntegrationEigenvectorToMajor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegrationEigenvectorToMajor();
}

void VtkHyperStreamlineWrap::SetIntegrationEigenvectorToMedium(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegrationEigenvectorToMedium();
}

void VtkHyperStreamlineWrap::SetIntegrationEigenvectorToMinor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegrationEigenvectorToMinor();
}

void VtkHyperStreamlineWrap::SetIntegrationStepLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegrationStepLength(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperStreamlineWrap::SetLogScaling(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLogScaling(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperStreamlineWrap::SetMaximumPropagationDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumPropagationDistance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperStreamlineWrap::SetNumberOfSides(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfSides(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperStreamlineWrap::SetRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperStreamlineWrap::SetStartPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetStartPosition(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperStreamlineWrap::SetStepLength(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetStepLength(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkHyperStreamlineWrap::SetTerminalEigenvalue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkHyperStreamlineWrap *wrapper = ObjectWrap::Unwrap<VtkHyperStreamlineWrap>(info.Holder());
	vtkHyperStreamline *native = (vtkHyperStreamline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTerminalEigenvalue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

