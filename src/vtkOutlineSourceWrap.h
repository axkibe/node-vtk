/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKOUTLINESOURCEWRAP_H
#define NATIVE_EXTENSION_VTK_VTKOUTLINESOURCEWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkOutlineSource.h>

#include "vtkPolyDataAlgorithmWrap.h"

class VtkOutlineSourceWrap : public VtkPolyDataAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkOutlineSourceWrap(vtkSmartPointer<vtkOutlineSource>);
		VtkOutlineSourceWrap();
		~VtkOutlineSourceWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GenerateFacesOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GenerateFacesOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetBoxType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGenerateFaces(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetBounds(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetBoxType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetBoxTypeToAxisAligned(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetBoxTypeToOriented(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGenerateFaces(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
