/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkFrameBufferObjectWrap.h"
#include "vtkRenderWindowWrap.h"
#include "vtkTextureObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkFrameBufferObjectWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkFrameBufferObjectWrap::ptpl;

VtkFrameBufferObjectWrap::VtkFrameBufferObjectWrap()
{ }

VtkFrameBufferObjectWrap::VtkFrameBufferObjectWrap(vtkSmartPointer<vtkFrameBufferObject> _native)
{ native = _native; }

VtkFrameBufferObjectWrap::~VtkFrameBufferObjectWrap()
{ }

void VtkFrameBufferObjectWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkFrameBufferObjectWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkFrameBufferObject").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("FrameBufferObject").ToLocalChecked(),tpl->GetFunction());
}

void VtkFrameBufferObjectWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "Bind", Bind);
	Nan::SetPrototypeMethod(tpl, "bind", Bind);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetContext", GetContext);
	Nan::SetPrototypeMethod(tpl, "getContext", GetContext);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RemoveAllColorBuffers", RemoveAllColorBuffers);
	Nan::SetPrototypeMethod(tpl, "removeAllColorBuffers", RemoveAllColorBuffers);

	Nan::SetPrototypeMethod(tpl, "RemoveDepthBuffer", RemoveDepthBuffer);
	Nan::SetPrototypeMethod(tpl, "removeDepthBuffer", RemoveDepthBuffer);

	Nan::SetPrototypeMethod(tpl, "RenderQuad", RenderQuad);
	Nan::SetPrototypeMethod(tpl, "renderQuad", RenderQuad);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetContext", SetContext);
	Nan::SetPrototypeMethod(tpl, "setContext", SetContext);

	Nan::SetPrototypeMethod(tpl, "SetDepthBuffer", SetDepthBuffer);
	Nan::SetPrototypeMethod(tpl, "setDepthBuffer", SetDepthBuffer);

	Nan::SetPrototypeMethod(tpl, "UnBind", UnBind);
	Nan::SetPrototypeMethod(tpl, "unBind", UnBind);

}

void VtkFrameBufferObjectWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkFrameBufferObject> native = vtkSmartPointer<vtkFrameBufferObject>::New();
		VtkFrameBufferObjectWrap* obj = new VtkFrameBufferObjectWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkFrameBufferObjectWrap::Bind(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFrameBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkFrameBufferObjectWrap>(info.Holder());
	vtkFrameBufferObject *native = (vtkFrameBufferObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Bind();
}

void VtkFrameBufferObjectWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFrameBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkFrameBufferObjectWrap>(info.Holder());
	vtkFrameBufferObject *native = (vtkFrameBufferObject *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkFrameBufferObjectWrap::GetContext(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFrameBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkFrameBufferObjectWrap>(info.Holder());
	vtkFrameBufferObject *native = (vtkFrameBufferObject *)wrapper->native.GetPointer();
	vtkRenderWindow * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetContext();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkRenderWindowWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderWindowWrap *w = new VtkRenderWindowWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkFrameBufferObjectWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFrameBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkFrameBufferObjectWrap>(info.Holder());
	vtkFrameBufferObject *native = (vtkFrameBufferObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFrameBufferObjectWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFrameBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkFrameBufferObjectWrap>(info.Holder());
	vtkFrameBufferObject *native = (vtkFrameBufferObject *)wrapper->native.GetPointer();
	vtkFrameBufferObject * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkFrameBufferObjectWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkFrameBufferObjectWrap *w = new VtkFrameBufferObjectWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkFrameBufferObjectWrap::RemoveAllColorBuffers(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFrameBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkFrameBufferObjectWrap>(info.Holder());
	vtkFrameBufferObject *native = (vtkFrameBufferObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllColorBuffers();
}

void VtkFrameBufferObjectWrap::RemoveDepthBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFrameBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkFrameBufferObjectWrap>(info.Holder());
	vtkFrameBufferObject *native = (vtkFrameBufferObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveDepthBuffer();
}

void VtkFrameBufferObjectWrap::RenderQuad(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFrameBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkFrameBufferObjectWrap>(info.Holder());
	vtkFrameBufferObject *native = (vtkFrameBufferObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->RenderQuad(
						info[0]->Int32Value(),
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFrameBufferObjectWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFrameBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkFrameBufferObjectWrap>(info.Holder());
	vtkFrameBufferObject *native = (vtkFrameBufferObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkFrameBufferObject * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkFrameBufferObjectWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkFrameBufferObjectWrap *w = new VtkFrameBufferObjectWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFrameBufferObjectWrap::SetContext(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFrameBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkFrameBufferObjectWrap>(info.Holder());
	vtkFrameBufferObject *native = (vtkFrameBufferObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkRenderWindowWrap *a0 = ObjectWrap::Unwrap<VtkRenderWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetContext(
			(vtkRenderWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFrameBufferObjectWrap::SetDepthBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFrameBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkFrameBufferObjectWrap>(info.Holder());
	vtkFrameBufferObject *native = (vtkFrameBufferObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkTextureObjectWrap *a0 = ObjectWrap::Unwrap<VtkTextureObjectWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDepthBuffer(
			(vtkTextureObject *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkFrameBufferObjectWrap::UnBind(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkFrameBufferObjectWrap *wrapper = ObjectWrap::Unwrap<VtkFrameBufferObjectWrap>(info.Holder());
	vtkFrameBufferObject *native = (vtkFrameBufferObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UnBind();
}

