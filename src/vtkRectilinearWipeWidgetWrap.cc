/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkAbstractWidgetWrap.h"
#include "vtkRectilinearWipeWidgetWrap.h"
#include "vtkObjectWrap.h"
#include "vtkRectilinearWipeRepresentationWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkRectilinearWipeWidgetWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkRectilinearWipeWidgetWrap::ptpl;

VtkRectilinearWipeWidgetWrap::VtkRectilinearWipeWidgetWrap()
{ }

VtkRectilinearWipeWidgetWrap::VtkRectilinearWipeWidgetWrap(vtkSmartPointer<vtkRectilinearWipeWidget> _native)
{ native = _native; }

VtkRectilinearWipeWidgetWrap::~VtkRectilinearWipeWidgetWrap()
{ }

void VtkRectilinearWipeWidgetWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkAbstractWidgetWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkAbstractWidgetWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkRectilinearWipeWidgetWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkRectilinearWipeWidget").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("RectilinearWipeWidget").ToLocalChecked(),tpl->GetFunction());
}

void VtkRectilinearWipeWidgetWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "CreateDefaultRepresentation", CreateDefaultRepresentation);
	Nan::SetPrototypeMethod(tpl, "createDefaultRepresentation", CreateDefaultRepresentation);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetRectilinearWipeRepresentation", GetRectilinearWipeRepresentation);
	Nan::SetPrototypeMethod(tpl, "getRectilinearWipeRepresentation", GetRectilinearWipeRepresentation);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetRepresentation", SetRepresentation);
	Nan::SetPrototypeMethod(tpl, "setRepresentation", SetRepresentation);

}

void VtkRectilinearWipeWidgetWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkRectilinearWipeWidget> native = vtkSmartPointer<vtkRectilinearWipeWidget>::New();
		VtkRectilinearWipeWidgetWrap* obj = new VtkRectilinearWipeWidgetWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkRectilinearWipeWidgetWrap::CreateDefaultRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRectilinearWipeWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkRectilinearWipeWidgetWrap>(info.Holder());
	vtkRectilinearWipeWidget *native = (vtkRectilinearWipeWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CreateDefaultRepresentation();
}

void VtkRectilinearWipeWidgetWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRectilinearWipeWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkRectilinearWipeWidgetWrap>(info.Holder());
	vtkRectilinearWipeWidget *native = (vtkRectilinearWipeWidget *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRectilinearWipeWidgetWrap::GetRectilinearWipeRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRectilinearWipeWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkRectilinearWipeWidgetWrap>(info.Holder());
	vtkRectilinearWipeWidget *native = (vtkRectilinearWipeWidget *)wrapper->native.GetPointer();
	vtkRectilinearWipeRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRectilinearWipeRepresentation();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkRectilinearWipeRepresentationWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRectilinearWipeRepresentationWrap *w = new VtkRectilinearWipeRepresentationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRectilinearWipeWidgetWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRectilinearWipeWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkRectilinearWipeWidgetWrap>(info.Holder());
	vtkRectilinearWipeWidget *native = (vtkRectilinearWipeWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRectilinearWipeWidgetWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRectilinearWipeWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkRectilinearWipeWidgetWrap>(info.Holder());
	vtkRectilinearWipeWidget *native = (vtkRectilinearWipeWidget *)wrapper->native.GetPointer();
	vtkRectilinearWipeWidget * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkRectilinearWipeWidgetWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRectilinearWipeWidgetWrap *w = new VtkRectilinearWipeWidgetWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRectilinearWipeWidgetWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRectilinearWipeWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkRectilinearWipeWidgetWrap>(info.Holder());
	vtkRectilinearWipeWidget *native = (vtkRectilinearWipeWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkRectilinearWipeWidget * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkRectilinearWipeWidgetWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkRectilinearWipeWidgetWrap *w = new VtkRectilinearWipeWidgetWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRectilinearWipeWidgetWrap::SetRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRectilinearWipeWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkRectilinearWipeWidgetWrap>(info.Holder());
	vtkRectilinearWipeWidget *native = (vtkRectilinearWipeWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkRectilinearWipeRepresentationWrap *a0 = ObjectWrap::Unwrap<VtkRectilinearWipeRepresentationWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRepresentation(
			(vtkRectilinearWipeRepresentation *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

