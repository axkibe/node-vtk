/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKTEMPORALFRACTALWRAP_H
#define NATIVE_EXTENSION_VTK_VTKTEMPORALFRACTALWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkTemporalFractal.h>

#include "vtkAlgorithmWrap.h"

class VtkTemporalFractalWrap : public VtkAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkTemporalFractalWrap(vtkSmartPointer<vtkTemporalFractal>);
		VtkTemporalFractalWrap();
		~VtkTemporalFractalWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AdaptiveSubdivisionOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void AdaptiveSubdivisionOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DiscreteTimeStepsOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DiscreteTimeStepsOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GenerateRectilinearGridsOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GenerateRectilinearGridsOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAdaptiveSubdivision(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAsymetric(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDimensions(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDiscreteTimeSteps(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGenerateRectilinearGrids(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGhostLevels(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaximumLevel(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTwoDimensional(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GhostLevelsOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GhostLevelsOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAdaptiveSubdivision(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAsymetric(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetDimensions(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetDiscreteTimeSteps(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGenerateRectilinearGrids(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGhostLevels(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaximumLevel(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetTwoDimensional(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void TwoDimensionalOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void TwoDimensionalOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
