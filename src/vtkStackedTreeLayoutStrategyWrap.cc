/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkAreaLayoutStrategyWrap.h"
#include "vtkStackedTreeLayoutStrategyWrap.h"
#include "vtkObjectWrap.h"
#include "vtkTreeWrap.h"
#include "vtkDataArrayWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkStackedTreeLayoutStrategyWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkStackedTreeLayoutStrategyWrap::ptpl;

VtkStackedTreeLayoutStrategyWrap::VtkStackedTreeLayoutStrategyWrap()
{ }

VtkStackedTreeLayoutStrategyWrap::VtkStackedTreeLayoutStrategyWrap(vtkSmartPointer<vtkStackedTreeLayoutStrategy> _native)
{ native = _native; }

VtkStackedTreeLayoutStrategyWrap::~VtkStackedTreeLayoutStrategyWrap()
{ }

void VtkStackedTreeLayoutStrategyWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkAreaLayoutStrategyWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkAreaLayoutStrategyWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkStackedTreeLayoutStrategyWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkStackedTreeLayoutStrategy").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("StackedTreeLayoutStrategy").ToLocalChecked(),tpl->GetFunction());
}

void VtkStackedTreeLayoutStrategyWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetInteriorLogSpacingValue", GetInteriorLogSpacingValue);
	Nan::SetPrototypeMethod(tpl, "getInteriorLogSpacingValue", GetInteriorLogSpacingValue);

	Nan::SetPrototypeMethod(tpl, "GetInteriorRadius", GetInteriorRadius);
	Nan::SetPrototypeMethod(tpl, "getInteriorRadius", GetInteriorRadius);

	Nan::SetPrototypeMethod(tpl, "GetRingThickness", GetRingThickness);
	Nan::SetPrototypeMethod(tpl, "getRingThickness", GetRingThickness);

	Nan::SetPrototypeMethod(tpl, "GetRootEndAngle", GetRootEndAngle);
	Nan::SetPrototypeMethod(tpl, "getRootEndAngle", GetRootEndAngle);

	Nan::SetPrototypeMethod(tpl, "GetRootStartAngle", GetRootStartAngle);
	Nan::SetPrototypeMethod(tpl, "getRootStartAngle", GetRootStartAngle);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "Layout", Layout);
	Nan::SetPrototypeMethod(tpl, "layout", Layout);

	Nan::SetPrototypeMethod(tpl, "LayoutEdgePoints", LayoutEdgePoints);
	Nan::SetPrototypeMethod(tpl, "layoutEdgePoints", LayoutEdgePoints);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReverseOff", ReverseOff);
	Nan::SetPrototypeMethod(tpl, "reverseOff", ReverseOff);

	Nan::SetPrototypeMethod(tpl, "ReverseOn", ReverseOn);
	Nan::SetPrototypeMethod(tpl, "reverseOn", ReverseOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetInteriorLogSpacingValue", SetInteriorLogSpacingValue);
	Nan::SetPrototypeMethod(tpl, "setInteriorLogSpacingValue", SetInteriorLogSpacingValue);

	Nan::SetPrototypeMethod(tpl, "SetInteriorRadius", SetInteriorRadius);
	Nan::SetPrototypeMethod(tpl, "setInteriorRadius", SetInteriorRadius);

	Nan::SetPrototypeMethod(tpl, "SetRingThickness", SetRingThickness);
	Nan::SetPrototypeMethod(tpl, "setRingThickness", SetRingThickness);

	Nan::SetPrototypeMethod(tpl, "SetRootEndAngle", SetRootEndAngle);
	Nan::SetPrototypeMethod(tpl, "setRootEndAngle", SetRootEndAngle);

	Nan::SetPrototypeMethod(tpl, "SetRootStartAngle", SetRootStartAngle);
	Nan::SetPrototypeMethod(tpl, "setRootStartAngle", SetRootStartAngle);

	Nan::SetPrototypeMethod(tpl, "UseRectangularCoordinatesOff", UseRectangularCoordinatesOff);
	Nan::SetPrototypeMethod(tpl, "useRectangularCoordinatesOff", UseRectangularCoordinatesOff);

	Nan::SetPrototypeMethod(tpl, "UseRectangularCoordinatesOn", UseRectangularCoordinatesOn);
	Nan::SetPrototypeMethod(tpl, "useRectangularCoordinatesOn", UseRectangularCoordinatesOn);

}

void VtkStackedTreeLayoutStrategyWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkStackedTreeLayoutStrategy> native = vtkSmartPointer<vtkStackedTreeLayoutStrategy>::New();
		VtkStackedTreeLayoutStrategyWrap* obj = new VtkStackedTreeLayoutStrategyWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkStackedTreeLayoutStrategyWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkStackedTreeLayoutStrategyWrap::GetInteriorLogSpacingValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInteriorLogSpacingValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStackedTreeLayoutStrategyWrap::GetInteriorRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInteriorRadius();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStackedTreeLayoutStrategyWrap::GetRingThickness(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRingThickness();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStackedTreeLayoutStrategyWrap::GetRootEndAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRootEndAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStackedTreeLayoutStrategyWrap::GetRootStartAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRootStartAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkStackedTreeLayoutStrategyWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStackedTreeLayoutStrategyWrap::Layout(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkTreeWrap *a0 = ObjectWrap::Unwrap<VtkTreeWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkDataArrayWrap *a1 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject())
			{
				VtkDataArrayWrap *a2 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[2]->ToObject());
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->Layout(
					(vtkTree *) a0->native.GetPointer(),
					(vtkDataArray *) a1->native.GetPointer(),
					(vtkDataArray *) a2->native.GetPointer()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStackedTreeLayoutStrategyWrap::LayoutEdgePoints(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkTreeWrap *a0 = ObjectWrap::Unwrap<VtkTreeWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkDataArrayWrap *a1 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject())
			{
				VtkDataArrayWrap *a2 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[2]->ToObject());
				if(info.Length() > 3 && info[3]->IsObject())
				{
					VtkTreeWrap *a3 = ObjectWrap::Unwrap<VtkTreeWrap>(info[3]->ToObject());
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->LayoutEdgePoints(
						(vtkTree *) a0->native.GetPointer(),
						(vtkDataArray *) a1->native.GetPointer(),
						(vtkDataArray *) a2->native.GetPointer(),
						(vtkTree *) a3->native.GetPointer()
					);
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStackedTreeLayoutStrategyWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	vtkStackedTreeLayoutStrategy * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkStackedTreeLayoutStrategyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStackedTreeLayoutStrategyWrap *w = new VtkStackedTreeLayoutStrategyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkStackedTreeLayoutStrategyWrap::ReverseOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReverseOff();
}

void VtkStackedTreeLayoutStrategyWrap::ReverseOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReverseOn();
}

void VtkStackedTreeLayoutStrategyWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkStackedTreeLayoutStrategy * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkStackedTreeLayoutStrategyWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkStackedTreeLayoutStrategyWrap *w = new VtkStackedTreeLayoutStrategyWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStackedTreeLayoutStrategyWrap::SetInteriorLogSpacingValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInteriorLogSpacingValue(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStackedTreeLayoutStrategyWrap::SetInteriorRadius(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInteriorRadius(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStackedTreeLayoutStrategyWrap::SetRingThickness(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRingThickness(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStackedTreeLayoutStrategyWrap::SetRootEndAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRootEndAngle(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStackedTreeLayoutStrategyWrap::SetRootStartAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRootStartAngle(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkStackedTreeLayoutStrategyWrap::UseRectangularCoordinatesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseRectangularCoordinatesOff();
}

void VtkStackedTreeLayoutStrategyWrap::UseRectangularCoordinatesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkStackedTreeLayoutStrategyWrap *wrapper = ObjectWrap::Unwrap<VtkStackedTreeLayoutStrategyWrap>(info.Holder());
	vtkStackedTreeLayoutStrategy *native = (vtkStackedTreeLayoutStrategy *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseRectangularCoordinatesOn();
}

