/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkReverseSenseWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkReverseSenseWrap::ptpl;

VtkReverseSenseWrap::VtkReverseSenseWrap()
{ }

VtkReverseSenseWrap::VtkReverseSenseWrap(vtkSmartPointer<vtkReverseSense> _native)
{ native = _native; }

VtkReverseSenseWrap::~VtkReverseSenseWrap()
{ }

void VtkReverseSenseWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkReverseSense").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ReverseSense").ToLocalChecked(), ConstructorGetter);
}

void VtkReverseSenseWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkReverseSenseWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkReverseSenseWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetReverseCells", GetReverseCells);
	Nan::SetPrototypeMethod(tpl, "getReverseCells", GetReverseCells);

	Nan::SetPrototypeMethod(tpl, "GetReverseNormals", GetReverseNormals);
	Nan::SetPrototypeMethod(tpl, "getReverseNormals", GetReverseNormals);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReverseCellsOff", ReverseCellsOff);
	Nan::SetPrototypeMethod(tpl, "reverseCellsOff", ReverseCellsOff);

	Nan::SetPrototypeMethod(tpl, "ReverseCellsOn", ReverseCellsOn);
	Nan::SetPrototypeMethod(tpl, "reverseCellsOn", ReverseCellsOn);

	Nan::SetPrototypeMethod(tpl, "ReverseNormalsOff", ReverseNormalsOff);
	Nan::SetPrototypeMethod(tpl, "reverseNormalsOff", ReverseNormalsOff);

	Nan::SetPrototypeMethod(tpl, "ReverseNormalsOn", ReverseNormalsOn);
	Nan::SetPrototypeMethod(tpl, "reverseNormalsOn", ReverseNormalsOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetReverseCells", SetReverseCells);
	Nan::SetPrototypeMethod(tpl, "setReverseCells", SetReverseCells);

	Nan::SetPrototypeMethod(tpl, "SetReverseNormals", SetReverseNormals);
	Nan::SetPrototypeMethod(tpl, "setReverseNormals", SetReverseNormals);

	ptpl.Reset( tpl );
}

void VtkReverseSenseWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkReverseSense> native = vtkSmartPointer<vtkReverseSense>::New();
		VtkReverseSenseWrap* obj = new VtkReverseSenseWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkReverseSenseWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkReverseSenseWrap *wrapper = ObjectWrap::Unwrap<VtkReverseSenseWrap>(info.Holder());
	vtkReverseSense *native = (vtkReverseSense *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkReverseSenseWrap::GetReverseCells(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkReverseSenseWrap *wrapper = ObjectWrap::Unwrap<VtkReverseSenseWrap>(info.Holder());
	vtkReverseSense *native = (vtkReverseSense *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetReverseCells();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkReverseSenseWrap::GetReverseNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkReverseSenseWrap *wrapper = ObjectWrap::Unwrap<VtkReverseSenseWrap>(info.Holder());
	vtkReverseSense *native = (vtkReverseSense *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetReverseNormals();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkReverseSenseWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkReverseSenseWrap *wrapper = ObjectWrap::Unwrap<VtkReverseSenseWrap>(info.Holder());
	vtkReverseSense *native = (vtkReverseSense *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkReverseSenseWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkReverseSenseWrap *wrapper = ObjectWrap::Unwrap<VtkReverseSenseWrap>(info.Holder());
	vtkReverseSense *native = (vtkReverseSense *)wrapper->native.GetPointer();
	vtkReverseSense * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkReverseSenseWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkReverseSenseWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkReverseSenseWrap *w = new VtkReverseSenseWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkReverseSenseWrap::ReverseCellsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkReverseSenseWrap *wrapper = ObjectWrap::Unwrap<VtkReverseSenseWrap>(info.Holder());
	vtkReverseSense *native = (vtkReverseSense *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReverseCellsOff();
}

void VtkReverseSenseWrap::ReverseCellsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkReverseSenseWrap *wrapper = ObjectWrap::Unwrap<VtkReverseSenseWrap>(info.Holder());
	vtkReverseSense *native = (vtkReverseSense *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReverseCellsOn();
}

void VtkReverseSenseWrap::ReverseNormalsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkReverseSenseWrap *wrapper = ObjectWrap::Unwrap<VtkReverseSenseWrap>(info.Holder());
	vtkReverseSense *native = (vtkReverseSense *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReverseNormalsOff();
}

void VtkReverseSenseWrap::ReverseNormalsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkReverseSenseWrap *wrapper = ObjectWrap::Unwrap<VtkReverseSenseWrap>(info.Holder());
	vtkReverseSense *native = (vtkReverseSense *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReverseNormalsOn();
}

void VtkReverseSenseWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkReverseSenseWrap *wrapper = ObjectWrap::Unwrap<VtkReverseSenseWrap>(info.Holder());
	vtkReverseSense *native = (vtkReverseSense *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkReverseSense * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkReverseSenseWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkReverseSenseWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkReverseSenseWrap *w = new VtkReverseSenseWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkReverseSenseWrap::SetReverseCells(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkReverseSenseWrap *wrapper = ObjectWrap::Unwrap<VtkReverseSenseWrap>(info.Holder());
	vtkReverseSense *native = (vtkReverseSense *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetReverseCells(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkReverseSenseWrap::SetReverseNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkReverseSenseWrap *wrapper = ObjectWrap::Unwrap<VtkReverseSenseWrap>(info.Holder());
	vtkReverseSense *native = (vtkReverseSense *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetReverseNormals(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

