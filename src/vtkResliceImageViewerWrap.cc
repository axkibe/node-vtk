/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkImageViewer2Wrap.h"
#include "vtkResliceImageViewerWrap.h"
#include "vtkObjectWrap.h"
#include "vtkImageDataWrap.h"
#include "vtkAlgorithmOutputWrap.h"
#include "vtkResliceCursorWidgetWrap.h"
#include "vtkResliceCursorWrap.h"
#include "vtkScalarsToColorsWrap.h"
#include "vtkBoundedPlanePointPlacerWrap.h"
#include "vtkResliceImageViewerMeasurementsWrap.h"
#include "vtkRenderWindowInteractorWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkResliceImageViewerWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkResliceImageViewerWrap::ptpl;

VtkResliceImageViewerWrap::VtkResliceImageViewerWrap()
{ }

VtkResliceImageViewerWrap::VtkResliceImageViewerWrap(vtkSmartPointer<vtkResliceImageViewer> _native)
{ native = _native; }

VtkResliceImageViewerWrap::~VtkResliceImageViewerWrap()
{ }

void VtkResliceImageViewerWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkResliceImageViewer").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ResliceImageViewer").ToLocalChecked(), ConstructorGetter);
}

void VtkResliceImageViewerWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkResliceImageViewerWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkImageViewer2Wrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkImageViewer2Wrap::ptpl));
	tpl->SetClassName(Nan::New("VtkResliceImageViewerWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetInteractor", GetInteractor);
	Nan::SetPrototypeMethod(tpl, "getInteractor", GetInteractor);

	Nan::SetPrototypeMethod(tpl, "GetLookupTable", GetLookupTable);
	Nan::SetPrototypeMethod(tpl, "getLookupTable", GetLookupTable);

	Nan::SetPrototypeMethod(tpl, "GetMeasurements", GetMeasurements);
	Nan::SetPrototypeMethod(tpl, "getMeasurements", GetMeasurements);

	Nan::SetPrototypeMethod(tpl, "GetPointPlacer", GetPointPlacer);
	Nan::SetPrototypeMethod(tpl, "getPointPlacer", GetPointPlacer);

	Nan::SetPrototypeMethod(tpl, "GetResliceCursor", GetResliceCursor);
	Nan::SetPrototypeMethod(tpl, "getResliceCursor", GetResliceCursor);

	Nan::SetPrototypeMethod(tpl, "GetResliceCursorWidget", GetResliceCursorWidget);
	Nan::SetPrototypeMethod(tpl, "getResliceCursorWidget", GetResliceCursorWidget);

	Nan::SetPrototypeMethod(tpl, "GetResliceMode", GetResliceMode);
	Nan::SetPrototypeMethod(tpl, "getResliceMode", GetResliceMode);

	Nan::SetPrototypeMethod(tpl, "GetSliceScrollOnMouseWheel", GetSliceScrollOnMouseWheel);
	Nan::SetPrototypeMethod(tpl, "getSliceScrollOnMouseWheel", GetSliceScrollOnMouseWheel);

	Nan::SetPrototypeMethod(tpl, "GetThickMode", GetThickMode);
	Nan::SetPrototypeMethod(tpl, "getThickMode", GetThickMode);

	Nan::SetPrototypeMethod(tpl, "IncrementSlice", IncrementSlice);
	Nan::SetPrototypeMethod(tpl, "incrementSlice", IncrementSlice);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "Render", Render);
	Nan::SetPrototypeMethod(tpl, "render", Render);

	Nan::SetPrototypeMethod(tpl, "Reset", Reset);
	Nan::SetPrototypeMethod(tpl, "reset", Reset);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetColorLevel", SetColorLevel);
	Nan::SetPrototypeMethod(tpl, "setColorLevel", SetColorLevel);

	Nan::SetPrototypeMethod(tpl, "SetColorWindow", SetColorWindow);
	Nan::SetPrototypeMethod(tpl, "setColorWindow", SetColorWindow);

	Nan::SetPrototypeMethod(tpl, "SetInputConnection", SetInputConnection);
	Nan::SetPrototypeMethod(tpl, "setInputConnection", SetInputConnection);

	Nan::SetPrototypeMethod(tpl, "SetInputData", SetInputData);
	Nan::SetPrototypeMethod(tpl, "setInputData", SetInputData);

	Nan::SetPrototypeMethod(tpl, "SetLookupTable", SetLookupTable);
	Nan::SetPrototypeMethod(tpl, "setLookupTable", SetLookupTable);

	Nan::SetPrototypeMethod(tpl, "SetResliceCursor", SetResliceCursor);
	Nan::SetPrototypeMethod(tpl, "setResliceCursor", SetResliceCursor);

	Nan::SetPrototypeMethod(tpl, "SetResliceMode", SetResliceMode);
	Nan::SetPrototypeMethod(tpl, "setResliceMode", SetResliceMode);

	Nan::SetPrototypeMethod(tpl, "SetResliceModeToAxisAligned", SetResliceModeToAxisAligned);
	Nan::SetPrototypeMethod(tpl, "setResliceModeToAxisAligned", SetResliceModeToAxisAligned);

	Nan::SetPrototypeMethod(tpl, "SetResliceModeToOblique", SetResliceModeToOblique);
	Nan::SetPrototypeMethod(tpl, "setResliceModeToOblique", SetResliceModeToOblique);

	Nan::SetPrototypeMethod(tpl, "SetSliceScrollOnMouseWheel", SetSliceScrollOnMouseWheel);
	Nan::SetPrototypeMethod(tpl, "setSliceScrollOnMouseWheel", SetSliceScrollOnMouseWheel);

	Nan::SetPrototypeMethod(tpl, "SetThickMode", SetThickMode);
	Nan::SetPrototypeMethod(tpl, "setThickMode", SetThickMode);

	Nan::SetPrototypeMethod(tpl, "SliceScrollOnMouseWheelOff", SliceScrollOnMouseWheelOff);
	Nan::SetPrototypeMethod(tpl, "sliceScrollOnMouseWheelOff", SliceScrollOnMouseWheelOff);

	Nan::SetPrototypeMethod(tpl, "SliceScrollOnMouseWheelOn", SliceScrollOnMouseWheelOn);
	Nan::SetPrototypeMethod(tpl, "sliceScrollOnMouseWheelOn", SliceScrollOnMouseWheelOn);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );
}

void VtkResliceImageViewerWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkResliceImageViewer> native = vtkSmartPointer<vtkResliceImageViewer>::New();
		VtkResliceImageViewerWrap* obj = new VtkResliceImageViewerWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkResliceImageViewerWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkResliceImageViewerWrap::GetInteractor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	vtkRenderWindowInteractor * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInteractor();
		VtkRenderWindowInteractorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkRenderWindowInteractorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderWindowInteractorWrap *w = new VtkRenderWindowInteractorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkResliceImageViewerWrap::GetLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	vtkScalarsToColors * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLookupTable();
		VtkScalarsToColorsWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkScalarsToColorsWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkScalarsToColorsWrap *w = new VtkScalarsToColorsWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkResliceImageViewerWrap::GetMeasurements(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	vtkResliceImageViewerMeasurements * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMeasurements();
		VtkResliceImageViewerMeasurementsWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkResliceImageViewerMeasurementsWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkResliceImageViewerMeasurementsWrap *w = new VtkResliceImageViewerMeasurementsWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkResliceImageViewerWrap::GetPointPlacer(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	vtkBoundedPlanePointPlacer * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointPlacer();
		VtkBoundedPlanePointPlacerWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkBoundedPlanePointPlacerWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkBoundedPlanePointPlacerWrap *w = new VtkBoundedPlanePointPlacerWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkResliceImageViewerWrap::GetResliceCursor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	vtkResliceCursor * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResliceCursor();
		VtkResliceCursorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkResliceCursorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkResliceCursorWrap *w = new VtkResliceCursorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkResliceImageViewerWrap::GetResliceCursorWidget(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	vtkResliceCursorWidget * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResliceCursorWidget();
		VtkResliceCursorWidgetWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkResliceCursorWidgetWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkResliceCursorWidgetWrap *w = new VtkResliceCursorWidgetWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkResliceImageViewerWrap::GetResliceMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetResliceMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkResliceImageViewerWrap::GetSliceScrollOnMouseWheel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSliceScrollOnMouseWheel();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkResliceImageViewerWrap::GetThickMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetThickMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkResliceImageViewerWrap::IncrementSlice(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->IncrementSlice(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	vtkResliceImageViewer * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkResliceImageViewerWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkResliceImageViewerWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkResliceImageViewerWrap *w = new VtkResliceImageViewerWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkResliceImageViewerWrap::Render(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Render();
}

void VtkResliceImageViewerWrap::Reset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Reset();
}

void VtkResliceImageViewerWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkResliceImageViewer * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkResliceImageViewerWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkResliceImageViewerWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkResliceImageViewerWrap *w = new VtkResliceImageViewerWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerWrap::SetColorLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColorLevel(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerWrap::SetColorWindow(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetColorWindow(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerWrap::SetInputConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAlgorithmOutputWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerWrap::SetInputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImageDataWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImageDataWrap *a0 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputData(
			(vtkImageData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerWrap::SetLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkScalarsToColorsWrap::ptpl))->HasInstance(info[0]))
	{
		VtkScalarsToColorsWrap *a0 = ObjectWrap::Unwrap<VtkScalarsToColorsWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLookupTable(
			(vtkScalarsToColors *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerWrap::SetResliceCursor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkResliceCursorWrap::ptpl))->HasInstance(info[0]))
	{
		VtkResliceCursorWrap *a0 = ObjectWrap::Unwrap<VtkResliceCursorWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetResliceCursor(
			(vtkResliceCursor *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerWrap::SetResliceMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetResliceMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerWrap::SetResliceModeToAxisAligned(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetResliceModeToAxisAligned();
}

void VtkResliceImageViewerWrap::SetResliceModeToOblique(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetResliceModeToOblique();
}

void VtkResliceImageViewerWrap::SetSliceScrollOnMouseWheel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSliceScrollOnMouseWheel(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerWrap::SetThickMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetThickMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkResliceImageViewerWrap::SliceScrollOnMouseWheelOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SliceScrollOnMouseWheelOff();
}

void VtkResliceImageViewerWrap::SliceScrollOnMouseWheelOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkResliceImageViewerWrap *wrapper = ObjectWrap::Unwrap<VtkResliceImageViewerWrap>(info.Holder());
	vtkResliceImageViewer *native = (vtkResliceImageViewer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SliceScrollOnMouseWheelOn();
}

