/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKTRANSMITUNSTRUCTUREDGRIDPIECEWRAP_H
#define NATIVE_EXTENSION_VTK_VTKTRANSMITUNSTRUCTUREDGRIDPIECEWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkTransmitUnstructuredGridPiece.h>

#include "vtkUnstructuredGridAlgorithmWrap.h"

class VtkTransmitUnstructuredGridPieceWrap : public VtkUnstructuredGridAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkTransmitUnstructuredGridPieceWrap(vtkSmartPointer<vtkTransmitUnstructuredGridPiece>);
		VtkTransmitUnstructuredGridPieceWrap();
		~VtkTransmitUnstructuredGridPieceWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void CreateGhostCellsOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CreateGhostCellsOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetController(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCreateGhostCells(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetController(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCreateGhostCells(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
