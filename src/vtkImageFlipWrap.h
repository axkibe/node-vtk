/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKIMAGEFLIPWRAP_H
#define NATIVE_EXTENSION_VTK_VTKIMAGEFLIPWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkImageFlip.h>

#include "vtkImageResliceWrap.h"

class VtkImageFlipWrap : public VtkImageResliceWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkImageFlipWrap(vtkSmartPointer<vtkImageFlip>);
		VtkImageFlipWrap();
		~VtkImageFlipWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void FlipAboutOriginOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void FlipAboutOriginOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFilteredAxes(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFilteredAxis(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFlipAboutOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPreserveImageExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void PreserveImageExtentOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void PreserveImageExtentOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFilteredAxes(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFilteredAxis(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFlipAboutOrigin(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetPreserveImageExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
