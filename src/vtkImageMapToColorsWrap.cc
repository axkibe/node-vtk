/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkThreadedImageAlgorithmWrap.h"
#include "vtkImageMapToColorsWrap.h"
#include "vtkObjectWrap.h"
#include "vtkScalarsToColorsWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkImageMapToColorsWrap::constructor;

VtkImageMapToColorsWrap::VtkImageMapToColorsWrap()
{ }

VtkImageMapToColorsWrap::VtkImageMapToColorsWrap(vtkSmartPointer<vtkImageMapToColors> _native)
{ native = _native; }

VtkImageMapToColorsWrap::~VtkImageMapToColorsWrap()
{ }

void VtkImageMapToColorsWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkImageMapToColorsWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkImageAlgorithmWrap::InitTpl(tpl);
	VtkThreadedImageAlgorithmWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkImageMapToColors").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ImageMapToColors").ToLocalChecked(),tpl->GetFunction());
}

void VtkImageMapToColorsWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetActiveComponent", GetActiveComponent);
	Nan::SetPrototypeMethod(tpl, "getActiveComponent", GetActiveComponent);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetLookupTable", GetLookupTable);
	Nan::SetPrototypeMethod(tpl, "getLookupTable", GetLookupTable);

	Nan::SetPrototypeMethod(tpl, "GetOutputFormat", GetOutputFormat);
	Nan::SetPrototypeMethod(tpl, "getOutputFormat", GetOutputFormat);

	Nan::SetPrototypeMethod(tpl, "GetPassAlphaToOutput", GetPassAlphaToOutput);
	Nan::SetPrototypeMethod(tpl, "getPassAlphaToOutput", GetPassAlphaToOutput);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PassAlphaToOutputOff", PassAlphaToOutputOff);
	Nan::SetPrototypeMethod(tpl, "passAlphaToOutputOff", PassAlphaToOutputOff);

	Nan::SetPrototypeMethod(tpl, "PassAlphaToOutputOn", PassAlphaToOutputOn);
	Nan::SetPrototypeMethod(tpl, "passAlphaToOutputOn", PassAlphaToOutputOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetActiveComponent", SetActiveComponent);
	Nan::SetPrototypeMethod(tpl, "setActiveComponent", SetActiveComponent);

	Nan::SetPrototypeMethod(tpl, "SetLookupTable", SetLookupTable);
	Nan::SetPrototypeMethod(tpl, "setLookupTable", SetLookupTable);

	Nan::SetPrototypeMethod(tpl, "SetOutputFormat", SetOutputFormat);
	Nan::SetPrototypeMethod(tpl, "setOutputFormat", SetOutputFormat);

	Nan::SetPrototypeMethod(tpl, "SetOutputFormatToLuminance", SetOutputFormatToLuminance);
	Nan::SetPrototypeMethod(tpl, "setOutputFormatToLuminance", SetOutputFormatToLuminance);

	Nan::SetPrototypeMethod(tpl, "SetOutputFormatToLuminanceAlpha", SetOutputFormatToLuminanceAlpha);
	Nan::SetPrototypeMethod(tpl, "setOutputFormatToLuminanceAlpha", SetOutputFormatToLuminanceAlpha);

	Nan::SetPrototypeMethod(tpl, "SetOutputFormatToRGB", SetOutputFormatToRGB);
	Nan::SetPrototypeMethod(tpl, "setOutputFormatToRGB", SetOutputFormatToRGB);

	Nan::SetPrototypeMethod(tpl, "SetOutputFormatToRGBA", SetOutputFormatToRGBA);
	Nan::SetPrototypeMethod(tpl, "setOutputFormatToRGBA", SetOutputFormatToRGBA);

	Nan::SetPrototypeMethod(tpl, "SetPassAlphaToOutput", SetPassAlphaToOutput);
	Nan::SetPrototypeMethod(tpl, "setPassAlphaToOutput", SetPassAlphaToOutput);

}

void VtkImageMapToColorsWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageMapToColors> native = vtkSmartPointer<vtkImageMapToColors>::New();
		VtkImageMapToColorsWrap* obj = new VtkImageMapToColorsWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageMapToColorsWrap::GetActiveComponent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetActiveComponent();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageMapToColorsWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageMapToColorsWrap::GetLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	vtkScalarsToColors * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLookupTable();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkScalarsToColorsWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkScalarsToColorsWrap *w = new VtkScalarsToColorsWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageMapToColorsWrap::GetOutputFormat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputFormat();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageMapToColorsWrap::GetPassAlphaToOutput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPassAlphaToOutput();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageMapToColorsWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMapToColorsWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	vtkImageMapToColors * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImageMapToColorsWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageMapToColorsWrap *w = new VtkImageMapToColorsWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageMapToColorsWrap::PassAlphaToOutputOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PassAlphaToOutputOff();
}

void VtkImageMapToColorsWrap::PassAlphaToOutputOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PassAlphaToOutputOn();
}

void VtkImageMapToColorsWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageMapToColors * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkImageMapToColorsWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageMapToColorsWrap *w = new VtkImageMapToColorsWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMapToColorsWrap::SetActiveComponent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetActiveComponent(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMapToColorsWrap::SetLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkScalarsToColorsWrap *a0 = ObjectWrap::Unwrap<VtkScalarsToColorsWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLookupTable(
			(vtkScalarsToColors *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMapToColorsWrap::SetOutputFormat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputFormat(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageMapToColorsWrap::SetOutputFormatToLuminance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputFormatToLuminance();
}

void VtkImageMapToColorsWrap::SetOutputFormatToLuminanceAlpha(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputFormatToLuminanceAlpha();
}

void VtkImageMapToColorsWrap::SetOutputFormatToRGB(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputFormatToRGB();
}

void VtkImageMapToColorsWrap::SetOutputFormatToRGBA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputFormatToRGBA();
}

void VtkImageMapToColorsWrap::SetPassAlphaToOutput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageMapToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageMapToColorsWrap>(info.Holder());
	vtkImageMapToColors *native = (vtkImageMapToColors *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPassAlphaToOutput(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

