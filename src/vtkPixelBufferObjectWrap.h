/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKPIXELBUFFEROBJECTWRAP_H
#define NATIVE_EXTENSION_VTK_VTKPIXELBUFFEROBJECTWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkPixelBufferObject.h>

#include "vtkObjectWrap.h"

class VtkPixelBufferObjectWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkPixelBufferObjectWrap(vtkSmartPointer<vtkPixelBufferObject>);
		VtkPixelBufferObjectWrap();
		~VtkPixelBufferObjectWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void BindToPackedBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void BindToUnPackedBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetComponents(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetContext(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetUsage(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseMemory(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetComponents(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetContext(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetUsage(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UnBind(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UnmapPackedBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UnmapUnpackedBuffer(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
