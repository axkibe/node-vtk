/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkGenericAttributeWrap.h"
#include "vtkGenericPointIteratorWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkGenericAttributeWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkGenericAttributeWrap::ptpl;

VtkGenericAttributeWrap::VtkGenericAttributeWrap()
{ }

VtkGenericAttributeWrap::VtkGenericAttributeWrap(vtkSmartPointer<vtkGenericAttribute> _native)
{ native = _native; }

VtkGenericAttributeWrap::~VtkGenericAttributeWrap()
{ }

void VtkGenericAttributeWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkGenericAttribute").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("GenericAttribute").ToLocalChecked(), ConstructorGetter);
}

void VtkGenericAttributeWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkGenericAttributeWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkGenericAttributeWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "GetCentering", GetCentering);
	Nan::SetPrototypeMethod(tpl, "getCentering", GetCentering);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetComponent", GetComponent);
	Nan::SetPrototypeMethod(tpl, "getComponent", GetComponent);

	Nan::SetPrototypeMethod(tpl, "GetComponentType", GetComponentType);
	Nan::SetPrototypeMethod(tpl, "getComponentType", GetComponentType);

	Nan::SetPrototypeMethod(tpl, "GetMaxNorm", GetMaxNorm);
	Nan::SetPrototypeMethod(tpl, "getMaxNorm", GetMaxNorm);

	Nan::SetPrototypeMethod(tpl, "GetName", GetName);
	Nan::SetPrototypeMethod(tpl, "getName", GetName);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComponents", GetNumberOfComponents);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComponents", GetNumberOfComponents);

	Nan::SetPrototypeMethod(tpl, "GetType", GetType);
	Nan::SetPrototypeMethod(tpl, "getType", GetType);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "ShallowCopy", ShallowCopy);
	Nan::SetPrototypeMethod(tpl, "shallowCopy", ShallowCopy);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );
}

void VtkGenericAttributeWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkGenericAttributeWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkGenericAttributeWrap::ptpl))->HasInstance(info[0]))
	{
		VtkGenericAttributeWrap *a0 = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DeepCopy(
			(vtkGenericAttribute *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericAttributeWrap::GetCentering(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCentering();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericAttributeWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGenericAttributeWrap::GetComponent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkGenericPointIteratorWrap::ptpl))->HasInstance(info[1]))
		{
			VtkGenericPointIteratorWrap *a1 = ObjectWrap::Unwrap<VtkGenericPointIteratorWrap>(info[1]->ToObject());
			double r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetComponent(
				info[0]->Int32Value(),
				(vtkGenericPointIterator *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericAttributeWrap::GetComponentType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComponentType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericAttributeWrap::GetMaxNorm(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaxNorm();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericAttributeWrap::GetName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGenericAttributeWrap::GetNumberOfComponents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfComponents();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericAttributeWrap::GetType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericAttributeWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericAttributeWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	vtkGenericAttribute * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkGenericAttributeWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkGenericAttributeWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGenericAttributeWrap *w = new VtkGenericAttributeWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericAttributeWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkGenericAttribute * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkGenericAttributeWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkGenericAttributeWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkGenericAttributeWrap *w = new VtkGenericAttributeWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericAttributeWrap::ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericAttributeWrap *wrapper = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info.Holder());
	vtkGenericAttribute *native = (vtkGenericAttribute *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkGenericAttributeWrap::ptpl))->HasInstance(info[0]))
	{
		VtkGenericAttributeWrap *a0 = ObjectWrap::Unwrap<VtkGenericAttributeWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ShallowCopy(
			(vtkGenericAttribute *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

