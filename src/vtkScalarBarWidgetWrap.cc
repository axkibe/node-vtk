/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkBorderWidgetWrap.h"
#include "vtkScalarBarWidgetWrap.h"
#include "vtkObjectWrap.h"
#include "vtkScalarBarRepresentationWrap.h"
#include "vtkScalarBarActorWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkScalarBarWidgetWrap::constructor;

VtkScalarBarWidgetWrap::VtkScalarBarWidgetWrap()
{ }

VtkScalarBarWidgetWrap::VtkScalarBarWidgetWrap(vtkSmartPointer<vtkScalarBarWidget> _native)
{ native = _native; }

VtkScalarBarWidgetWrap::~VtkScalarBarWidgetWrap()
{ }

void VtkScalarBarWidgetWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkScalarBarWidgetWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkInteractorObserverWrap::InitTpl(tpl);
	VtkAbstractWidgetWrap::InitTpl(tpl);
	VtkBorderWidgetWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkScalarBarWidget").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ScalarBarWidget").ToLocalChecked(),tpl->GetFunction());
}

void VtkScalarBarWidgetWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "CreateDefaultRepresentation", CreateDefaultRepresentation);
	Nan::SetPrototypeMethod(tpl, "createDefaultRepresentation", CreateDefaultRepresentation);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetRepositionable", GetRepositionable);
	Nan::SetPrototypeMethod(tpl, "getRepositionable", GetRepositionable);

	Nan::SetPrototypeMethod(tpl, "GetScalarBarActor", GetScalarBarActor);
	Nan::SetPrototypeMethod(tpl, "getScalarBarActor", GetScalarBarActor);

	Nan::SetPrototypeMethod(tpl, "GetScalarBarRepresentation", GetScalarBarRepresentation);
	Nan::SetPrototypeMethod(tpl, "getScalarBarRepresentation", GetScalarBarRepresentation);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RepositionableOff", RepositionableOff);
	Nan::SetPrototypeMethod(tpl, "repositionableOff", RepositionableOff);

	Nan::SetPrototypeMethod(tpl, "RepositionableOn", RepositionableOn);
	Nan::SetPrototypeMethod(tpl, "repositionableOn", RepositionableOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetRepositionable", SetRepositionable);
	Nan::SetPrototypeMethod(tpl, "setRepositionable", SetRepositionable);

	Nan::SetPrototypeMethod(tpl, "SetRepresentation", SetRepresentation);
	Nan::SetPrototypeMethod(tpl, "setRepresentation", SetRepresentation);

	Nan::SetPrototypeMethod(tpl, "SetScalarBarActor", SetScalarBarActor);
	Nan::SetPrototypeMethod(tpl, "setScalarBarActor", SetScalarBarActor);

}

void VtkScalarBarWidgetWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkScalarBarWidget> native = vtkSmartPointer<vtkScalarBarWidget>::New();
		VtkScalarBarWidgetWrap* obj = new VtkScalarBarWidgetWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkScalarBarWidgetWrap::CreateDefaultRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CreateDefaultRepresentation();
}

void VtkScalarBarWidgetWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkScalarBarWidgetWrap::GetRepositionable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRepositionable();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkScalarBarWidgetWrap::GetScalarBarActor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	vtkScalarBarActor * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScalarBarActor();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkScalarBarActorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkScalarBarActorWrap *w = new VtkScalarBarActorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkScalarBarWidgetWrap::GetScalarBarRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	vtkScalarBarRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScalarBarRepresentation();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkScalarBarRepresentationWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkScalarBarRepresentationWrap *w = new VtkScalarBarRepresentationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkScalarBarWidgetWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkScalarBarWidgetWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	vtkScalarBarWidget * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkScalarBarWidgetWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkScalarBarWidgetWrap *w = new VtkScalarBarWidgetWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkScalarBarWidgetWrap::RepositionableOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RepositionableOff();
}

void VtkScalarBarWidgetWrap::RepositionableOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RepositionableOn();
}

void VtkScalarBarWidgetWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkScalarBarWidget * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkScalarBarWidgetWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkScalarBarWidgetWrap *w = new VtkScalarBarWidgetWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkScalarBarWidgetWrap::SetRepositionable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRepositionable(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkScalarBarWidgetWrap::SetRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkScalarBarRepresentationWrap *a0 = ObjectWrap::Unwrap<VtkScalarBarRepresentationWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRepresentation(
			(vtkScalarBarRepresentation *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkScalarBarWidgetWrap::SetScalarBarActor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkScalarBarWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkScalarBarWidgetWrap>(info.Holder());
	vtkScalarBarWidget *native = (vtkScalarBarWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkScalarBarActorWrap *a0 = ObjectWrap::Unwrap<VtkScalarBarActorWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScalarBarActor(
			(vtkScalarBarActor *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

