/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKPAINTERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKPAINTERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkPainter.h>

#include "vtkObjectWrap.h"

class VtkPainterWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkPainterWrap(vtkSmartPointer<vtkPainter>);
		VtkPainterWrap();
		~VtkPainterWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void CONSERVE_MEMORY(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetDelegatePainter(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInput(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOutput(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetProgress(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetProgressMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetProgressMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTimeToDraw(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void HIGH_QUALITY(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void STATIC_DATA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetDelegatePainter(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetInput(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetProgress(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
