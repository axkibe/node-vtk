/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkCompositeDataIteratorWrap.h"
#include "vtkDataObjectTreeIteratorWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDataObjectWrap.h"
#include "vtkInformationWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkDataObjectTreeIteratorWrap::constructor;

VtkDataObjectTreeIteratorWrap::VtkDataObjectTreeIteratorWrap()
{ }

VtkDataObjectTreeIteratorWrap::VtkDataObjectTreeIteratorWrap(vtkSmartPointer<vtkDataObjectTreeIterator> _native)
{ native = _native; }

VtkDataObjectTreeIteratorWrap::~VtkDataObjectTreeIteratorWrap()
{ }

void VtkDataObjectTreeIteratorWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkDataObjectTreeIteratorWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkCompositeDataIteratorWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkDataObjectTreeIterator").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("DataObjectTreeIterator").ToLocalChecked(),tpl->GetFunction());
}

void VtkDataObjectTreeIteratorWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetCurrentDataObject", GetCurrentDataObject);
	Nan::SetPrototypeMethod(tpl, "getCurrentDataObject", GetCurrentDataObject);

	Nan::SetPrototypeMethod(tpl, "GetCurrentMetaData", GetCurrentMetaData);
	Nan::SetPrototypeMethod(tpl, "getCurrentMetaData", GetCurrentMetaData);

	Nan::SetPrototypeMethod(tpl, "GetTraverseSubTree", GetTraverseSubTree);
	Nan::SetPrototypeMethod(tpl, "getTraverseSubTree", GetTraverseSubTree);

	Nan::SetPrototypeMethod(tpl, "GetVisitOnlyLeaves", GetVisitOnlyLeaves);
	Nan::SetPrototypeMethod(tpl, "getVisitOnlyLeaves", GetVisitOnlyLeaves);

	Nan::SetPrototypeMethod(tpl, "GoToFirstItem", GoToFirstItem);
	Nan::SetPrototypeMethod(tpl, "goToFirstItem", GoToFirstItem);

	Nan::SetPrototypeMethod(tpl, "GoToNextItem", GoToNextItem);
	Nan::SetPrototypeMethod(tpl, "goToNextItem", GoToNextItem);

	Nan::SetPrototypeMethod(tpl, "HasCurrentMetaData", HasCurrentMetaData);
	Nan::SetPrototypeMethod(tpl, "hasCurrentMetaData", HasCurrentMetaData);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "IsDoneWithTraversal", IsDoneWithTraversal);
	Nan::SetPrototypeMethod(tpl, "isDoneWithTraversal", IsDoneWithTraversal);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetTraverseSubTree", SetTraverseSubTree);
	Nan::SetPrototypeMethod(tpl, "setTraverseSubTree", SetTraverseSubTree);

	Nan::SetPrototypeMethod(tpl, "SetVisitOnlyLeaves", SetVisitOnlyLeaves);
	Nan::SetPrototypeMethod(tpl, "setVisitOnlyLeaves", SetVisitOnlyLeaves);

	Nan::SetPrototypeMethod(tpl, "TraverseSubTreeOff", TraverseSubTreeOff);
	Nan::SetPrototypeMethod(tpl, "traverseSubTreeOff", TraverseSubTreeOff);

	Nan::SetPrototypeMethod(tpl, "TraverseSubTreeOn", TraverseSubTreeOn);
	Nan::SetPrototypeMethod(tpl, "traverseSubTreeOn", TraverseSubTreeOn);

	Nan::SetPrototypeMethod(tpl, "VisitOnlyLeavesOff", VisitOnlyLeavesOff);
	Nan::SetPrototypeMethod(tpl, "visitOnlyLeavesOff", VisitOnlyLeavesOff);

	Nan::SetPrototypeMethod(tpl, "VisitOnlyLeavesOn", VisitOnlyLeavesOn);
	Nan::SetPrototypeMethod(tpl, "visitOnlyLeavesOn", VisitOnlyLeavesOn);

}

void VtkDataObjectTreeIteratorWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkDataObjectTreeIterator> native = vtkSmartPointer<vtkDataObjectTreeIterator>::New();
		VtkDataObjectTreeIteratorWrap* obj = new VtkDataObjectTreeIteratorWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkDataObjectTreeIteratorWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDataObjectTreeIteratorWrap::GetCurrentDataObject(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	vtkDataObject * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCurrentDataObject();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataObjectWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataObjectWrap *w = new VtkDataObjectWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataObjectTreeIteratorWrap::GetCurrentMetaData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	vtkInformation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCurrentMetaData();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationWrap *w = new VtkInformationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataObjectTreeIteratorWrap::GetTraverseSubTree(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTraverseSubTree();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataObjectTreeIteratorWrap::GetVisitOnlyLeaves(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVisitOnlyLeaves();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataObjectTreeIteratorWrap::GoToFirstItem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GoToFirstItem();
}

void VtkDataObjectTreeIteratorWrap::GoToNextItem(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GoToNextItem();
}

void VtkDataObjectTreeIteratorWrap::HasCurrentMetaData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasCurrentMetaData();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataObjectTreeIteratorWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataObjectTreeIteratorWrap::IsDoneWithTraversal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->IsDoneWithTraversal();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataObjectTreeIteratorWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	vtkDataObjectTreeIterator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataObjectTreeIteratorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataObjectTreeIteratorWrap *w = new VtkDataObjectTreeIteratorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataObjectTreeIteratorWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkDataObjectTreeIterator * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkDataObjectTreeIteratorWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDataObjectTreeIteratorWrap *w = new VtkDataObjectTreeIteratorWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataObjectTreeIteratorWrap::SetTraverseSubTree(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTraverseSubTree(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataObjectTreeIteratorWrap::SetVisitOnlyLeaves(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVisitOnlyLeaves(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataObjectTreeIteratorWrap::TraverseSubTreeOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TraverseSubTreeOff();
}

void VtkDataObjectTreeIteratorWrap::TraverseSubTreeOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TraverseSubTreeOn();
}

void VtkDataObjectTreeIteratorWrap::VisitOnlyLeavesOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->VisitOnlyLeavesOff();
}

void VtkDataObjectTreeIteratorWrap::VisitOnlyLeavesOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataObjectTreeIteratorWrap *wrapper = ObjectWrap::Unwrap<VtkDataObjectTreeIteratorWrap>(info.Holder());
	vtkDataObjectTreeIterator *native = (vtkDataObjectTreeIterator *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->VisitOnlyLeavesOn();
}

