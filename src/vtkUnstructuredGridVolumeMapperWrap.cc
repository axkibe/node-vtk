/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkAbstractVolumeMapperWrap.h"
#include "vtkUnstructuredGridVolumeMapperWrap.h"
#include "vtkObjectWrap.h"
#include "vtkUnstructuredGridBaseWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkRendererWrap.h"
#include "vtkVolumeWrap.h"
#include "vtkWindowWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkUnstructuredGridVolumeMapperWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkUnstructuredGridVolumeMapperWrap::ptpl;

VtkUnstructuredGridVolumeMapperWrap::VtkUnstructuredGridVolumeMapperWrap()
{ }

VtkUnstructuredGridVolumeMapperWrap::VtkUnstructuredGridVolumeMapperWrap(vtkSmartPointer<vtkUnstructuredGridVolumeMapper> _native)
{ native = _native; }

VtkUnstructuredGridVolumeMapperWrap::~VtkUnstructuredGridVolumeMapperWrap()
{ }

void VtkUnstructuredGridVolumeMapperWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkUnstructuredGridVolumeMapper").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("UnstructuredGridVolumeMapper").ToLocalChecked(), ConstructorGetter);
}

void VtkUnstructuredGridVolumeMapperWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkUnstructuredGridVolumeMapperWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkAbstractVolumeMapperWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkAbstractVolumeMapperWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkUnstructuredGridVolumeMapperWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetBlendMode", GetBlendMode);
	Nan::SetPrototypeMethod(tpl, "getBlendMode", GetBlendMode);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetInput", GetInput);
	Nan::SetPrototypeMethod(tpl, "getInput", GetInput);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ReleaseGraphicsResources", ReleaseGraphicsResources);
	Nan::SetPrototypeMethod(tpl, "releaseGraphicsResources", ReleaseGraphicsResources);

	Nan::SetPrototypeMethod(tpl, "Render", Render);
	Nan::SetPrototypeMethod(tpl, "render", Render);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBlendMode", SetBlendMode);
	Nan::SetPrototypeMethod(tpl, "setBlendMode", SetBlendMode);

	Nan::SetPrototypeMethod(tpl, "SetBlendModeToComposite", SetBlendModeToComposite);
	Nan::SetPrototypeMethod(tpl, "setBlendModeToComposite", SetBlendModeToComposite);

	Nan::SetPrototypeMethod(tpl, "SetBlendModeToMaximumIntensity", SetBlendModeToMaximumIntensity);
	Nan::SetPrototypeMethod(tpl, "setBlendModeToMaximumIntensity", SetBlendModeToMaximumIntensity);

	Nan::SetPrototypeMethod(tpl, "SetInputData", SetInputData);
	Nan::SetPrototypeMethod(tpl, "setInputData", SetInputData);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );
}

void VtkUnstructuredGridVolumeMapperWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkUnstructuredGridVolumeMapperWrap::GetBlendMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeMapper *native = (vtkUnstructuredGridVolumeMapper *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBlendMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnstructuredGridVolumeMapperWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeMapper *native = (vtkUnstructuredGridVolumeMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkUnstructuredGridVolumeMapperWrap::GetInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeMapper *native = (vtkUnstructuredGridVolumeMapper *)wrapper->native.GetPointer();
	vtkUnstructuredGridBase * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInput();
		VtkUnstructuredGridBaseWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkUnstructuredGridBaseWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkUnstructuredGridBaseWrap *w = new VtkUnstructuredGridBaseWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkUnstructuredGridVolumeMapperWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeMapper *native = (vtkUnstructuredGridVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeMapperWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeMapper *native = (vtkUnstructuredGridVolumeMapper *)wrapper->native.GetPointer();
	vtkUnstructuredGridVolumeMapper * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkUnstructuredGridVolumeMapperWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkUnstructuredGridVolumeMapperWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkUnstructuredGridVolumeMapperWrap *w = new VtkUnstructuredGridVolumeMapperWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkUnstructuredGridVolumeMapperWrap::ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeMapper *native = (vtkUnstructuredGridVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkWindowWrap *a0 = ObjectWrap::Unwrap<VtkWindowWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->ReleaseGraphicsResources(
			(vtkWindow *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeMapperWrap::Render(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeMapper *native = (vtkUnstructuredGridVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRendererWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRendererWrap *a0 = ObjectWrap::Unwrap<VtkRendererWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkVolumeWrap::ptpl))->HasInstance(info[1]))
		{
			VtkVolumeWrap *a1 = ObjectWrap::Unwrap<VtkVolumeWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->Render(
				(vtkRenderer *) a0->native.GetPointer(),
				(vtkVolume *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeMapperWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeMapper *native = (vtkUnstructuredGridVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkUnstructuredGridVolumeMapper * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkUnstructuredGridVolumeMapperWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkUnstructuredGridVolumeMapperWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkUnstructuredGridVolumeMapperWrap *w = new VtkUnstructuredGridVolumeMapperWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeMapperWrap::SetBlendMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeMapper *native = (vtkUnstructuredGridVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBlendMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnstructuredGridVolumeMapperWrap::SetBlendModeToComposite(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeMapper *native = (vtkUnstructuredGridVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetBlendModeToComposite();
}

void VtkUnstructuredGridVolumeMapperWrap::SetBlendModeToMaximumIntensity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeMapper *native = (vtkUnstructuredGridVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetBlendModeToMaximumIntensity();
}

void VtkUnstructuredGridVolumeMapperWrap::SetInputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnstructuredGridVolumeMapperWrap *wrapper = ObjectWrap::Unwrap<VtkUnstructuredGridVolumeMapperWrap>(info.Holder());
	vtkUnstructuredGridVolumeMapper *native = (vtkUnstructuredGridVolumeMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkDataSetWrap::ptpl))->HasInstance(info[0]))
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputData(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

