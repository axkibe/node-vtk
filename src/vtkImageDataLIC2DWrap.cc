/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkImageAlgorithmWrap.h"
#include "vtkImageDataLIC2DWrap.h"
#include "vtkObjectWrap.h"
#include "vtkRenderWindowWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::FunctionTemplate> VtkImageDataLIC2DWrap::ptpl;

VtkImageDataLIC2DWrap::VtkImageDataLIC2DWrap()
{ }

VtkImageDataLIC2DWrap::VtkImageDataLIC2DWrap(vtkSmartPointer<vtkImageDataLIC2D> _native)
{ native = _native; }

VtkImageDataLIC2DWrap::~VtkImageDataLIC2DWrap()
{ }

void VtkImageDataLIC2DWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkImageDataLIC2D").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ImageDataLIC2D").ToLocalChecked(), ConstructorGetter);
}

void VtkImageDataLIC2DWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkImageDataLIC2DWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkImageAlgorithmWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkImageAlgorithmWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkImageDataLIC2DWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetContext", GetContext);
	Nan::SetPrototypeMethod(tpl, "getContext", GetContext);

	Nan::SetPrototypeMethod(tpl, "GetMagnification", GetMagnification);
	Nan::SetPrototypeMethod(tpl, "getMagnification", GetMagnification);

	Nan::SetPrototypeMethod(tpl, "GetOpenGLExtensionsSupported", GetOpenGLExtensionsSupported);
	Nan::SetPrototypeMethod(tpl, "getOpenGLExtensionsSupported", GetOpenGLExtensionsSupported);

	Nan::SetPrototypeMethod(tpl, "GetStepSize", GetStepSize);
	Nan::SetPrototypeMethod(tpl, "getStepSize", GetStepSize);

	Nan::SetPrototypeMethod(tpl, "GetSteps", GetSteps);
	Nan::SetPrototypeMethod(tpl, "getSteps", GetSteps);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetContext", SetContext);
	Nan::SetPrototypeMethod(tpl, "setContext", SetContext);

	Nan::SetPrototypeMethod(tpl, "SetMagnification", SetMagnification);
	Nan::SetPrototypeMethod(tpl, "setMagnification", SetMagnification);

	Nan::SetPrototypeMethod(tpl, "SetStepSize", SetStepSize);
	Nan::SetPrototypeMethod(tpl, "setStepSize", SetStepSize);

	Nan::SetPrototypeMethod(tpl, "SetSteps", SetSteps);
	Nan::SetPrototypeMethod(tpl, "setSteps", SetSteps);

	ptpl.Reset( tpl );
}

void VtkImageDataLIC2DWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageDataLIC2D> native = vtkSmartPointer<vtkImageDataLIC2D>::New();
		VtkImageDataLIC2DWrap* obj = new VtkImageDataLIC2DWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageDataLIC2DWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageDataLIC2DWrap::GetContext(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	vtkRenderWindow * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetContext();
		VtkRenderWindowWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkRenderWindowWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRenderWindowWrap *w = new VtkRenderWindowWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageDataLIC2DWrap::GetMagnification(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMagnification();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageDataLIC2DWrap::GetOpenGLExtensionsSupported(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOpenGLExtensionsSupported();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageDataLIC2DWrap::GetStepSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStepSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageDataLIC2DWrap::GetSteps(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSteps();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageDataLIC2DWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageDataLIC2DWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	vtkImageDataLIC2D * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkImageDataLIC2DWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::FunctionTemplate>(VtkImageDataLIC2DWrap::ptpl)->GetFunction();
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageDataLIC2DWrap *w = new VtkImageDataLIC2DWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageDataLIC2DWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageDataLIC2D * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkImageDataLIC2DWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::FunctionTemplate>(VtkImageDataLIC2DWrap::ptpl)->GetFunction();
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageDataLIC2DWrap *w = new VtkImageDataLIC2DWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageDataLIC2DWrap::SetContext(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkRenderWindowWrap::ptpl))->HasInstance(info[0]))
	{
		VtkRenderWindowWrap *a0 = ObjectWrap::Unwrap<VtkRenderWindowWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SetContext(
			(vtkRenderWindow *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageDataLIC2DWrap::SetMagnification(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMagnification(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageDataLIC2DWrap::SetStepSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetStepSize(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageDataLIC2DWrap::SetSteps(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageDataLIC2DWrap *wrapper = ObjectWrap::Unwrap<VtkImageDataLIC2DWrap>(info.Holder());
	vtkImageDataLIC2D *native = (vtkImageDataLIC2D *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSteps(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

