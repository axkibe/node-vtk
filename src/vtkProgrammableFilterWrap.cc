/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPassInputTypeAlgorithmWrap.h"
#include "vtkProgrammableFilterWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPolyDataWrap.h"
#include "vtkStructuredPointsWrap.h"
#include "vtkStructuredGridWrap.h"
#include "vtkUnstructuredGridWrap.h"
#include "vtkRectilinearGridWrap.h"
#include "vtkGraphWrap.h"
#include "vtkTableWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkProgrammableFilterWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkProgrammableFilterWrap::ptpl;

VtkProgrammableFilterWrap::VtkProgrammableFilterWrap()
{ }

VtkProgrammableFilterWrap::VtkProgrammableFilterWrap(vtkSmartPointer<vtkProgrammableFilter> _native)
{ native = _native; }

VtkProgrammableFilterWrap::~VtkProgrammableFilterWrap()
{ }

void VtkProgrammableFilterWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPassInputTypeAlgorithmWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPassInputTypeAlgorithmWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkProgrammableFilterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkProgrammableFilter").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ProgrammableFilter").ToLocalChecked(),tpl->GetFunction());
}

void VtkProgrammableFilterWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "CopyArraysOff", CopyArraysOff);
	Nan::SetPrototypeMethod(tpl, "copyArraysOff", CopyArraysOff);

	Nan::SetPrototypeMethod(tpl, "CopyArraysOn", CopyArraysOn);
	Nan::SetPrototypeMethod(tpl, "copyArraysOn", CopyArraysOn);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetGraphInput", GetGraphInput);
	Nan::SetPrototypeMethod(tpl, "getGraphInput", GetGraphInput);

	Nan::SetPrototypeMethod(tpl, "GetPolyDataInput", GetPolyDataInput);
	Nan::SetPrototypeMethod(tpl, "getPolyDataInput", GetPolyDataInput);

	Nan::SetPrototypeMethod(tpl, "GetRectilinearGridInput", GetRectilinearGridInput);
	Nan::SetPrototypeMethod(tpl, "getRectilinearGridInput", GetRectilinearGridInput);

	Nan::SetPrototypeMethod(tpl, "GetStructuredGridInput", GetStructuredGridInput);
	Nan::SetPrototypeMethod(tpl, "getStructuredGridInput", GetStructuredGridInput);

	Nan::SetPrototypeMethod(tpl, "GetStructuredPointsInput", GetStructuredPointsInput);
	Nan::SetPrototypeMethod(tpl, "getStructuredPointsInput", GetStructuredPointsInput);

	Nan::SetPrototypeMethod(tpl, "GetTableInput", GetTableInput);
	Nan::SetPrototypeMethod(tpl, "getTableInput", GetTableInput);

	Nan::SetPrototypeMethod(tpl, "GetUnstructuredGridInput", GetUnstructuredGridInput);
	Nan::SetPrototypeMethod(tpl, "getUnstructuredGridInput", GetUnstructuredGridInput);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

}

void VtkProgrammableFilterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkProgrammableFilter> native = vtkSmartPointer<vtkProgrammableFilter>::New();
		VtkProgrammableFilterWrap* obj = new VtkProgrammableFilterWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkProgrammableFilterWrap::CopyArraysOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CopyArraysOff();
}

void VtkProgrammableFilterWrap::CopyArraysOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->CopyArraysOn();
}

void VtkProgrammableFilterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkProgrammableFilterWrap::GetGraphInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	vtkGraph * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGraphInput();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkGraphWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGraphWrap *w = new VtkGraphWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProgrammableFilterWrap::GetPolyDataInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	vtkPolyData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPolyDataInput();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPolyDataWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataWrap *w = new VtkPolyDataWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProgrammableFilterWrap::GetRectilinearGridInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	vtkRectilinearGrid * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRectilinearGridInput();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkRectilinearGridWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRectilinearGridWrap *w = new VtkRectilinearGridWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProgrammableFilterWrap::GetStructuredGridInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	vtkStructuredGrid * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStructuredGridInput();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkStructuredGridWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStructuredGridWrap *w = new VtkStructuredGridWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProgrammableFilterWrap::GetStructuredPointsInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	vtkStructuredPoints * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetStructuredPointsInput();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkStructuredPointsWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkStructuredPointsWrap *w = new VtkStructuredPointsWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProgrammableFilterWrap::GetTableInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	vtkTable * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTableInput();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkTableWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkTableWrap *w = new VtkTableWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProgrammableFilterWrap::GetUnstructuredGridInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	vtkUnstructuredGrid * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUnstructuredGridInput();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkUnstructuredGridWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkUnstructuredGridWrap *w = new VtkUnstructuredGridWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProgrammableFilterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProgrammableFilterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	vtkProgrammableFilter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkProgrammableFilterWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkProgrammableFilterWrap *w = new VtkProgrammableFilterWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProgrammableFilterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProgrammableFilterWrap *wrapper = ObjectWrap::Unwrap<VtkProgrammableFilterWrap>(info.Holder());
	vtkProgrammableFilter *native = (vtkProgrammableFilter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkProgrammableFilter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkProgrammableFilterWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkProgrammableFilterWrap *w = new VtkProgrammableFilterWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

