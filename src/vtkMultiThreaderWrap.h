/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKMULTITHREADERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKMULTITHREADERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkMultiThreader.h>

#include "vtkObjectWrap.h"

class VtkMultiThreaderWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkMultiThreaderWrap(vtkSmartPointer<vtkMultiThreader>);
		VtkMultiThreaderWrap();
		~VtkMultiThreaderWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGlobalDefaultNumberOfThreads(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGlobalMaximumNumberOfThreads(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfThreads(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfThreadsMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfThreadsMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsThreadActive(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void MultipleMethodExecute(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGlobalDefaultNumberOfThreads(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGlobalMaximumNumberOfThreads(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetNumberOfThreads(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SingleMethodExecute(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void TerminateThread(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
