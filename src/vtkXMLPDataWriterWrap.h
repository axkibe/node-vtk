/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKXMLPDATAWRITERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKXMLPDATAWRITERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkXMLPDataWriter.h>

#include "vtkXMLWriterWrap.h"

class VtkXMLPDataWriterWrap : public VtkXMLWriterWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkXMLPDataWriterWrap(vtkSmartPointer<vtkXMLPDataWriter>);
		VtkXMLPDataWriterWrap();
		~VtkXMLPDataWriterWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetEndPiece(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGhostLevel(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfPieces(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetStartPiece(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetWriteSummaryFile(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetEndPiece(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGhostLevel(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetNumberOfPieces(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetStartPiece(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetWriteSummaryFile(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void WriteSummaryFileOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void WriteSummaryFileOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
