/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkGenericStreamTracerWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkAlgorithmOutputWrap.h"
#include "vtkInformationWrap.h"
#include "vtkInitialValueProblemSolverWrap.h"
#include "vtkGenericDataSetWrap.h"
#include "vtkGenericInterpolatedVelocityFieldWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkGenericStreamTracerWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkGenericStreamTracerWrap::ptpl;

VtkGenericStreamTracerWrap::VtkGenericStreamTracerWrap()
{ }

VtkGenericStreamTracerWrap::VtkGenericStreamTracerWrap(vtkSmartPointer<vtkGenericStreamTracer> _native)
{ native = _native; }

VtkGenericStreamTracerWrap::~VtkGenericStreamTracerWrap()
{ }

void VtkGenericStreamTracerWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkGenericStreamTracerWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkGenericStreamTracer").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("GenericStreamTracer").ToLocalChecked(),tpl->GetFunction());
}

void VtkGenericStreamTracerWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "AddInputData", AddInputData);
	Nan::SetPrototypeMethod(tpl, "addInputData", AddInputData);

	Nan::SetPrototypeMethod(tpl, "ComputeVorticityOff", ComputeVorticityOff);
	Nan::SetPrototypeMethod(tpl, "computeVorticityOff", ComputeVorticityOff);

	Nan::SetPrototypeMethod(tpl, "ComputeVorticityOn", ComputeVorticityOn);
	Nan::SetPrototypeMethod(tpl, "computeVorticityOn", ComputeVorticityOn);

	Nan::SetPrototypeMethod(tpl, "FillInputPortInformation", FillInputPortInformation);
	Nan::SetPrototypeMethod(tpl, "fillInputPortInformation", FillInputPortInformation);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetComputeVorticity", GetComputeVorticity);
	Nan::SetPrototypeMethod(tpl, "getComputeVorticity", GetComputeVorticity);

	Nan::SetPrototypeMethod(tpl, "GetInitialIntegrationStep", GetInitialIntegrationStep);
	Nan::SetPrototypeMethod(tpl, "getInitialIntegrationStep", GetInitialIntegrationStep);

	Nan::SetPrototypeMethod(tpl, "GetInitialIntegrationStepUnit", GetInitialIntegrationStepUnit);
	Nan::SetPrototypeMethod(tpl, "getInitialIntegrationStepUnit", GetInitialIntegrationStepUnit);

	Nan::SetPrototypeMethod(tpl, "GetInputVectorsSelection", GetInputVectorsSelection);
	Nan::SetPrototypeMethod(tpl, "getInputVectorsSelection", GetInputVectorsSelection);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationDirection", GetIntegrationDirection);
	Nan::SetPrototypeMethod(tpl, "getIntegrationDirection", GetIntegrationDirection);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationDirectionMaxValue", GetIntegrationDirectionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getIntegrationDirectionMaxValue", GetIntegrationDirectionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetIntegrationDirectionMinValue", GetIntegrationDirectionMinValue);
	Nan::SetPrototypeMethod(tpl, "getIntegrationDirectionMinValue", GetIntegrationDirectionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetIntegrator", GetIntegrator);
	Nan::SetPrototypeMethod(tpl, "getIntegrator", GetIntegrator);

	Nan::SetPrototypeMethod(tpl, "GetIntegratorType", GetIntegratorType);
	Nan::SetPrototypeMethod(tpl, "getIntegratorType", GetIntegratorType);

	Nan::SetPrototypeMethod(tpl, "GetMaximumError", GetMaximumError);
	Nan::SetPrototypeMethod(tpl, "getMaximumError", GetMaximumError);

	Nan::SetPrototypeMethod(tpl, "GetMaximumIntegrationStep", GetMaximumIntegrationStep);
	Nan::SetPrototypeMethod(tpl, "getMaximumIntegrationStep", GetMaximumIntegrationStep);

	Nan::SetPrototypeMethod(tpl, "GetMaximumIntegrationStepUnit", GetMaximumIntegrationStepUnit);
	Nan::SetPrototypeMethod(tpl, "getMaximumIntegrationStepUnit", GetMaximumIntegrationStepUnit);

	Nan::SetPrototypeMethod(tpl, "GetMaximumPropagation", GetMaximumPropagation);
	Nan::SetPrototypeMethod(tpl, "getMaximumPropagation", GetMaximumPropagation);

	Nan::SetPrototypeMethod(tpl, "GetMaximumPropagationUnit", GetMaximumPropagationUnit);
	Nan::SetPrototypeMethod(tpl, "getMaximumPropagationUnit", GetMaximumPropagationUnit);

	Nan::SetPrototypeMethod(tpl, "GetMinimumIntegrationStep", GetMinimumIntegrationStep);
	Nan::SetPrototypeMethod(tpl, "getMinimumIntegrationStep", GetMinimumIntegrationStep);

	Nan::SetPrototypeMethod(tpl, "GetMinimumIntegrationStepUnit", GetMinimumIntegrationStepUnit);
	Nan::SetPrototypeMethod(tpl, "getMinimumIntegrationStepUnit", GetMinimumIntegrationStepUnit);

	Nan::SetPrototypeMethod(tpl, "GetRotationScale", GetRotationScale);
	Nan::SetPrototypeMethod(tpl, "getRotationScale", GetRotationScale);

	Nan::SetPrototypeMethod(tpl, "GetSource", GetSource);
	Nan::SetPrototypeMethod(tpl, "getSource", GetSource);

	Nan::SetPrototypeMethod(tpl, "GetTerminalSpeed", GetTerminalSpeed);
	Nan::SetPrototypeMethod(tpl, "getTerminalSpeed", GetTerminalSpeed);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SelectInputVectors", SelectInputVectors);
	Nan::SetPrototypeMethod(tpl, "selectInputVectors", SelectInputVectors);

	Nan::SetPrototypeMethod(tpl, "SetComputeVorticity", SetComputeVorticity);
	Nan::SetPrototypeMethod(tpl, "setComputeVorticity", SetComputeVorticity);

	Nan::SetPrototypeMethod(tpl, "SetInitialIntegrationStep", SetInitialIntegrationStep);
	Nan::SetPrototypeMethod(tpl, "setInitialIntegrationStep", SetInitialIntegrationStep);

	Nan::SetPrototypeMethod(tpl, "SetInitialIntegrationStepUnit", SetInitialIntegrationStepUnit);
	Nan::SetPrototypeMethod(tpl, "setInitialIntegrationStepUnit", SetInitialIntegrationStepUnit);

	Nan::SetPrototypeMethod(tpl, "SetInitialIntegrationStepUnitToCellLengthUnit", SetInitialIntegrationStepUnitToCellLengthUnit);
	Nan::SetPrototypeMethod(tpl, "setInitialIntegrationStepUnitToCellLengthUnit", SetInitialIntegrationStepUnitToCellLengthUnit);

	Nan::SetPrototypeMethod(tpl, "SetInitialIntegrationStepUnitToLengthUnit", SetInitialIntegrationStepUnitToLengthUnit);
	Nan::SetPrototypeMethod(tpl, "setInitialIntegrationStepUnitToLengthUnit", SetInitialIntegrationStepUnitToLengthUnit);

	Nan::SetPrototypeMethod(tpl, "SetInitialIntegrationStepUnitToTimeUnit", SetInitialIntegrationStepUnitToTimeUnit);
	Nan::SetPrototypeMethod(tpl, "setInitialIntegrationStepUnitToTimeUnit", SetInitialIntegrationStepUnitToTimeUnit);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationDirection", SetIntegrationDirection);
	Nan::SetPrototypeMethod(tpl, "setIntegrationDirection", SetIntegrationDirection);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationDirectionToBackward", SetIntegrationDirectionToBackward);
	Nan::SetPrototypeMethod(tpl, "setIntegrationDirectionToBackward", SetIntegrationDirectionToBackward);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationDirectionToBoth", SetIntegrationDirectionToBoth);
	Nan::SetPrototypeMethod(tpl, "setIntegrationDirectionToBoth", SetIntegrationDirectionToBoth);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationDirectionToForward", SetIntegrationDirectionToForward);
	Nan::SetPrototypeMethod(tpl, "setIntegrationDirectionToForward", SetIntegrationDirectionToForward);

	Nan::SetPrototypeMethod(tpl, "SetIntegrationStepUnit", SetIntegrationStepUnit);
	Nan::SetPrototypeMethod(tpl, "setIntegrationStepUnit", SetIntegrationStepUnit);

	Nan::SetPrototypeMethod(tpl, "SetIntegrator", SetIntegrator);
	Nan::SetPrototypeMethod(tpl, "setIntegrator", SetIntegrator);

	Nan::SetPrototypeMethod(tpl, "SetIntegratorType", SetIntegratorType);
	Nan::SetPrototypeMethod(tpl, "setIntegratorType", SetIntegratorType);

	Nan::SetPrototypeMethod(tpl, "SetIntegratorTypeToRungeKutta2", SetIntegratorTypeToRungeKutta2);
	Nan::SetPrototypeMethod(tpl, "setIntegratorTypeToRungeKutta2", SetIntegratorTypeToRungeKutta2);

	Nan::SetPrototypeMethod(tpl, "SetIntegratorTypeToRungeKutta4", SetIntegratorTypeToRungeKutta4);
	Nan::SetPrototypeMethod(tpl, "setIntegratorTypeToRungeKutta4", SetIntegratorTypeToRungeKutta4);

	Nan::SetPrototypeMethod(tpl, "SetIntegratorTypeToRungeKutta45", SetIntegratorTypeToRungeKutta45);
	Nan::SetPrototypeMethod(tpl, "setIntegratorTypeToRungeKutta45", SetIntegratorTypeToRungeKutta45);

	Nan::SetPrototypeMethod(tpl, "SetInterpolatorPrototype", SetInterpolatorPrototype);
	Nan::SetPrototypeMethod(tpl, "setInterpolatorPrototype", SetInterpolatorPrototype);

	Nan::SetPrototypeMethod(tpl, "SetMaximumError", SetMaximumError);
	Nan::SetPrototypeMethod(tpl, "setMaximumError", SetMaximumError);

	Nan::SetPrototypeMethod(tpl, "SetMaximumIntegrationStep", SetMaximumIntegrationStep);
	Nan::SetPrototypeMethod(tpl, "setMaximumIntegrationStep", SetMaximumIntegrationStep);

	Nan::SetPrototypeMethod(tpl, "SetMaximumIntegrationStepUnit", SetMaximumIntegrationStepUnit);
	Nan::SetPrototypeMethod(tpl, "setMaximumIntegrationStepUnit", SetMaximumIntegrationStepUnit);

	Nan::SetPrototypeMethod(tpl, "SetMaximumIntegrationStepUnitToCellLengthUnit", SetMaximumIntegrationStepUnitToCellLengthUnit);
	Nan::SetPrototypeMethod(tpl, "setMaximumIntegrationStepUnitToCellLengthUnit", SetMaximumIntegrationStepUnitToCellLengthUnit);

	Nan::SetPrototypeMethod(tpl, "SetMaximumIntegrationStepUnitToLengthUnit", SetMaximumIntegrationStepUnitToLengthUnit);
	Nan::SetPrototypeMethod(tpl, "setMaximumIntegrationStepUnitToLengthUnit", SetMaximumIntegrationStepUnitToLengthUnit);

	Nan::SetPrototypeMethod(tpl, "SetMaximumIntegrationStepUnitToTimeUnit", SetMaximumIntegrationStepUnitToTimeUnit);
	Nan::SetPrototypeMethod(tpl, "setMaximumIntegrationStepUnitToTimeUnit", SetMaximumIntegrationStepUnitToTimeUnit);

	Nan::SetPrototypeMethod(tpl, "SetMaximumPropagation", SetMaximumPropagation);
	Nan::SetPrototypeMethod(tpl, "setMaximumPropagation", SetMaximumPropagation);

	Nan::SetPrototypeMethod(tpl, "SetMaximumPropagationUnit", SetMaximumPropagationUnit);
	Nan::SetPrototypeMethod(tpl, "setMaximumPropagationUnit", SetMaximumPropagationUnit);

	Nan::SetPrototypeMethod(tpl, "SetMaximumPropagationUnitToCellLengthUnit", SetMaximumPropagationUnitToCellLengthUnit);
	Nan::SetPrototypeMethod(tpl, "setMaximumPropagationUnitToCellLengthUnit", SetMaximumPropagationUnitToCellLengthUnit);

	Nan::SetPrototypeMethod(tpl, "SetMaximumPropagationUnitToLengthUnit", SetMaximumPropagationUnitToLengthUnit);
	Nan::SetPrototypeMethod(tpl, "setMaximumPropagationUnitToLengthUnit", SetMaximumPropagationUnitToLengthUnit);

	Nan::SetPrototypeMethod(tpl, "SetMaximumPropagationUnitToTimeUnit", SetMaximumPropagationUnitToTimeUnit);
	Nan::SetPrototypeMethod(tpl, "setMaximumPropagationUnitToTimeUnit", SetMaximumPropagationUnitToTimeUnit);

	Nan::SetPrototypeMethod(tpl, "SetMinimumIntegrationStep", SetMinimumIntegrationStep);
	Nan::SetPrototypeMethod(tpl, "setMinimumIntegrationStep", SetMinimumIntegrationStep);

	Nan::SetPrototypeMethod(tpl, "SetMinimumIntegrationStepUnit", SetMinimumIntegrationStepUnit);
	Nan::SetPrototypeMethod(tpl, "setMinimumIntegrationStepUnit", SetMinimumIntegrationStepUnit);

	Nan::SetPrototypeMethod(tpl, "SetMinimumIntegrationStepUnitToCellLengthUnit", SetMinimumIntegrationStepUnitToCellLengthUnit);
	Nan::SetPrototypeMethod(tpl, "setMinimumIntegrationStepUnitToCellLengthUnit", SetMinimumIntegrationStepUnitToCellLengthUnit);

	Nan::SetPrototypeMethod(tpl, "SetMinimumIntegrationStepUnitToLengthUnit", SetMinimumIntegrationStepUnitToLengthUnit);
	Nan::SetPrototypeMethod(tpl, "setMinimumIntegrationStepUnitToLengthUnit", SetMinimumIntegrationStepUnitToLengthUnit);

	Nan::SetPrototypeMethod(tpl, "SetMinimumIntegrationStepUnitToTimeUnit", SetMinimumIntegrationStepUnitToTimeUnit);
	Nan::SetPrototypeMethod(tpl, "setMinimumIntegrationStepUnitToTimeUnit", SetMinimumIntegrationStepUnitToTimeUnit);

	Nan::SetPrototypeMethod(tpl, "SetRotationScale", SetRotationScale);
	Nan::SetPrototypeMethod(tpl, "setRotationScale", SetRotationScale);

	Nan::SetPrototypeMethod(tpl, "SetSourceConnection", SetSourceConnection);
	Nan::SetPrototypeMethod(tpl, "setSourceConnection", SetSourceConnection);

	Nan::SetPrototypeMethod(tpl, "SetSourceData", SetSourceData);
	Nan::SetPrototypeMethod(tpl, "setSourceData", SetSourceData);

	Nan::SetPrototypeMethod(tpl, "SetStartPosition", SetStartPosition);
	Nan::SetPrototypeMethod(tpl, "setStartPosition", SetStartPosition);

	Nan::SetPrototypeMethod(tpl, "SetTerminalSpeed", SetTerminalSpeed);
	Nan::SetPrototypeMethod(tpl, "setTerminalSpeed", SetTerminalSpeed);

}

void VtkGenericStreamTracerWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkGenericStreamTracer> native = vtkSmartPointer<vtkGenericStreamTracer>::New();
		VtkGenericStreamTracerWrap* obj = new VtkGenericStreamTracerWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkGenericStreamTracerWrap::AddInputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkGenericDataSetWrap *a0 = ObjectWrap::Unwrap<VtkGenericDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddInputData(
			(vtkGenericDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::ComputeVorticityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeVorticityOff();
}

void VtkGenericStreamTracerWrap::ComputeVorticityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeVorticityOn();
}

void VtkGenericStreamTracerWrap::FillInputPortInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkInformationWrap *a1 = ObjectWrap::Unwrap<VtkInformationWrap>(info[1]->ToObject());
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->FillInputPortInformation(
				info[0]->Int32Value(),
				(vtkInformation *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGenericStreamTracerWrap::GetComputeVorticity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeVorticity();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetInitialIntegrationStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInitialIntegrationStep();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetInitialIntegrationStepUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInitialIntegrationStepUnit();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetInputVectorsSelection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInputVectorsSelection();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkGenericStreamTracerWrap::GetIntegrationDirection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationDirection();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetIntegrationDirectionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationDirectionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetIntegrationDirectionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrationDirectionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetIntegrator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	vtkInitialValueProblemSolver * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegrator();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInitialValueProblemSolverWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInitialValueProblemSolverWrap *w = new VtkInitialValueProblemSolverWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericStreamTracerWrap::GetIntegratorType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetIntegratorType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetMaximumError(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumError();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetMaximumIntegrationStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumIntegrationStep();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetMaximumIntegrationStepUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumIntegrationStepUnit();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetMaximumPropagation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumPropagation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetMaximumPropagationUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMaximumPropagationUnit();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetMinimumIntegrationStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMinimumIntegrationStep();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetMinimumIntegrationStepUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMinimumIntegrationStepUnit();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetRotationScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRotationScale();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::GetSource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSource();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataSetWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericStreamTracerWrap::GetTerminalSpeed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTerminalSpeed();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkGenericStreamTracerWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	vtkGenericStreamTracer * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkGenericStreamTracerWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkGenericStreamTracerWrap *w = new VtkGenericStreamTracerWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkGenericStreamTracerWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkGenericStreamTracer * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkGenericStreamTracerWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkGenericStreamTracerWrap *w = new VtkGenericStreamTracerWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SelectInputVectors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SelectInputVectors(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetComputeVorticity(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeVorticity(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetInitialIntegrationStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInitialIntegrationStep(
			info[0]->NumberValue()
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetInitialIntegrationStep(
				info[0]->Int32Value(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetInitialIntegrationStepUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInitialIntegrationStepUnit(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetInitialIntegrationStepUnitToCellLengthUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInitialIntegrationStepUnitToCellLengthUnit();
}

void VtkGenericStreamTracerWrap::SetInitialIntegrationStepUnitToLengthUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInitialIntegrationStepUnitToLengthUnit();
}

void VtkGenericStreamTracerWrap::SetInitialIntegrationStepUnitToTimeUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetInitialIntegrationStepUnitToTimeUnit();
}

void VtkGenericStreamTracerWrap::SetIntegrationDirection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegrationDirection(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetIntegrationDirectionToBackward(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegrationDirectionToBackward();
}

void VtkGenericStreamTracerWrap::SetIntegrationDirectionToBoth(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegrationDirectionToBoth();
}

void VtkGenericStreamTracerWrap::SetIntegrationDirectionToForward(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegrationDirectionToForward();
}

void VtkGenericStreamTracerWrap::SetIntegrationStepUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegrationStepUnit(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetIntegrator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkInitialValueProblemSolverWrap *a0 = ObjectWrap::Unwrap<VtkInitialValueProblemSolverWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegrator(
			(vtkInitialValueProblemSolver *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetIntegratorType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetIntegratorType(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetIntegratorTypeToRungeKutta2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegratorTypeToRungeKutta2();
}

void VtkGenericStreamTracerWrap::SetIntegratorTypeToRungeKutta4(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegratorTypeToRungeKutta4();
}

void VtkGenericStreamTracerWrap::SetIntegratorTypeToRungeKutta45(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetIntegratorTypeToRungeKutta45();
}

void VtkGenericStreamTracerWrap::SetInterpolatorPrototype(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkGenericInterpolatedVelocityFieldWrap *a0 = ObjectWrap::Unwrap<VtkGenericInterpolatedVelocityFieldWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInterpolatorPrototype(
			(vtkGenericInterpolatedVelocityField *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetMaximumError(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumError(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetMaximumIntegrationStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumIntegrationStep(
			info[0]->NumberValue()
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetMaximumIntegrationStep(
				info[0]->Int32Value(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetMaximumIntegrationStepUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumIntegrationStepUnit(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetMaximumIntegrationStepUnitToCellLengthUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetMaximumIntegrationStepUnitToCellLengthUnit();
}

void VtkGenericStreamTracerWrap::SetMaximumIntegrationStepUnitToLengthUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetMaximumIntegrationStepUnitToLengthUnit();
}

void VtkGenericStreamTracerWrap::SetMaximumIntegrationStepUnitToTimeUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetMaximumIntegrationStepUnitToTimeUnit();
}

void VtkGenericStreamTracerWrap::SetMaximumPropagation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumPropagation(
			info[0]->NumberValue()
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetMaximumPropagation(
				info[0]->Int32Value(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetMaximumPropagationUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMaximumPropagationUnit(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetMaximumPropagationUnitToCellLengthUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetMaximumPropagationUnitToCellLengthUnit();
}

void VtkGenericStreamTracerWrap::SetMaximumPropagationUnitToLengthUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetMaximumPropagationUnitToLengthUnit();
}

void VtkGenericStreamTracerWrap::SetMaximumPropagationUnitToTimeUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetMaximumPropagationUnitToTimeUnit();
}

void VtkGenericStreamTracerWrap::SetMinimumIntegrationStep(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMinimumIntegrationStep(
			info[0]->NumberValue()
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetMinimumIntegrationStep(
				info[0]->Int32Value(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetMinimumIntegrationStepUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMinimumIntegrationStepUnit(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetMinimumIntegrationStepUnitToCellLengthUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetMinimumIntegrationStepUnitToCellLengthUnit();
}

void VtkGenericStreamTracerWrap::SetMinimumIntegrationStepUnitToLengthUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetMinimumIntegrationStepUnitToLengthUnit();
}

void VtkGenericStreamTracerWrap::SetMinimumIntegrationStepUnitToTimeUnit(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetMinimumIntegrationStepUnitToTimeUnit();
}

void VtkGenericStreamTracerWrap::SetRotationScale(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRotationScale(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetSourceConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSourceConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetSourceData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSourceData(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetStartPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetStartPosition(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkGenericStreamTracerWrap::SetTerminalSpeed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkGenericStreamTracerWrap *wrapper = ObjectWrap::Unwrap<VtkGenericStreamTracerWrap>(info.Holder());
	vtkGenericStreamTracer *native = (vtkGenericStreamTracer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTerminalSpeed(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

