/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkObjectBase.h>

#include "vtkObjectBaseWrap.h"

using namespace v8;

Nan::Persistent<v8::Function> VtkObjectBaseWrap::constructor;

VtkObjectBaseWrap::VtkObjectBaseWrap()
{ }

VtkObjectBaseWrap::VtkObjectBaseWrap(vtkSmartPointer<vtkObjectBase> _native)
{ native = _native; }

VtkObjectBaseWrap::~VtkObjectBaseWrap()
{ }

void VtkObjectBaseWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkObjectBaseWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkObjectBase").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("objectBase").ToLocalChecked(),tpl->GetFunction());
}

void VtkObjectBaseWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
}

void VtkObjectBaseWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	vtkSmartPointer<vtkObjectBase> native = vtkSmartPointer<vtkObjectBase>::New();
	VtkObjectBaseWrap* obj = new VtkObjectBaseWrap(native);
	obj->Wrap(info.This());
	info.GetReturnValue().Set(info.This());
}

