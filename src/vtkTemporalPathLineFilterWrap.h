/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKTEMPORALPATHLINEFILTERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKTEMPORALPATHLINEFILTERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkTemporalPathLineFilter.h>

#include "vtkPolyDataAlgorithmWrap.h"

class VtkTemporalPathLineFilterWrap : public VtkPolyDataAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkTemporalPathLineFilterWrap(vtkSmartPointer<vtkTemporalPathLineFilter>);
		VtkTemporalPathLineFilterWrap();
		~VtkTemporalPathLineFilterWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void Flush(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetIdChannelArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetKeepDeadTrails(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMaskPoints(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetIdChannelArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetKeepDeadTrails(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaskPoints(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMaxStepDistance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSelectionConnection(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSelectionData(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
