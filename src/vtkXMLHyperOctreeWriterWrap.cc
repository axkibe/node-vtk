/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkXMLWriterWrap.h"
#include "vtkXMLHyperOctreeWriterWrap.h"
#include "vtkObjectWrap.h"
#include "vtkHyperOctreeWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkXMLHyperOctreeWriterWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkXMLHyperOctreeWriterWrap::ptpl;

VtkXMLHyperOctreeWriterWrap::VtkXMLHyperOctreeWriterWrap()
{ }

VtkXMLHyperOctreeWriterWrap::VtkXMLHyperOctreeWriterWrap(vtkSmartPointer<vtkXMLHyperOctreeWriter> _native)
{ native = _native; }

VtkXMLHyperOctreeWriterWrap::~VtkXMLHyperOctreeWriterWrap()
{ }

void VtkXMLHyperOctreeWriterWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkXMLWriterWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkXMLWriterWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkXMLHyperOctreeWriterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkXMLHyperOctreeWriter").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("XMLHyperOctreeWriter").ToLocalChecked(),tpl->GetFunction());
}

void VtkXMLHyperOctreeWriterWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDefaultFileExtension", GetDefaultFileExtension);
	Nan::SetPrototypeMethod(tpl, "getDefaultFileExtension", GetDefaultFileExtension);

	Nan::SetPrototypeMethod(tpl, "GetInput", GetInput);
	Nan::SetPrototypeMethod(tpl, "getInput", GetInput);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

}

void VtkXMLHyperOctreeWriterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkXMLHyperOctreeWriter> native = vtkSmartPointer<vtkXMLHyperOctreeWriter>::New();
		VtkXMLHyperOctreeWriterWrap* obj = new VtkXMLHyperOctreeWriterWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkXMLHyperOctreeWriterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLHyperOctreeWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLHyperOctreeWriterWrap>(info.Holder());
	vtkXMLHyperOctreeWriter *native = (vtkXMLHyperOctreeWriter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkXMLHyperOctreeWriterWrap::GetDefaultFileExtension(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLHyperOctreeWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLHyperOctreeWriterWrap>(info.Holder());
	vtkXMLHyperOctreeWriter *native = (vtkXMLHyperOctreeWriter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDefaultFileExtension();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkXMLHyperOctreeWriterWrap::GetInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLHyperOctreeWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLHyperOctreeWriterWrap>(info.Holder());
	vtkXMLHyperOctreeWriter *native = (vtkXMLHyperOctreeWriter *)wrapper->native.GetPointer();
	vtkHyperOctree * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInput();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkHyperOctreeWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkHyperOctreeWrap *w = new VtkHyperOctreeWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLHyperOctreeWriterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLHyperOctreeWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLHyperOctreeWriterWrap>(info.Holder());
	vtkXMLHyperOctreeWriter *native = (vtkXMLHyperOctreeWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLHyperOctreeWriterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLHyperOctreeWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLHyperOctreeWriterWrap>(info.Holder());
	vtkXMLHyperOctreeWriter *native = (vtkXMLHyperOctreeWriter *)wrapper->native.GetPointer();
	vtkXMLHyperOctreeWriter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkXMLHyperOctreeWriterWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkXMLHyperOctreeWriterWrap *w = new VtkXMLHyperOctreeWriterWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLHyperOctreeWriterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLHyperOctreeWriterWrap *wrapper = ObjectWrap::Unwrap<VtkXMLHyperOctreeWriterWrap>(info.Holder());
	vtkXMLHyperOctreeWriter *native = (vtkXMLHyperOctreeWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkXMLHyperOctreeWriter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkXMLHyperOctreeWriterWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkXMLHyperOctreeWriterWrap *w = new VtkXMLHyperOctreeWriterWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

