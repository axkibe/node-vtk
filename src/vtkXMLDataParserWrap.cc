/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkXMLParserWrap.h"
#include "vtkXMLDataParserWrap.h"
#include "vtkObjectWrap.h"
#include "vtkXMLDataElementWrap.h"
#include "vtkDataCompressorWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkXMLDataParserWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkXMLDataParserWrap::ptpl;

VtkXMLDataParserWrap::VtkXMLDataParserWrap()
{ }

VtkXMLDataParserWrap::VtkXMLDataParserWrap(vtkSmartPointer<vtkXMLDataParser> _native)
{ native = _native; }

VtkXMLDataParserWrap::~VtkXMLDataParserWrap()
{ }

void VtkXMLDataParserWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkXMLParserWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkXMLParserWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkXMLDataParserWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkXMLDataParser").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("XMLDataParser").ToLocalChecked(),tpl->GetFunction());
}

void VtkXMLDataParserWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "CharacterDataHandler", CharacterDataHandler);
	Nan::SetPrototypeMethod(tpl, "characterDataHandler", CharacterDataHandler);

	Nan::SetPrototypeMethod(tpl, "GetAbort", GetAbort);
	Nan::SetPrototypeMethod(tpl, "getAbort", GetAbort);

	Nan::SetPrototypeMethod(tpl, "GetAttributesEncoding", GetAttributesEncoding);
	Nan::SetPrototypeMethod(tpl, "getAttributesEncoding", GetAttributesEncoding);

	Nan::SetPrototypeMethod(tpl, "GetAttributesEncodingMaxValue", GetAttributesEncodingMaxValue);
	Nan::SetPrototypeMethod(tpl, "getAttributesEncodingMaxValue", GetAttributesEncodingMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetAttributesEncodingMinValue", GetAttributesEncodingMinValue);
	Nan::SetPrototypeMethod(tpl, "getAttributesEncodingMinValue", GetAttributesEncodingMinValue);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetCompressor", GetCompressor);
	Nan::SetPrototypeMethod(tpl, "getCompressor", GetCompressor);

	Nan::SetPrototypeMethod(tpl, "GetRootElement", GetRootElement);
	Nan::SetPrototypeMethod(tpl, "getRootElement", GetRootElement);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "Parse", Parse);
	Nan::SetPrototypeMethod(tpl, "parse", Parse);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAbort", SetAbort);
	Nan::SetPrototypeMethod(tpl, "setAbort", SetAbort);

	Nan::SetPrototypeMethod(tpl, "SetAttributesEncoding", SetAttributesEncoding);
	Nan::SetPrototypeMethod(tpl, "setAttributesEncoding", SetAttributesEncoding);

	Nan::SetPrototypeMethod(tpl, "SetCompressor", SetCompressor);
	Nan::SetPrototypeMethod(tpl, "setCompressor", SetCompressor);

}

void VtkXMLDataParserWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkXMLDataParser> native = vtkSmartPointer<vtkXMLDataParser>::New();
		VtkXMLDataParserWrap* obj = new VtkXMLDataParserWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkXMLDataParserWrap::CharacterDataHandler(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->CharacterDataHandler(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataParserWrap::GetAbort(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAbort();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLDataParserWrap::GetAttributesEncoding(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAttributesEncoding();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLDataParserWrap::GetAttributesEncodingMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAttributesEncodingMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLDataParserWrap::GetAttributesEncodingMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAttributesEncodingMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLDataParserWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkXMLDataParserWrap::GetCompressor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	vtkDataCompressor * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCompressor();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataCompressorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataCompressorWrap *w = new VtkDataCompressorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLDataParserWrap::GetRootElement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	vtkXMLDataElement * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRootElement();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkXMLDataElementWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkXMLDataElementWrap *w = new VtkXMLDataElementWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLDataParserWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataParserWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	vtkXMLDataParser * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkXMLDataParserWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkXMLDataParserWrap *w = new VtkXMLDataParserWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLDataParserWrap::Parse(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->Parse();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLDataParserWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkXMLDataParser * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkXMLDataParserWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkXMLDataParserWrap *w = new VtkXMLDataParserWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataParserWrap::SetAbort(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAbort(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataParserWrap::SetAttributesEncoding(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAttributesEncoding(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataParserWrap::SetCompressor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataParserWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataParserWrap>(info.Holder());
	vtkXMLDataParser *native = (vtkXMLDataParser *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataCompressorWrap *a0 = ObjectWrap::Unwrap<VtkDataCompressorWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCompressor(
			(vtkDataCompressor *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

