/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKALGORITHMWRAP_H
#define NATIVE_EXTENSION_VTK_VTKALGORITHMWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkAlgorithm.h>

#include "vtkObjectWrap.h"

class VtkAlgorithmWrap : public VtkObjectWrap
{
	public:
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkAlgorithmWrap(vtkSmartPointer<vtkAlgorithm>);
		VtkAlgorithmWrap();
		~VtkAlgorithmWrap( );

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static Nan::Persistent<v8::Function> constructor;

		static void HasExecutive(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfInputPorts(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfOutputPorts(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAbortExecute(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAbortExecute(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void AbortExecuteOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void AbortExecuteOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetProgress(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetProgressMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetProgressMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetProgress(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UpdateProgress(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetInputArrayToProcess(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RemoveAllInputs(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RemoveInputConnection(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RemoveAllInputConnections(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfInputConnections(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTotalNumberOfInputConnections(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Update(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UpdateInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void PropagateUpdateExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UpdateWholeExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetReleaseDataFlag(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetReleaseDataFlag(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseDataFlagOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseDataFlagOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ComputePriority(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetUpdateExtentToWholeExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetUpdateExtent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetUpdatePiece(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetUpdateNumberOfPieces(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetUpdateGhostLevel(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
