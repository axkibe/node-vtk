/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkProjectedTerrainPathWrap.h"
#include "vtkObjectWrap.h"
#include "vtkImageDataWrap.h"
#include "vtkAlgorithmOutputWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkProjectedTerrainPathWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkProjectedTerrainPathWrap::ptpl;

VtkProjectedTerrainPathWrap::VtkProjectedTerrainPathWrap()
{ }

VtkProjectedTerrainPathWrap::VtkProjectedTerrainPathWrap(vtkSmartPointer<vtkProjectedTerrainPath> _native)
{ native = _native; }

VtkProjectedTerrainPathWrap::~VtkProjectedTerrainPathWrap()
{ }

void VtkProjectedTerrainPathWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkProjectedTerrainPathWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkProjectedTerrainPath").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ProjectedTerrainPath").ToLocalChecked(),tpl->GetFunction());
}

void VtkProjectedTerrainPathWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetHeightOffset", GetHeightOffset);
	Nan::SetPrototypeMethod(tpl, "getHeightOffset", GetHeightOffset);

	Nan::SetPrototypeMethod(tpl, "GetHeightTolerance", GetHeightTolerance);
	Nan::SetPrototypeMethod(tpl, "getHeightTolerance", GetHeightTolerance);

	Nan::SetPrototypeMethod(tpl, "GetHeightToleranceMaxValue", GetHeightToleranceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getHeightToleranceMaxValue", GetHeightToleranceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetHeightToleranceMinValue", GetHeightToleranceMinValue);
	Nan::SetPrototypeMethod(tpl, "getHeightToleranceMinValue", GetHeightToleranceMinValue);

	Nan::SetPrototypeMethod(tpl, "GetProjectionMode", GetProjectionMode);
	Nan::SetPrototypeMethod(tpl, "getProjectionMode", GetProjectionMode);

	Nan::SetPrototypeMethod(tpl, "GetProjectionModeMaxValue", GetProjectionModeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getProjectionModeMaxValue", GetProjectionModeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetProjectionModeMinValue", GetProjectionModeMinValue);
	Nan::SetPrototypeMethod(tpl, "getProjectionModeMinValue", GetProjectionModeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetSource", GetSource);
	Nan::SetPrototypeMethod(tpl, "getSource", GetSource);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetHeightOffset", SetHeightOffset);
	Nan::SetPrototypeMethod(tpl, "setHeightOffset", SetHeightOffset);

	Nan::SetPrototypeMethod(tpl, "SetHeightTolerance", SetHeightTolerance);
	Nan::SetPrototypeMethod(tpl, "setHeightTolerance", SetHeightTolerance);

	Nan::SetPrototypeMethod(tpl, "SetProjectionMode", SetProjectionMode);
	Nan::SetPrototypeMethod(tpl, "setProjectionMode", SetProjectionMode);

	Nan::SetPrototypeMethod(tpl, "SetProjectionModeToHug", SetProjectionModeToHug);
	Nan::SetPrototypeMethod(tpl, "setProjectionModeToHug", SetProjectionModeToHug);

	Nan::SetPrototypeMethod(tpl, "SetProjectionModeToNonOccluded", SetProjectionModeToNonOccluded);
	Nan::SetPrototypeMethod(tpl, "setProjectionModeToNonOccluded", SetProjectionModeToNonOccluded);

	Nan::SetPrototypeMethod(tpl, "SetProjectionModeToSimple", SetProjectionModeToSimple);
	Nan::SetPrototypeMethod(tpl, "setProjectionModeToSimple", SetProjectionModeToSimple);

	Nan::SetPrototypeMethod(tpl, "SetSourceConnection", SetSourceConnection);
	Nan::SetPrototypeMethod(tpl, "setSourceConnection", SetSourceConnection);

	Nan::SetPrototypeMethod(tpl, "SetSourceData", SetSourceData);
	Nan::SetPrototypeMethod(tpl, "setSourceData", SetSourceData);

}

void VtkProjectedTerrainPathWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkProjectedTerrainPath> native = vtkSmartPointer<vtkProjectedTerrainPath>::New();
		VtkProjectedTerrainPathWrap* obj = new VtkProjectedTerrainPathWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkProjectedTerrainPathWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkProjectedTerrainPathWrap::GetHeightOffset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHeightOffset();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkProjectedTerrainPathWrap::GetHeightTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHeightTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkProjectedTerrainPathWrap::GetHeightToleranceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHeightToleranceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkProjectedTerrainPathWrap::GetHeightToleranceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHeightToleranceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkProjectedTerrainPathWrap::GetProjectionMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProjectionMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkProjectedTerrainPathWrap::GetProjectionModeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProjectionModeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkProjectedTerrainPathWrap::GetProjectionModeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProjectionModeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkProjectedTerrainPathWrap::GetSource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	vtkImageData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSource();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImageDataWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageDataWrap *w = new VtkImageDataWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProjectedTerrainPathWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProjectedTerrainPathWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	vtkProjectedTerrainPath * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkProjectedTerrainPathWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkProjectedTerrainPathWrap *w = new VtkProjectedTerrainPathWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProjectedTerrainPathWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkProjectedTerrainPath * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkProjectedTerrainPathWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkProjectedTerrainPathWrap *w = new VtkProjectedTerrainPathWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProjectedTerrainPathWrap::SetHeightOffset(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHeightOffset(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProjectedTerrainPathWrap::SetHeightTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHeightTolerance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProjectedTerrainPathWrap::SetProjectionMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProjectionMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProjectedTerrainPathWrap::SetProjectionModeToHug(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetProjectionModeToHug();
}

void VtkProjectedTerrainPathWrap::SetProjectionModeToNonOccluded(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetProjectionModeToNonOccluded();
}

void VtkProjectedTerrainPathWrap::SetProjectionModeToSimple(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetProjectionModeToSimple();
}

void VtkProjectedTerrainPathWrap::SetSourceConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSourceConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProjectedTerrainPathWrap::SetSourceData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTerrainPathWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTerrainPathWrap>(info.Holder());
	vtkProjectedTerrainPath *native = (vtkProjectedTerrainPath *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkImageDataWrap *a0 = ObjectWrap::Unwrap<VtkImageDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSourceData(
			(vtkImageData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

