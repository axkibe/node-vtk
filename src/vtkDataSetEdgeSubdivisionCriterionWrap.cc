/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkEdgeSubdivisionCriterionWrap.h"
#include "vtkDataSetEdgeSubdivisionCriterionWrap.h"
#include "vtkObjectWrap.h"
#include "vtkDataSetWrap.h"
#include "vtkCellWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkDataSetEdgeSubdivisionCriterionWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkDataSetEdgeSubdivisionCriterionWrap::ptpl;

VtkDataSetEdgeSubdivisionCriterionWrap::VtkDataSetEdgeSubdivisionCriterionWrap()
{ }

VtkDataSetEdgeSubdivisionCriterionWrap::VtkDataSetEdgeSubdivisionCriterionWrap(vtkSmartPointer<vtkDataSetEdgeSubdivisionCriterion> _native)
{ native = _native; }

VtkDataSetEdgeSubdivisionCriterionWrap::~VtkDataSetEdgeSubdivisionCriterionWrap()
{ }

void VtkDataSetEdgeSubdivisionCriterionWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkEdgeSubdivisionCriterionWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkEdgeSubdivisionCriterionWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkDataSetEdgeSubdivisionCriterionWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkDataSetEdgeSubdivisionCriterion").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("DataSetEdgeSubdivisionCriterion").ToLocalChecked(),tpl->GetFunction());
}

void VtkDataSetEdgeSubdivisionCriterionWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetActiveFieldCriteria", GetActiveFieldCriteria);
	Nan::SetPrototypeMethod(tpl, "getActiveFieldCriteria", GetActiveFieldCriteria);

	Nan::SetPrototypeMethod(tpl, "GetCell", GetCell);
	Nan::SetPrototypeMethod(tpl, "getCell", GetCell);

	Nan::SetPrototypeMethod(tpl, "GetChordError2", GetChordError2);
	Nan::SetPrototypeMethod(tpl, "getChordError2", GetChordError2);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetFieldError2", GetFieldError2);
	Nan::SetPrototypeMethod(tpl, "getFieldError2", GetFieldError2);

	Nan::SetPrototypeMethod(tpl, "GetMesh", GetMesh);
	Nan::SetPrototypeMethod(tpl, "getMesh", GetMesh);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "ResetFieldError2", ResetFieldError2);
	Nan::SetPrototypeMethod(tpl, "resetFieldError2", ResetFieldError2);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetChordError2", SetChordError2);
	Nan::SetPrototypeMethod(tpl, "setChordError2", SetChordError2);

	Nan::SetPrototypeMethod(tpl, "SetFieldError2", SetFieldError2);
	Nan::SetPrototypeMethod(tpl, "setFieldError2", SetFieldError2);

	Nan::SetPrototypeMethod(tpl, "SetMesh", SetMesh);
	Nan::SetPrototypeMethod(tpl, "setMesh", SetMesh);

}

void VtkDataSetEdgeSubdivisionCriterionWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkDataSetEdgeSubdivisionCriterion> native = vtkSmartPointer<vtkDataSetEdgeSubdivisionCriterion>::New();
		VtkDataSetEdgeSubdivisionCriterionWrap* obj = new VtkDataSetEdgeSubdivisionCriterionWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkDataSetEdgeSubdivisionCriterionWrap::GetActiveFieldCriteria(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetActiveFieldCriteria();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataSetEdgeSubdivisionCriterionWrap::GetCell(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	vtkCell * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCell();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkCellWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkCellWrap *w = new VtkCellWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataSetEdgeSubdivisionCriterionWrap::GetChordError2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetChordError2();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDataSetEdgeSubdivisionCriterionWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDataSetEdgeSubdivisionCriterionWrap::GetFieldError2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		double r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetFieldError2(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetEdgeSubdivisionCriterionWrap::GetMesh(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	vtkDataSet * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMesh();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataSetWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetWrap *w = new VtkDataSetWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataSetEdgeSubdivisionCriterionWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetEdgeSubdivisionCriterionWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	vtkDataSetEdgeSubdivisionCriterion * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDataSetEdgeSubdivisionCriterionWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDataSetEdgeSubdivisionCriterionWrap *w = new VtkDataSetEdgeSubdivisionCriterionWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDataSetEdgeSubdivisionCriterionWrap::ResetFieldError2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ResetFieldError2();
}

void VtkDataSetEdgeSubdivisionCriterionWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkDataSetEdgeSubdivisionCriterion * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkDataSetEdgeSubdivisionCriterionWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDataSetEdgeSubdivisionCriterionWrap *w = new VtkDataSetEdgeSubdivisionCriterionWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetEdgeSubdivisionCriterionWrap::SetChordError2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetChordError2(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetEdgeSubdivisionCriterionWrap::SetFieldError2(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetFieldError2(
				info[0]->Int32Value(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDataSetEdgeSubdivisionCriterionWrap::SetMesh(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDataSetEdgeSubdivisionCriterionWrap *wrapper = ObjectWrap::Unwrap<VtkDataSetEdgeSubdivisionCriterionWrap>(info.Holder());
	vtkDataSetEdgeSubdivisionCriterion *native = (vtkDataSetEdgeSubdivisionCriterion *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataSetWrap *a0 = ObjectWrap::Unwrap<VtkDataSetWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMesh(
			(vtkDataSet *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

