/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkMultiBlockDataSetAlgorithmWrap.h"
#include "vtkLSDynaReaderWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkLSDynaReaderWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkLSDynaReaderWrap::ptpl;

VtkLSDynaReaderWrap::VtkLSDynaReaderWrap()
{ }

VtkLSDynaReaderWrap::VtkLSDynaReaderWrap(vtkSmartPointer<vtkLSDynaReader> _native)
{ native = _native; }

VtkLSDynaReaderWrap::~VtkLSDynaReaderWrap()
{ }

void VtkLSDynaReaderWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkMultiBlockDataSetAlgorithmWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkMultiBlockDataSetAlgorithmWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkLSDynaReaderWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkLSDynaReader").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("LSDynaReader").ToLocalChecked(),tpl->GetFunction());
}

void VtkLSDynaReaderWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "CanReadFile", CanReadFile);
	Nan::SetPrototypeMethod(tpl, "canReadFile", CanReadFile);

	Nan::SetPrototypeMethod(tpl, "DebugDump", DebugDump);
	Nan::SetPrototypeMethod(tpl, "debugDump", DebugDump);

	Nan::SetPrototypeMethod(tpl, "DeformedMeshOff", DeformedMeshOff);
	Nan::SetPrototypeMethod(tpl, "deformedMeshOff", DeformedMeshOff);

	Nan::SetPrototypeMethod(tpl, "DeformedMeshOn", DeformedMeshOn);
	Nan::SetPrototypeMethod(tpl, "deformedMeshOn", DeformedMeshOn);

	Nan::SetPrototypeMethod(tpl, "DeletedCellsAsGhostArrayOff", DeletedCellsAsGhostArrayOff);
	Nan::SetPrototypeMethod(tpl, "deletedCellsAsGhostArrayOff", DeletedCellsAsGhostArrayOff);

	Nan::SetPrototypeMethod(tpl, "DeletedCellsAsGhostArrayOn", DeletedCellsAsGhostArrayOn);
	Nan::SetPrototypeMethod(tpl, "deletedCellsAsGhostArrayOn", DeletedCellsAsGhostArrayOn);

	Nan::SetPrototypeMethod(tpl, "GetBeamArrayName", GetBeamArrayName);
	Nan::SetPrototypeMethod(tpl, "getBeamArrayName", GetBeamArrayName);

	Nan::SetPrototypeMethod(tpl, "GetBeamArrayStatus", GetBeamArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getBeamArrayStatus", GetBeamArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetCellArrayName", GetCellArrayName);
	Nan::SetPrototypeMethod(tpl, "getCellArrayName", GetCellArrayName);

	Nan::SetPrototypeMethod(tpl, "GetCellArrayStatus", GetCellArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getCellArrayStatus", GetCellArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDatabaseDirectory", GetDatabaseDirectory);
	Nan::SetPrototypeMethod(tpl, "getDatabaseDirectory", GetDatabaseDirectory);

	Nan::SetPrototypeMethod(tpl, "GetDeformedMesh", GetDeformedMesh);
	Nan::SetPrototypeMethod(tpl, "getDeformedMesh", GetDeformedMesh);

	Nan::SetPrototypeMethod(tpl, "GetDeletedCellsAsGhostArray", GetDeletedCellsAsGhostArray);
	Nan::SetPrototypeMethod(tpl, "getDeletedCellsAsGhostArray", GetDeletedCellsAsGhostArray);

	Nan::SetPrototypeMethod(tpl, "GetDimensionality", GetDimensionality);
	Nan::SetPrototypeMethod(tpl, "getDimensionality", GetDimensionality);

	Nan::SetPrototypeMethod(tpl, "GetFileName", GetFileName);
	Nan::SetPrototypeMethod(tpl, "getFileName", GetFileName);

	Nan::SetPrototypeMethod(tpl, "GetInputDeck", GetInputDeck);
	Nan::SetPrototypeMethod(tpl, "getInputDeck", GetInputDeck);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfBeamArrays", GetNumberOfBeamArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfBeamArrays", GetNumberOfBeamArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfCellArrays", GetNumberOfCellArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfCellArrays", GetNumberOfCellArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComponentsInBeamArray", GetNumberOfComponentsInBeamArray);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComponentsInBeamArray", GetNumberOfComponentsInBeamArray);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComponentsInCellArray", GetNumberOfComponentsInCellArray);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComponentsInCellArray", GetNumberOfComponentsInCellArray);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComponentsInParticleArray", GetNumberOfComponentsInParticleArray);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComponentsInParticleArray", GetNumberOfComponentsInParticleArray);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComponentsInPointArray", GetNumberOfComponentsInPointArray);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComponentsInPointArray", GetNumberOfComponentsInPointArray);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComponentsInRigidBodyArray", GetNumberOfComponentsInRigidBodyArray);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComponentsInRigidBodyArray", GetNumberOfComponentsInRigidBodyArray);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComponentsInRoadSurfaceArray", GetNumberOfComponentsInRoadSurfaceArray);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComponentsInRoadSurfaceArray", GetNumberOfComponentsInRoadSurfaceArray);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComponentsInShellArray", GetNumberOfComponentsInShellArray);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComponentsInShellArray", GetNumberOfComponentsInShellArray);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComponentsInSolidArray", GetNumberOfComponentsInSolidArray);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComponentsInSolidArray", GetNumberOfComponentsInSolidArray);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfComponentsInThickShellArray", GetNumberOfComponentsInThickShellArray);
	Nan::SetPrototypeMethod(tpl, "getNumberOfComponentsInThickShellArray", GetNumberOfComponentsInThickShellArray);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPartArrays", GetNumberOfPartArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPartArrays", GetNumberOfPartArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfParticleArrays", GetNumberOfParticleArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfParticleArrays", GetNumberOfParticleArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfPointArrays", GetNumberOfPointArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfPointArrays", GetNumberOfPointArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfRigidBodyArrays", GetNumberOfRigidBodyArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfRigidBodyArrays", GetNumberOfRigidBodyArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfRoadSurfaceArrays", GetNumberOfRoadSurfaceArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfRoadSurfaceArrays", GetNumberOfRoadSurfaceArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfShellArrays", GetNumberOfShellArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfShellArrays", GetNumberOfShellArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfSolidArrays", GetNumberOfSolidArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfSolidArrays", GetNumberOfSolidArrays);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfThickShellArrays", GetNumberOfThickShellArrays);
	Nan::SetPrototypeMethod(tpl, "getNumberOfThickShellArrays", GetNumberOfThickShellArrays);

	Nan::SetPrototypeMethod(tpl, "GetPartArrayName", GetPartArrayName);
	Nan::SetPrototypeMethod(tpl, "getPartArrayName", GetPartArrayName);

	Nan::SetPrototypeMethod(tpl, "GetPartArrayStatus", GetPartArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getPartArrayStatus", GetPartArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetParticleArrayName", GetParticleArrayName);
	Nan::SetPrototypeMethod(tpl, "getParticleArrayName", GetParticleArrayName);

	Nan::SetPrototypeMethod(tpl, "GetParticleArrayStatus", GetParticleArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getParticleArrayStatus", GetParticleArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetPointArrayName", GetPointArrayName);
	Nan::SetPrototypeMethod(tpl, "getPointArrayName", GetPointArrayName);

	Nan::SetPrototypeMethod(tpl, "GetPointArrayStatus", GetPointArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getPointArrayStatus", GetPointArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetRemoveDeletedCells", GetRemoveDeletedCells);
	Nan::SetPrototypeMethod(tpl, "getRemoveDeletedCells", GetRemoveDeletedCells);

	Nan::SetPrototypeMethod(tpl, "GetRigidBodyArrayName", GetRigidBodyArrayName);
	Nan::SetPrototypeMethod(tpl, "getRigidBodyArrayName", GetRigidBodyArrayName);

	Nan::SetPrototypeMethod(tpl, "GetRigidBodyArrayStatus", GetRigidBodyArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getRigidBodyArrayStatus", GetRigidBodyArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetRoadSurfaceArrayName", GetRoadSurfaceArrayName);
	Nan::SetPrototypeMethod(tpl, "getRoadSurfaceArrayName", GetRoadSurfaceArrayName);

	Nan::SetPrototypeMethod(tpl, "GetRoadSurfaceArrayStatus", GetRoadSurfaceArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getRoadSurfaceArrayStatus", GetRoadSurfaceArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetShellArrayName", GetShellArrayName);
	Nan::SetPrototypeMethod(tpl, "getShellArrayName", GetShellArrayName);

	Nan::SetPrototypeMethod(tpl, "GetShellArrayStatus", GetShellArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getShellArrayStatus", GetShellArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetSolidArrayName", GetSolidArrayName);
	Nan::SetPrototypeMethod(tpl, "getSolidArrayName", GetSolidArrayName);

	Nan::SetPrototypeMethod(tpl, "GetSolidArrayStatus", GetSolidArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getSolidArrayStatus", GetSolidArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetThickShellArrayName", GetThickShellArrayName);
	Nan::SetPrototypeMethod(tpl, "getThickShellArrayName", GetThickShellArrayName);

	Nan::SetPrototypeMethod(tpl, "GetThickShellArrayStatus", GetThickShellArrayStatus);
	Nan::SetPrototypeMethod(tpl, "getThickShellArrayStatus", GetThickShellArrayStatus);

	Nan::SetPrototypeMethod(tpl, "GetTitle", GetTitle);
	Nan::SetPrototypeMethod(tpl, "getTitle", GetTitle);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "IsDatabaseValid", IsDatabaseValid);
	Nan::SetPrototypeMethod(tpl, "isDatabaseValid", IsDatabaseValid);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RemoveDeletedCellsOff", RemoveDeletedCellsOff);
	Nan::SetPrototypeMethod(tpl, "removeDeletedCellsOff", RemoveDeletedCellsOff);

	Nan::SetPrototypeMethod(tpl, "RemoveDeletedCellsOn", RemoveDeletedCellsOn);
	Nan::SetPrototypeMethod(tpl, "removeDeletedCellsOn", RemoveDeletedCellsOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBeamArrayStatus", SetBeamArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setBeamArrayStatus", SetBeamArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetCellArrayStatus", SetCellArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setCellArrayStatus", SetCellArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetDatabaseDirectory", SetDatabaseDirectory);
	Nan::SetPrototypeMethod(tpl, "setDatabaseDirectory", SetDatabaseDirectory);

	Nan::SetPrototypeMethod(tpl, "SetDeformedMesh", SetDeformedMesh);
	Nan::SetPrototypeMethod(tpl, "setDeformedMesh", SetDeformedMesh);

	Nan::SetPrototypeMethod(tpl, "SetDeletedCellsAsGhostArray", SetDeletedCellsAsGhostArray);
	Nan::SetPrototypeMethod(tpl, "setDeletedCellsAsGhostArray", SetDeletedCellsAsGhostArray);

	Nan::SetPrototypeMethod(tpl, "SetFileName", SetFileName);
	Nan::SetPrototypeMethod(tpl, "setFileName", SetFileName);

	Nan::SetPrototypeMethod(tpl, "SetInputDeck", SetInputDeck);
	Nan::SetPrototypeMethod(tpl, "setInputDeck", SetInputDeck);

	Nan::SetPrototypeMethod(tpl, "SetPartArrayStatus", SetPartArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setPartArrayStatus", SetPartArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetParticleArrayStatus", SetParticleArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setParticleArrayStatus", SetParticleArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetPointArrayStatus", SetPointArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setPointArrayStatus", SetPointArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetRemoveDeletedCells", SetRemoveDeletedCells);
	Nan::SetPrototypeMethod(tpl, "setRemoveDeletedCells", SetRemoveDeletedCells);

	Nan::SetPrototypeMethod(tpl, "SetRigidBodyArrayStatus", SetRigidBodyArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setRigidBodyArrayStatus", SetRigidBodyArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetRoadSurfaceArrayStatus", SetRoadSurfaceArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setRoadSurfaceArrayStatus", SetRoadSurfaceArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetShellArrayStatus", SetShellArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setShellArrayStatus", SetShellArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetSolidArrayStatus", SetSolidArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setSolidArrayStatus", SetSolidArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetThickShellArrayStatus", SetThickShellArrayStatus);
	Nan::SetPrototypeMethod(tpl, "setThickShellArrayStatus", SetThickShellArrayStatus);

	Nan::SetPrototypeMethod(tpl, "SetTimeStepRange", SetTimeStepRange);
	Nan::SetPrototypeMethod(tpl, "setTimeStepRange", SetTimeStepRange);

}

void VtkLSDynaReaderWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkLSDynaReader> native = vtkSmartPointer<vtkLSDynaReader>::New();
		VtkLSDynaReaderWrap* obj = new VtkLSDynaReaderWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkLSDynaReaderWrap::CanReadFile(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->CanReadFile(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::DebugDump(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DebugDump();
}

void VtkLSDynaReaderWrap::DeformedMeshOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DeformedMeshOff();
}

void VtkLSDynaReaderWrap::DeformedMeshOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DeformedMeshOn();
}

void VtkLSDynaReaderWrap::DeletedCellsAsGhostArrayOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DeletedCellsAsGhostArrayOff();
}

void VtkLSDynaReaderWrap::DeletedCellsAsGhostArrayOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DeletedCellsAsGhostArrayOn();
}

void VtkLSDynaReaderWrap::GetBeamArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetBeamArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetBeamArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetBeamArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetBeamArrayStatus(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetCellArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			char const * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetCellArrayName(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetCellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetCellArrayStatus(
				info[0]->Int32Value(),
				*a1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetCellArrayStatus(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkLSDynaReaderWrap::GetDatabaseDirectory(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDatabaseDirectory();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkLSDynaReaderWrap::GetDeformedMesh(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDeformedMesh();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetDeletedCellsAsGhostArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDeletedCellsAsGhostArray();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetDimensionality(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDimensionality();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkLSDynaReaderWrap::GetInputDeck(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInputDeck();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkLSDynaReaderWrap::GetNumberOfBeamArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfBeamArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetNumberOfCellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfCellArrays(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetNumberOfComponentsInBeamArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInBeamArray(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInBeamArray(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetNumberOfComponentsInCellArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetNumberOfComponentsInCellArray(
				info[0]->Int32Value(),
				*a1
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetNumberOfComponentsInCellArray(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetNumberOfComponentsInParticleArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInParticleArray(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInParticleArray(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetNumberOfComponentsInPointArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInPointArray(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInPointArray(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetNumberOfComponentsInRigidBodyArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInRigidBodyArray(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInRigidBodyArray(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetNumberOfComponentsInRoadSurfaceArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInRoadSurfaceArray(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInRoadSurfaceArray(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetNumberOfComponentsInShellArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInShellArray(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInShellArray(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetNumberOfComponentsInSolidArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInSolidArray(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInSolidArray(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetNumberOfComponentsInThickShellArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInThickShellArray(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfComponentsInThickShellArray(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetNumberOfPartArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPartArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetNumberOfParticleArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfParticleArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetNumberOfPointArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfPointArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetNumberOfRigidBodyArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfRigidBodyArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetNumberOfRoadSurfaceArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfRoadSurfaceArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetNumberOfShellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfShellArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetNumberOfSolidArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfSolidArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetNumberOfThickShellArrays(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfThickShellArrays();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetPartArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPartArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetPartArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPartArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPartArrayStatus(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetParticleArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetParticleArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetParticleArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetParticleArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetParticleArrayStatus(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetPointArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPointArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetPointArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPointArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetPointArrayStatus(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetRemoveDeletedCells(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRemoveDeletedCells();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::GetRigidBodyArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetRigidBodyArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetRigidBodyArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetRigidBodyArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetRigidBodyArrayStatus(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetRoadSurfaceArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetRoadSurfaceArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetRoadSurfaceArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetRoadSurfaceArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetRoadSurfaceArrayStatus(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetShellArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetShellArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetShellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetShellArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetShellArrayStatus(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetSolidArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetSolidArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetSolidArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetSolidArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetSolidArrayStatus(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetThickShellArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetThickShellArrayName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetThickShellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetThickShellArrayStatus(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetThickShellArrayStatus(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::GetTitle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTitle();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkLSDynaReaderWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::IsDatabaseValid(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->IsDatabaseValid();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkLSDynaReaderWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	vtkLSDynaReader * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkLSDynaReaderWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkLSDynaReaderWrap *w = new VtkLSDynaReaderWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkLSDynaReaderWrap::RemoveDeletedCellsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveDeletedCellsOff();
}

void VtkLSDynaReaderWrap::RemoveDeletedCellsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveDeletedCellsOn();
}

void VtkLSDynaReaderWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkLSDynaReader * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkLSDynaReaderWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkLSDynaReaderWrap *w = new VtkLSDynaReaderWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetBeamArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetBeamArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetBeamArrayStatus(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetCellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetCellArrayStatus(
					info[0]->Int32Value(),
					*a1,
					info[2]->Int32Value()
				);
				return;
			}
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetCellArrayStatus(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetDatabaseDirectory(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDatabaseDirectory(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetDeformedMesh(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDeformedMesh(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetDeletedCellsAsGhostArray(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDeletedCellsAsGhostArray(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetInputDeck(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputDeck(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetPartArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetPartArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetPartArrayStatus(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetParticleArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetParticleArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetParticleArrayStatus(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetPointArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetPointArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetPointArrayStatus(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetRemoveDeletedCells(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRemoveDeletedCells(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetRigidBodyArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetRigidBodyArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetRigidBodyArrayStatus(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetRoadSurfaceArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetRoadSurfaceArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetRoadSurfaceArrayStatus(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetShellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetShellArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetShellArrayStatus(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetSolidArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetSolidArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetSolidArrayStatus(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetThickShellArrayStatus(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetThickShellArrayStatus(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetThickShellArrayStatus(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkLSDynaReaderWrap::SetTimeStepRange(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkLSDynaReaderWrap *wrapper = ObjectWrap::Unwrap<VtkLSDynaReaderWrap>(info.Holder());
	vtkLSDynaReader *native = (vtkLSDynaReader *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetTimeStepRange(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

