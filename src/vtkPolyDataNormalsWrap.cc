/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPolyDataAlgorithmWrap.h"
#include "vtkPolyDataNormalsWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkPolyDataNormalsWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkPolyDataNormalsWrap::ptpl;

VtkPolyDataNormalsWrap::VtkPolyDataNormalsWrap()
{ }

VtkPolyDataNormalsWrap::VtkPolyDataNormalsWrap(vtkSmartPointer<vtkPolyDataNormals> _native)
{ native = _native; }

VtkPolyDataNormalsWrap::~VtkPolyDataNormalsWrap()
{ }

void VtkPolyDataNormalsWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPolyDataAlgorithmWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPolyDataAlgorithmWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkPolyDataNormalsWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkPolyDataNormals").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("PolyDataNormals").ToLocalChecked(),tpl->GetFunction());
}

void VtkPolyDataNormalsWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "AutoOrientNormalsOff", AutoOrientNormalsOff);
	Nan::SetPrototypeMethod(tpl, "autoOrientNormalsOff", AutoOrientNormalsOff);

	Nan::SetPrototypeMethod(tpl, "AutoOrientNormalsOn", AutoOrientNormalsOn);
	Nan::SetPrototypeMethod(tpl, "autoOrientNormalsOn", AutoOrientNormalsOn);

	Nan::SetPrototypeMethod(tpl, "ComputeCellNormalsOff", ComputeCellNormalsOff);
	Nan::SetPrototypeMethod(tpl, "computeCellNormalsOff", ComputeCellNormalsOff);

	Nan::SetPrototypeMethod(tpl, "ComputeCellNormalsOn", ComputeCellNormalsOn);
	Nan::SetPrototypeMethod(tpl, "computeCellNormalsOn", ComputeCellNormalsOn);

	Nan::SetPrototypeMethod(tpl, "ComputePointNormalsOff", ComputePointNormalsOff);
	Nan::SetPrototypeMethod(tpl, "computePointNormalsOff", ComputePointNormalsOff);

	Nan::SetPrototypeMethod(tpl, "ComputePointNormalsOn", ComputePointNormalsOn);
	Nan::SetPrototypeMethod(tpl, "computePointNormalsOn", ComputePointNormalsOn);

	Nan::SetPrototypeMethod(tpl, "ConsistencyOff", ConsistencyOff);
	Nan::SetPrototypeMethod(tpl, "consistencyOff", ConsistencyOff);

	Nan::SetPrototypeMethod(tpl, "ConsistencyOn", ConsistencyOn);
	Nan::SetPrototypeMethod(tpl, "consistencyOn", ConsistencyOn);

	Nan::SetPrototypeMethod(tpl, "FlipNormalsOff", FlipNormalsOff);
	Nan::SetPrototypeMethod(tpl, "flipNormalsOff", FlipNormalsOff);

	Nan::SetPrototypeMethod(tpl, "FlipNormalsOn", FlipNormalsOn);
	Nan::SetPrototypeMethod(tpl, "flipNormalsOn", FlipNormalsOn);

	Nan::SetPrototypeMethod(tpl, "GetAutoOrientNormals", GetAutoOrientNormals);
	Nan::SetPrototypeMethod(tpl, "getAutoOrientNormals", GetAutoOrientNormals);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetComputeCellNormals", GetComputeCellNormals);
	Nan::SetPrototypeMethod(tpl, "getComputeCellNormals", GetComputeCellNormals);

	Nan::SetPrototypeMethod(tpl, "GetComputePointNormals", GetComputePointNormals);
	Nan::SetPrototypeMethod(tpl, "getComputePointNormals", GetComputePointNormals);

	Nan::SetPrototypeMethod(tpl, "GetConsistency", GetConsistency);
	Nan::SetPrototypeMethod(tpl, "getConsistency", GetConsistency);

	Nan::SetPrototypeMethod(tpl, "GetFeatureAngle", GetFeatureAngle);
	Nan::SetPrototypeMethod(tpl, "getFeatureAngle", GetFeatureAngle);

	Nan::SetPrototypeMethod(tpl, "GetFeatureAngleMaxValue", GetFeatureAngleMaxValue);
	Nan::SetPrototypeMethod(tpl, "getFeatureAngleMaxValue", GetFeatureAngleMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetFeatureAngleMinValue", GetFeatureAngleMinValue);
	Nan::SetPrototypeMethod(tpl, "getFeatureAngleMinValue", GetFeatureAngleMinValue);

	Nan::SetPrototypeMethod(tpl, "GetFlipNormals", GetFlipNormals);
	Nan::SetPrototypeMethod(tpl, "getFlipNormals", GetFlipNormals);

	Nan::SetPrototypeMethod(tpl, "GetNonManifoldTraversal", GetNonManifoldTraversal);
	Nan::SetPrototypeMethod(tpl, "getNonManifoldTraversal", GetNonManifoldTraversal);

	Nan::SetPrototypeMethod(tpl, "GetOutputPointsPrecision", GetOutputPointsPrecision);
	Nan::SetPrototypeMethod(tpl, "getOutputPointsPrecision", GetOutputPointsPrecision);

	Nan::SetPrototypeMethod(tpl, "GetOutputPointsPrecisionMaxValue", GetOutputPointsPrecisionMaxValue);
	Nan::SetPrototypeMethod(tpl, "getOutputPointsPrecisionMaxValue", GetOutputPointsPrecisionMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetOutputPointsPrecisionMinValue", GetOutputPointsPrecisionMinValue);
	Nan::SetPrototypeMethod(tpl, "getOutputPointsPrecisionMinValue", GetOutputPointsPrecisionMinValue);

	Nan::SetPrototypeMethod(tpl, "GetSplitting", GetSplitting);
	Nan::SetPrototypeMethod(tpl, "getSplitting", GetSplitting);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "NonManifoldTraversalOff", NonManifoldTraversalOff);
	Nan::SetPrototypeMethod(tpl, "nonManifoldTraversalOff", NonManifoldTraversalOff);

	Nan::SetPrototypeMethod(tpl, "NonManifoldTraversalOn", NonManifoldTraversalOn);
	Nan::SetPrototypeMethod(tpl, "nonManifoldTraversalOn", NonManifoldTraversalOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAutoOrientNormals", SetAutoOrientNormals);
	Nan::SetPrototypeMethod(tpl, "setAutoOrientNormals", SetAutoOrientNormals);

	Nan::SetPrototypeMethod(tpl, "SetComputeCellNormals", SetComputeCellNormals);
	Nan::SetPrototypeMethod(tpl, "setComputeCellNormals", SetComputeCellNormals);

	Nan::SetPrototypeMethod(tpl, "SetComputePointNormals", SetComputePointNormals);
	Nan::SetPrototypeMethod(tpl, "setComputePointNormals", SetComputePointNormals);

	Nan::SetPrototypeMethod(tpl, "SetConsistency", SetConsistency);
	Nan::SetPrototypeMethod(tpl, "setConsistency", SetConsistency);

	Nan::SetPrototypeMethod(tpl, "SetFeatureAngle", SetFeatureAngle);
	Nan::SetPrototypeMethod(tpl, "setFeatureAngle", SetFeatureAngle);

	Nan::SetPrototypeMethod(tpl, "SetFlipNormals", SetFlipNormals);
	Nan::SetPrototypeMethod(tpl, "setFlipNormals", SetFlipNormals);

	Nan::SetPrototypeMethod(tpl, "SetNonManifoldTraversal", SetNonManifoldTraversal);
	Nan::SetPrototypeMethod(tpl, "setNonManifoldTraversal", SetNonManifoldTraversal);

	Nan::SetPrototypeMethod(tpl, "SetOutputPointsPrecision", SetOutputPointsPrecision);
	Nan::SetPrototypeMethod(tpl, "setOutputPointsPrecision", SetOutputPointsPrecision);

	Nan::SetPrototypeMethod(tpl, "SetSplitting", SetSplitting);
	Nan::SetPrototypeMethod(tpl, "setSplitting", SetSplitting);

	Nan::SetPrototypeMethod(tpl, "SplittingOff", SplittingOff);
	Nan::SetPrototypeMethod(tpl, "splittingOff", SplittingOff);

	Nan::SetPrototypeMethod(tpl, "SplittingOn", SplittingOn);
	Nan::SetPrototypeMethod(tpl, "splittingOn", SplittingOn);

}

void VtkPolyDataNormalsWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkPolyDataNormals> native = vtkSmartPointer<vtkPolyDataNormals>::New();
		VtkPolyDataNormalsWrap* obj = new VtkPolyDataNormalsWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkPolyDataNormalsWrap::AutoOrientNormalsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AutoOrientNormalsOff();
}

void VtkPolyDataNormalsWrap::AutoOrientNormalsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AutoOrientNormalsOn();
}

void VtkPolyDataNormalsWrap::ComputeCellNormalsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeCellNormalsOff();
}

void VtkPolyDataNormalsWrap::ComputeCellNormalsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputeCellNormalsOn();
}

void VtkPolyDataNormalsWrap::ComputePointNormalsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputePointNormalsOff();
}

void VtkPolyDataNormalsWrap::ComputePointNormalsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ComputePointNormalsOn();
}

void VtkPolyDataNormalsWrap::ConsistencyOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConsistencyOff();
}

void VtkPolyDataNormalsWrap::ConsistencyOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ConsistencyOn();
}

void VtkPolyDataNormalsWrap::FlipNormalsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FlipNormalsOff();
}

void VtkPolyDataNormalsWrap::FlipNormalsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->FlipNormalsOn();
}

void VtkPolyDataNormalsWrap::GetAutoOrientNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAutoOrientNormals();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPolyDataNormalsWrap::GetComputeCellNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputeCellNormals();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::GetComputePointNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetComputePointNormals();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::GetConsistency(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConsistency();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::GetFeatureAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFeatureAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::GetFeatureAngleMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFeatureAngleMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::GetFeatureAngleMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFeatureAngleMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::GetFlipNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFlipNormals();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::GetNonManifoldTraversal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNonManifoldTraversal();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::GetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputPointsPrecision();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::GetOutputPointsPrecisionMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputPointsPrecisionMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::GetOutputPointsPrecisionMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputPointsPrecisionMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::GetSplitting(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSplitting();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPolyDataNormalsWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataNormalsWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	vtkPolyDataNormals * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPolyDataNormalsWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataNormalsWrap *w = new VtkPolyDataNormalsWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataNormalsWrap::NonManifoldTraversalOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NonManifoldTraversalOff();
}

void VtkPolyDataNormalsWrap::NonManifoldTraversalOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NonManifoldTraversalOn();
}

void VtkPolyDataNormalsWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkPolyDataNormals * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkPolyDataNormalsWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPolyDataNormalsWrap *w = new VtkPolyDataNormalsWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataNormalsWrap::SetAutoOrientNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAutoOrientNormals(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataNormalsWrap::SetComputeCellNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputeCellNormals(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataNormalsWrap::SetComputePointNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetComputePointNormals(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataNormalsWrap::SetConsistency(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetConsistency(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataNormalsWrap::SetFeatureAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFeatureAngle(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataNormalsWrap::SetFlipNormals(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFlipNormals(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataNormalsWrap::SetNonManifoldTraversal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNonManifoldTraversal(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataNormalsWrap::SetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputPointsPrecision(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataNormalsWrap::SetSplitting(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetSplitting(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataNormalsWrap::SplittingOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SplittingOff();
}

void VtkPolyDataNormalsWrap::SplittingOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataNormalsWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataNormalsWrap>(info.Holder());
	vtkPolyDataNormals *native = (vtkPolyDataNormals *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SplittingOn();
}

