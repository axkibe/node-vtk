/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKWARPTRANSFORMWRAP_H
#define NATIVE_EXTENSION_VTK_VTKWARPTRANSFORMWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkWarpTransform.h>

#include "vtkAbstractTransformWrap.h"

class VtkWarpTransformWrap : public VtkAbstractTransformWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkWarpTransformWrap(vtkSmartPointer<vtkWarpTransform>);
		VtkWarpTransformWrap();
		~VtkWarpTransformWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInverseFlag(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInverseIterations(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInverseTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Inverse(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetInverseIterations(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetInverseTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
