/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkWidgetRepresentationWrap.h"
#include "vtkAngleRepresentationWrap.h"
#include "vtkObjectWrap.h"
#include "vtkHandleRepresentationWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkAngleRepresentationWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkAngleRepresentationWrap::ptpl;

VtkAngleRepresentationWrap::VtkAngleRepresentationWrap()
{ }

VtkAngleRepresentationWrap::VtkAngleRepresentationWrap(vtkSmartPointer<vtkAngleRepresentation> _native)
{ native = _native; }

VtkAngleRepresentationWrap::~VtkAngleRepresentationWrap()
{ }

void VtkAngleRepresentationWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkAngleRepresentation").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("AngleRepresentation").ToLocalChecked(), ConstructorGetter);
}

void VtkAngleRepresentationWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkAngleRepresentationWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkWidgetRepresentationWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkWidgetRepresentationWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkAngleRepresentationWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ArcVisibilityOff", ArcVisibilityOff);
	Nan::SetPrototypeMethod(tpl, "arcVisibilityOff", ArcVisibilityOff);

	Nan::SetPrototypeMethod(tpl, "ArcVisibilityOn", ArcVisibilityOn);
	Nan::SetPrototypeMethod(tpl, "arcVisibilityOn", ArcVisibilityOn);

	Nan::SetPrototypeMethod(tpl, "BuildRepresentation", BuildRepresentation);
	Nan::SetPrototypeMethod(tpl, "buildRepresentation", BuildRepresentation);

	Nan::SetPrototypeMethod(tpl, "ComputeInteractionState", ComputeInteractionState);
	Nan::SetPrototypeMethod(tpl, "computeInteractionState", ComputeInteractionState);

	Nan::SetPrototypeMethod(tpl, "GetAngle", GetAngle);
	Nan::SetPrototypeMethod(tpl, "getAngle", GetAngle);

	Nan::SetPrototypeMethod(tpl, "GetArcVisibility", GetArcVisibility);
	Nan::SetPrototypeMethod(tpl, "getArcVisibility", GetArcVisibility);

	Nan::SetPrototypeMethod(tpl, "GetCenterRepresentation", GetCenterRepresentation);
	Nan::SetPrototypeMethod(tpl, "getCenterRepresentation", GetCenterRepresentation);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetLabelFormat", GetLabelFormat);
	Nan::SetPrototypeMethod(tpl, "getLabelFormat", GetLabelFormat);

	Nan::SetPrototypeMethod(tpl, "GetPoint1Representation", GetPoint1Representation);
	Nan::SetPrototypeMethod(tpl, "getPoint1Representation", GetPoint1Representation);

	Nan::SetPrototypeMethod(tpl, "GetPoint2Representation", GetPoint2Representation);
	Nan::SetPrototypeMethod(tpl, "getPoint2Representation", GetPoint2Representation);

	Nan::SetPrototypeMethod(tpl, "GetRay1Visibility", GetRay1Visibility);
	Nan::SetPrototypeMethod(tpl, "getRay1Visibility", GetRay1Visibility);

	Nan::SetPrototypeMethod(tpl, "GetRay2Visibility", GetRay2Visibility);
	Nan::SetPrototypeMethod(tpl, "getRay2Visibility", GetRay2Visibility);

	Nan::SetPrototypeMethod(tpl, "GetTolerance", GetTolerance);
	Nan::SetPrototypeMethod(tpl, "getTolerance", GetTolerance);

	Nan::SetPrototypeMethod(tpl, "GetToleranceMaxValue", GetToleranceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getToleranceMaxValue", GetToleranceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetToleranceMinValue", GetToleranceMinValue);
	Nan::SetPrototypeMethod(tpl, "getToleranceMinValue", GetToleranceMinValue);

	Nan::SetPrototypeMethod(tpl, "InstantiateHandleRepresentation", InstantiateHandleRepresentation);
	Nan::SetPrototypeMethod(tpl, "instantiateHandleRepresentation", InstantiateHandleRepresentation);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "Ray1VisibilityOff", Ray1VisibilityOff);
	Nan::SetPrototypeMethod(tpl, "ray1VisibilityOff", Ray1VisibilityOff);

	Nan::SetPrototypeMethod(tpl, "Ray1VisibilityOn", Ray1VisibilityOn);
	Nan::SetPrototypeMethod(tpl, "ray1VisibilityOn", Ray1VisibilityOn);

	Nan::SetPrototypeMethod(tpl, "Ray2VisibilityOff", Ray2VisibilityOff);
	Nan::SetPrototypeMethod(tpl, "ray2VisibilityOff", Ray2VisibilityOff);

	Nan::SetPrototypeMethod(tpl, "Ray2VisibilityOn", Ray2VisibilityOn);
	Nan::SetPrototypeMethod(tpl, "ray2VisibilityOn", Ray2VisibilityOn);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetArcVisibility", SetArcVisibility);
	Nan::SetPrototypeMethod(tpl, "setArcVisibility", SetArcVisibility);

	Nan::SetPrototypeMethod(tpl, "SetHandleRepresentation", SetHandleRepresentation);
	Nan::SetPrototypeMethod(tpl, "setHandleRepresentation", SetHandleRepresentation);

	Nan::SetPrototypeMethod(tpl, "SetLabelFormat", SetLabelFormat);
	Nan::SetPrototypeMethod(tpl, "setLabelFormat", SetLabelFormat);

	Nan::SetPrototypeMethod(tpl, "SetRay1Visibility", SetRay1Visibility);
	Nan::SetPrototypeMethod(tpl, "setRay1Visibility", SetRay1Visibility);

	Nan::SetPrototypeMethod(tpl, "SetRay2Visibility", SetRay2Visibility);
	Nan::SetPrototypeMethod(tpl, "setRay2Visibility", SetRay2Visibility);

	Nan::SetPrototypeMethod(tpl, "SetTolerance", SetTolerance);
	Nan::SetPrototypeMethod(tpl, "setTolerance", SetTolerance);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );
}

void VtkAngleRepresentationWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkAngleRepresentationWrap::ArcVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ArcVisibilityOff();
}

void VtkAngleRepresentationWrap::ArcVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ArcVisibilityOn();
}

void VtkAngleRepresentationWrap::BuildRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BuildRepresentation();
}

void VtkAngleRepresentationWrap::ComputeInteractionState(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->ComputeInteractionState(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngleRepresentationWrap::GetAngle(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAngle();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngleRepresentationWrap::GetArcVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetArcVisibility();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngleRepresentationWrap::GetCenterRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	vtkHandleRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCenterRepresentation();
		VtkHandleRepresentationWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkHandleRepresentationWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkHandleRepresentationWrap *w = new VtkHandleRepresentationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAngleRepresentationWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAngleRepresentationWrap::GetLabelFormat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLabelFormat();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAngleRepresentationWrap::GetPoint1Representation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	vtkHandleRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPoint1Representation();
		VtkHandleRepresentationWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkHandleRepresentationWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkHandleRepresentationWrap *w = new VtkHandleRepresentationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAngleRepresentationWrap::GetPoint2Representation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	vtkHandleRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPoint2Representation();
		VtkHandleRepresentationWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkHandleRepresentationWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkHandleRepresentationWrap *w = new VtkHandleRepresentationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAngleRepresentationWrap::GetRay1Visibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRay1Visibility();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngleRepresentationWrap::GetRay2Visibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRay2Visibility();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngleRepresentationWrap::GetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTolerance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngleRepresentationWrap::GetToleranceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetToleranceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngleRepresentationWrap::GetToleranceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetToleranceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAngleRepresentationWrap::InstantiateHandleRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->InstantiateHandleRepresentation();
}

void VtkAngleRepresentationWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngleRepresentationWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	vtkAngleRepresentation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkAngleRepresentationWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkAngleRepresentationWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAngleRepresentationWrap *w = new VtkAngleRepresentationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAngleRepresentationWrap::Ray1VisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Ray1VisibilityOff();
}

void VtkAngleRepresentationWrap::Ray1VisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Ray1VisibilityOn();
}

void VtkAngleRepresentationWrap::Ray2VisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Ray2VisibilityOff();
}

void VtkAngleRepresentationWrap::Ray2VisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Ray2VisibilityOn();
}

void VtkAngleRepresentationWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkAngleRepresentation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkAngleRepresentationWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkAngleRepresentationWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAngleRepresentationWrap *w = new VtkAngleRepresentationWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngleRepresentationWrap::SetArcVisibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetArcVisibility(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngleRepresentationWrap::SetHandleRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkHandleRepresentationWrap::ptpl))->HasInstance(info[0]))
	{
		VtkHandleRepresentationWrap *a0 = ObjectWrap::Unwrap<VtkHandleRepresentationWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHandleRepresentation(
			(vtkHandleRepresentation *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngleRepresentationWrap::SetLabelFormat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLabelFormat(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngleRepresentationWrap::SetRay1Visibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRay1Visibility(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngleRepresentationWrap::SetRay2Visibility(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetRay2Visibility(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAngleRepresentationWrap::SetTolerance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAngleRepresentationWrap *wrapper = ObjectWrap::Unwrap<VtkAngleRepresentationWrap>(info.Holder());
	vtkAngleRepresentation *native = (vtkAngleRepresentation *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTolerance(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

