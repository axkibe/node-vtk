/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkExtentSplitterWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkExtentSplitterWrap::constructor;

VtkExtentSplitterWrap::VtkExtentSplitterWrap()
{ }

VtkExtentSplitterWrap::VtkExtentSplitterWrap(vtkSmartPointer<vtkExtentSplitter> _native)
{ native = _native; }

VtkExtentSplitterWrap::~VtkExtentSplitterWrap()
{ }

void VtkExtentSplitterWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkExtentSplitterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkExtentSplitter").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ExtentSplitter").ToLocalChecked(),tpl->GetFunction());
}

void VtkExtentSplitterWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "AddExtent", AddExtent);
	Nan::SetPrototypeMethod(tpl, "addExtent", AddExtent);

	Nan::SetPrototypeMethod(tpl, "AddExtentSource", AddExtentSource);
	Nan::SetPrototypeMethod(tpl, "addExtentSource", AddExtentSource);

	Nan::SetPrototypeMethod(tpl, "ComputeSubExtents", ComputeSubExtents);
	Nan::SetPrototypeMethod(tpl, "computeSubExtents", ComputeSubExtents);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfSubExtents", GetNumberOfSubExtents);
	Nan::SetPrototypeMethod(tpl, "getNumberOfSubExtents", GetNumberOfSubExtents);

	Nan::SetPrototypeMethod(tpl, "GetPointMode", GetPointMode);
	Nan::SetPrototypeMethod(tpl, "getPointMode", GetPointMode);

	Nan::SetPrototypeMethod(tpl, "GetSubExtentSource", GetSubExtentSource);
	Nan::SetPrototypeMethod(tpl, "getSubExtentSource", GetSubExtentSource);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PointModeOff", PointModeOff);
	Nan::SetPrototypeMethod(tpl, "pointModeOff", PointModeOff);

	Nan::SetPrototypeMethod(tpl, "PointModeOn", PointModeOn);
	Nan::SetPrototypeMethod(tpl, "pointModeOn", PointModeOn);

	Nan::SetPrototypeMethod(tpl, "RemoveAllExtentSources", RemoveAllExtentSources);
	Nan::SetPrototypeMethod(tpl, "removeAllExtentSources", RemoveAllExtentSources);

	Nan::SetPrototypeMethod(tpl, "RemoveExtentSource", RemoveExtentSource);
	Nan::SetPrototypeMethod(tpl, "removeExtentSource", RemoveExtentSource);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetPointMode", SetPointMode);
	Nan::SetPrototypeMethod(tpl, "setPointMode", SetPointMode);

}

void VtkExtentSplitterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkExtentSplitter> native = vtkSmartPointer<vtkExtentSplitter>::New();
		VtkExtentSplitterWrap* obj = new VtkExtentSplitterWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkExtentSplitterWrap::AddExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() > 4 && info[4]->IsInt32())
					{
						if(info.Length() > 5 && info[5]->IsInt32())
						{
							if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->AddExtent(
								info[0]->Int32Value(),
								info[1]->Int32Value(),
								info[2]->Int32Value(),
								info[3]->Int32Value(),
								info[4]->Int32Value(),
								info[5]->Int32Value()
							);
							return;
						}
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtentSplitterWrap::AddExtentSource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() > 4 && info[4]->IsInt32())
					{
						if(info.Length() > 5 && info[5]->IsInt32())
						{
							if(info.Length() > 6 && info[6]->IsInt32())
							{
								if(info.Length() > 7 && info[7]->IsInt32())
								{
									if(info.Length() != 8)
									{
										Nan::ThrowError("Too many parameters.");
										return;
									}
									native->AddExtentSource(
										info[0]->Int32Value(),
										info[1]->Int32Value(),
										info[2]->Int32Value(),
										info[3]->Int32Value(),
										info[4]->Int32Value(),
										info[5]->Int32Value(),
										info[6]->Int32Value(),
										info[7]->Int32Value()
									);
									return;
								}
							}
						}
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtentSplitterWrap::ComputeSubExtents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->ComputeSubExtents();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtentSplitterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkExtentSplitterWrap::GetNumberOfSubExtents(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfSubExtents();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtentSplitterWrap::GetPointMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetPointMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkExtentSplitterWrap::GetSubExtentSource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetSubExtentSource(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtentSplitterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtentSplitterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	vtkExtentSplitter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkExtentSplitterWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkExtentSplitterWrap *w = new VtkExtentSplitterWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkExtentSplitterWrap::PointModeOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PointModeOff();
}

void VtkExtentSplitterWrap::PointModeOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PointModeOn();
}

void VtkExtentSplitterWrap::RemoveAllExtentSources(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllExtentSources();
}

void VtkExtentSplitterWrap::RemoveExtentSource(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveExtentSource(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtentSplitterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkExtentSplitter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkExtentSplitterWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkExtentSplitterWrap *w = new VtkExtentSplitterWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkExtentSplitterWrap::SetPointMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkExtentSplitterWrap *wrapper = ObjectWrap::Unwrap<VtkExtentSplitterWrap>(info.Holder());
	vtkExtentSplitter *native = (vtkExtentSplitter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetPointMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

