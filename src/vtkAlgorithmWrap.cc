/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkAlgorithmWrap.h"
#include "vtkExecutiveWrap.h"
#include "vtkInformationWrap.h"
#include "vtkCollectionWrap.h"
#include "vtkInformationVectorWrap.h"
#include "vtkInformationIntegerKeyWrap.h"
#include "vtkInformationInformationVectorKeyWrap.h"
#include "vtkInformationStringVectorKeyWrap.h"
#include "vtkDataObjectWrap.h"
#include "vtkAlgorithmOutputWrap.h"
#include "vtkProgressObserverWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkAlgorithmWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkAlgorithmWrap::ptpl;

VtkAlgorithmWrap::VtkAlgorithmWrap()
{ }

VtkAlgorithmWrap::VtkAlgorithmWrap(vtkSmartPointer<vtkAlgorithm> _native)
{ native = _native; }

VtkAlgorithmWrap::~VtkAlgorithmWrap()
{ }

void VtkAlgorithmWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkObjectWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkObjectWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkAlgorithmWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkAlgorithm").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("Algorithm").ToLocalChecked(),tpl->GetFunction());
}

void VtkAlgorithmWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "AbortExecuteOff", AbortExecuteOff);
	Nan::SetPrototypeMethod(tpl, "abortExecuteOff", AbortExecuteOff);

	Nan::SetPrototypeMethod(tpl, "AbortExecuteOn", AbortExecuteOn);
	Nan::SetPrototypeMethod(tpl, "abortExecuteOn", AbortExecuteOn);

	Nan::SetPrototypeMethod(tpl, "AddInputConnection", AddInputConnection);
	Nan::SetPrototypeMethod(tpl, "addInputConnection", AddInputConnection);

	Nan::SetPrototypeMethod(tpl, "AddInputDataObject", AddInputDataObject);
	Nan::SetPrototypeMethod(tpl, "addInputDataObject", AddInputDataObject);

	Nan::SetPrototypeMethod(tpl, "ComputePriority", ComputePriority);
	Nan::SetPrototypeMethod(tpl, "computePriority", ComputePriority);

	Nan::SetPrototypeMethod(tpl, "GetAbortExecute", GetAbortExecute);
	Nan::SetPrototypeMethod(tpl, "getAbortExecute", GetAbortExecute);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetExecutive", GetExecutive);
	Nan::SetPrototypeMethod(tpl, "getExecutive", GetExecutive);

	Nan::SetPrototypeMethod(tpl, "GetInformation", GetInformation);
	Nan::SetPrototypeMethod(tpl, "getInformation", GetInformation);

	Nan::SetPrototypeMethod(tpl, "GetInputAlgorithm", GetInputAlgorithm);
	Nan::SetPrototypeMethod(tpl, "getInputAlgorithm", GetInputAlgorithm);

	Nan::SetPrototypeMethod(tpl, "GetInputArrayInformation", GetInputArrayInformation);
	Nan::SetPrototypeMethod(tpl, "getInputArrayInformation", GetInputArrayInformation);

	Nan::SetPrototypeMethod(tpl, "GetInputConnection", GetInputConnection);
	Nan::SetPrototypeMethod(tpl, "getInputConnection", GetInputConnection);

	Nan::SetPrototypeMethod(tpl, "GetInputDataObject", GetInputDataObject);
	Nan::SetPrototypeMethod(tpl, "getInputDataObject", GetInputDataObject);

	Nan::SetPrototypeMethod(tpl, "GetInputExecutive", GetInputExecutive);
	Nan::SetPrototypeMethod(tpl, "getInputExecutive", GetInputExecutive);

	Nan::SetPrototypeMethod(tpl, "GetInputInformation", GetInputInformation);
	Nan::SetPrototypeMethod(tpl, "getInputInformation", GetInputInformation);

	Nan::SetPrototypeMethod(tpl, "GetInputPortInformation", GetInputPortInformation);
	Nan::SetPrototypeMethod(tpl, "getInputPortInformation", GetInputPortInformation);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfInputConnections", GetNumberOfInputConnections);
	Nan::SetPrototypeMethod(tpl, "getNumberOfInputConnections", GetNumberOfInputConnections);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfInputPorts", GetNumberOfInputPorts);
	Nan::SetPrototypeMethod(tpl, "getNumberOfInputPorts", GetNumberOfInputPorts);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfOutputPorts", GetNumberOfOutputPorts);
	Nan::SetPrototypeMethod(tpl, "getNumberOfOutputPorts", GetNumberOfOutputPorts);

	Nan::SetPrototypeMethod(tpl, "GetOutputDataObject", GetOutputDataObject);
	Nan::SetPrototypeMethod(tpl, "getOutputDataObject", GetOutputDataObject);

	Nan::SetPrototypeMethod(tpl, "GetOutputInformation", GetOutputInformation);
	Nan::SetPrototypeMethod(tpl, "getOutputInformation", GetOutputInformation);

	Nan::SetPrototypeMethod(tpl, "GetOutputPort", GetOutputPort);
	Nan::SetPrototypeMethod(tpl, "getOutputPort", GetOutputPort);

	Nan::SetPrototypeMethod(tpl, "GetOutputPortInformation", GetOutputPortInformation);
	Nan::SetPrototypeMethod(tpl, "getOutputPortInformation", GetOutputPortInformation);

	Nan::SetPrototypeMethod(tpl, "GetProgress", GetProgress);
	Nan::SetPrototypeMethod(tpl, "getProgress", GetProgress);

	Nan::SetPrototypeMethod(tpl, "GetProgressMaxValue", GetProgressMaxValue);
	Nan::SetPrototypeMethod(tpl, "getProgressMaxValue", GetProgressMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetProgressMinValue", GetProgressMinValue);
	Nan::SetPrototypeMethod(tpl, "getProgressMinValue", GetProgressMinValue);

	Nan::SetPrototypeMethod(tpl, "GetProgressObserver", GetProgressObserver);
	Nan::SetPrototypeMethod(tpl, "getProgressObserver", GetProgressObserver);

	Nan::SetPrototypeMethod(tpl, "GetProgressText", GetProgressText);
	Nan::SetPrototypeMethod(tpl, "getProgressText", GetProgressText);

	Nan::SetPrototypeMethod(tpl, "GetReleaseDataFlag", GetReleaseDataFlag);
	Nan::SetPrototypeMethod(tpl, "getReleaseDataFlag", GetReleaseDataFlag);

	Nan::SetPrototypeMethod(tpl, "GetTotalNumberOfInputConnections", GetTotalNumberOfInputConnections);
	Nan::SetPrototypeMethod(tpl, "getTotalNumberOfInputConnections", GetTotalNumberOfInputConnections);

	Nan::SetPrototypeMethod(tpl, "GetUpdateGhostLevel", GetUpdateGhostLevel);
	Nan::SetPrototypeMethod(tpl, "getUpdateGhostLevel", GetUpdateGhostLevel);

	Nan::SetPrototypeMethod(tpl, "GetUpdateNumberOfPieces", GetUpdateNumberOfPieces);
	Nan::SetPrototypeMethod(tpl, "getUpdateNumberOfPieces", GetUpdateNumberOfPieces);

	Nan::SetPrototypeMethod(tpl, "GetUpdatePiece", GetUpdatePiece);
	Nan::SetPrototypeMethod(tpl, "getUpdatePiece", GetUpdatePiece);

	Nan::SetPrototypeMethod(tpl, "HasExecutive", HasExecutive);
	Nan::SetPrototypeMethod(tpl, "hasExecutive", HasExecutive);

	Nan::SetPrototypeMethod(tpl, "INPUT_ARRAYS_TO_PROCESS", INPUT_ARRAYS_TO_PROCESS);

	Nan::SetPrototypeMethod(tpl, "INPUT_CONNECTION", INPUT_CONNECTION);

	Nan::SetPrototypeMethod(tpl, "INPUT_IS_OPTIONAL", INPUT_IS_OPTIONAL);

	Nan::SetPrototypeMethod(tpl, "INPUT_IS_REPEATABLE", INPUT_IS_REPEATABLE);

	Nan::SetPrototypeMethod(tpl, "INPUT_PORT", INPUT_PORT);

	Nan::SetPrototypeMethod(tpl, "INPUT_REQUIRED_DATA_TYPE", INPUT_REQUIRED_DATA_TYPE);

	Nan::SetPrototypeMethod(tpl, "INPUT_REQUIRED_FIELDS", INPUT_REQUIRED_FIELDS);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "MANAGES_METAINFORMATION", MANAGES_METAINFORMATION);

	Nan::SetPrototypeMethod(tpl, "ModifyRequest", ModifyRequest);
	Nan::SetPrototypeMethod(tpl, "modifyRequest", ModifyRequest);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PRESERVES_ATTRIBUTES", PRESERVES_ATTRIBUTES);

	Nan::SetPrototypeMethod(tpl, "PRESERVES_BOUNDS", PRESERVES_BOUNDS);

	Nan::SetPrototypeMethod(tpl, "PRESERVES_DATASET", PRESERVES_DATASET);

	Nan::SetPrototypeMethod(tpl, "PRESERVES_GEOMETRY", PRESERVES_GEOMETRY);

	Nan::SetPrototypeMethod(tpl, "PRESERVES_RANGES", PRESERVES_RANGES);

	Nan::SetPrototypeMethod(tpl, "PRESERVES_TOPOLOGY", PRESERVES_TOPOLOGY);

	Nan::SetPrototypeMethod(tpl, "ProcessRequest", ProcessRequest);
	Nan::SetPrototypeMethod(tpl, "processRequest", ProcessRequest);

	Nan::SetPrototypeMethod(tpl, "PropagateUpdateExtent", PropagateUpdateExtent);
	Nan::SetPrototypeMethod(tpl, "propagateUpdateExtent", PropagateUpdateExtent);

	Nan::SetPrototypeMethod(tpl, "ReleaseDataFlagOff", ReleaseDataFlagOff);
	Nan::SetPrototypeMethod(tpl, "releaseDataFlagOff", ReleaseDataFlagOff);

	Nan::SetPrototypeMethod(tpl, "ReleaseDataFlagOn", ReleaseDataFlagOn);
	Nan::SetPrototypeMethod(tpl, "releaseDataFlagOn", ReleaseDataFlagOn);

	Nan::SetPrototypeMethod(tpl, "RemoveAllInputConnections", RemoveAllInputConnections);
	Nan::SetPrototypeMethod(tpl, "removeAllInputConnections", RemoveAllInputConnections);

	Nan::SetPrototypeMethod(tpl, "RemoveAllInputs", RemoveAllInputs);
	Nan::SetPrototypeMethod(tpl, "removeAllInputs", RemoveAllInputs);

	Nan::SetPrototypeMethod(tpl, "RemoveInputConnection", RemoveInputConnection);
	Nan::SetPrototypeMethod(tpl, "removeInputConnection", RemoveInputConnection);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAbortExecute", SetAbortExecute);
	Nan::SetPrototypeMethod(tpl, "setAbortExecute", SetAbortExecute);

	Nan::SetPrototypeMethod(tpl, "SetDefaultExecutivePrototype", SetDefaultExecutivePrototype);
	Nan::SetPrototypeMethod(tpl, "setDefaultExecutivePrototype", SetDefaultExecutivePrototype);

	Nan::SetPrototypeMethod(tpl, "SetExecutive", SetExecutive);
	Nan::SetPrototypeMethod(tpl, "setExecutive", SetExecutive);

	Nan::SetPrototypeMethod(tpl, "SetInformation", SetInformation);
	Nan::SetPrototypeMethod(tpl, "setInformation", SetInformation);

	Nan::SetPrototypeMethod(tpl, "SetInputArrayToProcess", SetInputArrayToProcess);
	Nan::SetPrototypeMethod(tpl, "setInputArrayToProcess", SetInputArrayToProcess);

	Nan::SetPrototypeMethod(tpl, "SetInputConnection", SetInputConnection);
	Nan::SetPrototypeMethod(tpl, "setInputConnection", SetInputConnection);

	Nan::SetPrototypeMethod(tpl, "SetInputDataObject", SetInputDataObject);
	Nan::SetPrototypeMethod(tpl, "setInputDataObject", SetInputDataObject);

	Nan::SetPrototypeMethod(tpl, "SetProgress", SetProgress);
	Nan::SetPrototypeMethod(tpl, "setProgress", SetProgress);

	Nan::SetPrototypeMethod(tpl, "SetProgressObserver", SetProgressObserver);
	Nan::SetPrototypeMethod(tpl, "setProgressObserver", SetProgressObserver);

	Nan::SetPrototypeMethod(tpl, "SetProgressText", SetProgressText);
	Nan::SetPrototypeMethod(tpl, "setProgressText", SetProgressText);

	Nan::SetPrototypeMethod(tpl, "SetReleaseDataFlag", SetReleaseDataFlag);
	Nan::SetPrototypeMethod(tpl, "setReleaseDataFlag", SetReleaseDataFlag);

	Nan::SetPrototypeMethod(tpl, "SetUpdateExtent", SetUpdateExtent);
	Nan::SetPrototypeMethod(tpl, "setUpdateExtent", SetUpdateExtent);

	Nan::SetPrototypeMethod(tpl, "SetUpdateExtentToWholeExtent", SetUpdateExtentToWholeExtent);
	Nan::SetPrototypeMethod(tpl, "setUpdateExtentToWholeExtent", SetUpdateExtentToWholeExtent);

	Nan::SetPrototypeMethod(tpl, "Update", Update);
	Nan::SetPrototypeMethod(tpl, "update", Update);

	Nan::SetPrototypeMethod(tpl, "UpdateExtentIsEmpty", UpdateExtentIsEmpty);
	Nan::SetPrototypeMethod(tpl, "updateExtentIsEmpty", UpdateExtentIsEmpty);

	Nan::SetPrototypeMethod(tpl, "UpdateInformation", UpdateInformation);
	Nan::SetPrototypeMethod(tpl, "updateInformation", UpdateInformation);

	Nan::SetPrototypeMethod(tpl, "UpdateProgress", UpdateProgress);
	Nan::SetPrototypeMethod(tpl, "updateProgress", UpdateProgress);

	Nan::SetPrototypeMethod(tpl, "UpdateWholeExtent", UpdateWholeExtent);
	Nan::SetPrototypeMethod(tpl, "updateWholeExtent", UpdateWholeExtent);

}

void VtkAlgorithmWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkAlgorithm> native = vtkSmartPointer<vtkAlgorithm>::New();
		VtkAlgorithmWrap* obj = new VtkAlgorithmWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkAlgorithmWrap::AbortExecuteOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AbortExecuteOff();
}

void VtkAlgorithmWrap::AbortExecuteOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AbortExecuteOn();
}

void VtkAlgorithmWrap::AddInputConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddInputConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkAlgorithmOutputWrap *a1 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->AddInputConnection(
				info[0]->Int32Value(),
				(vtkAlgorithmOutput *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::AddInputDataObject(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddInputDataObject(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkDataObjectWrap *a1 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->AddInputDataObject(
				info[0]->Int32Value(),
				(vtkDataObject *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::ComputePriority(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->ComputePriority();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::GetAbortExecute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAbortExecute();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAlgorithmWrap::GetExecutive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkExecutive * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetExecutive();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkExecutiveWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkExecutiveWrap *w = new VtkExecutiveWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::GetInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInformation();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationWrap *w = new VtkInformationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::GetInputAlgorithm(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkAlgorithm * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetInputAlgorithm(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::Function>(VtkAlgorithmWrap::constructor);
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkAlgorithmWrap *w = new VtkAlgorithmWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	vtkAlgorithm * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInputAlgorithm();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkAlgorithmWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAlgorithmWrap *w = new VtkAlgorithmWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::GetInputArrayInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkInformation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetInputArrayInformation(
			info[0]->Int32Value()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkInformationWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkInformationWrap *w = new VtkInformationWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::GetInputConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkAlgorithmOutput * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetInputConnection(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::Function>(VtkAlgorithmOutputWrap::constructor);
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::GetInputDataObject(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkDataObject * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetInputDataObject(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::Function>(VtkDataObjectWrap::constructor);
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkDataObjectWrap *w = new VtkDataObjectWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::GetInputExecutive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkExecutive * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetInputExecutive(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::Function>(VtkExecutiveWrap::constructor);
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkExecutiveWrap *w = new VtkExecutiveWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	vtkExecutive * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInputExecutive();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkExecutiveWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkExecutiveWrap *w = new VtkExecutiveWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::GetInputInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			vtkInformation * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->GetInputInformation(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::Function>(VtkInformationWrap::constructor);
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkInformationWrap *w = new VtkInformationWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	vtkInformation * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInputInformation();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationWrap *w = new VtkInformationWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::GetInputPortInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkInformation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetInputPortInformation(
			info[0]->Int32Value()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkInformationWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkInformationWrap *w = new VtkInformationWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::GetNumberOfInputConnections(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNumberOfInputConnections(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::GetNumberOfInputPorts(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfInputPorts();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::GetNumberOfOutputPorts(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfOutputPorts();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::GetOutputDataObject(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkDataObject * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetOutputDataObject(
			info[0]->Int32Value()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkDataObjectWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDataObjectWrap *w = new VtkDataObjectWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::GetOutputInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkInformation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetOutputInformation(
			info[0]->Int32Value()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkInformationWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkInformationWrap *w = new VtkInformationWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::GetOutputPort(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkAlgorithmOutput * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetOutputPort(
			info[0]->Int32Value()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkAlgorithmOutputWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	vtkAlgorithmOutput * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputPort();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkAlgorithmOutputWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAlgorithmOutputWrap *w = new VtkAlgorithmOutputWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::GetOutputPortInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkInformation * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetOutputPortInformation(
			info[0]->Int32Value()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkInformationWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkInformationWrap *w = new VtkInformationWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::GetProgress(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProgress();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::GetProgressMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProgressMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::GetProgressMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProgressMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::GetProgressObserver(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkProgressObserver * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProgressObserver();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkProgressObserverWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkProgressObserverWrap *w = new VtkProgressObserverWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::GetProgressText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProgressText();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAlgorithmWrap::GetReleaseDataFlag(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetReleaseDataFlag();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::GetTotalNumberOfInputConnections(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTotalNumberOfInputConnections();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::GetUpdateGhostLevel(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetUpdateGhostLevel(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUpdateGhostLevel();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::GetUpdateNumberOfPieces(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetUpdateNumberOfPieces(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUpdateNumberOfPieces();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::GetUpdatePiece(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetUpdatePiece(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUpdatePiece();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::HasExecutive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->HasExecutive();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::INPUT_ARRAYS_TO_PROCESS(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationInformationVectorKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->INPUT_ARRAYS_TO_PROCESS();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationInformationVectorKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationInformationVectorKeyWrap *w = new VtkInformationInformationVectorKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::INPUT_CONNECTION(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->INPUT_CONNECTION();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::INPUT_IS_OPTIONAL(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->INPUT_IS_OPTIONAL();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::INPUT_IS_REPEATABLE(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->INPUT_IS_REPEATABLE();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::INPUT_PORT(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->INPUT_PORT();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::INPUT_REQUIRED_DATA_TYPE(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationStringVectorKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->INPUT_REQUIRED_DATA_TYPE();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationStringVectorKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationStringVectorKeyWrap *w = new VtkInformationStringVectorKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::INPUT_REQUIRED_FIELDS(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationInformationVectorKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->INPUT_REQUIRED_FIELDS();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationInformationVectorKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationInformationVectorKeyWrap *w = new VtkInformationInformationVectorKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::MANAGES_METAINFORMATION(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->MANAGES_METAINFORMATION();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::ModifyRequest(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->ModifyRequest(
				(vtkInformation *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkAlgorithm * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkAlgorithmWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAlgorithmWrap *w = new VtkAlgorithmWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::PRESERVES_ATTRIBUTES(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->PRESERVES_ATTRIBUTES();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::PRESERVES_BOUNDS(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->PRESERVES_BOUNDS();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::PRESERVES_DATASET(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->PRESERVES_DATASET();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::PRESERVES_GEOMETRY(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->PRESERVES_GEOMETRY();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::PRESERVES_RANGES(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->PRESERVES_RANGES();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::PRESERVES_TOPOLOGY(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->PRESERVES_TOPOLOGY();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAlgorithmWrap::ProcessRequest(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkCollectionWrap *a1 = ObjectWrap::Unwrap<VtkCollectionWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject())
			{
				VtkInformationVectorWrap *a2 = ObjectWrap::Unwrap<VtkInformationVectorWrap>(info[2]->ToObject());
				int r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->ProcessRequest(
					(vtkInformation *) a0->native.GetPointer(),
					(vtkCollection *) a1->native.GetPointer(),
					(vtkInformationVector *) a2->native.GetPointer()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::PropagateUpdateExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PropagateUpdateExtent();
}

void VtkAlgorithmWrap::ReleaseDataFlagOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReleaseDataFlagOff();
}

void VtkAlgorithmWrap::ReleaseDataFlagOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ReleaseDataFlagOn();
}

void VtkAlgorithmWrap::RemoveAllInputConnections(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveAllInputConnections(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::RemoveAllInputs(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllInputs();
}

void VtkAlgorithmWrap::RemoveInputConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkAlgorithmOutputWrap *a1 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->RemoveInputConnection(
				info[0]->Int32Value(),
				(vtkAlgorithmOutput *) a1->native.GetPointer()
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->RemoveInputConnection(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkAlgorithm * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkAlgorithmWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAlgorithmWrap *w = new VtkAlgorithmWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetAbortExecute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAbortExecute(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetDefaultExecutivePrototype(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkExecutiveWrap *a0 = ObjectWrap::Unwrap<VtkExecutiveWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDefaultExecutivePrototype(
			(vtkExecutive *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetExecutive(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkExecutiveWrap *a0 = ObjectWrap::Unwrap<VtkExecutiveWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetExecutive(
			(vtkExecutive *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInformation(
			(vtkInformation *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetInputArrayToProcess(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkInformationWrap *a1 = ObjectWrap::Unwrap<VtkInformationWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetInputArrayToProcess(
				info[0]->Int32Value(),
				(vtkInformation *) a1->native.GetPointer()
			);
			return;
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					Nan::Utf8String a3(info[3]);
					if(info.Length() > 4 && info[4]->IsInt32())
					{
						Nan::Utf8String a4(info[4]);
						if(info.Length() != 5)
						{
							Nan::ThrowError("Too many parameters.");
							return;
						}
						native->SetInputArrayToProcess(
							info[0]->Int32Value(),
							info[1]->Int32Value(),
							info[2]->Int32Value(),
							*a3,
							*a4
						);
						return;
					}
				}
				else if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() > 4 && info[4]->IsInt32())
					{
						Nan::Utf8String a4(info[4]);
						if(info.Length() != 5)
						{
							Nan::ThrowError("Too many parameters.");
							return;
						}
						native->SetInputArrayToProcess(
							info[0]->Int32Value(),
							info[1]->Int32Value(),
							info[2]->Int32Value(),
							info[3]->Int32Value(),
							*a4
						);
						return;
					}
					else if(info.Length() > 4 && info[4]->IsInt32())
					{
						if(info.Length() != 5)
						{
							Nan::ThrowError("Too many parameters.");
							return;
						}
						native->SetInputArrayToProcess(
							info[0]->Int32Value(),
							info[1]->Int32Value(),
							info[2]->Int32Value(),
							info[3]->Int32Value(),
							info[4]->Int32Value()
						);
						return;
					}
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetInputConnection(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkAlgorithmOutputWrap *a0 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputConnection(
			(vtkAlgorithmOutput *) a0->native.GetPointer()
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkAlgorithmOutputWrap *a1 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetInputConnection(
				info[0]->Int32Value(),
				(vtkAlgorithmOutput *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetInputDataObject(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataObjectWrap *a0 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputDataObject(
			(vtkDataObject *) a0->native.GetPointer()
		);
		return;
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkDataObjectWrap *a1 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetInputDataObject(
				info[0]->Int32Value(),
				(vtkDataObject *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetProgress(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProgress(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetProgressObserver(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkProgressObserverWrap *a0 = ObjectWrap::Unwrap<VtkProgressObserverWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProgressObserver(
			(vtkProgressObserver *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetProgressText(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetProgressText(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetReleaseDataFlag(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetReleaseDataFlag(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetUpdateExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					native->SetUpdateExtent(
						info[0]->Int32Value(),
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					return;
				}
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetUpdateExtent(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::SetUpdateExtentToWholeExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SetUpdateExtentToWholeExtent(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->SetUpdateExtentToWholeExtent();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAlgorithmWrap::Update(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->Update(
			info[0]->Int32Value()
		);
		return;
	}
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Update();
}

void VtkAlgorithmWrap::UpdateExtentIsEmpty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkInformationWrap *a0 = ObjectWrap::Unwrap<VtkInformationWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkDataObjectWrap *a1 = ObjectWrap::Unwrap<VtkDataObjectWrap>(info[1]->ToObject());
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->UpdateExtentIsEmpty(
				(vtkInformation *) a0->native.GetPointer(),
				(vtkDataObject *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->UpdateExtentIsEmpty(
				(vtkInformation *) a0->native.GetPointer(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::UpdateInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UpdateInformation();
}

void VtkAlgorithmWrap::UpdateProgress(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->UpdateProgress(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAlgorithmWrap::UpdateWholeExtent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAlgorithmWrap *wrapper = ObjectWrap::Unwrap<VtkAlgorithmWrap>(info.Holder());
	vtkAlgorithm *native = (vtkAlgorithm *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UpdateWholeExtent();
}

