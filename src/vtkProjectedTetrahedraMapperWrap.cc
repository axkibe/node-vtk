/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkUnstructuredGridVolumeMapperWrap.h"
#include "vtkProjectedTetrahedraMapperWrap.h"
#include "vtkObjectWrap.h"
#include "vtkVisibilitySortWrap.h"
#include "vtkDataArrayWrap.h"
#include "vtkVolumePropertyWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkProjectedTetrahedraMapperWrap::constructor;

VtkProjectedTetrahedraMapperWrap::VtkProjectedTetrahedraMapperWrap()
{ }

VtkProjectedTetrahedraMapperWrap::VtkProjectedTetrahedraMapperWrap(vtkSmartPointer<vtkProjectedTetrahedraMapper> _native)
{ native = _native; }

VtkProjectedTetrahedraMapperWrap::~VtkProjectedTetrahedraMapperWrap()
{ }

void VtkProjectedTetrahedraMapperWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkProjectedTetrahedraMapperWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkAbstractMapperWrap::InitTpl(tpl);
	VtkAbstractMapper3DWrap::InitTpl(tpl);
	VtkAbstractVolumeMapperWrap::InitTpl(tpl);
	VtkUnstructuredGridVolumeMapperWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkProjectedTetrahedraMapper").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ProjectedTetrahedraMapper").ToLocalChecked(),tpl->GetFunction());
}

void VtkProjectedTetrahedraMapperWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetVisibilitySort", GetVisibilitySort);
	Nan::SetPrototypeMethod(tpl, "getVisibilitySort", GetVisibilitySort);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "MapScalarsToColors", MapScalarsToColors);
	Nan::SetPrototypeMethod(tpl, "mapScalarsToColors", MapScalarsToColors);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetVisibilitySort", SetVisibilitySort);
	Nan::SetPrototypeMethod(tpl, "setVisibilitySort", SetVisibilitySort);

}

void VtkProjectedTetrahedraMapperWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkProjectedTetrahedraMapper> native = vtkSmartPointer<vtkProjectedTetrahedraMapper>::New();
		VtkProjectedTetrahedraMapperWrap* obj = new VtkProjectedTetrahedraMapperWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkProjectedTetrahedraMapperWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTetrahedraMapperWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTetrahedraMapperWrap>(info.Holder());
	vtkProjectedTetrahedraMapper *native = (vtkProjectedTetrahedraMapper *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkProjectedTetrahedraMapperWrap::GetVisibilitySort(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTetrahedraMapperWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTetrahedraMapperWrap>(info.Holder());
	vtkProjectedTetrahedraMapper *native = (vtkProjectedTetrahedraMapper *)wrapper->native.GetPointer();
	vtkVisibilitySort * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetVisibilitySort();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkVisibilitySortWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkVisibilitySortWrap *w = new VtkVisibilitySortWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProjectedTetrahedraMapperWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTetrahedraMapperWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTetrahedraMapperWrap>(info.Holder());
	vtkProjectedTetrahedraMapper *native = (vtkProjectedTetrahedraMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProjectedTetrahedraMapperWrap::MapScalarsToColors(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTetrahedraMapperWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTetrahedraMapperWrap>(info.Holder());
	vtkProjectedTetrahedraMapper *native = (vtkProjectedTetrahedraMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkDataArrayWrap *a0 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkVolumePropertyWrap *a1 = ObjectWrap::Unwrap<VtkVolumePropertyWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject())
			{
				VtkDataArrayWrap *a2 = ObjectWrap::Unwrap<VtkDataArrayWrap>(info[2]->ToObject());
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->MapScalarsToColors(
					(vtkDataArray *) a0->native.GetPointer(),
					(vtkVolumeProperty *) a1->native.GetPointer(),
					(vtkDataArray *) a2->native.GetPointer()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProjectedTetrahedraMapperWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTetrahedraMapperWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTetrahedraMapperWrap>(info.Holder());
	vtkProjectedTetrahedraMapper *native = (vtkProjectedTetrahedraMapper *)wrapper->native.GetPointer();
	vtkProjectedTetrahedraMapper * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkProjectedTetrahedraMapperWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkProjectedTetrahedraMapperWrap *w = new VtkProjectedTetrahedraMapperWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkProjectedTetrahedraMapperWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTetrahedraMapperWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTetrahedraMapperWrap>(info.Holder());
	vtkProjectedTetrahedraMapper *native = (vtkProjectedTetrahedraMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkProjectedTetrahedraMapper * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkProjectedTetrahedraMapperWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkProjectedTetrahedraMapperWrap *w = new VtkProjectedTetrahedraMapperWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkProjectedTetrahedraMapperWrap::SetVisibilitySort(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkProjectedTetrahedraMapperWrap *wrapper = ObjectWrap::Unwrap<VtkProjectedTetrahedraMapperWrap>(info.Holder());
	vtkProjectedTetrahedraMapper *native = (vtkProjectedTetrahedraMapper *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkVisibilitySortWrap *a0 = ObjectWrap::Unwrap<VtkVisibilitySortWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetVisibilitySort(
			(vtkVisibilitySort *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

