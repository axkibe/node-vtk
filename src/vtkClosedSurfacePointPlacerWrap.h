/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKCLOSEDSURFACEPOINTPLACERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKCLOSEDSURFACEPOINTPLACERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkClosedSurfacePointPlacer.h>

#include "vtkPointPlacerWrap.h"

class VtkClosedSurfacePointPlacerWrap : public VtkPointPlacerWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkClosedSurfacePointPlacerWrap(vtkSmartPointer<vtkClosedSurfacePointPlacer>);
		VtkClosedSurfacePointPlacerWrap();
		~VtkClosedSurfacePointPlacerWrap( );
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AddBoundingPlane(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetBoundingPlanes(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMinimumDistance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMinimumDistanceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetMinimumDistanceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RemoveAllBoundingPlanes(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RemoveBoundingPlane(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetBoundingPlanes(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetMinimumDistance(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
