/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkDataSetAlgorithmWrap.h"
#include "vtkRearrangeFieldsWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkRearrangeFieldsWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkRearrangeFieldsWrap::ptpl;

VtkRearrangeFieldsWrap::VtkRearrangeFieldsWrap()
{ }

VtkRearrangeFieldsWrap::VtkRearrangeFieldsWrap(vtkSmartPointer<vtkRearrangeFields> _native)
{ native = _native; }

VtkRearrangeFieldsWrap::~VtkRearrangeFieldsWrap()
{ }

void VtkRearrangeFieldsWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkDataSetAlgorithmWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkDataSetAlgorithmWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkRearrangeFieldsWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkRearrangeFields").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("RearrangeFields").ToLocalChecked(),tpl->GetFunction());
}

void VtkRearrangeFieldsWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "AddOperation", AddOperation);
	Nan::SetPrototypeMethod(tpl, "addOperation", AddOperation);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RemoveAllOperations", RemoveAllOperations);
	Nan::SetPrototypeMethod(tpl, "removeAllOperations", RemoveAllOperations);

	Nan::SetPrototypeMethod(tpl, "RemoveOperation", RemoveOperation);
	Nan::SetPrototypeMethod(tpl, "removeOperation", RemoveOperation);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

}

void VtkRearrangeFieldsWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkRearrangeFields> native = vtkSmartPointer<vtkRearrangeFields>::New();
		VtkRearrangeFieldsWrap* obj = new VtkRearrangeFieldsWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkRearrangeFieldsWrap::AddOperation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRearrangeFieldsWrap *wrapper = ObjectWrap::Unwrap<VtkRearrangeFieldsWrap>(info.Holder());
	vtkRearrangeFields *native = (vtkRearrangeFields *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				Nan::Utf8String a2(info[2]);
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					Nan::Utf8String a3(info[3]);
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->AddOperation(
						*a0,
						*a1,
						*a2,
						*a3
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->AddOperation(
						info[0]->Int32Value(),
						*a1,
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->AddOperation(
						info[0]->Int32Value(),
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRearrangeFieldsWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRearrangeFieldsWrap *wrapper = ObjectWrap::Unwrap<VtkRearrangeFieldsWrap>(info.Holder());
	vtkRearrangeFields *native = (vtkRearrangeFields *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkRearrangeFieldsWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRearrangeFieldsWrap *wrapper = ObjectWrap::Unwrap<VtkRearrangeFieldsWrap>(info.Holder());
	vtkRearrangeFields *native = (vtkRearrangeFields *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRearrangeFieldsWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRearrangeFieldsWrap *wrapper = ObjectWrap::Unwrap<VtkRearrangeFieldsWrap>(info.Holder());
	vtkRearrangeFields *native = (vtkRearrangeFields *)wrapper->native.GetPointer();
	vtkRearrangeFields * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkRearrangeFieldsWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkRearrangeFieldsWrap *w = new VtkRearrangeFieldsWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkRearrangeFieldsWrap::RemoveAllOperations(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRearrangeFieldsWrap *wrapper = ObjectWrap::Unwrap<VtkRearrangeFieldsWrap>(info.Holder());
	vtkRearrangeFields *native = (vtkRearrangeFields *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllOperations();
}

void VtkRearrangeFieldsWrap::RemoveOperation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRearrangeFieldsWrap *wrapper = ObjectWrap::Unwrap<VtkRearrangeFieldsWrap>(info.Holder());
	vtkRearrangeFields *native = (vtkRearrangeFields *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				Nan::Utf8String a2(info[2]);
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					Nan::Utf8String a3(info[3]);
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->RemoveOperation(
						*a0,
						*a1,
						*a2,
						*a3
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
	}
	else if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->RemoveOperation(
						info[0]->Int32Value(),
						*a1,
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
		else if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() > 3 && info[3]->IsInt32())
				{
					int r;
					if(info.Length() != 4)
					{
						Nan::ThrowError("Too many parameters.");
						return;
					}
					r = native->RemoveOperation(
						info[0]->Int32Value(),
						info[1]->Int32Value(),
						info[2]->Int32Value(),
						info[3]->Int32Value()
					);
					info.GetReturnValue().Set(Nan::New(r));
					return;
				}
			}
		}
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->RemoveOperation(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkRearrangeFieldsWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkRearrangeFieldsWrap *wrapper = ObjectWrap::Unwrap<VtkRearrangeFieldsWrap>(info.Holder());
	vtkRearrangeFields *native = (vtkRearrangeFields *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkRearrangeFields * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkRearrangeFieldsWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkRearrangeFieldsWrap *w = new VtkRearrangeFieldsWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

