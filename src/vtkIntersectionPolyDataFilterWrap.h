/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKINTERSECTIONPOLYDATAFILTERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKINTERSECTIONPOLYDATAFILTERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkIntersectionPolyDataFilter.h>

#include "vtkPolyDataAlgorithmWrap.h"

class VtkIntersectionPolyDataFilterWrap : public VtkPolyDataAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkIntersectionPolyDataFilterWrap(vtkSmartPointer<vtkIntersectionPolyDataFilter>);
		VtkIntersectionPolyDataFilterWrap();
		~VtkIntersectionPolyDataFilterWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSplitFirstOutput(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSplitSecondOutput(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSplitFirstOutput(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSplitSecondOutput(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SplitFirstOutputOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SplitFirstOutputOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SplitSecondOutputOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SplitSecondOutputOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
