/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKFILEOUTPUTWINDOWWRAP_H
#define NATIVE_EXTENSION_VTK_VTKFILEOUTPUTWINDOWWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkFileOutputWindow.h>

#include "vtkOutputWindowWrap.h"

class VtkFileOutputWindowWrap : public VtkOutputWindowWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkFileOutputWindowWrap(vtkSmartPointer<vtkFileOutputWindow>);
		VtkFileOutputWindowWrap();
		~VtkFileOutputWindowWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AppendOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void AppendOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DisplayText(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void FlushOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void FlushOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAppend(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFlush(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetAppend(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFlush(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
