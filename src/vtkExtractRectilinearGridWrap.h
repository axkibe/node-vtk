/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKEXTRACTRECTILINEARGRIDWRAP_H
#define NATIVE_EXTENSION_VTK_VTKEXTRACTRECTILINEARGRIDWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkExtractRectilinearGrid.h>

#include "vtkRectilinearGridAlgorithmWrap.h"

class VtkExtractRectilinearGridWrap : public VtkRectilinearGridAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkExtractRectilinearGridWrap(vtkSmartPointer<vtkExtractRectilinearGrid>);
		VtkExtractRectilinearGridWrap();
		~VtkExtractRectilinearGridWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetIncludeBoundary(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IncludeBoundaryOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IncludeBoundaryOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetIncludeBoundary(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSampleRate(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetVOI(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
