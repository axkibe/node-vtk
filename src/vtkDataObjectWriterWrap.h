/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKDATAOBJECTWRITERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKDATAOBJECTWRITERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkDataObjectWriter.h>

#include "vtkWriterWrap.h"

class VtkDataObjectWriterWrap : public VtkWriterWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkDataObjectWriterWrap(vtkSmartPointer<vtkDataObjectWriter>);
		VtkDataObjectWriterWrap();
		~VtkDataObjectWriterWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFieldDataName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetFileType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetHeader(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOutputString(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOutputStringLength(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetWriteToOutputString(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFieldDataName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFileType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFileTypeToASCII(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetFileTypeToBinary(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetHeader(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetWriteToOutputString(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void WriteToOutputStringOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void WriteToOutputStringOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
