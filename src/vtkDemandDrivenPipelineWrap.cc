/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkExecutiveWrap.h"
#include "vtkDemandDrivenPipelineWrap.h"
#include "vtkObjectWrap.h"
#include "vtkInformationRequestKeyWrap.h"
#include "vtkInformationIntegerKeyWrap.h"
#include "vtkDataObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkDemandDrivenPipelineWrap::constructor;

VtkDemandDrivenPipelineWrap::VtkDemandDrivenPipelineWrap()
{ }

VtkDemandDrivenPipelineWrap::VtkDemandDrivenPipelineWrap(vtkSmartPointer<vtkDemandDrivenPipeline> _native)
{ native = _native; }

VtkDemandDrivenPipelineWrap::~VtkDemandDrivenPipelineWrap()
{ }

void VtkDemandDrivenPipelineWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkDemandDrivenPipelineWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkExecutiveWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkDemandDrivenPipeline").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("DemandDrivenPipeline").ToLocalChecked(),tpl->GetFunction());
}

void VtkDemandDrivenPipelineWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "DATA_NOT_GENERATED", DATA_NOT_GENERATED);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetReleaseDataFlag", GetReleaseDataFlag);
	Nan::SetPrototypeMethod(tpl, "getReleaseDataFlag", GetReleaseDataFlag);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewDataObject", NewDataObject);
	Nan::SetPrototypeMethod(tpl, "newDataObject", NewDataObject);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RELEASE_DATA", RELEASE_DATA);

	Nan::SetPrototypeMethod(tpl, "REQUEST_DATA", REQUEST_DATA);

	Nan::SetPrototypeMethod(tpl, "REQUEST_DATA_NOT_GENERATED", REQUEST_DATA_NOT_GENERATED);

	Nan::SetPrototypeMethod(tpl, "REQUEST_DATA_OBJECT", REQUEST_DATA_OBJECT);

	Nan::SetPrototypeMethod(tpl, "REQUEST_INFORMATION", REQUEST_INFORMATION);

	Nan::SetPrototypeMethod(tpl, "REQUEST_REGENERATE_INFORMATION", REQUEST_REGENERATE_INFORMATION);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetReleaseDataFlag", SetReleaseDataFlag);
	Nan::SetPrototypeMethod(tpl, "setReleaseDataFlag", SetReleaseDataFlag);

	Nan::SetPrototypeMethod(tpl, "Update", Update);
	Nan::SetPrototypeMethod(tpl, "update", Update);

	Nan::SetPrototypeMethod(tpl, "UpdateData", UpdateData);
	Nan::SetPrototypeMethod(tpl, "updateData", UpdateData);

	Nan::SetPrototypeMethod(tpl, "UpdateDataObject", UpdateDataObject);
	Nan::SetPrototypeMethod(tpl, "updateDataObject", UpdateDataObject);

	Nan::SetPrototypeMethod(tpl, "UpdateInformation", UpdateInformation);
	Nan::SetPrototypeMethod(tpl, "updateInformation", UpdateInformation);

	Nan::SetPrototypeMethod(tpl, "UpdatePipelineMTime", UpdatePipelineMTime);
	Nan::SetPrototypeMethod(tpl, "updatePipelineMTime", UpdatePipelineMTime);

}

void VtkDemandDrivenPipelineWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkDemandDrivenPipeline> native = vtkSmartPointer<vtkDemandDrivenPipeline>::New();
		VtkDemandDrivenPipelineWrap* obj = new VtkDemandDrivenPipelineWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkDemandDrivenPipelineWrap::DATA_NOT_GENERATED(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->DATA_NOT_GENERATED();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDemandDrivenPipelineWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkDemandDrivenPipelineWrap::GetReleaseDataFlag(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetReleaseDataFlag(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDemandDrivenPipelineWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDemandDrivenPipelineWrap::NewDataObject(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		vtkDataObject * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->NewDataObject(
			*a0
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkDataObjectWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDataObjectWrap *w = new VtkDataObjectWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDemandDrivenPipelineWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkDemandDrivenPipeline * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkDemandDrivenPipelineWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkDemandDrivenPipelineWrap *w = new VtkDemandDrivenPipelineWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDemandDrivenPipelineWrap::RELEASE_DATA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->RELEASE_DATA();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDemandDrivenPipelineWrap::REQUEST_DATA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationRequestKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->REQUEST_DATA();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationRequestKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationRequestKeyWrap *w = new VtkInformationRequestKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDemandDrivenPipelineWrap::REQUEST_DATA_NOT_GENERATED(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationRequestKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->REQUEST_DATA_NOT_GENERATED();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationRequestKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationRequestKeyWrap *w = new VtkInformationRequestKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDemandDrivenPipelineWrap::REQUEST_DATA_OBJECT(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationRequestKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->REQUEST_DATA_OBJECT();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationRequestKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationRequestKeyWrap *w = new VtkInformationRequestKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDemandDrivenPipelineWrap::REQUEST_INFORMATION(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationRequestKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->REQUEST_INFORMATION();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationRequestKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationRequestKeyWrap *w = new VtkInformationRequestKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDemandDrivenPipelineWrap::REQUEST_REGENERATE_INFORMATION(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->REQUEST_REGENERATE_INFORMATION();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkDemandDrivenPipelineWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkDemandDrivenPipeline * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkDemandDrivenPipelineWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkDemandDrivenPipelineWrap *w = new VtkDemandDrivenPipelineWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDemandDrivenPipelineWrap::SetReleaseDataFlag(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->SetReleaseDataFlag(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDemandDrivenPipelineWrap::Update(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->Update(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->Update();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDemandDrivenPipelineWrap::UpdateData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->UpdateData(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkDemandDrivenPipelineWrap::UpdateDataObject(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UpdateDataObject();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDemandDrivenPipelineWrap::UpdateInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UpdateInformation();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkDemandDrivenPipelineWrap::UpdatePipelineMTime(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkDemandDrivenPipelineWrap *wrapper = ObjectWrap::Unwrap<VtkDemandDrivenPipelineWrap>(info.Holder());
	vtkDemandDrivenPipeline *native = (vtkDemandDrivenPipeline *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->UpdatePipelineMTime();
	info.GetReturnValue().Set(Nan::New(r));
}

