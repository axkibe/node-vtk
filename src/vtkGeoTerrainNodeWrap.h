/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKGEOTERRAINNODEWRAP_H
#define NATIVE_EXTENSION_VTK_VTKGEOTERRAINNODEWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkGeoTerrainNode.h>

#include "vtkGeoTreeNodeWrap.h"

class VtkGeoTerrainNodeWrap : public VtkGeoTreeNodeWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkGeoTerrainNodeWrap(vtkSmartPointer<vtkGeoTerrainNode>);
		VtkGeoTerrainNodeWrap();
		~VtkGeoTerrainNodeWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void DeleteData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAltitude(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetBoundingSphereRadius(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetChild(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetError(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetGraticuleLevel(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetModel(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetParent(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetError(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetGraticuleLevel(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetModel(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetProjectionBounds(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ShallowCopy(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UpdateBoundingSphere(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
