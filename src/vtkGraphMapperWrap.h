/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKGRAPHMAPPERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKGRAPHMAPPERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkGraphMapper.h>

#include "vtkMapperWrap.h"

class VtkGraphMapperWrap : public VtkMapperWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkGraphMapperWrap(vtkSmartPointer<vtkGraphMapper>);
		VtkGraphMapperWrap();
		~VtkGraphMapperWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void AddIconType(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ClearIconTypes(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ColorEdgesOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ColorEdgesOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ColorVerticesOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ColorVerticesOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EdgeVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EdgeVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EnableEdgesByArrayOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EnableEdgesByArrayOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EnableVerticesByArrayOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void EnableVerticesByArrayOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetEdgeColorArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetEdgeLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetEnableEdgesByArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetEnableVerticesByArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetEnabledEdgesArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetEnabledVerticesArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetIconArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetIconTexture(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInput(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetScalingArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetVertexColorArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetVertexLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IconVisibilityOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IconVisibilityOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Render(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ScaledGlyphsOff(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ScaledGlyphsOn(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetEdgeColorArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetEnableEdgesByArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetEnableVerticesByArray(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetEnabledEdgesArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetEnabledVerticesArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetIconAlignment(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetIconArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetIconTexture(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetInputData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetScalingArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetVertexColorArrayName(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
