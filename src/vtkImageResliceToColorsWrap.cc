/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkImageResliceWrap.h"
#include "vtkImageResliceToColorsWrap.h"
#include "vtkObjectWrap.h"
#include "vtkScalarsToColorsWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkImageResliceToColorsWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkImageResliceToColorsWrap::ptpl;

VtkImageResliceToColorsWrap::VtkImageResliceToColorsWrap()
{ }

VtkImageResliceToColorsWrap::VtkImageResliceToColorsWrap(vtkSmartPointer<vtkImageResliceToColors> _native)
{ native = _native; }

VtkImageResliceToColorsWrap::~VtkImageResliceToColorsWrap()
{ }

void VtkImageResliceToColorsWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkImageResliceWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkImageResliceWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkImageResliceToColorsWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkImageResliceToColors").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ImageResliceToColors").ToLocalChecked(),tpl->GetFunction());
}

void VtkImageResliceToColorsWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "BypassOff", BypassOff);
	Nan::SetPrototypeMethod(tpl, "bypassOff", BypassOff);

	Nan::SetPrototypeMethod(tpl, "BypassOn", BypassOn);
	Nan::SetPrototypeMethod(tpl, "bypassOn", BypassOn);

	Nan::SetPrototypeMethod(tpl, "GetBypass", GetBypass);
	Nan::SetPrototypeMethod(tpl, "getBypass", GetBypass);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetLookupTable", GetLookupTable);
	Nan::SetPrototypeMethod(tpl, "getLookupTable", GetLookupTable);

	Nan::SetPrototypeMethod(tpl, "GetOutputFormat", GetOutputFormat);
	Nan::SetPrototypeMethod(tpl, "getOutputFormat", GetOutputFormat);

	Nan::SetPrototypeMethod(tpl, "GetOutputFormatMaxValue", GetOutputFormatMaxValue);
	Nan::SetPrototypeMethod(tpl, "getOutputFormatMaxValue", GetOutputFormatMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetOutputFormatMinValue", GetOutputFormatMinValue);
	Nan::SetPrototypeMethod(tpl, "getOutputFormatMinValue", GetOutputFormatMinValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBypass", SetBypass);
	Nan::SetPrototypeMethod(tpl, "setBypass", SetBypass);

	Nan::SetPrototypeMethod(tpl, "SetLookupTable", SetLookupTable);
	Nan::SetPrototypeMethod(tpl, "setLookupTable", SetLookupTable);

	Nan::SetPrototypeMethod(tpl, "SetOutputFormat", SetOutputFormat);
	Nan::SetPrototypeMethod(tpl, "setOutputFormat", SetOutputFormat);

	Nan::SetPrototypeMethod(tpl, "SetOutputFormatToLuminance", SetOutputFormatToLuminance);
	Nan::SetPrototypeMethod(tpl, "setOutputFormatToLuminance", SetOutputFormatToLuminance);

	Nan::SetPrototypeMethod(tpl, "SetOutputFormatToLuminanceAlpha", SetOutputFormatToLuminanceAlpha);
	Nan::SetPrototypeMethod(tpl, "setOutputFormatToLuminanceAlpha", SetOutputFormatToLuminanceAlpha);

	Nan::SetPrototypeMethod(tpl, "SetOutputFormatToRGB", SetOutputFormatToRGB);
	Nan::SetPrototypeMethod(tpl, "setOutputFormatToRGB", SetOutputFormatToRGB);

	Nan::SetPrototypeMethod(tpl, "SetOutputFormatToRGBA", SetOutputFormatToRGBA);
	Nan::SetPrototypeMethod(tpl, "setOutputFormatToRGBA", SetOutputFormatToRGBA);

}

void VtkImageResliceToColorsWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageResliceToColors> native = vtkSmartPointer<vtkImageResliceToColors>::New();
		VtkImageResliceToColorsWrap* obj = new VtkImageResliceToColorsWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageResliceToColorsWrap::BypassOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BypassOff();
}

void VtkImageResliceToColorsWrap::BypassOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BypassOn();
}

void VtkImageResliceToColorsWrap::GetBypass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBypass();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageResliceToColorsWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageResliceToColorsWrap::GetLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	vtkScalarsToColors * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetLookupTable();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkScalarsToColorsWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkScalarsToColorsWrap *w = new VtkScalarsToColorsWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageResliceToColorsWrap::GetOutputFormat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputFormat();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageResliceToColorsWrap::GetOutputFormatMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputFormatMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageResliceToColorsWrap::GetOutputFormatMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputFormatMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageResliceToColorsWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageResliceToColorsWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	vtkImageResliceToColors * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImageResliceToColorsWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageResliceToColorsWrap *w = new VtkImageResliceToColorsWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageResliceToColorsWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageResliceToColors * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkImageResliceToColorsWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageResliceToColorsWrap *w = new VtkImageResliceToColorsWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageResliceToColorsWrap::SetBypass(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBypass(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageResliceToColorsWrap::SetLookupTable(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkScalarsToColorsWrap *a0 = ObjectWrap::Unwrap<VtkScalarsToColorsWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetLookupTable(
			(vtkScalarsToColors *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageResliceToColorsWrap::SetOutputFormat(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputFormat(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageResliceToColorsWrap::SetOutputFormatToLuminance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputFormatToLuminance();
}

void VtkImageResliceToColorsWrap::SetOutputFormatToLuminanceAlpha(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputFormatToLuminanceAlpha();
}

void VtkImageResliceToColorsWrap::SetOutputFormatToRGB(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputFormatToRGB();
}

void VtkImageResliceToColorsWrap::SetOutputFormatToRGBA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageResliceToColorsWrap *wrapper = ObjectWrap::Unwrap<VtkImageResliceToColorsWrap>(info.Holder());
	vtkImageResliceToColors *native = (vtkImageResliceToColors *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->SetOutputFormatToRGBA();
}

