/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKVOLUMERAYCASTCOMPOSITEFUNCTIONWRAP_H
#define NATIVE_EXTENSION_VTK_VTKVOLUMERAYCASTCOMPOSITEFUNCTIONWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkVolumeRayCastCompositeFunction.h>

#include "vtkVolumeRayCastFunctionWrap.h"

class VtkVolumeRayCastCompositeFunctionWrap : public VtkVolumeRayCastFunctionWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkVolumeRayCastCompositeFunctionWrap(vtkSmartPointer<vtkVolumeRayCastCompositeFunction>);
		VtkVolumeRayCastCompositeFunctionWrap();
		~VtkVolumeRayCastCompositeFunctionWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCompositeMethod(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCompositeMethodAsString(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCompositeMethodMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetCompositeMethodMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCompositeMethod(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCompositeMethodToClassifyFirst(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCompositeMethodToInterpolateFirst(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
