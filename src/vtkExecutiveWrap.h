/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKEXECUTIVEWRAP_H
#define NATIVE_EXTENSION_VTK_VTKEXECUTIVEWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkExecutive.h>

#include "vtkObjectWrap.h"

class VtkExecutiveWrap : public VtkObjectWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkExecutiveWrap(vtkSmartPointer<vtkExecutive>);
		VtkExecutiveWrap();
		~VtkExecutiveWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void ALGORITHM_AFTER_FORWARD(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ALGORITHM_BEFORE_FORWARD(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ALGORITHM_DIRECTION(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void CONSUMERS(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void FORWARD_DIRECTION(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void FROM_OUTPUT_PORT(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetAlgorithm(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInputData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInputExecutive(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetInputInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfInputConnections(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfInputPorts(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetNumberOfOutputPorts(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOutputData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOutputInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void KEYS_TO_COPY(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void PRODUCER(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetOutputData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSharedOutputInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Update(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void UpdateInformation(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
