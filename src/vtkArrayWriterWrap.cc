/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkWriterWrap.h"
#include "vtkArrayWriterWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkArrayWriterWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkArrayWriterWrap::ptpl;

VtkArrayWriterWrap::VtkArrayWriterWrap()
{ }

VtkArrayWriterWrap::VtkArrayWriterWrap(vtkSmartPointer<vtkArrayWriter> _native)
{ native = _native; }

VtkArrayWriterWrap::~VtkArrayWriterWrap()
{ }

void VtkArrayWriterWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkWriterWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkWriterWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkArrayWriterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkArrayWriter").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ArrayWriter").ToLocalChecked(),tpl->GetFunction());
}

void VtkArrayWriterWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "BinaryOff", BinaryOff);
	Nan::SetPrototypeMethod(tpl, "binaryOff", BinaryOff);

	Nan::SetPrototypeMethod(tpl, "BinaryOn", BinaryOn);
	Nan::SetPrototypeMethod(tpl, "binaryOn", BinaryOn);

	Nan::SetPrototypeMethod(tpl, "GetBinary", GetBinary);
	Nan::SetPrototypeMethod(tpl, "getBinary", GetBinary);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetFileName", GetFileName);
	Nan::SetPrototypeMethod(tpl, "getFileName", GetFileName);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBinary", SetBinary);
	Nan::SetPrototypeMethod(tpl, "setBinary", SetBinary);

	Nan::SetPrototypeMethod(tpl, "SetFileName", SetFileName);
	Nan::SetPrototypeMethod(tpl, "setFileName", SetFileName);

	Nan::SetPrototypeMethod(tpl, "Write", Write);
	Nan::SetPrototypeMethod(tpl, "write", Write);

	Nan::SetPrototypeMethod(tpl, "WriteToOutputStringOff", WriteToOutputStringOff);
	Nan::SetPrototypeMethod(tpl, "writeToOutputStringOff", WriteToOutputStringOff);

	Nan::SetPrototypeMethod(tpl, "WriteToOutputStringOn", WriteToOutputStringOn);
	Nan::SetPrototypeMethod(tpl, "writeToOutputStringOn", WriteToOutputStringOn);

}

void VtkArrayWriterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkArrayWriter> native = vtkSmartPointer<vtkArrayWriter>::New();
		VtkArrayWriterWrap* obj = new VtkArrayWriterWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkArrayWriterWrap::BinaryOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BinaryOff();
}

void VtkArrayWriterWrap::BinaryOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BinaryOn();
}

void VtkArrayWriterWrap::GetBinary(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBinary();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkArrayWriterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkArrayWriterWrap::GetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetFileName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkArrayWriterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkArrayWriterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	vtkArrayWriter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkArrayWriterWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkArrayWriterWrap *w = new VtkArrayWriterWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkArrayWriterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkArrayWriter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkArrayWriterWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkArrayWriterWrap *w = new VtkArrayWriterWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkArrayWriterWrap::SetBinary(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBinary(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkArrayWriterWrap::SetFileName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetFileName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkArrayWriterWrap::Write(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->Write();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkArrayWriterWrap::WriteToOutputStringOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->WriteToOutputStringOff();
}

void VtkArrayWriterWrap::WriteToOutputStringOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkArrayWriterWrap *wrapper = ObjectWrap::Unwrap<VtkArrayWriterWrap>(info.Holder());
	vtkArrayWriter *native = (vtkArrayWriter *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->WriteToOutputStringOn();
}

