/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkObject.h>

#include "vtkObjectWrap.h"

using namespace v8;

Nan::Persistent<v8::Function> VtkObjectWrap::constructor;

VtkObjectWrap::VtkObjectWrap()
{ }

VtkObjectWrap::VtkObjectWrap(vtkSmartPointer<vtkObject> _native)
{ native = _native; }

VtkObjectWrap::~VtkObjectWrap()
{ }

void VtkObjectWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkObjectWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	InitTpl(tpl);
	VtkObjectBaseWrap::InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkObject").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("object").ToLocalChecked(),tpl->GetFunction());
}

void VtkObjectWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "DebugOn", DebugOn);
	Nan::SetPrototypeMethod(tpl, "debugOn", DebugOn);

	Nan::SetPrototypeMethod(tpl, "DebugOff", DebugOff);
	Nan::SetPrototypeMethod(tpl, "debugOff", DebugOff);

	Nan::SetPrototypeMethod(tpl, "BreakOnError", BreakOnError);
	Nan::SetPrototypeMethod(tpl, "breakOnError", BreakOnError);

	Nan::SetPrototypeMethod(tpl, "Modified", Modified);
	Nan::SetPrototypeMethod(tpl, "modified", Modified);

	Nan::SetPrototypeMethod(tpl, "SetGlobalWarningDisplay", SetGlobalWarningDisplay);
	Nan::SetPrototypeMethod(tpl, "setGlobalWarningDisplay", SetGlobalWarningDisplay);

	Nan::SetPrototypeMethod(tpl, "GlobalWarningDisplayOn", GlobalWarningDisplayOn);
	Nan::SetPrototypeMethod(tpl, "globalWarningDisplayOn", GlobalWarningDisplayOn);

	Nan::SetPrototypeMethod(tpl, "GlobalWarningDisplayOff", GlobalWarningDisplayOff);
	Nan::SetPrototypeMethod(tpl, "globalWarningDisplayOff", GlobalWarningDisplayOff);

	Nan::SetPrototypeMethod(tpl, "GetGlobalWarningDisplay", GetGlobalWarningDisplay);
	Nan::SetPrototypeMethod(tpl, "getGlobalWarningDisplay", GetGlobalWarningDisplay);

	Nan::SetPrototypeMethod(tpl, "RemoveAllObservers", RemoveAllObservers);
	Nan::SetPrototypeMethod(tpl, "removeAllObservers", RemoveAllObservers);

}

void VtkObjectWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	vtkSmartPointer<vtkObject> native = vtkSmartPointer<vtkObject>::New();
	VtkObjectWrap* obj = new VtkObjectWrap(native);
	obj->Wrap(info.This());
	info.GetReturnValue().Set(info.This());
}

void VtkObjectWrap::DebugOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObjectWrap *wrapper = ObjectWrap::Unwrap<VtkObjectWrap>(info.Holder());
	vtkObject *native = (vtkObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DebugOn();
}

void VtkObjectWrap::DebugOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObjectWrap *wrapper = ObjectWrap::Unwrap<VtkObjectWrap>(info.Holder());
	vtkObject *native = (vtkObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DebugOff();
}

void VtkObjectWrap::BreakOnError(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObjectWrap *wrapper = ObjectWrap::Unwrap<VtkObjectWrap>(info.Holder());
	vtkObject *native = (vtkObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->BreakOnError();
}

void VtkObjectWrap::Modified(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObjectWrap *wrapper = ObjectWrap::Unwrap<VtkObjectWrap>(info.Holder());
	vtkObject *native = (vtkObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Modified();
}

void VtkObjectWrap::SetGlobalWarningDisplay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObjectWrap *wrapper = ObjectWrap::Unwrap<VtkObjectWrap>(info.Holder());
	vtkObject *native = (vtkObject *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetGlobalWarningDisplay(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkObjectWrap::GlobalWarningDisplayOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObjectWrap *wrapper = ObjectWrap::Unwrap<VtkObjectWrap>(info.Holder());
	vtkObject *native = (vtkObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GlobalWarningDisplayOn();
}

void VtkObjectWrap::GlobalWarningDisplayOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObjectWrap *wrapper = ObjectWrap::Unwrap<VtkObjectWrap>(info.Holder());
	vtkObject *native = (vtkObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->GlobalWarningDisplayOff();
}

void VtkObjectWrap::GetGlobalWarningDisplay(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObjectWrap *wrapper = ObjectWrap::Unwrap<VtkObjectWrap>(info.Holder());
	vtkObject *native = (vtkObject *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetGlobalWarningDisplay();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkObjectWrap::RemoveAllObservers(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkObjectWrap *wrapper = ObjectWrap::Unwrap<VtkObjectWrap>(info.Holder());
	vtkObject *native = (vtkObject *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllObservers();
}

