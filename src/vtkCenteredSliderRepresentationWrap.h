/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKCENTEREDSLIDERREPRESENTATIONWRAP_H
#define NATIVE_EXTENSION_VTK_VTKCENTEREDSLIDERREPRESENTATIONWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkCenteredSliderRepresentation.h>

#include "vtkSliderRepresentationWrap.h"

class VtkCenteredSliderRepresentationWrap : public VtkSliderRepresentationWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkCenteredSliderRepresentationWrap(vtkSmartPointer<vtkCenteredSliderRepresentation>);
		VtkCenteredSliderRepresentationWrap();
		~VtkCenteredSliderRepresentationWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void BuildRepresentation(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ComputeInteractionState(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetActors(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetLabelProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPoint1Coordinate(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPoint2Coordinate(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSelectedProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSliderProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTitleText(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetTubeProperty(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void Highlight(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void ReleaseGraphicsResources(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RenderOpaqueGeometry(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void RenderOverlay(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetTitleText(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
