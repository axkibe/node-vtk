/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkAbstractArrayWrap.h"
#include "vtkUnicodeStringArrayWrap.h"
#include "vtkObjectWrap.h"
#include "vtkIdListWrap.h"
#include "vtkArrayIteratorWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkUnicodeStringArrayWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkUnicodeStringArrayWrap::ptpl;

VtkUnicodeStringArrayWrap::VtkUnicodeStringArrayWrap()
{ }

VtkUnicodeStringArrayWrap::VtkUnicodeStringArrayWrap(vtkSmartPointer<vtkUnicodeStringArray> _native)
{ native = _native; }

VtkUnicodeStringArrayWrap::~VtkUnicodeStringArrayWrap()
{ }

void VtkUnicodeStringArrayWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkUnicodeStringArray").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("UnicodeStringArray").ToLocalChecked(), ConstructorGetter);
}

void VtkUnicodeStringArrayWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkUnicodeStringArrayWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkAbstractArrayWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkAbstractArrayWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkUnicodeStringArrayWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "ClearLookup", ClearLookup);
	Nan::SetPrototypeMethod(tpl, "clearLookup", ClearLookup);

	Nan::SetPrototypeMethod(tpl, "DataChanged", DataChanged);
	Nan::SetPrototypeMethod(tpl, "dataChanged", DataChanged);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetDataType", GetDataType);
	Nan::SetPrototypeMethod(tpl, "getDataType", GetDataType);

	Nan::SetPrototypeMethod(tpl, "GetDataTypeSize", GetDataTypeSize);
	Nan::SetPrototypeMethod(tpl, "getDataTypeSize", GetDataTypeSize);

	Nan::SetPrototypeMethod(tpl, "GetElementComponentSize", GetElementComponentSize);
	Nan::SetPrototypeMethod(tpl, "getElementComponentSize", GetElementComponentSize);

	Nan::SetPrototypeMethod(tpl, "Initialize", Initialize);
	Nan::SetPrototypeMethod(tpl, "initialize", Initialize);

	Nan::SetPrototypeMethod(tpl, "InsertNextUTF8Value", InsertNextUTF8Value);
	Nan::SetPrototypeMethod(tpl, "insertNextUTF8Value", InsertNextUTF8Value);

	Nan::SetPrototypeMethod(tpl, "InsertTuples", InsertTuples);
	Nan::SetPrototypeMethod(tpl, "insertTuples", InsertTuples);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "IsNumeric", IsNumeric);
	Nan::SetPrototypeMethod(tpl, "isNumeric", IsNumeric);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "NewIterator", NewIterator);
	Nan::SetPrototypeMethod(tpl, "newIterator", NewIterator);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "Squeeze", Squeeze);
	Nan::SetPrototypeMethod(tpl, "squeeze", Squeeze);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );
}

void VtkUnicodeStringArrayWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkUnicodeStringArray> native = vtkSmartPointer<vtkUnicodeStringArray>::New();
		VtkUnicodeStringArrayWrap* obj = new VtkUnicodeStringArrayWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkUnicodeStringArrayWrap::ClearLookup(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ClearLookup();
}

void VtkUnicodeStringArrayWrap::DataChanged(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->DataChanged();
}

void VtkUnicodeStringArrayWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkAbstractArrayWrap::ptpl))->HasInstance(info[0]))
	{
		VtkAbstractArrayWrap *a0 = ObjectWrap::Unwrap<VtkAbstractArrayWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DeepCopy(
			(vtkAbstractArray *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnicodeStringArrayWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkUnicodeStringArrayWrap::GetDataType(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataType();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnicodeStringArrayWrap::GetDataTypeSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDataTypeSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnicodeStringArrayWrap::GetElementComponentSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetElementComponentSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnicodeStringArrayWrap::Initialize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Initialize();
}

void VtkUnicodeStringArrayWrap::InsertNextUTF8Value(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->InsertNextUTF8Value(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnicodeStringArrayWrap::InsertTuples(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkIdListWrap::ptpl))->HasInstance(info[0]))
	{
		VtkIdListWrap *a0 = ObjectWrap::Unwrap<VtkIdListWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsObject() && (Nan::New(VtkIdListWrap::ptpl))->HasInstance(info[1]))
		{
			VtkIdListWrap *a1 = ObjectWrap::Unwrap<VtkIdListWrap>(info[1]->ToObject());
			if(info.Length() > 2 && info[2]->IsObject() && (Nan::New(VtkAbstractArrayWrap::ptpl))->HasInstance(info[2]))
			{
				VtkAbstractArrayWrap *a2 = ObjectWrap::Unwrap<VtkAbstractArrayWrap>(info[2]->ToObject());
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->InsertTuples(
					(vtkIdList *) a0->native.GetPointer(),
					(vtkIdList *) a1->native.GetPointer(),
					(vtkAbstractArray *) a2->native.GetPointer()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnicodeStringArrayWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnicodeStringArrayWrap::IsNumeric(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->IsNumeric();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkUnicodeStringArrayWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	vtkUnicodeStringArray * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkUnicodeStringArrayWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkUnicodeStringArrayWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkUnicodeStringArrayWrap *w = new VtkUnicodeStringArrayWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkUnicodeStringArrayWrap::NewIterator(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	vtkArrayIterator * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewIterator();
		VtkArrayIteratorWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkArrayIteratorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkArrayIteratorWrap *w = new VtkArrayIteratorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkUnicodeStringArrayWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkUnicodeStringArray * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkUnicodeStringArrayWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkUnicodeStringArrayWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkUnicodeStringArrayWrap *w = new VtkUnicodeStringArrayWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkUnicodeStringArrayWrap::Squeeze(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkUnicodeStringArrayWrap *wrapper = ObjectWrap::Unwrap<VtkUnicodeStringArrayWrap>(info.Holder());
	vtkUnicodeStringArray *native = (vtkUnicodeStringArray *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->Squeeze();
}

