/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKPROGRAMMABLEGLYPHFILTERWRAP_H
#define NATIVE_EXTENSION_VTK_VTKPROGRAMMABLEGLYPHFILTERWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkProgrammableGlyphFilter.h>

#include "vtkPolyDataAlgorithmWrap.h"

class VtkProgrammableGlyphFilterWrap : public VtkPolyDataAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitPtpl();
		static void ConstructorGetter(
			v8::Local<v8::String> property,
			const Nan::PropertyCallbackInfo<v8::Value>& info);

		VtkProgrammableGlyphFilterWrap(vtkSmartPointer<vtkProgrammableGlyphFilter>);
		VtkProgrammableGlyphFilterWrap();
		~VtkProgrammableGlyphFilterWrap( );
		static Nan::Persistent<v8::Function> constructor;
		static Nan::Persistent<v8::FunctionTemplate> ptpl;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetColorMode(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetColorModeAsString(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetPointData(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetSource(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetColorMode(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetColorModeToColorByInput(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetColorModeToColorBySource(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSourceConnection(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetSourceData(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
