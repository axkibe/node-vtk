/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#ifndef NATIVE_EXTENSION_VTK_VTKCUBESOURCEWRAP_H
#define NATIVE_EXTENSION_VTK_VTKCUBESOURCEWRAP_H

#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkCubeSource.h>

#include "vtkPolyDataAlgorithmWrap.h"

class VtkCubeSourceWrap : public VtkPolyDataAlgorithmWrap
{
	public:
		using Nan::ObjectWrap::Wrap;
		static void Init(v8::Local<v8::Object> exports);
		static void InitTpl(v8::Local<v8::FunctionTemplate> tpl);

		VtkCubeSourceWrap(vtkSmartPointer<vtkCubeSource>);
		VtkCubeSourceWrap();
		~VtkCubeSourceWrap( );
		static Nan::Persistent<v8::Function> constructor;

	private:
		static void New(const Nan::FunctionCallbackInfo<v8::Value>& info);

		static void GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void IsA(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetXLength(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetXLengthMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetXLengthMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetXLength(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetYLength(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetYLengthMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetYLengthMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetYLength(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetZLength(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetZLengthMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetZLengthMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetZLength(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetCenter(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetBounds(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void SetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info);
		static void GetOutputPointsPrecision(const Nan::FunctionCallbackInfo<v8::Value>& info);
};

#endif
