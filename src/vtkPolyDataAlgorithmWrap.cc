/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>

#include <vtkSmartPointer.h>
#include <vtkPolyDataAlgorithm.h>

#include "vtkPolyDataAlgorithmWrap.h"

using namespace v8;

Nan::Persistent<v8::Function> VtkPolyDataAlgorithmWrap::constructor;

VtkPolyDataAlgorithmWrap::VtkPolyDataAlgorithmWrap()
{ }

VtkPolyDataAlgorithmWrap::VtkPolyDataAlgorithmWrap(vtkSmartPointer<vtkPolyDataAlgorithm> _native)
{ native = _native; }

VtkPolyDataAlgorithmWrap::~VtkPolyDataAlgorithmWrap()
{ }

void VtkPolyDataAlgorithmWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkPolyDataAlgorithmWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkObjectBaseWrap::InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkPolyDataAlgorithm").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("polyDataAlgorithm").ToLocalChecked(),tpl->GetFunction());
}

void VtkPolyDataAlgorithmWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
}

void VtkPolyDataAlgorithmWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	vtkSmartPointer<vtkPolyDataAlgorithm> native = vtkSmartPointer<vtkPolyDataAlgorithm>::New();
	VtkPolyDataAlgorithmWrap* obj = new VtkPolyDataAlgorithmWrap(native);
	obj->Wrap(info.This());
	info.GetReturnValue().Set(info.This());
}

