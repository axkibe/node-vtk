/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkImplicitFunctionWrap.h"
#include "vtkImplicitSumWrap.h"
#include "vtkObjectWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkImplicitSumWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkImplicitSumWrap::ptpl;

VtkImplicitSumWrap::VtkImplicitSumWrap()
{ }

VtkImplicitSumWrap::VtkImplicitSumWrap(vtkSmartPointer<vtkImplicitSum> _native)
{ native = _native; }

VtkImplicitSumWrap::~VtkImplicitSumWrap()
{ }

void VtkImplicitSumWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::SetAccessor(exports, Nan::New("vtkImplicitSum").ToLocalChecked(), ConstructorGetter);
	Nan::SetAccessor(exports, Nan::New("ImplicitSum").ToLocalChecked(), ConstructorGetter);
}

void VtkImplicitSumWrap::ConstructorGetter(
	v8::Local<v8::String> property,
	const Nan::PropertyCallbackInfo<v8::Value>& info)
{
	InitPtpl();
	info.GetReturnValue().Set(Nan::New(ptpl)->GetFunction());
}

void VtkImplicitSumWrap::InitPtpl()
{
	if (!ptpl.IsEmpty()) return;
	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkImplicitFunctionWrap::InitPtpl( );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkImplicitFunctionWrap::ptpl));
	tpl->SetClassName(Nan::New("VtkImplicitSumWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	Nan::SetPrototypeMethod(tpl, "AddFunction", AddFunction);
	Nan::SetPrototypeMethod(tpl, "addFunction", AddFunction);

	Nan::SetPrototypeMethod(tpl, "EvaluateFunction", EvaluateFunction);
	Nan::SetPrototypeMethod(tpl, "evaluateFunction", EvaluateFunction);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetNormalizeByWeight", GetNormalizeByWeight);
	Nan::SetPrototypeMethod(tpl, "getNormalizeByWeight", GetNormalizeByWeight);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "NormalizeByWeightOff", NormalizeByWeightOff);
	Nan::SetPrototypeMethod(tpl, "normalizeByWeightOff", NormalizeByWeightOff);

	Nan::SetPrototypeMethod(tpl, "NormalizeByWeightOn", NormalizeByWeightOn);
	Nan::SetPrototypeMethod(tpl, "normalizeByWeightOn", NormalizeByWeightOn);

	Nan::SetPrototypeMethod(tpl, "RemoveAllFunctions", RemoveAllFunctions);
	Nan::SetPrototypeMethod(tpl, "removeAllFunctions", RemoveAllFunctions);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetFunctionWeight", SetFunctionWeight);
	Nan::SetPrototypeMethod(tpl, "setFunctionWeight", SetFunctionWeight);

	Nan::SetPrototypeMethod(tpl, "SetNormalizeByWeight", SetNormalizeByWeight);
	Nan::SetPrototypeMethod(tpl, "setNormalizeByWeight", SetNormalizeByWeight);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );
}

void VtkImplicitSumWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImplicitSum> native = vtkSmartPointer<vtkImplicitSum>::New();
		VtkImplicitSumWrap* obj = new VtkImplicitSumWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImplicitSumWrap::AddFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitSumWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitSumWrap>(info.Holder());
	vtkImplicitSum *native = (vtkImplicitSum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImplicitFunctionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImplicitFunctionWrap *a0 = ObjectWrap::Unwrap<VtkImplicitFunctionWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->AddFunction(
				(vtkImplicitFunction *) a0->native.GetPointer(),
				info[1]->NumberValue()
			);
			return;
		}
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddFunction(
			(vtkImplicitFunction *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitSumWrap::EvaluateFunction(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitSumWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitSumWrap>(info.Holder());
	vtkImplicitSum *native = (vtkImplicitSum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				double r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->EvaluateFunction(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				info.GetReturnValue().Set(Nan::New(r));
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitSumWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitSumWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitSumWrap>(info.Holder());
	vtkImplicitSum *native = (vtkImplicitSum *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImplicitSumWrap::GetNormalizeByWeight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitSumWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitSumWrap>(info.Holder());
	vtkImplicitSum *native = (vtkImplicitSum *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNormalizeByWeight();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImplicitSumWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitSumWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitSumWrap>(info.Holder());
	vtkImplicitSum *native = (vtkImplicitSum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitSumWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitSumWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitSumWrap>(info.Holder());
	vtkImplicitSum *native = (vtkImplicitSum *)wrapper->native.GetPointer();
	vtkImplicitSum * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
		VtkImplicitSumWrap::InitPtpl();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImplicitSumWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImplicitSumWrap *w = new VtkImplicitSumWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImplicitSumWrap::NormalizeByWeightOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitSumWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitSumWrap>(info.Holder());
	vtkImplicitSum *native = (vtkImplicitSum *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalizeByWeightOff();
}

void VtkImplicitSumWrap::NormalizeByWeightOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitSumWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitSumWrap>(info.Holder());
	vtkImplicitSum *native = (vtkImplicitSum *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->NormalizeByWeightOn();
}

void VtkImplicitSumWrap::RemoveAllFunctions(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitSumWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitSumWrap>(info.Holder());
	vtkImplicitSum *native = (vtkImplicitSum *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllFunctions();
}

void VtkImplicitSumWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitSumWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitSumWrap>(info.Holder());
	vtkImplicitSum *native = (vtkImplicitSum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkObjectWrap::ptpl))->HasInstance(info[0]))
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImplicitSum * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
			VtkImplicitSumWrap::InitPtpl();
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkImplicitSumWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImplicitSumWrap *w = new VtkImplicitSumWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitSumWrap::SetFunctionWeight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitSumWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitSumWrap>(info.Holder());
	vtkImplicitSum *native = (vtkImplicitSum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject() && (Nan::New(VtkImplicitFunctionWrap::ptpl))->HasInstance(info[0]))
	{
		VtkImplicitFunctionWrap *a0 = ObjectWrap::Unwrap<VtkImplicitFunctionWrap>(info[0]->ToObject());
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetFunctionWeight(
				(vtkImplicitFunction *) a0->native.GetPointer(),
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImplicitSumWrap::SetNormalizeByWeight(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImplicitSumWrap *wrapper = ObjectWrap::Unwrap<VtkImplicitSumWrap>(info.Holder());
	vtkImplicitSum *native = (vtkImplicitSum *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNormalizeByWeight(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

