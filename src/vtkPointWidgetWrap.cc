/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtk3DWidgetWrap.h"
#include "vtkPointWidgetWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPolyDataWrap.h"
#include "vtkPropertyWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkPointWidgetWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkPointWidgetWrap::ptpl;

VtkPointWidgetWrap::VtkPointWidgetWrap()
{ }

VtkPointWidgetWrap::VtkPointWidgetWrap(vtkSmartPointer<vtkPointWidget> _native)
{ native = _native; }

VtkPointWidgetWrap::~VtkPointWidgetWrap()
{ }

void VtkPointWidgetWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	Vtk3DWidgetWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(Vtk3DWidgetWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkPointWidgetWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkPointWidget").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("PointWidget").ToLocalChecked(),tpl->GetFunction());
}

void VtkPointWidgetWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "AllOff", AllOff);
	Nan::SetPrototypeMethod(tpl, "allOff", AllOff);

	Nan::SetPrototypeMethod(tpl, "AllOn", AllOn);
	Nan::SetPrototypeMethod(tpl, "allOn", AllOn);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetHotSpotSize", GetHotSpotSize);
	Nan::SetPrototypeMethod(tpl, "getHotSpotSize", GetHotSpotSize);

	Nan::SetPrototypeMethod(tpl, "GetHotSpotSizeMaxValue", GetHotSpotSizeMaxValue);
	Nan::SetPrototypeMethod(tpl, "getHotSpotSizeMaxValue", GetHotSpotSizeMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetHotSpotSizeMinValue", GetHotSpotSizeMinValue);
	Nan::SetPrototypeMethod(tpl, "getHotSpotSizeMinValue", GetHotSpotSizeMinValue);

	Nan::SetPrototypeMethod(tpl, "GetOutline", GetOutline);
	Nan::SetPrototypeMethod(tpl, "getOutline", GetOutline);

	Nan::SetPrototypeMethod(tpl, "GetPolyData", GetPolyData);
	Nan::SetPrototypeMethod(tpl, "getPolyData", GetPolyData);

	Nan::SetPrototypeMethod(tpl, "GetProperty", GetProperty);
	Nan::SetPrototypeMethod(tpl, "getProperty", GetProperty);

	Nan::SetPrototypeMethod(tpl, "GetSelectedProperty", GetSelectedProperty);
	Nan::SetPrototypeMethod(tpl, "getSelectedProperty", GetSelectedProperty);

	Nan::SetPrototypeMethod(tpl, "GetTranslationMode", GetTranslationMode);
	Nan::SetPrototypeMethod(tpl, "getTranslationMode", GetTranslationMode);

	Nan::SetPrototypeMethod(tpl, "GetXShadows", GetXShadows);
	Nan::SetPrototypeMethod(tpl, "getXShadows", GetXShadows);

	Nan::SetPrototypeMethod(tpl, "GetYShadows", GetYShadows);
	Nan::SetPrototypeMethod(tpl, "getYShadows", GetYShadows);

	Nan::SetPrototypeMethod(tpl, "GetZShadows", GetZShadows);
	Nan::SetPrototypeMethod(tpl, "getZShadows", GetZShadows);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "OutlineOff", OutlineOff);
	Nan::SetPrototypeMethod(tpl, "outlineOff", OutlineOff);

	Nan::SetPrototypeMethod(tpl, "OutlineOn", OutlineOn);
	Nan::SetPrototypeMethod(tpl, "outlineOn", OutlineOn);

	Nan::SetPrototypeMethod(tpl, "PlaceWidget", PlaceWidget);
	Nan::SetPrototypeMethod(tpl, "placeWidget", PlaceWidget);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetEnabled", SetEnabled);
	Nan::SetPrototypeMethod(tpl, "setEnabled", SetEnabled);

	Nan::SetPrototypeMethod(tpl, "SetHotSpotSize", SetHotSpotSize);
	Nan::SetPrototypeMethod(tpl, "setHotSpotSize", SetHotSpotSize);

	Nan::SetPrototypeMethod(tpl, "SetOutline", SetOutline);
	Nan::SetPrototypeMethod(tpl, "setOutline", SetOutline);

	Nan::SetPrototypeMethod(tpl, "SetPosition", SetPosition);
	Nan::SetPrototypeMethod(tpl, "setPosition", SetPosition);

	Nan::SetPrototypeMethod(tpl, "SetTranslationMode", SetTranslationMode);
	Nan::SetPrototypeMethod(tpl, "setTranslationMode", SetTranslationMode);

	Nan::SetPrototypeMethod(tpl, "SetXShadows", SetXShadows);
	Nan::SetPrototypeMethod(tpl, "setXShadows", SetXShadows);

	Nan::SetPrototypeMethod(tpl, "SetYShadows", SetYShadows);
	Nan::SetPrototypeMethod(tpl, "setYShadows", SetYShadows);

	Nan::SetPrototypeMethod(tpl, "SetZShadows", SetZShadows);
	Nan::SetPrototypeMethod(tpl, "setZShadows", SetZShadows);

	Nan::SetPrototypeMethod(tpl, "TranslationModeOff", TranslationModeOff);
	Nan::SetPrototypeMethod(tpl, "translationModeOff", TranslationModeOff);

	Nan::SetPrototypeMethod(tpl, "TranslationModeOn", TranslationModeOn);
	Nan::SetPrototypeMethod(tpl, "translationModeOn", TranslationModeOn);

	Nan::SetPrototypeMethod(tpl, "XShadowsOff", XShadowsOff);
	Nan::SetPrototypeMethod(tpl, "xShadowsOff", XShadowsOff);

	Nan::SetPrototypeMethod(tpl, "XShadowsOn", XShadowsOn);
	Nan::SetPrototypeMethod(tpl, "xShadowsOn", XShadowsOn);

	Nan::SetPrototypeMethod(tpl, "YShadowsOff", YShadowsOff);
	Nan::SetPrototypeMethod(tpl, "yShadowsOff", YShadowsOff);

	Nan::SetPrototypeMethod(tpl, "YShadowsOn", YShadowsOn);
	Nan::SetPrototypeMethod(tpl, "yShadowsOn", YShadowsOn);

	Nan::SetPrototypeMethod(tpl, "ZShadowsOff", ZShadowsOff);
	Nan::SetPrototypeMethod(tpl, "zShadowsOff", ZShadowsOff);

	Nan::SetPrototypeMethod(tpl, "ZShadowsOn", ZShadowsOn);
	Nan::SetPrototypeMethod(tpl, "zShadowsOn", ZShadowsOn);

}

void VtkPointWidgetWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkPointWidget> native = vtkSmartPointer<vtkPointWidget>::New();
		VtkPointWidgetWrap* obj = new VtkPointWidgetWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkPointWidgetWrap::AllOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AllOff();
}

void VtkPointWidgetWrap::AllOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AllOn();
}

void VtkPointWidgetWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPointWidgetWrap::GetHotSpotSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHotSpotSize();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointWidgetWrap::GetHotSpotSizeMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHotSpotSizeMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointWidgetWrap::GetHotSpotSizeMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetHotSpotSizeMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointWidgetWrap::GetOutline(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutline();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointWidgetWrap::GetPolyData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPolyDataWrap *a0 = ObjectWrap::Unwrap<VtkPolyDataWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->GetPolyData(
			(vtkPolyData *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointWidgetWrap::GetProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetProperty();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPropertyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPointWidgetWrap::GetSelectedProperty(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	vtkProperty * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetSelectedProperty();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPropertyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPropertyWrap *w = new VtkPropertyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPointWidgetWrap::GetTranslationMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetTranslationMode();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointWidgetWrap::GetXShadows(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXShadows();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointWidgetWrap::GetYShadows(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetYShadows();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointWidgetWrap::GetZShadows(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetZShadows();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkPointWidgetWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointWidgetWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	vtkPointWidget * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPointWidgetWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPointWidgetWrap *w = new VtkPointWidgetWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPointWidgetWrap::OutlineOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutlineOff();
}

void VtkPointWidgetWrap::OutlineOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->OutlineOn();
}

void VtkPointWidgetWrap::PlaceWidget(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() > 3 && info[3]->IsNumber())
				{
					if(info.Length() > 4 && info[4]->IsNumber())
					{
						if(info.Length() > 5 && info[5]->IsNumber())
						{
							if(info.Length() != 6)
							{
								Nan::ThrowError("Too many parameters.");
								return;
							}
							native->PlaceWidget(
								info[0]->NumberValue(),
								info[1]->NumberValue(),
								info[2]->NumberValue(),
								info[3]->NumberValue(),
								info[4]->NumberValue(),
								info[5]->NumberValue()
							);
							return;
						}
					}
				}
			}
		}
	}
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->PlaceWidget();
}

void VtkPointWidgetWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkPointWidget * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkPointWidgetWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPointWidgetWrap *w = new VtkPointWidgetWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointWidgetWrap::SetEnabled(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetEnabled(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointWidgetWrap::SetHotSpotSize(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetHotSpotSize(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointWidgetWrap::SetOutline(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutline(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointWidgetWrap::SetPosition(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetPosition(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointWidgetWrap::SetTranslationMode(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetTranslationMode(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointWidgetWrap::SetXShadows(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetXShadows(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointWidgetWrap::SetYShadows(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetYShadows(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointWidgetWrap::SetZShadows(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetZShadows(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPointWidgetWrap::TranslationModeOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TranslationModeOff();
}

void VtkPointWidgetWrap::TranslationModeOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->TranslationModeOn();
}

void VtkPointWidgetWrap::XShadowsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->XShadowsOff();
}

void VtkPointWidgetWrap::XShadowsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->XShadowsOn();
}

void VtkPointWidgetWrap::YShadowsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->YShadowsOff();
}

void VtkPointWidgetWrap::YShadowsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->YShadowsOn();
}

void VtkPointWidgetWrap::ZShadowsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ZShadowsOff();
}

void VtkPointWidgetWrap::ZShadowsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPointWidgetWrap *wrapper = ObjectWrap::Unwrap<VtkPointWidgetWrap>(info.Holder());
	vtkPointWidget *native = (vtkPointWidget *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->ZShadowsOn();
}

