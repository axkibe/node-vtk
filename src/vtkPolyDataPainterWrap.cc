/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPainterWrap.h"
#include "vtkPolyDataPainterWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPolyDataWrap.h"
#include "vtkInformationIntegerKeyWrap.h"
#include "vtkInformationObjectBaseKeyWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkPolyDataPainterWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkPolyDataPainterWrap::ptpl;

VtkPolyDataPainterWrap::VtkPolyDataPainterWrap()
{ }

VtkPolyDataPainterWrap::VtkPolyDataPainterWrap(vtkSmartPointer<vtkPolyDataPainter> _native)
{ native = _native; }

VtkPolyDataPainterWrap::~VtkPolyDataPainterWrap()
{ }

void VtkPolyDataPainterWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPainterWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPainterWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkPolyDataPainterWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkPolyDataPainter").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("PolyDataPainter").ToLocalChecked(),tpl->GetFunction());
}

void VtkPolyDataPainterWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "BUILD_NORMALS", BUILD_NORMALS);

	Nan::SetPrototypeMethod(tpl, "DATA_ARRAY_TO_VERTEX_ATTRIBUTE", DATA_ARRAY_TO_VERTEX_ATTRIBUTE);

	Nan::SetPrototypeMethod(tpl, "DISABLE_SCALAR_COLOR", DISABLE_SCALAR_COLOR);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetInputAsPolyData", GetInputAsPolyData);
	Nan::SetPrototypeMethod(tpl, "getInputAsPolyData", GetInputAsPolyData);

	Nan::SetPrototypeMethod(tpl, "GetOutputAsPolyData", GetOutputAsPolyData);
	Nan::SetPrototypeMethod(tpl, "getOutputAsPolyData", GetOutputAsPolyData);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SHADER_DEVICE_ADAPTOR", SHADER_DEVICE_ADAPTOR);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

}

void VtkPolyDataPainterWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		Nan::ThrowError("Cannot create instance of abstract class.");
		return;
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkPolyDataPainterWrap::BUILD_NORMALS(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataPainterWrap>(info.Holder());
	vtkPolyDataPainter *native = (vtkPolyDataPainter *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->BUILD_NORMALS();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataPainterWrap::DATA_ARRAY_TO_VERTEX_ATTRIBUTE(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataPainterWrap>(info.Holder());
	vtkPolyDataPainter *native = (vtkPolyDataPainter *)wrapper->native.GetPointer();
	vtkInformationObjectBaseKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->DATA_ARRAY_TO_VERTEX_ATTRIBUTE();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationObjectBaseKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationObjectBaseKeyWrap *w = new VtkInformationObjectBaseKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataPainterWrap::DISABLE_SCALAR_COLOR(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataPainterWrap>(info.Holder());
	vtkPolyDataPainter *native = (vtkPolyDataPainter *)wrapper->native.GetPointer();
	vtkInformationIntegerKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->DISABLE_SCALAR_COLOR();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationIntegerKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationIntegerKeyWrap *w = new VtkInformationIntegerKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataPainterWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataPainterWrap>(info.Holder());
	vtkPolyDataPainter *native = (vtkPolyDataPainter *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkPolyDataPainterWrap::GetInputAsPolyData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataPainterWrap>(info.Holder());
	vtkPolyDataPainter *native = (vtkPolyDataPainter *)wrapper->native.GetPointer();
	vtkPolyData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInputAsPolyData();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPolyDataWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataWrap *w = new VtkPolyDataWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataPainterWrap::GetOutputAsPolyData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataPainterWrap>(info.Holder());
	vtkPolyDataPainter *native = (vtkPolyDataPainter *)wrapper->native.GetPointer();
	vtkPolyData * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputAsPolyData();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPolyDataWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataWrap *w = new VtkPolyDataWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataPainterWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataPainterWrap>(info.Holder());
	vtkPolyDataPainter *native = (vtkPolyDataPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkPolyDataPainterWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataPainterWrap>(info.Holder());
	vtkPolyDataPainter *native = (vtkPolyDataPainter *)wrapper->native.GetPointer();
	vtkPolyDataPainter * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPolyDataPainterWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPolyDataPainterWrap *w = new VtkPolyDataPainterWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataPainterWrap::SHADER_DEVICE_ADAPTOR(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataPainterWrap>(info.Holder());
	vtkPolyDataPainter *native = (vtkPolyDataPainter *)wrapper->native.GetPointer();
	vtkInformationObjectBaseKey * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->SHADER_DEVICE_ADAPTOR();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkInformationObjectBaseKeyWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkInformationObjectBaseKeyWrap *w = new VtkInformationObjectBaseKeyWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkPolyDataPainterWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkPolyDataPainterWrap *wrapper = ObjectWrap::Unwrap<VtkPolyDataPainterWrap>(info.Holder());
	vtkPolyDataPainter *native = (vtkPolyDataPainter *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkPolyDataPainter * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkPolyDataPainterWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkPolyDataPainterWrap *w = new VtkPolyDataPainterWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

