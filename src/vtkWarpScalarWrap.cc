/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPointSetAlgorithmWrap.h"
#include "vtkWarpScalarWrap.h"
#include "vtkObjectWrap.h"
#include "vtkInformationWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkWarpScalarWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkWarpScalarWrap::ptpl;

VtkWarpScalarWrap::VtkWarpScalarWrap()
{ }

VtkWarpScalarWrap::VtkWarpScalarWrap(vtkSmartPointer<vtkWarpScalar> _native)
{ native = _native; }

VtkWarpScalarWrap::~VtkWarpScalarWrap()
{ }

void VtkWarpScalarWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkPointSetAlgorithmWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkPointSetAlgorithmWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkWarpScalarWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkWarpScalar").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("WarpScalar").ToLocalChecked(),tpl->GetFunction());
}

void VtkWarpScalarWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "FillInputPortInformation", FillInputPortInformation);
	Nan::SetPrototypeMethod(tpl, "fillInputPortInformation", FillInputPortInformation);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetScaleFactor", GetScaleFactor);
	Nan::SetPrototypeMethod(tpl, "getScaleFactor", GetScaleFactor);

	Nan::SetPrototypeMethod(tpl, "GetUseNormal", GetUseNormal);
	Nan::SetPrototypeMethod(tpl, "getUseNormal", GetUseNormal);

	Nan::SetPrototypeMethod(tpl, "GetXYPlane", GetXYPlane);
	Nan::SetPrototypeMethod(tpl, "getXYPlane", GetXYPlane);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetNormal", SetNormal);
	Nan::SetPrototypeMethod(tpl, "setNormal", SetNormal);

	Nan::SetPrototypeMethod(tpl, "SetScaleFactor", SetScaleFactor);
	Nan::SetPrototypeMethod(tpl, "setScaleFactor", SetScaleFactor);

	Nan::SetPrototypeMethod(tpl, "SetUseNormal", SetUseNormal);
	Nan::SetPrototypeMethod(tpl, "setUseNormal", SetUseNormal);

	Nan::SetPrototypeMethod(tpl, "SetXYPlane", SetXYPlane);
	Nan::SetPrototypeMethod(tpl, "setXYPlane", SetXYPlane);

	Nan::SetPrototypeMethod(tpl, "UseNormalOff", UseNormalOff);
	Nan::SetPrototypeMethod(tpl, "useNormalOff", UseNormalOff);

	Nan::SetPrototypeMethod(tpl, "UseNormalOn", UseNormalOn);
	Nan::SetPrototypeMethod(tpl, "useNormalOn", UseNormalOn);

	Nan::SetPrototypeMethod(tpl, "XYPlaneOff", XYPlaneOff);
	Nan::SetPrototypeMethod(tpl, "xYPlaneOff", XYPlaneOff);

	Nan::SetPrototypeMethod(tpl, "XYPlaneOn", XYPlaneOn);
	Nan::SetPrototypeMethod(tpl, "xYPlaneOn", XYPlaneOn);

}

void VtkWarpScalarWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkWarpScalar> native = vtkSmartPointer<vtkWarpScalar>::New();
		VtkWarpScalarWrap* obj = new VtkWarpScalarWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkWarpScalarWrap::FillInputPortInformation(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkInformationWrap *a1 = ObjectWrap::Unwrap<VtkInformationWrap>(info[1]->ToObject());
			int r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->FillInputPortInformation(
				info[0]->Int32Value(),
				(vtkInformation *) a1->native.GetPointer()
			);
			info.GetReturnValue().Set(Nan::New(r));
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpScalarWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkWarpScalarWrap::GetScaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetScaleFactor();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkWarpScalarWrap::GetUseNormal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUseNormal();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkWarpScalarWrap::GetXYPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetXYPlane();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkWarpScalarWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpScalarWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	vtkWarpScalar * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkWarpScalarWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkWarpScalarWrap *w = new VtkWarpScalarWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkWarpScalarWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkWarpScalar * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkWarpScalarWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkWarpScalarWrap *w = new VtkWarpScalarWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpScalarWrap::SetNormal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() > 2 && info[2]->IsNumber())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->SetNormal(
					info[0]->NumberValue(),
					info[1]->NumberValue(),
					info[2]->NumberValue()
				);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpScalarWrap::SetScaleFactor(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetScaleFactor(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpScalarWrap::SetUseNormal(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUseNormal(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpScalarWrap::SetXYPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetXYPlane(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkWarpScalarWrap::UseNormalOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseNormalOff();
}

void VtkWarpScalarWrap::UseNormalOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UseNormalOn();
}

void VtkWarpScalarWrap::XYPlaneOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->XYPlaneOff();
}

void VtkWarpScalarWrap::XYPlaneOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkWarpScalarWrap *wrapper = ObjectWrap::Unwrap<VtkWarpScalarWrap>(info.Holder());
	vtkWarpScalar *native = (vtkWarpScalar *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->XYPlaneOn();
}

