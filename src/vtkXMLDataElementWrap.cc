/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkObjectWrap.h"
#include "vtkXMLDataElementWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkXMLDataElementWrap::constructor;

VtkXMLDataElementWrap::VtkXMLDataElementWrap()
{ }

VtkXMLDataElementWrap::VtkXMLDataElementWrap(vtkSmartPointer<vtkXMLDataElement> _native)
{ native = _native; }

VtkXMLDataElementWrap::~VtkXMLDataElementWrap()
{ }

void VtkXMLDataElementWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkXMLDataElementWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkXMLDataElement").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("XMLDataElement").ToLocalChecked(),tpl->GetFunction());
}

void VtkXMLDataElementWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "AddNestedElement", AddNestedElement);
	Nan::SetPrototypeMethod(tpl, "addNestedElement", AddNestedElement);

	Nan::SetPrototypeMethod(tpl, "DeepCopy", DeepCopy);
	Nan::SetPrototypeMethod(tpl, "deepCopy", DeepCopy);

	Nan::SetPrototypeMethod(tpl, "FindNestedElement", FindNestedElement);
	Nan::SetPrototypeMethod(tpl, "findNestedElement", FindNestedElement);

	Nan::SetPrototypeMethod(tpl, "FindNestedElementWithName", FindNestedElementWithName);
	Nan::SetPrototypeMethod(tpl, "findNestedElementWithName", FindNestedElementWithName);

	Nan::SetPrototypeMethod(tpl, "FindNestedElementWithNameAndAttribute", FindNestedElementWithNameAndAttribute);
	Nan::SetPrototypeMethod(tpl, "findNestedElementWithNameAndAttribute", FindNestedElementWithNameAndAttribute);

	Nan::SetPrototypeMethod(tpl, "FindNestedElementWithNameAndId", FindNestedElementWithNameAndId);
	Nan::SetPrototypeMethod(tpl, "findNestedElementWithNameAndId", FindNestedElementWithNameAndId);

	Nan::SetPrototypeMethod(tpl, "GetAttribute", GetAttribute);
	Nan::SetPrototypeMethod(tpl, "getAttribute", GetAttribute);

	Nan::SetPrototypeMethod(tpl, "GetAttributeEncoding", GetAttributeEncoding);
	Nan::SetPrototypeMethod(tpl, "getAttributeEncoding", GetAttributeEncoding);

	Nan::SetPrototypeMethod(tpl, "GetAttributeEncodingMaxValue", GetAttributeEncodingMaxValue);
	Nan::SetPrototypeMethod(tpl, "getAttributeEncodingMaxValue", GetAttributeEncodingMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetAttributeEncodingMinValue", GetAttributeEncodingMinValue);
	Nan::SetPrototypeMethod(tpl, "getAttributeEncodingMinValue", GetAttributeEncodingMinValue);

	Nan::SetPrototypeMethod(tpl, "GetAttributeName", GetAttributeName);
	Nan::SetPrototypeMethod(tpl, "getAttributeName", GetAttributeName);

	Nan::SetPrototypeMethod(tpl, "GetAttributeValue", GetAttributeValue);
	Nan::SetPrototypeMethod(tpl, "getAttributeValue", GetAttributeValue);

	Nan::SetPrototypeMethod(tpl, "GetCharacterData", GetCharacterData);
	Nan::SetPrototypeMethod(tpl, "getCharacterData", GetCharacterData);

	Nan::SetPrototypeMethod(tpl, "GetCharacterDataWidth", GetCharacterDataWidth);
	Nan::SetPrototypeMethod(tpl, "getCharacterDataWidth", GetCharacterDataWidth);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetId", GetId);
	Nan::SetPrototypeMethod(tpl, "getId", GetId);

	Nan::SetPrototypeMethod(tpl, "GetName", GetName);
	Nan::SetPrototypeMethod(tpl, "getName", GetName);

	Nan::SetPrototypeMethod(tpl, "GetNestedElement", GetNestedElement);
	Nan::SetPrototypeMethod(tpl, "getNestedElement", GetNestedElement);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfAttributes", GetNumberOfAttributes);
	Nan::SetPrototypeMethod(tpl, "getNumberOfAttributes", GetNumberOfAttributes);

	Nan::SetPrototypeMethod(tpl, "GetNumberOfNestedElements", GetNumberOfNestedElements);
	Nan::SetPrototypeMethod(tpl, "getNumberOfNestedElements", GetNumberOfNestedElements);

	Nan::SetPrototypeMethod(tpl, "GetParent", GetParent);
	Nan::SetPrototypeMethod(tpl, "getParent", GetParent);

	Nan::SetPrototypeMethod(tpl, "GetRoot", GetRoot);
	Nan::SetPrototypeMethod(tpl, "getRoot", GetRoot);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "IsEqualTo", IsEqualTo);
	Nan::SetPrototypeMethod(tpl, "isEqualTo", IsEqualTo);

	Nan::SetPrototypeMethod(tpl, "LookupElement", LookupElement);
	Nan::SetPrototypeMethod(tpl, "lookupElement", LookupElement);

	Nan::SetPrototypeMethod(tpl, "LookupElementWithName", LookupElementWithName);
	Nan::SetPrototypeMethod(tpl, "lookupElementWithName", LookupElementWithName);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "PrintXML", PrintXML);
	Nan::SetPrototypeMethod(tpl, "printXML", PrintXML);

	Nan::SetPrototypeMethod(tpl, "RemoveAllAttributes", RemoveAllAttributes);
	Nan::SetPrototypeMethod(tpl, "removeAllAttributes", RemoveAllAttributes);

	Nan::SetPrototypeMethod(tpl, "RemoveAllNestedElements", RemoveAllNestedElements);
	Nan::SetPrototypeMethod(tpl, "removeAllNestedElements", RemoveAllNestedElements);

	Nan::SetPrototypeMethod(tpl, "RemoveAttribute", RemoveAttribute);
	Nan::SetPrototypeMethod(tpl, "removeAttribute", RemoveAttribute);

	Nan::SetPrototypeMethod(tpl, "RemoveNestedElement", RemoveNestedElement);
	Nan::SetPrototypeMethod(tpl, "removeNestedElement", RemoveNestedElement);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAttribute", SetAttribute);
	Nan::SetPrototypeMethod(tpl, "setAttribute", SetAttribute);

	Nan::SetPrototypeMethod(tpl, "SetAttributeEncoding", SetAttributeEncoding);
	Nan::SetPrototypeMethod(tpl, "setAttributeEncoding", SetAttributeEncoding);

	Nan::SetPrototypeMethod(tpl, "SetCharacterData", SetCharacterData);
	Nan::SetPrototypeMethod(tpl, "setCharacterData", SetCharacterData);

	Nan::SetPrototypeMethod(tpl, "SetCharacterDataWidth", SetCharacterDataWidth);
	Nan::SetPrototypeMethod(tpl, "setCharacterDataWidth", SetCharacterDataWidth);

	Nan::SetPrototypeMethod(tpl, "SetDoubleAttribute", SetDoubleAttribute);
	Nan::SetPrototypeMethod(tpl, "setDoubleAttribute", SetDoubleAttribute);

	Nan::SetPrototypeMethod(tpl, "SetId", SetId);
	Nan::SetPrototypeMethod(tpl, "setId", SetId);

	Nan::SetPrototypeMethod(tpl, "SetIntAttribute", SetIntAttribute);
	Nan::SetPrototypeMethod(tpl, "setIntAttribute", SetIntAttribute);

	Nan::SetPrototypeMethod(tpl, "SetName", SetName);
	Nan::SetPrototypeMethod(tpl, "setName", SetName);

	Nan::SetPrototypeMethod(tpl, "SetParent", SetParent);
	Nan::SetPrototypeMethod(tpl, "setParent", SetParent);

}

void VtkXMLDataElementWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkXMLDataElement> native = vtkSmartPointer<vtkXMLDataElement>::New();
		VtkXMLDataElementWrap* obj = new VtkXMLDataElementWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkXMLDataElementWrap::AddNestedElement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkXMLDataElementWrap *a0 = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddNestedElement(
			(vtkXMLDataElement *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::DeepCopy(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkXMLDataElementWrap *a0 = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->DeepCopy(
			(vtkXMLDataElement *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::FindNestedElement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		vtkXMLDataElement * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->FindNestedElement(
			*a0
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkXMLDataElementWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkXMLDataElementWrap *w = new VtkXMLDataElementWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::FindNestedElementWithName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		vtkXMLDataElement * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->FindNestedElementWithName(
			*a0
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkXMLDataElementWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkXMLDataElementWrap *w = new VtkXMLDataElementWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::FindNestedElementWithNameAndAttribute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				Nan::Utf8String a2(info[2]);
				vtkXMLDataElement * r;
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				r = native->FindNestedElementWithNameAndAttribute(
					*a0,
					*a1,
					*a2
				);
				v8::Local<v8::Value> argv[1] =
					{ Nan::New(vtkNodeJsNoWrap) };
				v8::Local<v8::Function> cons =
					Nan::New<v8::Function>(VtkXMLDataElementWrap::constructor);
				v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
				VtkXMLDataElementWrap *w = new VtkXMLDataElementWrap();
				w->native.TakeReference(r);
				w->Wrap(wo);
				info.GetReturnValue().Set(wo);
				return;
			}
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::FindNestedElementWithNameAndId(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			vtkXMLDataElement * r;
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			r = native->FindNestedElementWithNameAndId(
				*a0,
				*a1
			);
			v8::Local<v8::Value> argv[1] =
				{ Nan::New(vtkNodeJsNoWrap) };
			v8::Local<v8::Function> cons =
				Nan::New<v8::Function>(VtkXMLDataElementWrap::constructor);
			v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
			VtkXMLDataElementWrap *w = new VtkXMLDataElementWrap();
			w->native.TakeReference(r);
			w->Wrap(wo);
			info.GetReturnValue().Set(wo);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::GetAttribute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetAttribute(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::GetAttributeEncoding(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAttributeEncoding();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLDataElementWrap::GetAttributeEncodingMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAttributeEncodingMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLDataElementWrap::GetAttributeEncodingMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAttributeEncodingMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLDataElementWrap::GetAttributeName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetAttributeName(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::GetAttributeValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		char const * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetAttributeValue(
			info[0]->Int32Value()
		);
		info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::GetCharacterData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCharacterData();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkXMLDataElementWrap::GetCharacterDataWidth(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetCharacterDataWidth();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLDataElementWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkXMLDataElementWrap::GetId(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetId();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkXMLDataElementWrap::GetName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkXMLDataElementWrap::GetNestedElement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkXMLDataElement * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetNestedElement(
			info[0]->Int32Value()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkXMLDataElementWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkXMLDataElementWrap *w = new VtkXMLDataElementWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::GetNumberOfAttributes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfAttributes();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLDataElementWrap::GetNumberOfNestedElements(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetNumberOfNestedElements();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkXMLDataElementWrap::GetParent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	vtkXMLDataElement * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetParent();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkXMLDataElementWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkXMLDataElementWrap *w = new VtkXMLDataElementWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLDataElementWrap::GetRoot(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	vtkXMLDataElement * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetRoot();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkXMLDataElementWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkXMLDataElementWrap *w = new VtkXMLDataElementWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLDataElementWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::IsEqualTo(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkXMLDataElementWrap *a0 = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info[0]->ToObject());
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsEqualTo(
			(vtkXMLDataElement *) a0->native.GetPointer()
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::LookupElement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		vtkXMLDataElement * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->LookupElement(
			*a0
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkXMLDataElementWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkXMLDataElementWrap *w = new VtkXMLDataElementWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::LookupElementWithName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		vtkXMLDataElement * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->LookupElementWithName(
			*a0
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkXMLDataElementWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkXMLDataElementWrap *w = new VtkXMLDataElementWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	vtkXMLDataElement * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkXMLDataElementWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkXMLDataElementWrap *w = new VtkXMLDataElementWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkXMLDataElementWrap::PrintXML(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->PrintXML(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::RemoveAllAttributes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllAttributes();
}

void VtkXMLDataElementWrap::RemoveAllNestedElements(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllNestedElements();
}

void VtkXMLDataElementWrap::RemoveAttribute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveAttribute(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::RemoveNestedElement(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkXMLDataElementWrap *a0 = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveNestedElement(
			(vtkXMLDataElement *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkXMLDataElement * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkXMLDataElementWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkXMLDataElementWrap *w = new VtkXMLDataElementWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::SetAttribute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			Nan::Utf8String a1(info[1]);
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetAttribute(
				*a0,
				*a1
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::SetAttributeEncoding(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAttributeEncoding(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::SetCharacterData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetCharacterData(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::SetCharacterDataWidth(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetCharacterDataWidth(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::SetDoubleAttribute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsNumber())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetDoubleAttribute(
				*a0,
				info[1]->NumberValue()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::SetId(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetId(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::SetIntAttribute(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetIntAttribute(
				*a0,
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::SetName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetName(
			*a0
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkXMLDataElementWrap::SetParent(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkXMLDataElementWrap *wrapper = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info.Holder());
	vtkXMLDataElement *native = (vtkXMLDataElement *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkXMLDataElementWrap *a0 = ObjectWrap::Unwrap<VtkXMLDataElementWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetParent(
			(vtkXMLDataElement *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

