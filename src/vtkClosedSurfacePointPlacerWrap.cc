/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkPointPlacerWrap.h"
#include "vtkClosedSurfacePointPlacerWrap.h"
#include "vtkObjectWrap.h"
#include "vtkPlaneWrap.h"
#include "vtkPlaneCollectionWrap.h"
#include "vtkPlanesWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkClosedSurfacePointPlacerWrap::constructor;

VtkClosedSurfacePointPlacerWrap::VtkClosedSurfacePointPlacerWrap()
{ }

VtkClosedSurfacePointPlacerWrap::VtkClosedSurfacePointPlacerWrap(vtkSmartPointer<vtkClosedSurfacePointPlacer> _native)
{ native = _native; }

VtkClosedSurfacePointPlacerWrap::~VtkClosedSurfacePointPlacerWrap()
{ }

void VtkClosedSurfacePointPlacerWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkClosedSurfacePointPlacerWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkPointPlacerWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkClosedSurfacePointPlacer").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ClosedSurfacePointPlacer").ToLocalChecked(),tpl->GetFunction());
}

void VtkClosedSurfacePointPlacerWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "AddBoundingPlane", AddBoundingPlane);
	Nan::SetPrototypeMethod(tpl, "addBoundingPlane", AddBoundingPlane);

	Nan::SetPrototypeMethod(tpl, "GetBoundingPlanes", GetBoundingPlanes);
	Nan::SetPrototypeMethod(tpl, "getBoundingPlanes", GetBoundingPlanes);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetMinimumDistance", GetMinimumDistance);
	Nan::SetPrototypeMethod(tpl, "getMinimumDistance", GetMinimumDistance);

	Nan::SetPrototypeMethod(tpl, "GetMinimumDistanceMaxValue", GetMinimumDistanceMaxValue);
	Nan::SetPrototypeMethod(tpl, "getMinimumDistanceMaxValue", GetMinimumDistanceMaxValue);

	Nan::SetPrototypeMethod(tpl, "GetMinimumDistanceMinValue", GetMinimumDistanceMinValue);
	Nan::SetPrototypeMethod(tpl, "getMinimumDistanceMinValue", GetMinimumDistanceMinValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RemoveAllBoundingPlanes", RemoveAllBoundingPlanes);
	Nan::SetPrototypeMethod(tpl, "removeAllBoundingPlanes", RemoveAllBoundingPlanes);

	Nan::SetPrototypeMethod(tpl, "RemoveBoundingPlane", RemoveBoundingPlane);
	Nan::SetPrototypeMethod(tpl, "removeBoundingPlane", RemoveBoundingPlane);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetBoundingPlanes", SetBoundingPlanes);
	Nan::SetPrototypeMethod(tpl, "setBoundingPlanes", SetBoundingPlanes);

	Nan::SetPrototypeMethod(tpl, "SetMinimumDistance", SetMinimumDistance);
	Nan::SetPrototypeMethod(tpl, "setMinimumDistance", SetMinimumDistance);

}

void VtkClosedSurfacePointPlacerWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkClosedSurfacePointPlacer> native = vtkSmartPointer<vtkClosedSurfacePointPlacer>::New();
		VtkClosedSurfacePointPlacerWrap* obj = new VtkClosedSurfacePointPlacerWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkClosedSurfacePointPlacerWrap::AddBoundingPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPlaneWrap *a0 = ObjectWrap::Unwrap<VtkPlaneWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddBoundingPlane(
			(vtkPlane *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClosedSurfacePointPlacerWrap::GetBoundingPlanes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	vtkPlaneCollection * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetBoundingPlanes();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkPlaneCollectionWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkPlaneCollectionWrap *w = new VtkPlaneCollectionWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkClosedSurfacePointPlacerWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkClosedSurfacePointPlacerWrap::GetMinimumDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMinimumDistance();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkClosedSurfacePointPlacerWrap::GetMinimumDistanceMaxValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMinimumDistanceMaxValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkClosedSurfacePointPlacerWrap::GetMinimumDistanceMinValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	double r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetMinimumDistanceMinValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkClosedSurfacePointPlacerWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClosedSurfacePointPlacerWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	vtkClosedSurfacePointPlacer * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkClosedSurfacePointPlacerWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkClosedSurfacePointPlacerWrap *w = new VtkClosedSurfacePointPlacerWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkClosedSurfacePointPlacerWrap::RemoveAllBoundingPlanes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllBoundingPlanes();
}

void VtkClosedSurfacePointPlacerWrap::RemoveBoundingPlane(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPlaneWrap *a0 = ObjectWrap::Unwrap<VtkPlaneWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveBoundingPlane(
			(vtkPlane *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClosedSurfacePointPlacerWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkClosedSurfacePointPlacer * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkClosedSurfacePointPlacerWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkClosedSurfacePointPlacerWrap *w = new VtkClosedSurfacePointPlacerWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClosedSurfacePointPlacerWrap::SetBoundingPlanes(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkPlanesWrap *a0 = ObjectWrap::Unwrap<VtkPlanesWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetBoundingPlanes(
			(vtkPlanes *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkClosedSurfacePointPlacerWrap::SetMinimumDistance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkClosedSurfacePointPlacerWrap *wrapper = ObjectWrap::Unwrap<VtkClosedSurfacePointPlacerWrap>(info.Holder());
	vtkClosedSurfacePointPlacer *native = (vtkClosedSurfacePointPlacer *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsNumber())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetMinimumDistance(
			info[0]->NumberValue()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

