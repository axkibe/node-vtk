/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkSelectionAlgorithmWrap.h"
#include "vtkAppendSelectionWrap.h"
#include "vtkObjectWrap.h"
#include "vtkSelectionWrap.h"
#include "vtkAlgorithmOutputWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkAppendSelectionWrap::constructor;

VtkAppendSelectionWrap::VtkAppendSelectionWrap()
{ }

VtkAppendSelectionWrap::VtkAppendSelectionWrap(vtkSmartPointer<vtkAppendSelection> _native)
{ native = _native; }

VtkAppendSelectionWrap::~VtkAppendSelectionWrap()
{ }

void VtkAppendSelectionWrap::Init(v8::Local<v8::Object> exports)
{
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	tpl->SetClassName(Nan::New("VtkAppendSelectionWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);

	VtkObjectBaseWrap::InitTpl(tpl);
	VtkObjectWrap::InitTpl(tpl);
	VtkAlgorithmWrap::InitTpl(tpl);
	VtkSelectionAlgorithmWrap::InitTpl(tpl);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );

	exports->Set(Nan::New("vtkAppendSelection").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("AppendSelection").ToLocalChecked(),tpl->GetFunction());
}

void VtkAppendSelectionWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "AddInputData", AddInputData);
	Nan::SetPrototypeMethod(tpl, "addInputData", AddInputData);

	Nan::SetPrototypeMethod(tpl, "AppendByUnionOff", AppendByUnionOff);
	Nan::SetPrototypeMethod(tpl, "appendByUnionOff", AppendByUnionOff);

	Nan::SetPrototypeMethod(tpl, "AppendByUnionOn", AppendByUnionOn);
	Nan::SetPrototypeMethod(tpl, "appendByUnionOn", AppendByUnionOn);

	Nan::SetPrototypeMethod(tpl, "GetAppendByUnion", GetAppendByUnion);
	Nan::SetPrototypeMethod(tpl, "getAppendByUnion", GetAppendByUnion);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetInput", GetInput);
	Nan::SetPrototypeMethod(tpl, "getInput", GetInput);

	Nan::SetPrototypeMethod(tpl, "GetUserManagedInputs", GetUserManagedInputs);
	Nan::SetPrototypeMethod(tpl, "getUserManagedInputs", GetUserManagedInputs);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RemoveInputData", RemoveInputData);
	Nan::SetPrototypeMethod(tpl, "removeInputData", RemoveInputData);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetAppendByUnion", SetAppendByUnion);
	Nan::SetPrototypeMethod(tpl, "setAppendByUnion", SetAppendByUnion);

	Nan::SetPrototypeMethod(tpl, "SetInputConnectionByNumber", SetInputConnectionByNumber);
	Nan::SetPrototypeMethod(tpl, "setInputConnectionByNumber", SetInputConnectionByNumber);

	Nan::SetPrototypeMethod(tpl, "SetNumberOfInputs", SetNumberOfInputs);
	Nan::SetPrototypeMethod(tpl, "setNumberOfInputs", SetNumberOfInputs);

	Nan::SetPrototypeMethod(tpl, "SetUserManagedInputs", SetUserManagedInputs);
	Nan::SetPrototypeMethod(tpl, "setUserManagedInputs", SetUserManagedInputs);

	Nan::SetPrototypeMethod(tpl, "UserManagedInputsOff", UserManagedInputsOff);
	Nan::SetPrototypeMethod(tpl, "userManagedInputsOff", UserManagedInputsOff);

	Nan::SetPrototypeMethod(tpl, "UserManagedInputsOn", UserManagedInputsOn);
	Nan::SetPrototypeMethod(tpl, "userManagedInputsOn", UserManagedInputsOn);

}

void VtkAppendSelectionWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkAppendSelection> native = vtkSmartPointer<vtkAppendSelection>::New();
		VtkAppendSelectionWrap* obj = new VtkAppendSelectionWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkAppendSelectionWrap::AddInputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkSelectionWrap *a0 = ObjectWrap::Unwrap<VtkSelectionWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->AddInputData(
			(vtkSelection *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAppendSelectionWrap::AppendByUnionOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AppendByUnionOff();
}

void VtkAppendSelectionWrap::AppendByUnionOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->AppendByUnionOn();
}

void VtkAppendSelectionWrap::GetAppendByUnion(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetAppendByUnion();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAppendSelectionWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkAppendSelectionWrap::GetInput(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		vtkSelection * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->GetInput(
			info[0]->Int32Value()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkSelectionWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkSelectionWrap *w = new VtkSelectionWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	vtkSelection * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInput();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkSelectionWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkSelectionWrap *w = new VtkSelectionWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAppendSelectionWrap::GetUserManagedInputs(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetUserManagedInputs();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkAppendSelectionWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAppendSelectionWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	vtkAppendSelection * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkAppendSelectionWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkAppendSelectionWrap *w = new VtkAppendSelectionWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkAppendSelectionWrap::RemoveInputData(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkSelectionWrap *a0 = ObjectWrap::Unwrap<VtkSelectionWrap>(info[0]->ToObject());
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->RemoveInputData(
			(vtkSelection *) a0->native.GetPointer()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAppendSelectionWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkAppendSelection * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkAppendSelectionWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkAppendSelectionWrap *w = new VtkAppendSelectionWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAppendSelectionWrap::SetAppendByUnion(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetAppendByUnion(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAppendSelectionWrap::SetInputConnectionByNumber(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsObject())
		{
			VtkAlgorithmOutputWrap *a1 = ObjectWrap::Unwrap<VtkAlgorithmOutputWrap>(info[1]->ToObject());
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->SetInputConnectionByNumber(
				info[0]->Int32Value(),
				(vtkAlgorithmOutput *) a1->native.GetPointer()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAppendSelectionWrap::SetNumberOfInputs(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetNumberOfInputs(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAppendSelectionWrap::SetUserManagedInputs(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetUserManagedInputs(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkAppendSelectionWrap::UserManagedInputsOff(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UserManagedInputsOff();
}

void VtkAppendSelectionWrap::UserManagedInputsOn(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkAppendSelectionWrap *wrapper = ObjectWrap::Unwrap<VtkAppendSelectionWrap>(info.Holder());
	vtkAppendSelection *native = (vtkAppendSelection *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->UserManagedInputsOn();
}

