/* this file has been autogenerated by vtkNodeJsWrap */
/* editing this might proof futile */

#define VTK_WRAPPING_CXX
#define VTK_STREAMS_FWD_ONLY
#include <nan.h>


#include "vtkImageAlgorithmWrap.h"
#include "vtkImageSeedConnectivityWrap.h"
#include "vtkObjectWrap.h"
#include "vtkImageConnectorWrap.h"

using namespace v8;

extern Nan::Persistent<v8::Object> vtkNodeJsNoWrap;
Nan::Persistent<v8::Function> VtkImageSeedConnectivityWrap::constructor;
Nan::Persistent<v8::FunctionTemplate> VtkImageSeedConnectivityWrap::ptpl;

VtkImageSeedConnectivityWrap::VtkImageSeedConnectivityWrap()
{ }

VtkImageSeedConnectivityWrap::VtkImageSeedConnectivityWrap(vtkSmartPointer<vtkImageSeedConnectivity> _native)
{ native = _native; }

VtkImageSeedConnectivityWrap::~VtkImageSeedConnectivityWrap()
{ }

void VtkImageSeedConnectivityWrap::Init(v8::Local<v8::Object> exports)
{
	if (!constructor.IsEmpty()) return;
	Nan::HandleScope scope;

	v8::Local<v8::FunctionTemplate> tpl = Nan::New<v8::FunctionTemplate>(New);
	VtkImageAlgorithmWrap::Init( exports );
	tpl->Inherit(Nan::New<FunctionTemplate>(VtkImageAlgorithmWrap::ptpl));

	tpl->SetClassName(Nan::New("VtkImageSeedConnectivityWrap").ToLocalChecked());
	tpl->InstanceTemplate()->SetInternalFieldCount(1);
	InitTpl(tpl);

	constructor.Reset( tpl->GetFunction() );
	ptpl.Reset( tpl );

	exports->Set(Nan::New("vtkImageSeedConnectivity").ToLocalChecked(),tpl->GetFunction());
	exports->Set(Nan::New("ImageSeedConnectivity").ToLocalChecked(),tpl->GetFunction());
}

void VtkImageSeedConnectivityWrap::InitTpl(v8::Local<v8::FunctionTemplate> tpl)
{
	Nan::SetPrototypeMethod(tpl, "AddSeed", AddSeed);
	Nan::SetPrototypeMethod(tpl, "addSeed", AddSeed);

	Nan::SetPrototypeMethod(tpl, "GetClassName", GetClassName);
	Nan::SetPrototypeMethod(tpl, "getClassName", GetClassName);

	Nan::SetPrototypeMethod(tpl, "GetConnector", GetConnector);
	Nan::SetPrototypeMethod(tpl, "getConnector", GetConnector);

	Nan::SetPrototypeMethod(tpl, "GetDimensionality", GetDimensionality);
	Nan::SetPrototypeMethod(tpl, "getDimensionality", GetDimensionality);

	Nan::SetPrototypeMethod(tpl, "GetInputConnectValue", GetInputConnectValue);
	Nan::SetPrototypeMethod(tpl, "getInputConnectValue", GetInputConnectValue);

	Nan::SetPrototypeMethod(tpl, "GetOutputConnectedValue", GetOutputConnectedValue);
	Nan::SetPrototypeMethod(tpl, "getOutputConnectedValue", GetOutputConnectedValue);

	Nan::SetPrototypeMethod(tpl, "GetOutputUnconnectedValue", GetOutputUnconnectedValue);
	Nan::SetPrototypeMethod(tpl, "getOutputUnconnectedValue", GetOutputUnconnectedValue);

	Nan::SetPrototypeMethod(tpl, "IsA", IsA);
	Nan::SetPrototypeMethod(tpl, "isA", IsA);

	Nan::SetPrototypeMethod(tpl, "NewInstance", NewInstance);
	Nan::SetPrototypeMethod(tpl, "newInstance", NewInstance);

	Nan::SetPrototypeMethod(tpl, "RemoveAllSeeds", RemoveAllSeeds);
	Nan::SetPrototypeMethod(tpl, "removeAllSeeds", RemoveAllSeeds);

	Nan::SetPrototypeMethod(tpl, "SafeDownCast", SafeDownCast);
	Nan::SetPrototypeMethod(tpl, "safeDownCast", SafeDownCast);

	Nan::SetPrototypeMethod(tpl, "SetDimensionality", SetDimensionality);
	Nan::SetPrototypeMethod(tpl, "setDimensionality", SetDimensionality);

	Nan::SetPrototypeMethod(tpl, "SetInputConnectValue", SetInputConnectValue);
	Nan::SetPrototypeMethod(tpl, "setInputConnectValue", SetInputConnectValue);

	Nan::SetPrototypeMethod(tpl, "SetOutputConnectedValue", SetOutputConnectedValue);
	Nan::SetPrototypeMethod(tpl, "setOutputConnectedValue", SetOutputConnectedValue);

	Nan::SetPrototypeMethod(tpl, "SetOutputUnconnectedValue", SetOutputUnconnectedValue);
	Nan::SetPrototypeMethod(tpl, "setOutputUnconnectedValue", SetOutputUnconnectedValue);

}

void VtkImageSeedConnectivityWrap::New(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	if(!info.IsConstructCall())
	{
		Nan::ThrowError("Constructor not called in a construct call.");
		return;
	}

	if(info.Length() == 0)
	{
		vtkSmartPointer<vtkImageSeedConnectivity> native = vtkSmartPointer<vtkImageSeedConnectivity>::New();
		VtkImageSeedConnectivityWrap* obj = new VtkImageSeedConnectivityWrap(native);		obj->Wrap(info.This());
	}
	else
	{
		Nan::Utf8String s(info[0]);
		if(info[0]->ToObject() != vtkNodeJsNoWrap )
			Nan::ThrowError("Parameter Error");
	}

	info.GetReturnValue().Set(info.This());
}

void VtkImageSeedConnectivityWrap::AddSeed(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() > 1 && info[1]->IsInt32())
		{
			if(info.Length() > 2 && info[2]->IsInt32())
			{
				if(info.Length() != 3)
				{
					Nan::ThrowError("Too many parameters.");
					return;
				}
				native->AddSeed(
					info[0]->Int32Value(),
					info[1]->Int32Value(),
					info[2]->Int32Value()
				);
				return;
			}
			if(info.Length() != 2)
			{
				Nan::ThrowError("Too many parameters.");
				return;
			}
			native->AddSeed(
				info[0]->Int32Value(),
				info[1]->Int32Value()
			);
			return;
		}
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageSeedConnectivityWrap::GetClassName(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	char const * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetClassName();
	info.GetReturnValue().Set(Nan::New(r).ToLocalChecked());
}

void VtkImageSeedConnectivityWrap::GetConnector(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	vtkImageConnector * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetConnector();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImageConnectorWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageConnectorWrap *w = new VtkImageConnectorWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageSeedConnectivityWrap::GetDimensionality(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetDimensionality();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageSeedConnectivityWrap::GetInputConnectValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetInputConnectValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageSeedConnectivityWrap::GetOutputConnectedValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputConnectedValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageSeedConnectivityWrap::GetOutputUnconnectedValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	int r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->GetOutputUnconnectedValue();
	info.GetReturnValue().Set(Nan::New(r));
}

void VtkImageSeedConnectivityWrap::IsA(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		Nan::Utf8String a0(info[0]);
		int r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->IsA(
			*a0
		);
		info.GetReturnValue().Set(Nan::New(r));
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageSeedConnectivityWrap::NewInstance(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	vtkImageSeedConnectivity * r;
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	r = native->NewInstance();
	v8::Local<v8::Value> argv[1] =
		{ Nan::New(vtkNodeJsNoWrap) };
	v8::Local<v8::Function> cons =
		Nan::New<v8::Function>(VtkImageSeedConnectivityWrap::constructor);
	v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
	VtkImageSeedConnectivityWrap *w = new VtkImageSeedConnectivityWrap();
	w->native.TakeReference(r);
	w->Wrap(wo);
	info.GetReturnValue().Set(wo);
}

void VtkImageSeedConnectivityWrap::RemoveAllSeeds(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	if(info.Length() != 0)
	{
		Nan::ThrowError("Too many parameters.");
		return;
	}
	native->RemoveAllSeeds();
}

void VtkImageSeedConnectivityWrap::SafeDownCast(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsObject())
	{
		VtkObjectWrap *a0 = ObjectWrap::Unwrap<VtkObjectWrap>(info[0]->ToObject());
		vtkImageSeedConnectivity * r;
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		r = native->SafeDownCast(
			(vtkObject *) a0->native.GetPointer()
		);
		v8::Local<v8::Value> argv[1] =
			{ Nan::New(vtkNodeJsNoWrap) };
		v8::Local<v8::Function> cons =
			Nan::New<v8::Function>(VtkImageSeedConnectivityWrap::constructor);
		v8::Local<v8::Object> wo = cons->NewInstance(1, argv);
		VtkImageSeedConnectivityWrap *w = new VtkImageSeedConnectivityWrap();
		w->native.TakeReference(r);
		w->Wrap(wo);
		info.GetReturnValue().Set(wo);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageSeedConnectivityWrap::SetDimensionality(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetDimensionality(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageSeedConnectivityWrap::SetInputConnectValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetInputConnectValue(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageSeedConnectivityWrap::SetOutputConnectedValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputConnectedValue(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

void VtkImageSeedConnectivityWrap::SetOutputUnconnectedValue(const Nan::FunctionCallbackInfo<v8::Value>& info)
{
	VtkImageSeedConnectivityWrap *wrapper = ObjectWrap::Unwrap<VtkImageSeedConnectivityWrap>(info.Holder());
	vtkImageSeedConnectivity *native = (vtkImageSeedConnectivity *)wrapper->native.GetPointer();
	if(info.Length() > 0 && info[0]->IsInt32())
	{
		if(info.Length() != 1)
		{
			Nan::ThrowError("Too many parameters.");
			return;
		}
		native->SetOutputUnconnectedValue(
			info[0]->Int32Value()
		);
		return;
	}
	Nan::ThrowError("Parameter mismatch");
}

